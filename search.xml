<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java-NIO-通道相关概念及源码梳理</title>
      <link href="/2023/01/17/Java-NIO-%E9%80%9A%E9%81%93%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E6%A2%B3%E7%90%86/"/>
      <url>/2023/01/17/Java-NIO-%E9%80%9A%E9%81%93%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一、通道基础概念与使用"><a href="#一、通道基础概念与使用" class="headerlink" title="一、通道基础概念与使用"></a>一、通道基础概念与使用</h3><h4 id="1-1-Channel定义"><a href="#1-1-Channel定义" class="headerlink" title="1.1 Channel定义"></a>1.1 Channel定义</h4><p>首先我们先看一下Channel的接口定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Channel</span> <span class="keyword">extends</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断接口是否打开</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 关闭一个打开的通道。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面我们来观察一下Channel的两种常见实现。<code>WritableByteChannel</code> 和 <code>ReadableByteChannel</code>。这两种分别表示可写的字节通道以及可读的字节通道。</p><h5 id="1-1-1-WritableByteChannel接口和ReadableByteChannel接口"><a href="#1-1-1-WritableByteChannel接口和ReadableByteChannel接口" class="headerlink" title="1.1.1 WritableByteChannel接口和ReadableByteChannel接口"></a>1.1.1 WritableByteChannel接口和ReadableByteChannel接口</h5><p><code>WritableByteChannel</code>接口定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WritableByteChannel</span> <span class="keyword">extends</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer src)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ReadableByteChannel</code>接口定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadableByteChannel</span> <span class="keyword">extends</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer dst)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="1-1-2-ByteChannel类"><a href="#1-1-2-ByteChannel类" class="headerlink" title="1.1.2 ByteChannel类"></a>1.1.2 ByteChannel类</h5><p>除此之外，还有一个<code>ByteChannel</code>类，同时实现了上述两个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ByteChannel</span> <span class="keyword">extends</span> <span class="title">ReadableByteChannel</span>, <span class="title">WritableByteChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ByteChannel</code>接口本身并不定义新的 API 方法，它是一种用来聚集它自己以一个新名称继承的多个接口的便捷接口。根据定义，实现<code>ByteChannel</code>类的通道会同时实现 <code>ReadableByteChannel</code> 和 <code>WritableByteChannel</code> 两个接口，所以此类通道是双向的。这是简化类定义的语法糖(<code>syntactic sugar</code>)，它使得用操作器(<code>operator</code>)实例来测试通道对象变得更加简单。</p><p>下面是我们讲到的几个接口的继承关系</p><h5 id="1-1-3-InterruptibleChannel接口"><a href="#1-1-3-InterruptibleChannel接口" class="headerlink" title="1.1.3 InterruptibleChannel接口"></a>1.1.3 InterruptibleChannel接口</h5><p>InterruptibleChannel接口表示如果连接可中断通道的线程被中断，则该通道会以一种特别的方式已进行工作。具体我们会在后续进行讨论。</p><blockquote><p>我们还会发现类层次结构中有两个类位于一个不同的包: java.nio.channels.spi。这两个类是 AbstractInterruptibleChannel 和 AbstractSelectableChannel，它们分别为可中断的(interruptible)和可选择的(selectable)的通道实 现提供所需的常用方法。</p></blockquote><h4 id="1-2-打开通道"><a href="#1-2-打开通道" class="headerlink" title="1.2 打开通道"></a>1.2 打开通道</h4><p>下面我们尝试创建一个通道，从一个输入流中读取数据然后进行打印。</p><h5 id="1-2-1-传统IO方式读取流"><a href="#1-2-1-传统IO方式读取流" class="headerlink" title="1.2.1 传统IO方式读取流"></a>1.2.1 传统IO方式读取流</h5><p>在传统IO的情况下，我们的写法如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建数组用于存储读入的输入流数据</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 创建输入流</span></span><br><span class="line">    <span class="keyword">final</span> InputStream in = System.in;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 将流读入数组中并打印</span></span><br><span class="line">        <span class="keyword">if</span> ((len = in.read(bytes)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"读取数据: "</span> + <span class="keyword">new</span> String(bytes, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是控制台打印情况，可以看到每次可以读取最多是个10个字节的数据然后进行打印。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; hahahaha</span><br><span class="line"></span><br><span class="line">读取数据: hahahaha</span><br><span class="line"></span><br><span class="line">&gt; this is a long wordddddddddddd!</span><br><span class="line"></span><br><span class="line">读取数据: this is a </span><br><span class="line">读取数据: long wordd</span><br><span class="line">读取数据: dddddddddd</span><br><span class="line">读取数据: !</span><br></pre></td></tr></table></figure></p><h5 id="1-2-1-通道方式读取流"><a href="#1-2-1-通道方式读取流" class="headerlink" title="1.2.1 通道方式读取流"></a>1.2.1 通道方式读取流</h5><p>但是如果我们使用通道就可以用下面的方式进行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个Byte缓冲区</span></span><br><span class="line">    <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 创建一个可读的通道</span></span><br><span class="line">    <span class="keyword">final</span> ReadableByteChannel channel = Channels.newChannel(System.in);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 将通道中的数据读入缓冲区</span></span><br><span class="line">        channel.read(buffer);</span><br><span class="line">        <span class="comment">// 进行翻转</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="comment">// 将缓冲区的数据进行打印</span></span><br><span class="line">        System.out.println(<span class="string">"读取数据： "</span> + <span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">        <span class="comment">// 将缓冲区的数据进行清空</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是控制台打印情况，可以看到每次可以读取最多是个10个字节的数据然后进行打印。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; hahahaha</span><br><span class="line"></span><br><span class="line">读取数据: hahahaha</span><br><span class="line"></span><br><span class="line">&gt; this is a long wordddddddddddd!</span><br><span class="line"></span><br><span class="line">读取数据: this is a </span><br><span class="line">读取数据: long wordd</span><br><span class="line">读取数据: dddddddddd</span><br><span class="line">读取数据: !</span><br></pre></td></tr></table></figure></p><p>从输入输出来看两种方式没有区别，但是，Channel不像流那样是单向的，它就像它的名字一样，一个通道可以从一端走到另一端，也可以从另一端走到这一端，</p><h4 id="1-4-Channel拷贝"><a href="#1-4-Channel拷贝" class="headerlink" title="1.4 Channel拷贝"></a>1.4 Channel拷贝</h4><p>我们可以自己从两个channel直接读取写入来实现拷贝。<br>第一种拷贝方式</p><blockquote><p>为了方便理解，我在每次buffer执行前后都打印了当前的位置和上界</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReadableByteChannel source = Channels.newChannel(System.in);</span><br><span class="line">    <span class="keyword">final</span> WritableByteChannel sink = Channels.newChannel(System.out);</span><br><span class="line">    <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">while</span> (source.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"1. postition: "</span> + buffer.position() + <span class="string">", limit: "</span> + buffer.limit());</span><br><span class="line">        <span class="comment">// 数据翻转，准备读取</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.println(<span class="string">"2. postition: "</span> + buffer.position() + <span class="string">", limit: "</span> + buffer.limit());</span><br><span class="line">        <span class="comment">// 将数据写入sink channel，写完之后buffer的position是当前已经写到的数据的下标的下一位，limit不变</span></span><br><span class="line">        sink.write(buffer);</span><br><span class="line">        System.out.println(<span class="string">"3. postition: "</span> + buffer.position() + <span class="string">", limit: "</span> + buffer.limit());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 由于写到sink channel时，不一定能完全写完buffer中所有的数据</span></span><br><span class="line"><span class="comment">         * 使用compact压缩可以使已经被写入的数据被压缩掉，未读取的数据进行前移</span></span><br><span class="line"><span class="comment">         * 等待下次循环的时候写入sink channel</span></span><br><span class="line"><span class="comment">         * 如果当前的buffer已经全部写完，此时他的效果和clear一致</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        buffer.compact();</span><br><span class="line">        System.out.println(<span class="string">"4. postition: "</span> + buffer.position() + <span class="string">", limit: "</span> + buffer.limit());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"5. postition: "</span> + buffer.position() + <span class="string">", limit: "</span> + buffer.limit());</span><br><span class="line">    <span class="comment">// 翻转，因为在输入EOF后会使buffer处于填充状态</span></span><br><span class="line">    buffer.flip();</span><br><span class="line">    System.out.println(<span class="string">"6. postition: "</span> + buffer.position() + <span class="string">", limit: "</span> + buffer.limit());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保证buffer中所有的数据全部排出</span></span><br><span class="line">    <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">        System.out.println(<span class="string">"7. postition: "</span> + buffer.position() + <span class="string">", limit: "</span> + buffer.limit());</span><br><span class="line">        sink.write(buffer);</span><br><span class="line">        System.out.println(<span class="string">"8. postition: "</span> + buffer.position() + <span class="string">", limit: "</span> + buffer.limit());</span><br><span class="line">    &#125;</span><br><span class="line">    source.close();</span><br><span class="line">    sink.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; 123</span><br><span class="line">1. postition: 4, <span class="built_in">limit</span>: 16</span><br><span class="line">2. postition: 0, <span class="built_in">limit</span>: 4</span><br><span class="line">123</span><br><span class="line">3. postition: 4, <span class="built_in">limit</span>: 4</span><br><span class="line">4. postition: 0, <span class="built_in">limit</span>: 16</span><br><span class="line"></span><br><span class="line">&gt; 1234567890abcdefghijklmn</span><br><span class="line">1. postition: 16, <span class="built_in">limit</span>: 16</span><br><span class="line">2. postition: 0, <span class="built_in">limit</span>: 16</span><br><span class="line">1234567890abcdef</span><br><span class="line">3. postition: 16, <span class="built_in">limit</span>: 16</span><br><span class="line">4. postition: 0, <span class="built_in">limit</span>: 16</span><br><span class="line">1. postition: 9, <span class="built_in">limit</span>: 16</span><br><span class="line">2. postition: 0, <span class="built_in">limit</span>: 9</span><br><span class="line">ghijklmn</span><br><span class="line">3. postition: 9, <span class="built_in">limit</span>: 9</span><br><span class="line">4. postition: 0, <span class="built_in">limit</span>: 16</span><br><span class="line"></span><br><span class="line">&gt; ^D</span><br><span class="line">5. postition: 0, <span class="built_in">limit</span>: 16</span><br><span class="line">6. postition: 0, <span class="built_in">limit</span>: 0</span><br></pre></td></tr></table></figure></p><p>第二种拷贝方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReadableByteChannel source = Channels.newChannel(System.in);</span><br><span class="line">    <span class="keyword">final</span> WritableByteChannel sink = Channels.newChannel(System.out);</span><br><span class="line">    <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">while</span> (source.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 翻转数据，准备读取</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="comment">// 开始写入，因为写入不一定能一次写完，具体要看实现方式，所以此处使用while保证buffer能完全排出</span></span><br><span class="line">        <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">            sink.write(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    source.close();</span><br><span class="line">    sink.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 123</span><br><span class="line">123</span><br><span class="line"></span><br><span class="line">&gt; 1234567890abcdefghijklmn</span><br><span class="line">1234567890abcdef</span><br><span class="line">ghijklmn</span><br><span class="line"></span><br><span class="line">&gt; ^D</span><br></pre></td></tr></table></figure></p><p>上述两种方法的主要区别是什么呢？</p><blockquote><p>第一种方式使用到<code>compact()</code>方法会牵扯到数据的复制，但是由于它使用了压缩，可以使得<code>write()</code>次数减少(使用压缩可以使每次write的尽可能的多)<br>第二种方式不会牵扯到数据的复制，但是因为使用轮询排光buffer中的数据后才会进行下一次读取，这样会使得<code>write()</code>次数增多(因为很多时候轮询打印的数据会很少)</p></blockquote><h4 id="1-5-关闭通道"><a href="#1-5-关闭通道" class="headerlink" title="1.5 关闭通道"></a>1.5 关闭通道</h4><p>&emsp;&emsp;调用通道的<code>close()</code>方法时，可能会导致在通道关闭底层I/O服务的过程中线程暂时阻塞，哪怕该通道处于非阻塞模式。通道关闭时的阻塞行为(如果有的话)是高度取决于操作系统或者文件系统的。在一个通道上多次调用<code>close()</code>方法是没有坏处的，但是如果第一个线程在<code>close()</code>方法中阻塞，那么在它完成关闭通道之前，任何其他调用<code>close()</code>方法都会阻塞。后续在该已关闭的通道上调用<code>close()</code>不会产生任何操作，只会立即返回。</p><p>&emsp;&emsp;可以通过<code>isOpen()</code>方法来测试通道的开放状态。如果返回<code>true</code>值，那么该通道可以使用。如果返回false值，那么该通道已关闭，不能再被使用。尝试进行任何需要通道处于开放状态作为前提的操作，如读、写等都会导致<code>ClosedChannelException</code>异常。</p><p>&emsp;&emsp;通道引入了一些与关闭和中断有关的新行为。如果一个通道实现<code>InterruptibleChannel</code>接口，它的行为以下述语义为准:如果一个线程在一个通道上被阻塞并且同时被中断(由调用该被阻塞线程的<code>interrupt()</code>方法的另一个线程中断)，那么该通道将被关闭，该被阻塞线程也会产生一个<code>ClosedByInterruptException</code>异常。假设此时A线程被阻塞，此时B线程终端了A线程，此时通道会关闭。</p><p>&emsp;&emsp;此外，假如一个线程的<code>interrupt status</code>被设置并且该线程试图访问一个通道，那么这个通道将立即被关闭，同时将抛出相同的<code>ClosedByInterruptException</code>异常。线程的<code>interrupt status</code>在线程的<code>interrupt()</code>方法被调用时会被设置。我们可以使用<code>isInterrupted()</code>来测试某个线程当前的<code>interrupt status</code>。当前线程的<code>interrupt status</code>可以通过调用静态的<code>Thread.interrupted()</code>方法清除。</p><p>&emsp;&emsp;可中断的通道也是可以异步关闭的。实现<code>InterruptibleChannel</code>接口的通道可以在任何时候被关闭，即使有另一个被阻塞的线程在等待该通道上的一个I/O操作完成。当一个通道被关闭时，休眠在该通道上的所有线程都将被唤醒并接收到一个<code>AsynchronousCloseException</code>异常。接着通道就被关闭并将不再可用。</p><p><img src="/images/Java-NIO-通道相关概念及源码梳理/68515850-8C3C-4CF9-B2AC-6CAAAD56DF71.jpeg" alt="img"></p><h3 id="二、Scatter-Gather"><a href="#二、Scatter-Gather" class="headerlink" title="二、Scatter/Gather"></a>二、Scatter/Gather</h3><h4 id="2-1-概念介绍"><a href="#2-1-概念介绍" class="headerlink" title="2.1 概念介绍"></a>2.1 概念介绍</h4><p>通道提供了一种被称为<code>Scatter/Gather</code>的重要新功能(有时也被称为矢量 I/O)，它是指在多个缓冲区上实现一个简单的I/O操作。对于一个<code>write</code>操作而言，数据是从几个缓冲区按顺序抽取(称为 gather)并沿着通道发送的。缓冲区本身并不需要具备这种<code>gather</code>的能力(通常它们也没有此能力)。该<code>gather</code>过程的效果就好比全部缓冲区的内容被连结起来，并在发送数据前存放到一个大的缓冲区中。对于<code>read</code>操作而言，从通道读取的数据会按顺序被散布(称为<code>scatter</code>)到多个缓冲区，将每个缓冲区填满直至通道中的数据或者缓冲区的最大空间被消耗完。</p><h4 id="2-2-接口定义"><a href="#2-2-接口定义" class="headerlink" title="2.2 接口定义"></a>2.2 接口定义</h4><p>首先我们看一下<code>Scatter/Gather</code>接口分别是什么。他们分别是<code>ScatteringByteChannel</code>和<code>GatheringByteChannel</code>这两个接口。下面是他们的接口代码和依赖关系图<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScatteringByteChannel</span> <span class="keyword">extends</span> <span class="title">ReadableByteChannel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">read</span> <span class="params">(ByteBuffer [] dsts)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">read</span> <span class="params">(ByteBuffer [] dsts, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GatheringByteChannel</span> <span class="keyword">extends</span> <span class="title">WritableByteChannel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">write</span><span class="params">(ByteBuffer[] srcs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">write</span><span class="params">(ByteBuffer[] srcs, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/Java-NIO-通道相关概念及源码梳理/E94A8AA4-2F34-4C7E-ABD0-F04194E4C276.jpeg" alt="img"></p><h4 id="2-3-函数介绍"><a href="#2-3-函数介绍" class="headerlink" title="2.3 函数介绍"></a>2.3 函数介绍</h4><p>我们可以看到两个接口中的方法入参都是<code>BtyeBuffer数组</code>，显然这就是可以对多个<code>ByteBuffer</code>进行操作。<br>以下面的代码为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer header = ByteBuffer.allocateDirect(<span class="number">10</span>);</span><br><span class="line">ByteBuffer body = ByteBuffer.allocateDirect(<span class="number">80</span>);</span><br><span class="line">ByteBuffer[] buffers = &#123;header, body&#125;;</span><br><span class="line"><span class="keyword">int</span> bytesRead = channel.read(buffers);</span><br></pre></td></tr></table></figure></p><p>假设我们channel会将48个字节读入buffer中，那header会获取前10个，body获取剩余38个。对写也是同理。</p><p>带<code>offset</code>和<code>length</code>参数版本的<code>read()</code>和<code>write()</code>方法使得我们可以使用缓冲区阵列的子集缓冲区。这里的<code>offset</code>值指哪个缓冲区将开始被使用。这里的<code>length</code>参数指示要使用的缓冲区数量。假设我们有一个五元素的buffers阵列，它已经被初始化并引用了五个缓冲区，下面的代码将会写第二个、第三个和第四个缓冲区的内容:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bytesRead = channel.write(fiveBuffers, <span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><h4 id="2-4-使用GatheringByteChannel尝试写文件"><a href="#2-4-使用GatheringByteChannel尝试写文件" class="headerlink" title="2.4 使用GatheringByteChannel尝试写文件"></a>2.4 使用GatheringByteChannel尝试写文件</h4><p>下面我们尝试使用<code>GatheringByteChannel</code>来写文件一个代码样例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] col1 = &#123;<span class="string">"Aggregate"</span>, <span class="string">"Enable"</span>, <span class="string">"Leverage"</span>, <span class="string">"Facilitate"</span>, <span class="string">"Synergize"</span>, <span class="string">"Repurpose"</span>, <span class="string">"Strategize"</span>, <span class="string">"Reinvent"</span>, <span class="string">"Harness"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] col2 = &#123;<span class="string">"cross-platform"</span>, <span class="string">"best-of-breed"</span>, <span class="string">"frictionless"</span>, <span class="string">"ubiquitous"</span>, <span class="string">"extensible"</span>, <span class="string">"compelling"</span>, <span class="string">"mission-critical"</span>, <span class="string">"collaborative"</span>, <span class="string">"integrated"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] col3 = &#123;<span class="string">"methodologies"</span>, <span class="string">"infomediaries"</span>, <span class="string">"platforms"</span>, <span class="string">"schemas"</span>, <span class="string">"mindshare"</span>, <span class="string">"paradigms"</span>, <span class="string">"functionalities"</span>, <span class="string">"web services"</span>, <span class="string">"infrastructures"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String newline = System.getProperty(<span class="string">"line.separator"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 定义循环的次数</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> reps = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 创建写入的文件</span></span><br><span class="line">        <span class="keyword">final</span> FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"test_1.txt"</span>);</span><br><span class="line">        <span class="keyword">final</span> GatheringByteChannel gatherChannel = fileOutputStream.getChannel();</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer[] bs = utterBS(reps);</span><br><span class="line">        <span class="keyword">while</span> (gatherChannel.write(bs) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 空循环直到写完</span></span><br><span class="line">        &#125;</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机生成一些ByteBuffer</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ByteBuffer[] utterBS(<span class="keyword">int</span> howMany) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;ByteBuffer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; howMany; i++) &#123;</span><br><span class="line">            list.add(pickRandom(col1, <span class="string">" "</span>));</span><br><span class="line">            list.add(pickRandom(col2, <span class="string">" "</span>));</span><br><span class="line">            list.add(pickRandom(col3, newline));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer[] bufs = <span class="keyword">new</span> ByteBuffer[list.size()];</span><br><span class="line">        list.toArray(bufs);</span><br><span class="line">        <span class="keyword">return</span> bufs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机生成ByteBuffer</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ByteBuffer <span class="title">pickRandom</span><span class="params">(String[] strings, String suffix)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String string = strings[rand.nextInt(strings.length)];</span><br><span class="line">        <span class="keyword">int</span> total = string.length() + suffix.length();</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer buf = ByteBuffer.allocate(total);</span><br><span class="line">        buf.put(string.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        buf.put(suffix.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        buf.flip();</span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三、文件通道FileChannel"><a href="#三、文件通道FileChannel" class="headerlink" title="三、文件通道FileChannel"></a>三、文件通道FileChannel</h3><h4 id="3-1-FileChannel简介"><a href="#3-1-FileChannel简介" class="headerlink" title="3.1 FileChannel简介"></a>3.1 FileChannel简介</h4><p>首先我们看一下FileChannel类的继承依赖关系<br><img src="/images/Java-NIO-通道相关概念及源码梳理/08DAF7F0-873A-4F1C-852E-8944411C8011.jpeg" alt="img"></p><h5 id="3-1-1-FileChannel是否是阻塞的？"><a href="#3-1-1-FileChannel是否是阻塞的？" class="headerlink" title="3.1.1 FileChannel是否是阻塞的？"></a>3.1.1 FileChannel是否是阻塞的？</h5><p>文件通道总是阻塞式的，因此不能被置于非阻塞模式。现代操作系统都有复杂的缓存和预取机 制，使得本地磁盘 I/O 操作延迟很少。网络文件系统一般而言延迟会多些，不过却也因该优化而受 益。面向流的 I/O 的非阻塞范例对于面向文件的操作并无多大意义，这是由文件 I/O 本质上的不同 性质造成的。</p><h5 id="3-1-2-FileInputStream与FileOutputStream获取的文件通道的区别？"><a href="#3-1-2-FileInputStream与FileOutputStream获取的文件通道的区别？" class="headerlink" title="3.1.2 FileInputStream与FileOutputStream获取的文件通道的区别？"></a>3.1.2 FileInputStream与FileOutputStream获取的文件通道的区别？</h5><p>我们知道在打开文件时我们可以以不同的权限打开。从<code>FileInputStream</code>对象中的<code>getChannel()</code>方法获取的<code>FileChannel</code>对象是只读的。从<code>FileOutputStream</code>对象中的<code>getChannel()</code>方法获取的<code>FileChannel</code>对象是只写的，虽然<code>FileChannel</code>类本身是双向的，但是实际进行写和读操作的时候分别会报<code>NonWritableChannelException</code>和<code>NonReadableChannelException</code>。</p><h5 id="3-1-3-FileChannel的position"><a href="#3-1-3-FileChannel的position" class="headerlink" title="3.1.3 FileChannel的position"></a>3.1.3 FileChannel的position</h5><p>FileChannel 位置(position)是从底层的文件描述符获得的，该 position 同时被作为通道引用 获取来源的文件对象共享。这也就意味着一个对象对该 position 的更新可以被另一个对象看到:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"filename"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="comment">// Set the file position</span></span><br><span class="line">randomAccessFile.seek(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// Create a channel from the file</span></span><br><span class="line">FileChannel fileChannel = randomAccessFile.getChannel();</span><br><span class="line"><span class="comment">// This will print "1000"</span></span><br><span class="line">System.out.println (<span class="string">"file pos: "</span> + fileChannel.position());</span><br><span class="line"><span class="comment">// Change the position using the RandomAccessFile object</span></span><br><span class="line">randomAccessFile.seek(<span class="number">500</span>);</span><br><span class="line"><span class="comment">// This will print "500"</span></span><br><span class="line">System.out.println (<span class="string">"file pos: "</span> + fileChannel.position());</span><br><span class="line"><span class="comment">// Change the position using the FileChannel object</span></span><br><span class="line">fileChannel.position(<span class="number">200</span>);</span><br><span class="line"><span class="comment">// This will print "200"</span></span><br><span class="line">System.out.println (<span class="string">"file pos: "</span> + randomAccessFile.getFilePointer());</span><br></pre></td></tr></table></figure></p><h5 id="3-1-4-FileChannel多线程访问一个文件会出现问题吗？"><a href="#3-1-4-FileChannel多线程访问一个文件会出现问题吗？" class="headerlink" title="3.1.4 FileChannel多线程访问一个文件会出现问题吗？"></a>3.1.4 FileChannel多线程访问一个文件会出现问题吗？</h5><p>多个线程可以并发访问同一个文件而不会相互产生干扰。这是因为每次调用都是原子性的(atomic)，并不依靠调用之间系统所记住的状态。</p><h5 id="3-1-5-FileChannel比较重要的方法有哪些？"><a href="#3-1-5-FileChannel比较重要的方法有哪些？" class="headerlink" title="3.1.5 FileChannel比较重要的方法有哪些？"></a>3.1.5 FileChannel比较重要的方法有哪些？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件截断</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> FileChannel <span class="title">truncate</span><span class="params">(<span class="keyword">long</span> size)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制将全部待定的修改都应用到磁盘文件上</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">force</span><span class="params">(<span class="keyword">boolean</span> metaData)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个通道间拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">transferTo</span><span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> count, WritableByteChannel target)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个通道间拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">transferFrom</span><span class="params">(ReadableByteChannel src, <span class="keyword">long</span> position, <span class="keyword">long</span> count)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将此通道文件的区域直接映射到内存中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> MappedByteBuffer <span class="title">map</span><span class="params">(MapMode mode, <span class="keyword">long</span> position, <span class="keyword">long</span> size)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对从postition开始的size大小的文件数据进行上锁</span></span><br><span class="line"><span class="comment">// 如果已经有其他线程获取了锁，当前线程会阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> FileLock <span class="title">lock</span><span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> size, <span class="keyword">boolean</span> shared)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对整个文件数据进行上锁</span></span><br><span class="line"><span class="comment">// 如果已经有其他线程获取了锁，当前线程会阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> FileLock <span class="title">lock</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lock(<span class="number">0L</span>, Long.MAX_VALUE, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试对从postition开始的size大小的文件数据进行上锁，上锁失败返回空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> FileLock <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> size, <span class="keyword">boolean</span> shared)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对整个文件数据进行上锁，上锁失败返回空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> FileLock <span class="title">tryLock</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tryLock(<span class="number">0L</span>, Long.MAX_VALUE, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-传统方式读写文件"><a href="#3-2-传统方式读写文件" class="headerlink" title="3.2 传统方式读写文件"></a>3.2 传统方式读写文件</h4><p>下面我们先用传统IO的方式来进行文件的读写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String fileName = <span class="string">"test.txt"</span>;</span><br><span class="line">    <span class="keyword">try</span> (FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(fileName))&#123;</span><br><span class="line">        outputStream.write(<span class="string">"this is a word"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        <span class="keyword">final</span> FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[inputStream.available()];</span><br><span class="line">        inputStream.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-3-FileChannel读文件"><a href="#3-3-FileChannel读文件" class="headerlink" title="3.3 FileChannel读文件"></a>3.3 FileChannel读文件</h4><p>从文件中读取数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String fileName = <span class="string">"test.txt"</span>;</span><br><span class="line">    <span class="keyword">final</span> FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">    <span class="keyword">final</span> FileChannel channel = inputStream.getChannel();</span><br><span class="line">    <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span> (channel.read(buffer) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.println(<span class="string">"读取数据： "</span> + <span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个时候如果我们尝试写数据会发现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String fileName = <span class="string">"test.txt"</span>;</span><br><span class="line">    <span class="keyword">final</span> FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">    <span class="keyword">final</span> FileChannel channel = inputStream.getChannel();</span><br><span class="line">    channel.write(ByteBuffer.wrap(<span class="string">"this is new word"</span>.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抛出异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.nio.channels.NonWritableChannelException</span><br><span class="line">at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:<span class="number">201</span>)</span><br><span class="line">at xyz.suiwo.nio.FileOutputStreamFileChannelTest.main(FileOutputStreamFileChannelTest.java:<span class="number">29</span>)</span><br></pre></td></tr></table></figure></p><h4 id="3-4-FileChannel写文件"><a href="#3-4-FileChannel写文件" class="headerlink" title="3.4 FileChannel写文件"></a>3.4 FileChannel写文件</h4><p>下面我们尝试一下写文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String fileName = <span class="string">"test.txt"</span>;</span><br><span class="line">    <span class="keyword">final</span> FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(fileName);</span><br><span class="line">    <span class="keyword">final</span> FileChannel channel = outputStream.getChannel();</span><br><span class="line">    channel.write(ByteBuffer.wrap(<span class="string">"this is new word"</span>.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同理假设我们尝试对一个输出流获取到的通道尝试读取的时候也会抛出异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String fileName = <span class="string">"test.txt"</span>;</span><br><span class="line">    <span class="keyword">final</span> FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(fileName);</span><br><span class="line">    <span class="keyword">final</span> FileChannel channel = outputStream.getChannel();</span><br><span class="line">    <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span> (channel.read(buffer) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.println(<span class="string">"读取数据： "</span> + <span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>异常如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.nio.channels.NonReadableChannelException</span><br><span class="line">at sun.nio.ch.FileChannelImpl.read(FileChannelImpl.java:<span class="number">149</span>)</span><br><span class="line">at xyz.suiwo.nio.FileOutputStreamFileChannelTest.main(FileOutputStreamFileChannelTest.java:<span class="number">39</span>)</span><br></pre></td></tr></table></figure></p><h4 id="3-5-创建同时可读可写的FileChannel"><a href="#3-5-创建同时可读可写的FileChannel" class="headerlink" title="3.5 创建同时可读可写的FileChannel"></a>3.5 创建同时可读可写的FileChannel</h4><p>既然<code>FileChannel</code>是双向的，那我们有办法能创建一个可读可写的通道吗？<br>答案是可以的我们可以通过<code>RandomAccessFile</code>来获取通道，我们观察一下<code>RandomAccessFile</code>类的继承实现情况</p><p><img src="/images/Java-NIO-通道相关概念及源码梳理/0BBB2664-D58A-446C-ADB1-14006DEEB9B6.jpeg" alt="img"></p><p>会发现他同时实现了<code>DataOutput</code>, <code>DataInput</code>两个接口，来实现我们的可读可写<br>下面我们来尝试创建一个可读可写的通道<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"test.txt"</span>, <span class="string">"rw"</span>);) &#123;</span><br><span class="line">        <span class="keyword">final</span> FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line">        channel.write(ByteBuffer.wrap(<span class="string">"this is an old word"</span>.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">        <span class="comment">// 如果不对位置进行归0，那我们读取的时候就会从当前的channel.position()开始读取</span></span><br><span class="line">        System.out.println(<span class="string">"完成写操作后当前的通道位置为： "</span> + channel.position());</span><br><span class="line">        <span class="comment">// 需要将通道的位置归0，这样我们才能从开头开始读取数据</span></span><br><span class="line">        channel.position(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">while</span> (channel.read(buffer) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            System.out.println(<span class="string">"读取数据： "</span> + <span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-6-FileChannel截断"><a href="#3-6-FileChannel截断" class="headerlink" title="3.6 FileChannel截断"></a>3.6 FileChannel截断</h4><p>我们也可以使用<code>truncate(int)</code>方法来对文件进行截断<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"test.txt"</span>, <span class="string">"rw"</span>);) &#123;</span><br><span class="line">        <span class="keyword">final</span> FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line">        <span class="comment">// 执行完这一行此时文件中的内容变成 'this is an old word'</span></span><br><span class="line">        channel.write(ByteBuffer.wrap(<span class="string">"this is an old word"</span>.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">        <span class="comment">// 执行完这一行此时文件中的内容变成 'this' 说明已经成功截断</span></span><br><span class="line">        channel.truncate(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">while</span> (channel.read(buffer) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            System.out.println(<span class="string">"读取数据： "</span> + <span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-7-FileChannel编辑"><a href="#3-7-FileChannel编辑" class="headerlink" title="3.7 FileChannel编辑"></a>3.7 FileChannel编辑</h4><p>在我们尝试对一个文件进行编辑的时候，可以使用<code>MappedByteBuffer</code>类（这个类的详细我们会在后续讲解）来讲数据映射到内存中进行编辑，编辑结束后将编辑的内容同步到文件中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(<span class="keyword">final</span> RandomAccessFile f = <span class="keyword">new</span> RandomAccessFile(<span class="string">"test.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">        <span class="keyword">final</span> FileChannel channel = f.getChannel())&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里需要使用MapMode.READ_WRITE模式，其他模式无法保存数据到文件</span></span><br><span class="line"><span class="comment">         * 假设我们的原文是 'this is a new word'，我们接下来尝试从第2个字节开始，映射4个字节到内存中。</span></span><br><span class="line"><span class="comment">         * 如果设置的映射字节数大于本来文件中的剩余字节长度，多出来的部分将会填空字节</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 我们可以直接对在内存中的数据进行编辑，也就是编辑Buffer中的内容</span></span><br><span class="line"><span class="comment">         * 注意这里写入也是从pos位置开始的，我们当前的开始编辑的位置是第2个字节，但是我们的position当前为0</span></span><br><span class="line"><span class="comment">         * 由于我们映射的字节大小为4，假设这个时候我们写入5个字节则会抛出以下异常</span></span><br><span class="line"><span class="comment">         * Exception in thread "main" java.nio.BufferOverflowException</span></span><br><span class="line"><span class="comment">         * at java.nio.ByteBuffer.put(ByteBuffer.java:829)</span></span><br><span class="line"><span class="comment">         * at java.nio.DirectByteBuffer.put(DirectByteBuffer.java:376)</span></span><br><span class="line"><span class="comment">         * at java.nio.ByteBuffer.put(ByteBuffer.java:859)</span></span><br><span class="line"><span class="comment">         * at xxx.xxx.main(Xxxx.java:30)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 在我们执行完put后只是修改了内存中的数据，文件此时并未进行变更</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        buffer.put(<span class="string">"abcd"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行完force()方法，此时文件完成编辑，文件内容变成 'thabcds a new word'</span></span><br><span class="line">        buffer.force();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-8-FileChannel拷贝-Channel-To-Channel"><a href="#3-8-FileChannel拷贝-Channel-To-Channel" class="headerlink" title="3.8 FileChannel拷贝(Channel To Channel)"></a>3.8 FileChannel拷贝(Channel To Channel)</h4><p>对于FileChannel我们可以使用<code>transferTo()</code>和<code>transferFrom()</code>方法<br>下面我们尝试从从一个输出流的通道拷贝到输入流的通道中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设此时test.txt中存在一份文本，执行结束后会发现成功拷贝到test2.txt文件中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"test2.txt"</span>);</span><br><span class="line">        <span class="keyword">final</span> FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>)) &#123;</span><br><span class="line">        <span class="keyword">final</span> FileChannel inChannel = in.getChannel();   <span class="comment">//获取到test文件的通道</span></span><br><span class="line">        <span class="comment">// 第一个参数是开始拷贝的起始位置，第二个参数表示拷贝的数量</span></span><br><span class="line">        <span class="comment">// 将test文件通道中的数据拷贝到test2文件的通道中</span></span><br><span class="line">        inChannel.transferTo(<span class="number">0</span>, inChannel.size(), out.getChannel());</span><br><span class="line">        <span class="comment">// 下面这行代码的执行效果与上面一行一直</span></span><br><span class="line">        <span class="comment">// out.getChannel().transferFrom(inChannel, 0, inChannel.size());</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-9-文件锁定"><a href="#3-9-文件锁定" class="headerlink" title="3.9 文件锁定"></a>3.9 文件锁定</h4><p>文件锁分为共享锁和独占锁，而这种锁的具体实现很大程度上都依赖本地操作系统的实现、所以假设某个操作系统和文件系统不支持共享文件锁，那么对于一个共享所得请求会被自动提升为独占锁，这回暗中的影响性能，所以在使用前一定要对操作系统和文件系统的文件锁定行为有详细的认识。</p><blockquote><p>同时我们要注意，<code>FileChannel</code>锁实现的文件锁定模型锁的对象是文件而不是通道或者线程，这意味着文件锁的判定是服务的进程粒度下的，对于多线程并不适用。</p></blockquote><h5 id="3-9-1-文件锁定相关的API"><a href="#3-9-1-文件锁定相关的API" class="headerlink" title="3.9.1 文件锁定相关的API"></a>3.9.1 文件锁定相关的API</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FileChannel</span> <span class="keyword">extends</span> <span class="title">AbstractChannel</span> <span class="keyword">implements</span> <span class="title">ByteChannel</span>, <span class="title">GatheringByteChannel</span>, <span class="title">ScatteringByteChannel</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个整个文件的独占锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> FileLock <span class="title">lock</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 对文件从position开始的size字节大小的文件加一个独占或者共享锁</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">abstract</span> FileLock <span class="title">lock</span> <span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> size, <span class="keyword">boolean</span> shared)</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 尝试获取锁，获取锁失败将返回null</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> FileLock <span class="title">tryLock</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 尝试获取锁，获取失败将返回null</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">abstract</span> FileLock <span class="title">tryLock</span> <span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> size, <span class="keyword">boolean</span> shared)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>如果您正请求的锁定范围是有效的，那么<code>lock()</code>方法会阻塞，它必须等待前面的锁被释放。假如您的线程在此情形下被暂停，该线程的行为受中断语义控制。如果通道被另外一个线程关闭，该暂停线程将恢复并产生一个<code>AsynchronousCloseException</code>异常。假如该暂停线程被直接中断(通过调用它的<code>interrupt()</code>方法)，它将醒来并产生一个<code>FileLockInterruptionException</code>异常。如果在调用<code>lock()</code>方法时线程的<code>interrupt status</code>已经被设置，也会产生<code>FileLockInterruptionException</code>异常。</p><h5 id="3-9-2-FileLock介绍"><a href="#3-9-2-FileLock介绍" class="headerlink" title="3.9.2 FileLock介绍"></a>3.9.2 FileLock介绍</h5><p>首先我们看一下FileLock类的重要方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLock</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前锁对应的文件通道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> FileChannel <span class="title">channel</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 获取当前锁的文件位置</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">position</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 获取锁文件的大小</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">size</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 返回当前锁是否为共享锁</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 返回从position-size的锁是否和当前所重合</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">overlaps</span> <span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> size)</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 告知此锁是否有效。锁定对象在释放或关联的文件通道关闭（以先到者为准）之前一直有效。</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">( )</span></span>;</span><br><span class="line">    <span class="comment">// 释放当前锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">( )</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尽管一个FileLock对象是与某个特定的FileChannel实例关联的，它所代表的锁却是与一个底层文件关联的，而不是与通道关联。因此，如果您在使用完一个锁后而不释放它的话，可能会导致冲突或者死锁。请小心管理文件锁以避免出现此问题。一旦您成功地获取了一个文件锁，如果随后在通道上出现错误的话，请务必释放这个锁。<br>下面是推荐使用的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="keyword">final</span> RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"test.txt"</span>, <span class="string">"rw"</span>); </span><br><span class="line">     <span class="keyword">final</span> FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line">     <span class="keyword">final</span> FileLock lock = channel.lock()) &#123;</span><br><span class="line">    <span class="comment">// lock code</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="3-9-3-尝试进程间使用文件锁"><a href="#3-9-3-尝试进程间使用文件锁" class="headerlink" title="3.9.3 尝试进程间使用文件锁"></a>3.9.3 尝试进程间使用文件锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"test.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">    <span class="keyword">final</span> FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line">    System.out.println(<span class="keyword">new</span> Date() + <span class="string">" 正在尝试获取文件锁..."</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> FileLock lock = channel.lock()) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date() + <span class="string">" 已获取到文件锁！"</span>);</span><br><span class="line">        <span class="comment">//假设要处理5秒钟</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date() + <span class="string">" 操作完毕，释放文件锁！"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们同时启动两个实例，此时可以在控制台看到在第一个实例释放锁喉第二个实例才获取到锁<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制台1</span></span><br><span class="line">Sun Jan 15 15:57:22 CST 2023 正在尝试获取文件锁...</span><br><span class="line">Sun Jan 15 15:57:22 CST 2023 已获取到文件锁！</span><br><span class="line">Sun Jan 15 15:57:27 CST 2023 操作完毕，释放文件锁！</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台2</span></span><br><span class="line">Sun Jan 15 15:57:24 CST 2023 正在尝试获取文件锁...</span><br><span class="line">Sun Jan 15 15:57:27 CST 2023 已获取到文件锁！</span><br><span class="line">Sun Jan 15 15:57:32 CST 2023 操作完毕，释放文件锁！</span><br></pre></td></tr></table></figure></p><p>这是如果我们修改lock方式对同一个文件的不同位置进行上锁就会发现，两个进程不会阻塞对方。</p><h3 id="四、内存映射文件"><a href="#四、内存映射文件" class="headerlink" title="四、内存映射文件"></a>四、内存映射文件</h3><p>在FileChannel中提供了一个map()方法，这个方法是可以在一个打开的文件和一个特殊的ByteBuffer之间建立一个虚拟内存映射。在FileChannel上调用map()方法会创建一个由磁盘文件支持的虚拟内存映射(virtual memory mapping)并在那块虚拟内存空间外部封装一个MappedByteBuffer对象。如下图</p><p><img src="/images/Java-NIO-通道相关概念及源码梳理/8C37260C-D1C7-4776-9304-4FCA04B0E8EA_4_5005_c.jpeg" alt="img"></p><p>通过内存映射机制来访问一个文件会比使用常规方法读写高效得多，甚至比使用通道的效率都高。因为不需要做明确的系统调用，那会很消耗时间。更重要的是，操作系统的虚拟内存可以自动缓存内存页(memory page)。这些页是用系统内存来缓存的，所以不会消耗Java虚拟机内存堆(memory heap)。</p><h4 id="4-1-map-方法定义"><a href="#4-1-map-方法定义" class="headerlink" title="4.1 map()方法定义"></a>4.1 map()方法定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FileChannel</span> <span class="keyword">extends</span> <span class="title">AbstractChannel</span> <span class="keyword">implements</span> <span class="title">ByteChannel</span>, <span class="title">GatheringByteChannel</span>, <span class="title">ScatteringByteChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 映射模式，开始文件位置，读取的文件size</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> MappedByteBuffer <span class="title">map</span> <span class="params">(MapMode mode, <span class="keyword">long</span> position,<span class="keyword">long</span> size)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">static</span> class MapMode </span>&#123;</span><br><span class="line">        <span class="comment">// 只读</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MapMode READ_ONLY</span><br><span class="line">        <span class="comment">// 读写模式</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MapMode READ_WRITE</span><br><span class="line">        <span class="comment">// 写时拷贝</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MapMode PRIVATE</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们尝试映射100到299位置的字节，代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, <span class="number">100</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure></p><p>尝试映射整个文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, fileChannel.size());</span><br></pre></td></tr></table></figure></p><h5 id="4-1-1-MapMode介绍"><a href="#4-1-1-MapMode介绍" class="headerlink" title="4.1.1 MapMode介绍"></a>4.1.1 MapMode介绍</h5><p>MapMode.READ_ONLY 和 MapMode.READ_WRITE 意义是很明显的，它们表示您希望获取的映射只读还是允许修改映射的文件。请求的映射模式将受被调用map( )方法的 FileChannel 对象的访问权限所限制。如果通道是以只读的权限打开的而您却请求 MapMode.READ_WRITE 模式，那么 map( )方法会抛出一个 NonWritableChannelException 异常;如果您在一个没有读权限的通道上请求 MapMode.READ_ONLY 映射模式，那么将产生 NonReadableChannelException 异常。不过在以 read/write 权限打开的通道上请求一个 MapMode.READ_ONLY 映射却是允许的。MappedByteBuffer 对象的可变性可以通过对它调用 isReadOnly( )方法来检查。</p><p>MapMode.PRIVATE 表示您想要一个写时拷贝(copy-on-write)的映射。这意味着 您通过 put( )方法所做的任何修改都会导致产生一个私有的数据拷贝并且该拷贝中的数据只有 MappedByteBuffer 实例可以看到。该过程不会对底层文件做任何修改，而且一旦缓冲区被施以垃圾 收集动作(garbage collected)，那些修改都会丢失。尽管写时拷贝的映射可以防止底层文件被修 改，您也必须以 read/write 权限来打开文件以建立 MapMode.PRIVATE 映射。只有这样，返回的 MappedByteBuffer 对象才能允许使用 put( )方法。</p><p>下面我们对三种类型的MappedByteBuffer进行读写看看互相的影响，各种模式的内存映射如何交互。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建临时文件</span></span><br><span class="line">    <span class="keyword">final</span> File tempFile = File.createTempFile(<span class="string">"mmaptest"</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> RandomAccessFile file = <span class="keyword">new</span> RandomAccessFile(tempFile, <span class="string">"rw"</span>);</span><br><span class="line">         <span class="keyword">final</span> FileChannel channel = file.getChannel())&#123;</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer temp = ByteBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">        temp.put(<span class="string">"This is the file content"</span>.getBytes());</span><br><span class="line">        temp.flip();</span><br><span class="line">        channel.write(temp, <span class="number">0</span>);</span><br><span class="line">        temp.clear();</span><br><span class="line">        temp.put(<span class="string">"This is more file content"</span>.getBytes());</span><br><span class="line">        temp.flip();</span><br><span class="line">        <span class="comment">// 中间部分都是空</span></span><br><span class="line">        channel.write(temp, <span class="number">8192</span>);</span><br><span class="line">        <span class="comment">// 分别创建只读，读写和copy-on-write的MappedByteBuffer</span></span><br><span class="line">        <span class="keyword">final</span> MappedByteBuffer ro = channel.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, channel.size());</span><br><span class="line">        <span class="keyword">final</span> MappedByteBuffer rw = channel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, channel.size());</span><br><span class="line">        <span class="keyword">final</span> MappedByteBuffer cow = channel.map(FileChannel.MapMode.PRIVATE, <span class="number">0</span>, channel.size());</span><br><span class="line">        System.out.println(<span class="string">"Begin"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此时三种方式的MappedByteBuffer的输出分别是</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * R/O: 'This is the file content|[8168 nulls]|This is more file content'</span></span><br><span class="line"><span class="comment">         * R/W: 'This is the file content|[8168 nulls]|This is more file content'</span></span><br><span class="line"><span class="comment">         * COW: 'This is the file content|[8168 nulls]|This is more file content'</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        showBuffers(ro, rw, cow);</span><br><span class="line">        cow.position(<span class="number">8</span>);</span><br><span class="line">        cow.put(<span class="string">"COW"</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"Change to COW buffer"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此时三种方式的MappedByteBuffer的输出分别是</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * R/O: 'This is the file content|[8168 nulls]|This is more file content'</span></span><br><span class="line"><span class="comment">         * R/W: 'This is the file content|[8168 nulls]|This is more file content'</span></span><br><span class="line"><span class="comment">         * COW: 'This is COW file content|[8168 nulls]|This is more file content'</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        showBuffers(ro, rw, cow);</span><br><span class="line">        rw.position(<span class="number">9</span>);</span><br><span class="line">        rw.put(<span class="string">" R/W "</span>.getBytes());</span><br><span class="line">        rw.position(<span class="number">8194</span>);</span><br><span class="line">        rw.put(<span class="string">" R/W "</span>.getBytes());</span><br><span class="line">        rw.force();</span><br><span class="line">        System.out.println(<span class="string">"Change to R/W buffer"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此时三种方式的MappedByteBuffer的输出分别是</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * R/O: 'This is t R/W le content|[8168 nulls]|Th R/W  more file content'</span></span><br><span class="line"><span class="comment">         * R/W: 'This is t R/W le content|[8168 nulls]|Th R/W  more file content'</span></span><br><span class="line"><span class="comment">         * COW: 'This is COW file content|[8168 nulls]|This is more file content'</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        showBuffers(ro, rw, cow);</span><br><span class="line">        <span class="comment">// Write to the file through the channel; hit both pages</span></span><br><span class="line">        temp.clear();</span><br><span class="line">        temp.put(<span class="string">"Channel write "</span>.getBytes());</span><br><span class="line">        temp.flip();</span><br><span class="line">        channel.write(temp, <span class="number">0</span>);</span><br><span class="line">        temp.rewind();</span><br><span class="line">        channel.write(temp, <span class="number">8202</span>);</span><br><span class="line">        System.out.println(<span class="string">"Write on channel"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此时三种方式的MappedByteBuffer的输出分别是</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * R/O: 'Channel write le content|[8168 nulls]|Th R/W  moChannel write t'</span></span><br><span class="line"><span class="comment">         * R/W: 'Channel write le content|[8168 nulls]|Th R/W  moChannel write t'</span></span><br><span class="line"><span class="comment">         * COW: 'This is COW file content|[8168 nulls]|This is more file content'</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        showBuffers(ro, rw, cow);</span><br><span class="line">        <span class="comment">// Modify the copy-on-write buffer again</span></span><br><span class="line">        cow.position(<span class="number">8207</span>);</span><br><span class="line">        cow.put(<span class="string">" COW2 "</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"Second change to COW buffer"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此时三种方式的MappedByteBuffer的输出分别是</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * R/O: 'Channel write le content|[8168 nulls]|Th R/W  moChannel write t'</span></span><br><span class="line"><span class="comment">         * R/W: 'Channel write le content|[8168 nulls]|Th R/W  moChannel write t'</span></span><br><span class="line"><span class="comment">         * COW: 'This is COW file content|[8168 nulls]|This is more fi COW2 tent'</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        showBuffers(ro, rw, cow);</span><br><span class="line">        <span class="comment">// Modify the read/write buffer</span></span><br><span class="line">        rw.position(<span class="number">0</span>);</span><br><span class="line">        rw.put(<span class="string">" R/W2 "</span>.getBytes());</span><br><span class="line">        rw.position(<span class="number">8210</span>);</span><br><span class="line">        rw.put(<span class="string">" R/W2 "</span>.getBytes());</span><br><span class="line">        rw.force();</span><br><span class="line">        System.out.println(<span class="string">"Second change to R/W buffer"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此时三种方式的MappedByteBuffer的输出分别是</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * R/O: ' R/W2 l write le content|[8168 nulls]|Th R/W  moChannel  R/W2 t'</span></span><br><span class="line"><span class="comment">         * R/W: ' R/W2 l write le content|[8168 nulls]|Th R/W  moChannel  R/W2 t'</span></span><br><span class="line"><span class="comment">         * COW: 'This is COW file content|[8168 nulls]|This is more fi COW2 tent'</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        showBuffers(ro, rw, cow);</span><br><span class="line">    &#125;</span><br><span class="line">    tempFile.delete();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对三种形式的ByteBuffer进行打印</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showBuffers</span><span class="params">(ByteBuffer ro, ByteBuffer rw, ByteBuffer cow)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    dumpBuffer(<span class="string">"R/O"</span>, ro);</span><br><span class="line">    dumpBuffer(<span class="string">"R/W"</span>, rw);</span><br><span class="line">    dumpBuffer(<span class="string">"COW"</span>, cow);</span><br><span class="line">    System.out.println(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印ByteBuffer中的内容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dumpBuffer</span><span class="params">(String prefix, ByteBuffer buffer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.print(prefix + <span class="string">": '"</span>);</span><br><span class="line">    <span class="keyword">int</span> nulls = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> limit = buffer.limit();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = (<span class="keyword">char</span>) buffer.get(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'\u0000'</span>) &#123;</span><br><span class="line">            nulls++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nulls != <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">"|["</span> + nulls + <span class="string">" nulls]|"</span>);</span><br><span class="line">            nulls = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(c);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-2-MappedByteBuffer介绍"><a href="#4-2-MappedByteBuffer介绍" class="headerlink" title="4.2 MappedByteBuffer介绍"></a>4.2 MappedByteBuffer介绍</h4><p>首先我们看一下MappedByteBuffer和其他ByteBuffer相比不同的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedByteBuffer</span> <span class="keyword">extends</span> <span class="title">ByteBuffer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// load( )方法会加载整个文件以使它常驻内存。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> MappedByteBuffer <span class="title">load</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 我们可以通过调用 isLoaded()方法来判断一个被映射的文件是否完全常驻内存了。如果该方法返回 true 值，那么很大概率是映射缓冲区的访问延迟很少或者根本没有延迟。不过，这也是不能保证的。</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isLoaded</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 强制将对此缓冲区内容所做的任何更改写入包含映射文件的存储设备。</span></span></span><br><span class="line"><span class="function">    <span class="comment">// 如果映射是以 MapMode.READ_ONLY 或 MAP_MODE.PRIVATE 模式建立的，那么调用 force() 方法将不起任何作用，因为永远不会有更改需要应用到磁盘上(但是这样做也是没有害处的)。</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> MappedByteBuffer <span class="title">force</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="五、Socket通道"><a href="#五、Socket通道" class="headerlink" title="五、Socket通道"></a>五、Socket通道</h3><h4 id="5-1-阻塞I-O的socket实现"><a href="#5-1-阻塞I-O的socket实现" class="headerlink" title="5.1 阻塞I/O的socket实现"></a>5.1 阻塞I/O的socket实现</h4><p>在学习Socket通道之前我们先重温一下，在JAVA传统的阻塞I/O中Socket通信是如何实现的<br>服务端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>)) &#123;</span><br><span class="line">        System.out.println(<span class="string">"等待客户端连接。。。。"</span>);</span><br><span class="line">        <span class="keyword">final</span> Socket socket = server.accept();</span><br><span class="line">        System.out.println(<span class="string">"客户端已连接，IP地址为: "</span> + socket.getInetAddress().getHostAddress());</span><br><span class="line">        <span class="keyword">final</span> BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">        System.out.println(<span class="string">"开始接收客户端消息。。。。"</span>);</span><br><span class="line">        System.out.println(<span class="string">"收到客户端请求: "</span> + reader.readLine());</span><br><span class="line">        <span class="keyword">final</span> OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream());</span><br><span class="line">        writer.write(<span class="string">"已收到，服务端IP为: "</span> + server.getInetAddress().getHostAddress());</span><br><span class="line">        writer.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">8080</span>);</span><br><span class="line">         <span class="keyword">final</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in)) &#123;</span><br><span class="line">        System.out.println(<span class="string">"已连接到服务端!"</span>);</span><br><span class="line">        <span class="keyword">final</span> OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream());</span><br><span class="line">        System.out.print(<span class="string">"请输入要发送的数据 &gt; "</span>);</span><br><span class="line">        <span class="keyword">final</span> String text = scanner.nextLine();</span><br><span class="line">        writer.write(text + <span class="string">"\n"</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        <span class="keyword">final</span> BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">        <span class="keyword">final</span> String line = reader.readLine();</span><br><span class="line">        System.out.println(<span class="string">"收到服务端返回: "</span> + line);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出日志如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端日志</span></span><br><span class="line">等待客户端连接。。。。</span><br><span class="line">客户端已连接，IP地址为: 127.0.0.1</span><br><span class="line">开始接收客户端消息。。。。</span><br><span class="line">收到客户端请求: hello socket server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端日志</span></span><br><span class="line">已连接到服务端!</span><br><span class="line">请输入要发送的数据 &gt; hello socket server</span><br><span class="line">收到服务端返回: 已收到，服务端IP为: 0.0.0.0</span><br></pre></td></tr></table></figure></p><h4 id="5-2-非阻塞I-O的实现"><a href="#5-2-非阻塞I-O的实现" class="headerlink" title="5.2 非阻塞I/O的实现"></a>5.2 非阻塞I/O的实现</h4><p>服务端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> ServerSocketChannel server = ServerSocketChannel.open()) &#123;</span><br><span class="line">        System.out.println(<span class="string">"等待客户端连接。。。。"</span>);</span><br><span class="line">        server.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8080</span>));</span><br><span class="line">        <span class="keyword">final</span> SocketChannel socket = server.accept();</span><br><span class="line">        System.out.println(<span class="string">"客户端已连接，IP地址为: "</span> + socket.getRemoteAddress());</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">        socket.read(buffer);</span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="keyword">final</span> String text = <span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.remaining());</span><br><span class="line">        System.out.println(<span class="string">"接收到客户端消息: "</span> + text);</span><br><span class="line">        buffer.clear();</span><br><span class="line">        socket.write(ByteBuffer.wrap((<span class="string">"已收到消息，当前服务IP为: "</span> + server.getLocalAddress().toString()).getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> SocketChannel socket = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8080</span>)); <span class="keyword">final</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in)) &#123;</span><br><span class="line">        System.out.println(<span class="string">"已连接到服务端!"</span>);</span><br><span class="line">        System.out.print(<span class="string">"请输入要发送的数据 &gt; "</span>);</span><br><span class="line">        <span class="keyword">final</span> String text = scanner.nextLine();</span><br><span class="line">        socket.write(ByteBuffer.wrap(text.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">        System.out.println(<span class="string">"收到服务端返回: "</span>);</span><br><span class="line">        socket.read(buffer);</span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出日志如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端日志</span></span><br><span class="line">Connected to the target VM, address: <span class="string">'127.0.0.1:54206'</span>, transport: <span class="string">'socket'</span></span><br><span class="line">等待客户端连接。。。。</span><br><span class="line">客户端已连接，IP地址为: /127.0.0.1:54216</span><br><span class="line">接收到客户端消息: haha</span><br><span class="line">Disconnected from the target VM, address: <span class="string">'127.0.0.1:54206'</span>, transport: <span class="string">'socket'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端日志</span></span><br><span class="line">Connected to the target VM, address: <span class="string">'127.0.0.1:54214'</span>, transport: <span class="string">'socket'</span></span><br><span class="line">已连接到服务端!</span><br><span class="line">请输入要发送的数据 &gt; haha</span><br><span class="line">收到服务端返回: </span><br><span class="line">已收到消息，当前服务IP为: /0:0:0:0:0:0:0:0:8080</span><br><span class="line">Disconnected from the target VM, address: <span class="string">'127.0.0.1:54214'</span>, transport: <span class="string">'socket'</span></span><br></pre></td></tr></table></figure></p><h4 id="5-3-Socket通道常用类介绍"><a href="#5-3-Socket通道常用类介绍" class="headerlink" title="5.3 Socket通道常用类介绍"></a>5.3 Socket通道常用类介绍</h4><ol><li>Socket通道类有三个，分别是<code>SocketChannle</code>,<code>ServerSocketChannel</code>和<code>DatagramChannel</code>。这三个通道都是由<code>AbstractSelectableChannel</code>类引申而来。这意味着我们可以使用一个<code>Selector</code>对象来执行有条件的选择。</li><li>当我们实例化<code>DatagramChannel</code>,<code>SocketChannel</code>,<code>ServerSocketChannel</code>后，会发现都可以通过<code>socket()</code>方法获取我们所熟悉的<code>java.net</code>包下的对等对象<code>DatagramSocket</code>,<code>Socket</code>,<code>ServerSocket</code>。通过通过对等的socket的<code>getChannel()</code>方法我们也可以获取到他所关联的通道。当然并非所有的socket都可以获取的对应的channel，当我们使用传统方式实例化一个Socket对象是，此时调用<code>getChannel()</code>返回将为null。</li><li>通过继承关系我们会发现<code>DatagramChannel</code>和<code>SocketChannel</code>实现定义读和写功能的接口而<code>ServerSocketChannel</code>不实现。<code>ServerSocketChannel</code>负责监听传入的连接和创建新的<code>SocketChannel</code>对象，它本身从不传输数据。</li></ol><h5 id="5-3-1-非阻塞模式"><a href="#5-3-1-非阻塞模式" class="headerlink" title="5.3.1 非阻塞模式"></a>5.3.1 非阻塞模式</h5><p>传统的Java Socket的阻塞曾是Java程序可伸缩性的重要制约之一。非阻塞I/O是许多复杂、高性能的程序构建的基础。要把一个Socket通道置于非阻塞模式，我们要依靠所有Socket通道类的共有超级类<code>SelectableChannel</code>。<br>下面我们对<code>SelectableChannel</code>进行分析。<br>我们本章只看和阻塞相关的方法，剩余的方法将会在降到选择器的时候再进行介绍。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectableChannel</span> <span class="keyword">extends</span> <span class="title">AbstractChannel</span> <span class="keyword">implements</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调整此通道的阻塞模式。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">configureBlocking</span> <span class="params">(<span class="keyword">boolean</span> block)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="comment">// 获取当前block状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isBlocking</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 获取锁对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">blockingLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面我们尝试shi用伪代码来实现修改阻塞模式，判断阻塞默认然后执行对应的操作的行为。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SocketChannel sc = SocketChannel.open();</span><br><span class="line"><span class="comment">// 设置为非阻塞</span></span><br><span class="line">sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// doSomething (cs);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!sc.isBlocking()) &#123;</span><br><span class="line">    <span class="comment">// doSomething (cs);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有的时候我们也需要避免执行部分代码的时候socket通道的阻塞模式被修改，这个时候我们可以使用<code>blockingLock()</code>方法，该方法会返回一个非透明的对象引用。通过对这个对象上锁，防止其他线程对阻塞模式的修改。对于确保在执行代码的关键部分时socket通道的阻塞模式不会改变以及在不影响其他线程的前提下暂时改变阻塞模式来说，这个方法都是非常方便的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Socket socket = <span class="keyword">null</span>;</span><br><span class="line">Object lockObj = serverChannel.blockingLock();</span><br><span class="line"><span class="comment">// 对获取的锁对象加synchronize</span></span><br><span class="line">synchronize (lockObj) &#123;</span><br><span class="line">    <span class="comment">// 当前线程获取了锁，其他线程无法修改阻塞模式</span></span><br><span class="line">    <span class="keyword">boolean</span> prevState = serverChannel.isBlocking();</span><br><span class="line">    serverChannel.configureBlocking (<span class="keyword">false</span>);</span><br><span class="line">    socket = serverChannel.accept();</span><br><span class="line">    serverChannel.configureBlocking(prevState);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前线程释放了锁，其他线程可以修改阻塞模式</span></span><br><span class="line"><span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// doSomethingWithTheSocket(socket);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-ServerSocketChannel"><a href="#5-4-ServerSocketChannel" class="headerlink" title="5.4 ServerSocketChannel"></a>5.4 ServerSocketChannel</h4><h5 id="5-4-1-ServerSocketChannel类方法介绍"><a href="#5-4-1-ServerSocketChannel类方法介绍" class="headerlink" title="5.4.1 ServerSocketChannel类方法介绍"></a>5.4.1 ServerSocketChannel类方法介绍</h5><p>首先我们看一下ServerSocketChannel的完成方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocketChannel</span> <span class="keyword">extends</span> <span class="title">AbstractSelectableChannel</span> <span class="keyword">implements</span> <span class="title">NetworkChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动一个ServerSocket通道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServerSocketChannel <span class="title">open</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SelectorProvider.provider().openServerSocketChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回标识此通道支持的操作的操作集。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">validOps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SelectionKey.OP_ACCEPT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -- 下面是ServerSocket特有的一些方法 --</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将当前通道绑定到一个本地端口地址，backlog是最大连接数，如果backlog参数的值为0或负值，则使用特定于实现的默认值。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ServerSocketChannel <span class="title">bind</span><span class="params">(SocketAddress local)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bind(local, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将当前通道绑定到一个本地端口地址，backlog是最大连接数，如果backlog参数的值为0或负值，则使用特定于实现的默认值。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ServerSocketChannel <span class="title">bind</span><span class="params">(SocketAddress local, <span class="keyword">int</span> backlog)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">ServerSocketChannel <span class="title">setOption</span><span class="params">(SocketOption&lt;T&gt; name, T value)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前通道的对应java.net的socket对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ServerSocket <span class="title">socket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受一个当前通道的Socket连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SocketChannel <span class="title">accept</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回此通道的套接字所绑定的套接字地址。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SocketAddress <span class="title">getLocalAddress</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5-4-2-实现非阻塞的ServerSocketChannel"><a href="#5-4-2-实现非阻塞的ServerSocketChannel" class="headerlink" title="5.4.2 实现非阻塞的ServerSocketChannel"></a>5.4.2 实现非阻塞的ServerSocketChannel</h5><p>当我们打开了一个通道并且完成了端口服务绑定，就可以通过<code>accept()</code>方法来获取一个socket。同时返回的socket对象可以在非阻塞模式下运行。<br>如果ServerSocketChannel是以非阻塞模式被调用，<code>ServerSocketChannel.accept()</code>会立即返回 null。正是这种检查连接而不阻塞的能力实现了可伸缩性并降低了复杂性。可选择性也因此得到实现。我们可以使用一个选择器实例来注册一个<code>ServerSocketChannel</code>对象以实现新连接到达时自动通知的功能。<br>下面我们来尝试一下非阻塞的<code>accept()</code>方法。</p><p>服务端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="keyword">final</span> ServerSocketChannel server = ServerSocketChannel.open()) &#123;</span><br><span class="line">        server.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8080</span>));</span><br><span class="line">        server.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"---- 等待客户端连接, 当前时间: "</span> + format.format(<span class="keyword">new</span> Date()) + <span class="string">" ----\n"</span>);</span><br><span class="line">            <span class="keyword">final</span> SocketChannel socket = server.accept();</span><br><span class="line">            <span class="keyword">if</span> (socket == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"客户端进行连接，客户端信息: "</span> + socket.getRemoteAddress().toString());</span><br><span class="line">                socket.read(buffer);</span><br><span class="line">                buffer.flip();</span><br><span class="line">                System.out.println(<span class="string">"客户端内容为 &gt; "</span> + <span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.remaining(), StandardCharsets.UTF_8));</span><br><span class="line">                buffer.clear();</span><br><span class="line">                <span class="keyword">final</span> String text = <span class="string">"收到您的请求， 服务器信息如下: "</span> + server.getLocalAddress().toString() + <span class="string">", 当前接收时间为: "</span> + format.format(<span class="keyword">new</span> Date());</span><br><span class="line">                System.out.println(<span class="string">"发送消息到客户端，消息内容为 &gt; "</span> + text + <span class="string">"\n"</span>);</span><br><span class="line">                socket.write(ByteBuffer.wrap(text.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"------ 创建第 "</span> + i + <span class="string">" 次连接 ------"</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="keyword">final</span> SocketChannel socket = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8080</span>))) &#123;</span><br><span class="line">            <span class="keyword">final</span> String text = <span class="string">"客户端的第 "</span> + i + <span class="string">" 条消息, 当前发送时间为: "</span> + format.format(<span class="keyword">new</span> Date());</span><br><span class="line">            System.out.print(<span class="string">"发送消息到服务端，消息内容为 &gt; "</span> + text);</span><br><span class="line">            socket.write(ByteBuffer.wrap(text.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">            <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            socket.read(buffer);</span><br><span class="line">            buffer.flip();</span><br><span class="line">            System.out.println(<span class="string">"收到服务端返回 &gt; "</span> + <span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"------ 断开第 "</span> + i + <span class="string">" 次连接 ------\n"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line">---- 等待客户端连接, 当前时间: 2023-01-16 15:47:23 ----</span><br><span class="line"></span><br><span class="line">---- 等待客户端连接, 当前时间: 2023-01-16 15:47:25 ----</span><br><span class="line"></span><br><span class="line">---- 等待客户端连接, 当前时间: 2023-01-16 15:47:27 ----</span><br><span class="line"></span><br><span class="line">客户端进行连接，客户端信息: /127.0.0.1:59505</span><br><span class="line">客户端内容为 &gt; 客户端的第 1 条消息, 当前发送时间为: 2023-01-16 15:47:26</span><br><span class="line">发送消息到客户端，消息内容为 &gt; 收到您的请求， 服务器信息如下: /0:0:0:0:0:0:0:0:8080, 当前接收时间为: 2023-01-16 15:47:27</span><br><span class="line"></span><br><span class="line">---- 等待客户端连接, 当前时间: 2023-01-16 15:47:27 ----</span><br><span class="line"></span><br><span class="line">---- 等待客户端连接, 当前时间: 2023-01-16 15:47:29 ----</span><br><span class="line"></span><br><span class="line">---- 等待客户端连接, 当前时间: 2023-01-16 15:47:31 ----</span><br><span class="line"></span><br><span class="line">客户端进行连接，客户端信息: /127.0.0.1:59524</span><br><span class="line">客户端内容为 &gt; 客户端的第 2 条消息, 当前发送时间为: 2023-01-16 15:47:30</span><br><span class="line">发送消息到客户端，消息内容为 &gt; 收到您的请求， 服务器信息如下: /0:0:0:0:0:0:0:0:8080, 当前接收时间为: 2023-01-16 15:47:31</span><br><span class="line"></span><br><span class="line">---- 等待客户端连接, 当前时间: 2023-01-16 15:47:31 ----</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">------ 创建第 1 次连接 ------</span><br><span class="line">发送消息到服务端，消息内容为 &gt; 客户端的第 1 条消息, 当前发送时间为: 2023-01-16 15:47:26</span><br><span class="line">收到服务端返回 &gt; 收到您的请求， 服务器信息如下: /0:0:0:0:0:0:0:0:8080, 当前接收时间为: 2023-01-16 15:47:27</span><br><span class="line">------ 断开第 1 次连接 ------</span><br><span class="line"></span><br><span class="line">------ 创建第 2 次连接 ------</span><br><span class="line">发送消息到服务端，消息内容为 &gt; 客户端的第 2 条消息, 当前发送时间为: 2023-01-16 15:47:30</span><br><span class="line">收到服务端返回 &gt; 收到您的请求， 服务器信息如下: /0:0:0:0:0:0:0:0:8080, 当前接收时间为: 2023-01-16 15:47:31</span><br><span class="line">------ 断开第 2 次连接 ------</span><br></pre></td></tr></table></figure></p><h4 id="5-5-SocketChannel"><a href="#5-5-SocketChannel" class="headerlink" title="5.5 SocketChannel"></a>5.5 SocketChannel</h4><h5 id="5-5-1-SocketChannel类方法介绍"><a href="#5-5-1-SocketChannel类方法介绍" class="headerlink" title="5.5.1 SocketChannel类方法介绍"></a>5.5.1 SocketChannel类方法介绍</h5><p>首先我们看一下<code>SocketChannel</code>的类方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketChannel</span> <span class="keyword">extends</span> <span class="title">AbstractSelectableChannel</span> <span class="keyword">implements</span> <span class="title">ByteChannel</span>, <span class="title">ScatteringByteChannel</span>, <span class="title">GatheringByteChannel</span>, <span class="title">NetworkChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开一个SocketChannel</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SocketChannel <span class="title">open</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SelectorProvider.provider().openSocketChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开一个SocketChannel并可连接到远程服务器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SocketChannel <span class="title">open</span><span class="params">(SocketAddress remote)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SocketChannel sc = open();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sc.connect(remote);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sc.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable suppressed) &#123;</span><br><span class="line">                x.addSuppressed(suppressed);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">assert</span> sc.isConnected();</span><br><span class="line">        <span class="keyword">return</span> sc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回标识此通道支持的操作的操作集。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">validOps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (SelectionKey.OP_READ</span><br><span class="line">                | SelectionKey.OP_WRITE</span><br><span class="line">                | SelectionKey.OP_CONNECT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -- Socket-specific operations --</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定到本地服务地址</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SocketChannel <span class="title">bind</span><span class="params">(SocketAddress local)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">SocketChannel <span class="title">setOption</span><span class="params">(SocketOption&lt;T&gt; name, T value)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在不关闭通道的情况下关闭读取连接。一旦关闭读取，那么在通道上的进一步读取将返回-1，流结束指示。如果连接的输入端已经关闭，那么调用此方法将不起作用。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SocketChannel <span class="title">shutdownInput</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在不关闭通道的情况下关闭写入连接。一旦关闭用于写入，那么进一步尝试写入通道将抛出ClosedChannelException。如果连接的输出端已经关闭，那么调用此方法将不起作用。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SocketChannel <span class="title">shutdownOutput</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前通道的对应java.net的socket对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Socket <span class="title">socket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 说明该通道的socket是否已连接。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告知该通道上的连接操作是否正在进行。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isConnectionPending</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接到远程的socket地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(SocketAddress remote)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成连接套接字通道的过程。</span></span><br><span class="line"><span class="comment">     * 非阻塞连接操作是通过将套接字通道置于非阻塞模式，然后调用其连接方法来启动的。一旦建立了连接，或者尝试失败，套接字通道将变得可连接，并且可以调用此方法来完成连接序列。</span></span><br><span class="line"><span class="comment">     * 如果连接操作失败，则调用此方法将导致抛出适当的IOException。 </span></span><br><span class="line"><span class="comment">     * 如果该通道已经连接，则该方法不会阻塞，并将立即返回true。</span></span><br><span class="line"><span class="comment">     * 如果此通道处于非阻塞模式，则如果连接过程尚未完成，则此方法将返回false。</span></span><br><span class="line"><span class="comment">     * 如果该通道处于阻塞模式，则该方法将阻塞，直到连接完成或失败，并且总是返回true或抛出描述失败的checked异常。 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">finishConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取远端服务器地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SocketAddress <span class="title">getRemoteAddress</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -- ByteChannel 特有的方法 --</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将通道内的数据读入buffer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer dst)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将通道内的数据读入buffer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">(ByteBuffer[] dsts, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将通道内的数据读入buffer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">(ByteBuffer[] dsts)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> read(dsts, <span class="number">0</span>, dsts.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将buffer的信息写入通道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer src)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将buffer的信息写入通道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">write</span><span class="params">(ByteBuffer[] srcs, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将buffer的信息写入通道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">write</span><span class="params">(ByteBuffer[] srcs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> write(srcs, <span class="number">0</span>, srcs.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取本机地址信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SocketAddress <span class="title">getLocalAddress</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5-5-2-SocketChannel重要方法知识点"><a href="#5-5-2-SocketChannel重要方法知识点" class="headerlink" title="5.5.2 SocketChannel重要方法知识点"></a>5.5.2 SocketChannel重要方法知识点</h5><p>在socketChannel中没有指定超时时间的<code>connect()</code>方法，当<code>connect()</code>方法在非阻塞模式下被调用时<code>SocketChannel</code>提供并发连接:它发起对请求地址的连接并且立即返回值。如果返回值是true，说明连接立即建立了(这可能是本地环回连接);如果连接不能立即建立，<code>connect()</code>方法会返回false且并发地继续连接建立过程。假如某个<code>SocketChannel</code>上当前正由一个并发连接，<code>isConnectPending()</code>方法就会返回true值。</p><p>调用<code>finishConnect()</code>方法来完成连接过程，该方法任何时候都可以安全地进行调用。假如在一个非阻塞模式的<code>SocketChannel</code>对象上调用<code>finishConnect()</code>方法，将可能出现下列情形之一:</p><ul><li><code>connect()</code>方法尚未被调用。那么将产生<code>NoConnectionPendingException</code>异常。 </li><li>连接建立过程正在进行，尚未完成。那么什么都不会发生，<code>finishConnect()</code>方法会立即返回false值。</li><li>在非阻塞模式下调用<code>connect()</code>方法之后，<code>SocketChannel</code>又被切换回了阻塞模式。那么如果有必要的话，调用线程会阻塞直到连接建立完成，<code>finishConnect()</code>方法接着就会返回true值。</li><li>在初次调用connect()或最后一次调用<code>finishConnect()</code>之后，连接建立过程已经完成。那么<code>SocketChannel</code>对象的内部状态将被更新到已连接状态，<code>finishConnect()</code>方法会返回true值，然后<code>SocketChannel</code>对象就可以被用来传输数据了。</li><li>连接已经建立。那么什么都不会发生，<code>finishConnect()</code>方法会返回 true 值。</li></ul><p>当通道处于中间的连接等待(connection-pending)状态时，您只可以调用<code>finishConnect()</code>、<code>isConnectPending()</code>或<code>isConnected()</code>方法。一旦连接建立过程成功完成，<code>isConnected()</code>将返回 true 值。</p><p>下面我们使用一段伪代码来模拟连接<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">InetSocketAddress addr = <span class="keyword">new</span> InetSocketAddress(host, port);</span><br><span class="line">SocketChannel sc = SocketChannel.open( );</span><br><span class="line">sc.configureBlocking (<span class="keyword">false</span>);</span><br><span class="line">sc.connect(addr);</span><br><span class="line"><span class="keyword">while</span> (!sc.finishConnect()) &#123;</span><br><span class="line">    <span class="comment">// 执行一些等待的操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行socketChannel相关的操作</span></span><br><span class="line">sc.close();</span><br></pre></td></tr></table></figure></p><p>如果尝试异步连接失败，那么下次调用<code>finishConnect()</code>方法会产生一个适当的经检查的异常以指出问题的性质。通道然后就会被关闭并将不能被连接或再次使用。</p><p><code>connect()</code>和<code>finishConnect()</code>方法是互相同步的，并且只要其中一个操作正在进行，任何读或写的方法调用都会阻塞，即使是在非阻塞模式下。如果此情形下您有疑问或不能承受一个读或写操作在某个通道上阻塞，请用<code>isConnected()</code>方法测试一下连接状态。</p><h4 id="5-6-DatagramChannel"><a href="#5-6-DatagramChannel" class="headerlink" title="5.6 DatagramChannel"></a>5.6 DatagramChannel</h4><h5 id="5-6-1-DatagramChannel类方法介绍"><a href="#5-6-1-DatagramChannel类方法介绍" class="headerlink" title="5.6.1 DatagramChannel类方法介绍"></a>5.6.1 DatagramChannel类方法介绍</h5><p>SocketChannel模拟的是连接导向的流协议(TCP/IP)，DatagramChannel模拟的是包导向的无连接协议(UDP/IP)<br>首先我们看一下DatagramChannel的类方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DatagramChannel</span> <span class="keyword">extends</span> <span class="title">AbstractSelectableChannel</span> <span class="keyword">implements</span> <span class="title">ByteChannel</span>, <span class="title">ScatteringByteChannel</span>, <span class="title">GatheringByteChannel</span>, <span class="title">MulticastChannel</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 打开一个DatagramChannel并可连接到远程服务器，通过调用系统范围默认SelectorProvider对象的openDatagramChannel方法创建新通道。通道将无法连接。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DatagramChannel <span class="title">open</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SelectorProvider.provider().openDatagramChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开一个DatagramChannel并可连接到远程服务器，family参数用于指定协议族</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DatagramChannel <span class="title">open</span><span class="params">(ProtocolFamily family)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SelectorProvider.provider().openDatagramChannel(family);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回标识此通道支持的操作的操作集。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">validOps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (SelectionKey.OP_READ</span><br><span class="line">                | SelectionKey.OP_WRITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -- Socket-specific operations --</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定到本地服务地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> DatagramChannel <span class="title">bind</span><span class="params">(SocketAddress local)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置配置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; <span class="function">DatagramChannel <span class="title">setOption</span><span class="params">(SocketOption&lt;T&gt; name, T value)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前通道的对应java.net的socket对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> DatagramSocket <span class="title">socket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否连接,数据报socket的无状态性质不需要同远程系统进行对话来建立连接状态。没有实际的连接，只有用来指定允许的远程地址的本地状态信息。</span></span><br><span class="line">    <span class="comment">// DatagramChannel上没有单独的finishConnect()方法。我们可以使用isConnected()方法来测试一个数据报通道的连 接状态。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接远程服务器</span></span><br><span class="line">    <span class="comment">// DatagramChannel对数据报socket的连接语义不同于对流socket的连接语义。</span></span><br><span class="line">    <span class="comment">// 有时候，将数据报对话限制为两方是很可取的。将DatagramChannel置于已连接的状态可以使除了它所“连接”到的地址之外的任何其他源地址的数据报被忽略。</span></span><br><span class="line">    <span class="comment">// 当DatagramChannel已连接时，使用同样的令牌，您不可以发送包到除了指定给connect()方法的目的地址以外的任何其他地址。试图一定要这样做的话会导致一个SecurityException异常。</span></span><br><span class="line">    <span class="comment">// 之后，每次send/receive时就不会再有安全检查了，因为来自或去到任何其他地址的包都是不允许的。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> DatagramChannel <span class="title">connect</span><span class="params">(SocketAddress remote)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开此通道的socket</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> DatagramChannel <span class="title">disconnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取远端服务器地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SocketAddress <span class="title">getRemoteAddress</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过此通道接收数据报</span></span><br><span class="line">    <span class="comment">// 在阻塞模式下，receive()可能无限的休眠直到有包到达。</span></span><br><span class="line">    <span class="comment">// 在非阻塞模式下没有可接收的包则会返回null。如果包内的数据超出缓冲区承受范围，多余的数据则会直接丢弃。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SocketAddress <span class="title">receive</span><span class="params">(ByteBuffer dst)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过此通道发送数据报   src-包含要发送的数据报的缓冲区, target-数据报要发送到的地址。</span></span><br><span class="line">    <span class="comment">// 调用send()方法会从当前的position开始到末尾处结束。在阻塞模式下，调用线程可能会休眠直到数据报被加入传输队列。</span></span><br><span class="line">    <span class="comment">// 在非阻塞情况下，返回值要么是字节缓冲区的字节数，要么是0。</span></span><br><span class="line">    <span class="comment">// 发送数据报是一个全有或者全无的行为。如果传输队列没有足够的空间承载整个数据报，那什么内容都不会被发送。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">send</span><span class="params">(ByteBuffer src, SocketAddress target)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -- ByteChannel operations --</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将通道内的数据读入buffer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer dst)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将通道内的数据读入buffer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">(ByteBuffer[] dsts, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将通道内的数据读入buffer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">(ByteBuffer[] dsts)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> read(dsts, <span class="number">0</span>, dsts.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将buffer的信息写入通道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer src)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将buffer的信息写入通道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">write</span><span class="params">(ByteBuffer[] srcs, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将buffer的信息写入通道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">write</span><span class="params">(ByteBuffer[] srcs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> write(srcs, <span class="number">0</span>, srcs.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取本机地址信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SocketAddress <span class="title">getLocalAddress</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5-6-2-启动DatagramChannel"><a href="#5-6-2-启动DatagramChannel" class="headerlink" title="5.6.2 启动DatagramChannel"></a>5.6.2 启动DatagramChannel</h5><p>DatagramSocketCHannel对象既可以充当服务端也可以充当客户端。如果我们需要创建一个通道来进行监听，那通道必须绑定到一个端口或者地址/端口的组合上。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="keyword">final</span> DatagramChannel datagram = DatagramChannel.open())&#123;</span><br><span class="line">    datagram.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8080</span>));</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5-6-3-数据报与流socket对比"><a href="#5-6-3-数据报与流socket对比" class="headerlink" title="5.6.3 数据报与流socket对比"></a>5.6.3 数据报与流socket对比</h5><p>数据报通道不同于流socket。由于它们的有序而可靠的数据传输特性，流socket非常得有用。大多数网络连接都是流socket(TCP/IP就是一个显著的例子)。但是，像TCP/IP这样面向流的的 协议为了在包导向的互联网基础设施上维护流语义必然会产生巨大的开销，并且流隐喻不能适用所有的情形。数据报的吞吐量要比流协议高很多，并且数据报可以做很多流无法完成的事情。<br>下面列出了一些选择数据报socket而非流socket的理由:</p><ul><li>您的程序可以承受数据丢失或无序的数据。</li><li>您希望“发射后不管”(fire and forget)而不需要知道您发送的包是否已接收。</li><li>数据吞吐量比可靠性更重要。</li><li>您需要同时发送数据给多个接受者(多播或者广播)。</li><li>包隐喻比流隐喻更适合手边的任务。</li></ul><h5 id="5-6-4-DatagramChannel知识点"><a href="#5-6-4-DatagramChannel知识点" class="headerlink" title="5.6.4 DatagramChannel知识点"></a>5.6.4 DatagramChannel知识点</h5><ol><li><code>DatagramChannel</code>是无连接的，每个数据包都是一个自包含的实体，拥有它自己的目的地址。与面向流的socket不同，<code>DatagramChannel</code>可以发送单独的数据到不同的目的地址。同样也可以接受来自任意地址的数据。</li><li>假设一个<code>DatagramChannel</code>没有绑定，他也仍然能接收数据包。因为当底层创建socket的时候会动态生成一个端口号分配给它。当进行数据发送的时候，发送的数据包中会含有<code>DatagramChannel</code>的源地址数据（带端口）。</li><li>数据之间的实际发送和接收是通过<code>send()</code>和<code>receive()</code>方法来实现的。</li><li>如果安装了安全管理器，那么每次调用<code>send()</code>或<code>receive()</code>时安全管理器的<code>checkConnect()</code>方法都会被调用以验证目的地址，除非通道处于已连接的状态。</li><li>数据报协议的不可靠性是固有的，它们不对数据传输做保证。send()方法返回的非零值并不表示数据报到达了目的地，仅代表数据报被成功加到本地网络层的传输队列。</li><li><code>DatagramChannel</code>对象可以任意次数地进行连接或断开连接。每次连接都可以到一个不同的远程地址。调用<code>disconnect()</code>方法可以配置通道，以便它能再次接收来自安全管理器(如果已安装)所允许的任意远程地址的数据或发送数据到这些地址上。</li><li><code>DatagramChannel</code>处于已连接状态时，发送数据将不用提供目的地址而且接收时的源地址也是已知的。这意味着<code>DatagramChannel</code>已连接时可以使用常规的<code>read()</code>和<code>write()</code>方法，包括<code>scatter/gather</code>形式的读写来组合或分拆包的数据:</li></ol><h5 id="5-6-5-DatagramChannel实现时间服务器"><a href="#5-6-5-DatagramChannel实现时间服务器" class="headerlink" title="5.6.5 DatagramChannel实现时间服务器"></a>5.6.5 DatagramChannel实现时间服务器</h5><p>服务端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatagramChannelTimeServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DatagramChannel channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_PORT = <span class="number">37</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DIFF_1900 = <span class="number">2208988800L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatagramChannelTimeServer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.channel = DatagramChannel.open();</span><br><span class="line">        <span class="keyword">this</span>.channel.bind(<span class="keyword">new</span> InetSocketAddress(DEFAULT_PORT));</span><br><span class="line">        System.out.println(<span class="string">"Listening on port "</span> + DEFAULT_PORT + <span class="string">" for time requests"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> DatagramChannelTimeServer server = <span class="keyword">new</span> DatagramChannelTimeServer();</span><br><span class="line">        server.listen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用8字节中的后4字节有两个好处</span></span><br><span class="line"><span class="comment">     * 1. 节省网络传输空间</span></span><br><span class="line"><span class="comment">     * 2. 因为在 2106-02-07 14:28:15 前只需要四字节就能存储当前的时间，只传递4字节也能避免不同操作系统的大端或者小端转换的问题。只要将4位放到对应位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer longBuffer = ByteBuffer.allocate(<span class="number">8</span>);</span><br><span class="line">        longBuffer.order(ByteOrder.BIG_ENDIAN);</span><br><span class="line">        longBuffer.putLong(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        longBuffer.position(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer buffer = longBuffer.slice();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            buffer.clear();</span><br><span class="line">            <span class="keyword">final</span> SocketAddress socketAddress = <span class="keyword">this</span>.channel.receive(buffer);</span><br><span class="line">            <span class="keyword">if</span> (socketAddress == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Time request from "</span> + socketAddress);</span><br><span class="line">            <span class="comment">// 将接受到的数据清空</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">            longBuffer.putLong(<span class="number">0</span>, (System.currentTimeMillis() / <span class="number">1000</span>) + DIFF_1900);</span><br><span class="line">            <span class="keyword">this</span>.channel.send(buffer, socketAddress);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatagramChannelTimeClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; remoteHosts;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DatagramChannel channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_PORT = <span class="number">37</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DIFF_1900 = <span class="number">2208988800L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatagramChannelTimeClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.remoteHosts = Arrays.asList(<span class="string">"localhost"</span>);</span><br><span class="line">        <span class="keyword">this</span>.channel = DatagramChannel.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> DatagramChannelTimeClient service = <span class="keyword">new</span> DatagramChannelTimeClient();</span><br><span class="line">        service.sendRequests();</span><br><span class="line">        service.getPipelines();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRequests</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String remoteHost : <span class="keyword">this</span>.remoteHosts) &#123;</span><br><span class="line">            <span class="comment">// 用于发送一个空数据请求</span></span><br><span class="line">            buffer.clear().flip();</span><br><span class="line">            channel.send(buffer, <span class="keyword">new</span> InetSocketAddress(remoteHost, DEFAULT_PORT));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取返回的响应数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPipelines</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 申请一个8字节的buffer用于存储long类型的数据</span></span><br><span class="line">        <span class="keyword">final</span> ByteBuffer longBuffer = ByteBuffer.allocate(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">// 使用大端模式</span></span><br><span class="line">        longBuffer.order(ByteOrder.BIG_ENDIAN);</span><br><span class="line">        <span class="comment">// 给整个buffer置空</span></span><br><span class="line">        longBuffer.putLong(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 将位置移动到小端的32字节的第一个字节</span></span><br><span class="line">        longBuffer.position(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 切片缓冲;给出低阶32位的视图</span></span><br><span class="line">        <span class="keyword">final</span> ByteBuffer buffer = longBuffer.slice();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expect = remoteHosts.size();</span><br><span class="line">        <span class="keyword">int</span> replies = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            InetSocketAddress sa;</span><br><span class="line">            sa = <span class="keyword">this</span>.receivePacket(channel, buffer);</span><br><span class="line">            buffer.flip();</span><br><span class="line">            replies++;</span><br><span class="line">            <span class="keyword">this</span>.printTime(longBuffer.getLong(<span class="number">0</span>), sa);</span><br><span class="line">            <span class="keyword">if</span> (replies == expect) &#123;</span><br><span class="line">                System.out.println (<span class="string">"All packets answered"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println (<span class="string">"Received "</span> + replies + <span class="string">" of "</span> + expect + <span class="string">" replies"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printTime</span><span class="params">(<span class="keyword">long</span> remote1900, InetSocketAddress sa)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// local time as seconds since Jan 1, 1970</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> local = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">        <span class="comment">// remote time as seconds since Jan 1, 1970</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> remote = remote1900 - DIFF_1900;</span><br><span class="line">        <span class="keyword">final</span> Date remoteDate = <span class="keyword">new</span> Date(remote * <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">final</span> Date localDate = <span class="keyword">new</span> Date(local * <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> skew = remote - local;</span><br><span class="line">        System.out.println(<span class="string">"Reply from "</span> + sa.getHostName() + <span class="string">":"</span> + sa.getPort());</span><br><span class="line">        System.out.println(<span class="string">" there: "</span> + remoteDate);</span><br><span class="line">        System.out.println(<span class="string">" here: "</span> + localDate);</span><br><span class="line">        System.out.print(<span class="string">" skew: "</span>);</span><br><span class="line">        <span class="keyword">if</span> (skew == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"none"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skew &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(skew + <span class="string">" seconds ahead"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println((-skew) + <span class="string">" seconds behind"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> InetSocketAddress <span class="title">receivePacket</span><span class="params">(DatagramChannel channel, ByteBuffer buffer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="comment">// Receive an unsigned 32-bit, big-endian value</span></span><br><span class="line">        <span class="keyword">return</span> ((InetSocketAddress) channel.receive(buffer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="六、管道"><a href="#六、管道" class="headerlink" title="六、管道"></a>六、管道</h3><h4 id="6-1-Pipe类介绍"><a href="#6-1-Pipe类介绍" class="headerlink" title="6.1 Pipe类介绍"></a>6.1 Pipe类介绍</h4><p><code>java.nio.channels</code>包中含有一个名为<code>Pipe</code>(管道)的类。广义上讲，管道就是一个用来在两个实体之间单向传输数据的导管。Unix系统中，管道被用来连接一个进程的输出和另一个进程的输入。<code>Pipe</code>类实现一 个管道范例，不过它所创建的管道是进程内(在Java虚拟机进程内部)而非进程间使用的。<br>我们看一下Pipe类的核心方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pipe</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 作为数据输入源的可读通道</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceChannel</span> <span class="keyword">extends</span> <span class="title">AbstractSelectableChannel</span> <span class="keyword">implements</span> <span class="title">ReadableByteChannel</span>, <span class="title">ScatteringByteChannel</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">SourceChannel</span><span class="params">(SelectorProvider provider)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(provider);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回标识此通道支持的操作的操作集。管道源通道只支持读取，因此该方法返回SelectionKey.OP_READ。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">validOps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> SelectionKey.OP_READ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 作为数据输出源的可写通道</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkChannel</span> <span class="keyword">extends</span> <span class="title">AbstractSelectableChannel</span> <span class="keyword">implements</span> <span class="title">WritableByteChannel</span>, <span class="title">GatheringByteChannel</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">SinkChannel</span><span class="params">(SelectorProvider provider)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(provider);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回标识此通道支持的操作的操作集。管道源通道只支持写入，因此该方法返回SelectionKey.OP_WRITE。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">validOps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> SelectionKey.OP_WRITE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Pipe</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取输入源通道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SourceChannel <span class="title">source</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取输出源通道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SinkChannel <span class="title">sink</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个管道</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pipe <span class="title">open</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SelectorProvider.provider().openPipe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下图描述了管道的读写关系，可以往<code>sinkChannel</code>中写入数据，然后通过<code>sourceChannel</code>读取写入的数据。这两个通道实例是在<code>Pipe</code>对象创建的同时被创建的，可以通过在 Pipe对象上分别调用<code>source()</code>和<code>sink()</code>方法来取回。<br>请注意，<code>SinkChannel</code>和<code>SourceChannel</code>都由<code>AbstractSelectableChannel</code>引申而来(所以也是从<code>SelectableChannel</code>引申而来)，这意味着<code>pipe</code>通道可以同选择器一起使用。<br>管路所能承载的数据量是依赖实现的(implementation-dependent)。唯一可保证的是写到<code>SinkChannel</code>中的字节都能按照同样的顺序在<code>SourceChannel</code>上重现。</p><p><img src="/images/Java-NIO-通道相关概念及源码梳理/145F6B47-0548-42C3-B6E3-7647DB4904B0_4_5005_c.jpeg" alt="img"></p><h4 id="6-2-使用Pipe类实现通道输入输出"><a href="#6-2-使用Pipe类实现通道输入输出" class="headerlink" title="6.2 使用Pipe类实现通道输入输出"></a>6.2 使用Pipe类实现通道输入输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PipeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> WritableByteChannel out = Channels.newChannel(System.out);</span><br><span class="line">        <span class="keyword">final</span> Pipe pipe = Pipe.open();</span><br><span class="line">        <span class="keyword">final</span> Worker worker = <span class="keyword">new</span> Worker(pipe.sink());</span><br><span class="line">        <span class="comment">// 启动线程往sinkChannel中写入数据</span></span><br><span class="line">        worker.start();</span><br><span class="line">        ReadableByteChannel workerChannel = pipe.source();</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">while</span> (workerChannel.read(buffer) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            out.write(buffer);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] products = &#123;</span><br><span class="line">                <span class="string">"No good deed goes unpunished"</span>,</span><br><span class="line">                <span class="string">"To be, or what?"</span>,</span><br><span class="line">                <span class="string">"No matter where you go, there you are"</span>,</span><br><span class="line">                <span class="string">"Just say \"Yo\""</span>,</span><br><span class="line">                <span class="string">"My karma ran over my dogma"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WritableByteChannel channel;</span><br><span class="line"></span><br><span class="line">        Worker(WritableByteChannel channel) &#123;</span><br><span class="line">            <span class="keyword">this</span>.channel = channel;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> product = rand.nextInt(products.length);</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                    buffer.put(products[product].getBytes());</span><br><span class="line">                    buffer.put(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="comment">// 写入可能不会一次性成功，所以while循环直至全部成功</span></span><br><span class="line">                    <span class="keyword">while</span> (channel.write(buffer) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// empty</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.channel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、通道工具类"><a href="#七、通道工具类" class="headerlink" title="七、通道工具类"></a>七、通道工具类</h3><table><thead><tr><th>方法</th><th>返回</th><th>描述</th></tr></thead><tbody><tr><td>newChannel(InputStream in)</td><td>ReadableByteChannel</td><td>返回一个将从给定的输入流读取数据的通道。</td></tr><tr><td>newChannel(OutputStream out)</td><td>WritableByteChannel</td><td>返回一个将向给定的输出流写入数据的通道。</td></tr><tr><td>newInputStream(ReadableByteChannel ch)</td><td>InputStream</td><td>返回一个将从给定的通道读取字节的流。</td></tr><tr><td>newOutputStream(WritableByteChannel ch)</td><td>OutputStream</td><td>返回一个将向给定的通道写入字节的流。</td></tr><tr><td>newReader(ReadableByteChannel ch, CharsetDecoder dec, int minBufferCap)</td><td>Reader</td><td>返回一个reader，它将从给定的通道读取字节并依据提供的CharsetDecoder对读取到的字节进行解码。</td></tr><tr><td>newReader(ReadableByteChannel ch, String csName)</td><td>Reader</td><td>返回一个reader，它将从给定的 通道读取字节并依据提供的字符集名称将读取到的字节解码成字符。</td></tr><tr><td>newWriter(WritableByteChannel ch, CharsetEncoder dec, int minBufferCap)</td><td>Writer</td><td>返回一个writer，它将使用提供的CharsetEncoder对象对字符编码并写到给定的通道中。</td></tr><tr><td>newWriter(WritableByteChannel ch, String csName)</td><td>Writer</td><td>返回一个writer它将依据提供的字符集名称对字符编码并写到给定的通道中。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-NIO-缓冲区相关概念及源码梳理</title>
      <link href="/2023/01/07/Java-NIO-%E7%BC%93%E5%86%B2%E5%8C%BA%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E6%A2%B3%E7%90%86/"/>
      <url>/2023/01/07/Java-NIO-%E7%BC%93%E5%86%B2%E5%8C%BA%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%BA%90%E7%A0%81%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、缓冲区基础"><a href="#一、缓冲区基础" class="headerlink" title="一、缓冲区基础"></a>一、缓冲区基础</h2><h3 id="1-常见概念"><a href="#1-常见概念" class="headerlink" title="1. 常见概念"></a>1. 常见概念</h3><ol><li><p>容量(Capacity)<br>缓冲区能够容纳的数据元素的最大数量。这一容量在缓冲区创建时被设定，并且永远不能被改变。</p></li><li><p>上界(Limit)<br>缓冲区的第-一个不能被读或写的元素。或者说，缓冲区中现存元素的计数。</p></li><li><p>位置(Position)<br>下一个要被读或写的元素的索引。位置会自动由相应的get()和put()函数更新。</p></li><li><p>标记(Mark)<br>一个备忘位置。调用mark()来设定mark = postion。 调用reset()设定position = mark。标记在设定前是未定义的(undefined)。</p></li></ol><p>这四个属性之间总是遵循以下关系:0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity</p><h3 id="2-Buffer类常见API"><a href="#2-Buffer类常见API" class="headerlink" title="2. Buffer类常见API"></a>2. Buffer类常见API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.nio;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Buffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">position</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">position</span> <span class="params">(<span class="keyword">int</span> newPosition)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">limit</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">limit</span> <span class="params">(<span class="keyword">int</span> newLimit)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">mark</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">reset</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">rewind</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">remaining</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasRemaining</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">( )</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见常见的例如clear() 函数返回不是void而是返回this，也就是对象本身的引用。这种设计就允许级联调用的类设计方法。<br>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buffer.mark( );</span><br><span class="line">buffer.position(<span class="number">5</span>);</span><br><span class="line">buffer.reset( );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写为:</span></span><br><span class="line">buffer.mark().position(<span class="number">5</span>).reset( );</span><br></pre></td></tr></table></figure></p><h3 id="3-存取"><a href="#3-存取" class="headerlink" title="3. 存取"></a>3. 存取</h3><p>为什么Buffer对象中没有定义get以及put函数？</p><blockquote><p>Buffer API并没有包括get()或put()函数。每一个Buffer类都有这两个函数，但它们所采用的参数类型，以及它们返回的数据类型，对每个子类来说都是唯一的，所以它们不能在顶层 Buffer 类中被抽象地声明。它们的定义必须被特定类型的子类所遵从。</p></blockquote><p>执行get和put的注意事项</p><blockquote><p>对于put()，如果运算会导致位置超出上界，就会抛出<code>BufferOverflowException</code>异常。对于get()，如果位置不小于上界，就会抛出<code>BufferUnderflowException</code>异常。绝对存取不会影响缓冲区的位置属性，但是如果您所提供的索引超出范围(负数或不小于上界)，也将抛出<code>IndexOutOfBoundsException</code>异常。</p></blockquote><h3 id="4-写入"><a href="#4-写入" class="headerlink" title="4. 写入"></a>4. 写入</h3><p>写入到具体位置可以使用<code>buffer.put(0,(byte)&#39;M&#39;)</code>这种方式接入。而<code>buffer.put((byte)&#39;w&#39;)</code>方法不会收到影响，他总是在最后一个位置上写入数据。</p><h3 id="5-翻转"><a href="#5-翻转" class="headerlink" title="5. 翻转"></a>5. 翻转</h3><p>对于翻转我们可以使用<code>buffer.limit(buffer.position()).position(0);</code>来进行翻转，<br>他执行的逻辑就是先将buffer的上界设置为当前buffer的容量，同时将标记重置。然后将当前读/写的位置重置为起始位置。</p><p>其中<code>buffer.limit(int)</code>方法代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Sets this buffer's limit.  If the position is larger than the new limit</span></span><br><span class="line"><span class="comment">  * then it is set to the new limit.  If the mark is defined and larger than</span></span><br><span class="line"><span class="comment">  * the new limit then it is discarded.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  newLimit</span></span><br><span class="line"><span class="comment">  *         The new limit value; must be non-negative</span></span><br><span class="line"><span class="comment">  *         and no larger than this buffer's capacity</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment">  *          If the preconditions on &lt;tt&gt;newLimit&lt;/tt&gt; do not hold</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">limit</span><span class="params">(<span class="keyword">int</span> newLimit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((newLimit &gt; capacity) || (newLimit &lt; <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    limit = newLimit;</span><br><span class="line">    <span class="keyword">if</span> (position &gt; limit) position = limit;</span><br><span class="line">    <span class="keyword">if</span> (mark &gt; limit) mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>buffer.position()</code>代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns this buffer's position.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The position of this buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">position</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>buffer.position(int)</code>代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets this buffer's position.  If the mark is defined and larger than the</span></span><br><span class="line"><span class="comment"> * new position then it is discarded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  newPosition</span></span><br><span class="line"><span class="comment"> *         The new position value; must be non-negative</span></span><br><span class="line"><span class="comment"> *         and no larger than the current limit</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          If the preconditions on &lt;tt&gt;newPosition&lt;/tt&gt; do not hold</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">position</span><span class="params">(<span class="keyword">int</span> newPosition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((newPosition &gt; limit) || (newPosition &lt; <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    position = newPosition;</span><br><span class="line">    <span class="keyword">if</span> (mark &gt; position) mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于这种翻转需求十分常见，所以Buffer类为我们提供了一个便利的翻转函数<code>Buffer.flip()</code><br>代码如下。将上界设置为当前读/写位置，读/写位置置0，标志位重置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flips this buffer.  The limit is set to the current position and then</span></span><br><span class="line"><span class="comment"> * the position is set to zero.  If the mark is defined then it is</span></span><br><span class="line"><span class="comment"> * discarded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; After a sequence of channel-read or &lt;i&gt;put&lt;/i&gt; operations, invoke</span></span><br><span class="line"><span class="comment"> * this method to prepare for a sequence of channel-write or relative</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;get&lt;/i&gt; operations.  For example:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * buf.put(magic);    // Prepend header</span></span><br><span class="line"><span class="comment"> * in.read(buf);      // Read data into rest of buffer</span></span><br><span class="line"><span class="comment"> * buf.flip();        // Flip buffer</span></span><br><span class="line"><span class="comment"> * out.write(buf);    // Write header + data to channel&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; This method is often used in conjunction with the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.nio.ByteBuffer#compact compact&#125; method when transferring data from</span></span><br><span class="line"><span class="comment"> * one place to another.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    limit = position;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了翻转函数flip()，还有一个常用函数，用来初始化读/写位置<code>Buffer.rewind()</code><br>代码如下，他将当前读/写位置置0，将标记位重置。通过rewind()我们可以对已经读过得缓冲区数据进行重读<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Rewinds this buffer.  The position is set to zero and the mark is</span></span><br><span class="line"><span class="comment"> * discarded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Invoke this method before a sequence of channel-write or &lt;i&gt;get&lt;/i&gt;</span></span><br><span class="line"><span class="comment"> * operations, assuming that the limit has already been set</span></span><br><span class="line"><span class="comment"> * appropriately.  For example:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * out.write(buf);    // Write remaining data</span></span><br><span class="line"><span class="comment"> * buf.rewind();      // Rewind buffer</span></span><br><span class="line"><span class="comment"> * buf.get(array);    // Copy data into array&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">rewind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-释放"><a href="#6-释放" class="headerlink" title="6. 释放"></a>6. 释放</h3><p>当我们接收到一个已经被填满的缓冲区的时候，我们可以通过通道的read()操作完成，当然我们需要在调用get()前对这个缓冲区进行翻转之后。<br>我们可以根据<code>hasRemaining()</code>方法来判断当前位置是否超出缓冲区的上界。我们可以通过下面这种方式来轮询获取缓冲区中的数据(在后续中，我们将学到进行批量传输的更高效的方法)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; buffer.hasRemaining(), i++) &#123;</span><br><span class="line">    myByteArray[i] = buffer.get(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>作为选择，<code>remaining()</code>函数将告知您从当前位置到上界还剩余的元素数目。您也可以通过下面的循环来释放缓冲区。<br>使用下面的好处就是不需要在每次循环的时候都进行重复检查。但是坏处就是这个无法在多线程的情况下同时从缓冲区中获取数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = buffer.remaining( );</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count, i++) &#123;</span><br><span class="line">    myByteArray[i] = buffer.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述两个函数的代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the number of elements between the current position and the</span></span><br><span class="line"><span class="comment"> * limit.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The number of elements remaining in this buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">remaining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> limit - position;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tells whether there are any elements between the current position and</span></span><br><span class="line"><span class="comment"> * the limit.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &lt;tt&gt;true&lt;/tt&gt; if, and only if, there is at least one element</span></span><br><span class="line"><span class="comment"> *          remaining in this buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasRemaining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> position &lt; limit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在缓冲区中的对象完成读取释放后，他又可以进行重新使用。我们可以调用clear()函数将缓冲区重置为空的状态。<br>当然这个所谓的重置并不是真的将缓冲区中的数据进行删除，而是将数据的上界设置为容量值，同时将位置置0。<br>实际代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Clears this buffer.  The position is set to zero, the limit is set to</span></span><br><span class="line"><span class="comment"> * the capacity, and the mark is discarded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Invoke this method before using a sequence of channel-read or</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;put&lt;/i&gt; operations to fill this buffer.  For example:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * buf.clear();     // Prepare buffer for reading</span></span><br><span class="line"><span class="comment"> * in.read(buf);    // Read data&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; This method does not actually erase the data in the buffer, but it</span></span><br><span class="line"><span class="comment"> * is named as if it did because it will most often be used in situations</span></span><br><span class="line"><span class="comment"> * in which that might as well be the case. &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    limit = capacity;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是一段实例代码，演示如果写入以及释放缓冲区<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.CharBuffer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferFillDrain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] strings = &#123;</span><br><span class="line">            <span class="string">"A random string value"</span>,</span><br><span class="line">            <span class="string">"The product of an infinite number of monkeys"</span>,</span><br><span class="line">            <span class="string">"Hey hey we're the Monkees"</span>,</span><br><span class="line">            <span class="string">"Opening act for the Monkees: Jimi Hendrix"</span>,</span><br><span class="line">            <span class="string">"'Scuse me while I kiss this fly"</span>,</span><br><span class="line">            <span class="string">"Help Me! Help Me!"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CharBuffer buffer = CharBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">while</span> (fillBuffer(buffer)) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            drainBuffer(buffer);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drainBuffer</span><span class="params">(CharBuffer charBuffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (charBuffer.hasRemaining()) &#123;</span><br><span class="line">            System.out.print(charBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fillBuffer</span><span class="params">(CharBuffer charBuffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= strings.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String string = strings[index++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; string.length(); i++) &#123;</span><br><span class="line">            charBuffer.put(string.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-压缩"><a href="#7-压缩" class="headerlink" title="7. 压缩"></a>7. 压缩</h3><p>当我们希望释放缓冲区的部分数据，然后保留剩余的数据继续进行填充。为了实现这一点，我们需要将未读的数据进行迁移，使未读的第一个数据索引为0。对此，Buffer类为我们提供了<code>compact()</code>函数来实现这一功能，尽管重复这样做会效率低下，但是相较于我们自己进行<code>get()</code>和<code>put()</code>函数来说，使用提供的<code>compact()</code>会高效得多。所以当需要的时候，建议使用<code>compact()</code>。</p><p>执行compact前<br><img src="/images/Java-NIO-缓冲区相关概念及源码梳理/B207A94E-08FF-45E5-B883-DA7AD86D4D86_4_5005_c.jpeg" alt="img"></p><p>执行compact后<br><img src="/images/Java-NIO-缓冲区相关概念及源码梳理/CC579E9E-23DC-466E-83E2-E051FE3E5AF4_4_5005_c.jpeg" alt="img"></p><p>我们可以发现执行方法会</p><ol><li>将2-5的元素复制到0-3的位置上，同时4-5不会有变动。</li><li>将postition移到4的位置也就是说，缓冲区现在被定位在缓冲区中最后一个“存活”元素后插入数据的位置。</li><li>将缓冲区的上界改为缓冲区的容量大小。</li></ol><p>下面我们已经<code>HeapByteBuffer</code>类举例，看看如果实现一个<code>compact()</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">compact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 使用数组拷贝将未读数据拷贝</span></span><br><span class="line">    System.arraycopy(hb, ix(position()), hb, ix(<span class="number">0</span>), remaining());</span><br><span class="line">    <span class="comment">// 2. 将缓冲区的位置放到缓冲区存活的数据后的数据的位置，也就是`limit - position`</span></span><br><span class="line">    <span class="comment">// remaining() 返回的值为limit - position</span></span><br><span class="line">    position(remaining());</span><br><span class="line">    <span class="comment">// 3. 将上界大小设置为缓冲区的容量大小</span></span><br><span class="line">    limit(capacity());</span><br><span class="line">    <span class="comment">// 重置mark为-1</span></span><br><span class="line">    discardMark();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="8-标记"><a href="#8-标记" class="headerlink" title="8. 标记"></a>8. 标记</h3><p>标记的作用是使缓冲区能够记住一个位置并在之后将其返回。<br>缓冲区的标记在调用mark()函数之前是未定义的。调用后会将当前位置赋值给标记。<br>函数代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets this buffer's mark at its position.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">mark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mark = position;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而reset()方法则会将当前位置移动到标记值的位置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resets this buffer's position to the previously-marked position.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Invoking this method neither changes nor discards the mark's</span></span><br><span class="line"><span class="comment"> * value. &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  InvalidMarkException</span></span><br><span class="line"><span class="comment"> *          If the mark has not been set</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此处定义临时变量个人认为主要目的是防止多个线程同时执行时导致的异常</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 如果不用一个局部变量m存储，那就会存在以下这种可能性</span></span><br><span class="line"><span class="comment">     * 1. A线程判断 mark&gt;=0，参数合法</span></span><br><span class="line"><span class="comment">     * 2. B线程执行了类似于rewind()，clear()，flip()等可以将mark重置为-1的方法</span></span><br><span class="line"><span class="comment">     * 3. A线程将mark赋值给position</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 但是如果使用了局部变量m就可以避免由于多个线程修改导致的问题。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> m = mark;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidMarkException();</span><br><span class="line">    position = m;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果新设定的值比当前的标记小，调用<code>limit(int)</code>或<code>position(int)</code>带有索引参数的版本会抛弃标记。<br>从代码中可以看到这两个函数在执行的时候都会对remark进行判断，如果不合法则置为-1<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets this buffer's position.  If the mark is defined and larger than the</span></span><br><span class="line"><span class="comment"> * new position then it is discarded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  newPosition</span></span><br><span class="line"><span class="comment"> *         The new position value; must be non-negative</span></span><br><span class="line"><span class="comment"> *         and no larger than the current limit</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          If the preconditions on &lt;tt&gt;newPosition&lt;/tt&gt; do not hold</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">position</span><span class="params">(<span class="keyword">int</span> newPosition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((newPosition &gt; limit) || (newPosition &lt; <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    position = newPosition;</span><br><span class="line">    <span class="keyword">if</span> (mark &gt; position) mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets this buffer's limit.  If the position is larger than the new limit</span></span><br><span class="line"><span class="comment"> * then it is set to the new limit.  If the mark is defined and larger than</span></span><br><span class="line"><span class="comment"> * the new limit then it is discarded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  newLimit</span></span><br><span class="line"><span class="comment"> *         The new limit value; must be non-negative</span></span><br><span class="line"><span class="comment"> *         and no larger than this buffer's capacity</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          If the preconditions on &lt;tt&gt;newLimit&lt;/tt&gt; do not hold</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">limit</span><span class="params">(<span class="keyword">int</span> newLimit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((newLimit &gt; capacity) || (newLimit &lt; <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    limit = newLimit;</span><br><span class="line">    <span class="keyword">if</span> (position &gt; limit) position = limit;</span><br><span class="line">    <span class="keyword">if</span> (mark &gt; limit) mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设我们执行下面这个函数，他会做什么操作？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer.position(<span class="number">2</span>).mark().position(<span class="number">4</span>);</span><br></pre></td></tr></table></figure></p><ol><li>将缓冲区的位置置为2</li><li>将缓冲区的标记赋值为位置的值2</li><li>将缓冲区的位置置为4</li></ol><p>最终结果如下图<br><img src="/images/Java-NIO-缓冲区相关概念及源码梳理/5FC42548-560C-4B9F-AD13-52F850F724F1_4_5005_c.jpeg" alt="img"></p><h3 id="9-比较"><a href="#9-比较" class="headerlink" title="9. 比较"></a>9. 比较</h3><p>以<code>ByteBuffer</code>类为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuffer</span> <span class="keyword">extends</span> <span class="title">Buffer</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ByteBuffer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>他继承了Comparable接口，我们可以通过实现Comparable接口的compareTo()方法来实现两个Buffer的对比。<br>如果每个缓冲区中剩余的内容相同，那么equals()函数将返回true，否则返回false。因为这个测试是用于严格的相等而且是可换向的。前面的程序清单中的缓冲区名称可以颠倒，并会产生相同的结果。<br>与equals()相似，compareTo()不允许不同对象间进行比较。但compareTo()更为严格:如果您传递一个类型错误的对象，它会抛出ClassCastException异常，但equals()只会返回 false。<br>两个缓冲区被认为相等的充要条件是:</p><ul><li>两个对象类型相同。包含不同数据类型的buffer永远不会相等，而且buffer绝不会等于非buffer对象。</li><li>两个对象都剩余同样数量的元素。Buffer的容量不需要相同，而且缓冲区中剩余数据的索引也不必相同。但每个缓冲区中剩余元素的数目(也就是从位置到上界的元素数量)必须相同。</li><li>在每个缓冲区中应被Get()函数返回的剩余数据元素序列必须一致。<br>如果不满足以上任意条件，就会返回false。</li></ul><p>两个被认为是相等的缓冲区<br>可以看到在position到limit中的数据时一致的（limit位是还未存储的数据位）所以我们可以认为这两个Buffer相同。<br><img src="/images/Java-NIO-缓冲区相关概念及源码梳理/F821CD63-1ED7-473E-AEBA-F1F8D80073D2_4_5005_c.jpeg" alt="img"></p><p>两个被认为不相等的缓冲区<br>虽然缓冲区中所存的数据是完全一致的，但是由于position到limit中的数据不一致，所以两个缓冲区不相等。<br><img src="/images/Java-NIO-缓冲区相关概念及源码梳理/604B430D-5619-401D-B352-8125DA7F290C_4_5005_c.jpeg" alt="img"></p><h3 id="10-批量移动"><a href="#10-批量移动" class="headerlink" title="10. 批量移动"></a>10. 批量移动</h3><p>为了高效传输数据，Buffer类中提供了许多向缓冲区内外批量移动元素的函数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuffer</span> <span class="keyword">extends</span> <span class="title">Buffer</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ByteBuffer</span>&gt; </span>&#123;</span><br><span class="line">      <span class="comment">// This is a partial API listing</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">get</span> <span class="params">(<span class="keyword">char</span> [] dst)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">public</span> ByteBuffer <span class="title">get</span> <span class="params">(<span class="keyword">char</span> [] dst, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">public</span> <span class="keyword">final</span> ByteBuffer <span class="title">put</span> <span class="params">(<span class="keyword">char</span>[] src)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">public</span> ByteBuffer <span class="title">put</span> <span class="params">(<span class="keyword">char</span> [] src, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">public</span> ByteBuffer <span class="title">put</span> <span class="params">(ByteBuffer src)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>第一种形式的<code>get(char[] dst)</code>只是将缓冲区中的数据复制到传入的数组中。<br>代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Relative bulk &lt;i&gt;get&lt;/i&gt; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; This method transfers bytes from this buffer into the given</span></span><br><span class="line"><span class="comment"> * destination array.  An invocation of this method of the form</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;src.get(a)&lt;/tt&gt; behaves in exactly the same way as the invocation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     src.get(a, 0, a.length) &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   dst</span></span><br><span class="line"><span class="comment"> *          The destination array</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  BufferUnderflowException</span></span><br><span class="line"><span class="comment"> *          If there are fewer than &lt;tt&gt;length&lt;/tt&gt; bytes</span></span><br><span class="line"><span class="comment"> *          remaining in this buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">get</span><span class="params">(<span class="keyword">byte</span>[] dst)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 底层实际的调用方法就是第二种get函数</span></span><br><span class="line">    <span class="keyword">return</span> get(dst, <span class="number">0</span>, dst.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种形式<code>get (char [] dst, int offset, int length)</code>使用offset和length参数来指定目标数组的子区间。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Relative bulk &lt;i&gt;get&lt;/i&gt; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; This method transfers bytes from this buffer into the given</span></span><br><span class="line"><span class="comment"> * destination array.  If there are fewer bytes remaining in the</span></span><br><span class="line"><span class="comment"> * buffer than are required to satisfy the request, that is, if</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;length&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;gt;&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;remaining()&lt;/tt&gt;, then no</span></span><br><span class="line"><span class="comment"> * bytes are transferred and a &#123;<span class="doctag">@link</span> BufferUnderflowException&#125; is</span></span><br><span class="line"><span class="comment"> * thrown.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Otherwise, this method copies &lt;tt&gt;length&lt;/tt&gt; bytes from this</span></span><br><span class="line"><span class="comment"> * buffer into the given array, starting at the current position of this</span></span><br><span class="line"><span class="comment"> * buffer and at the given offset in the array.  The position of this</span></span><br><span class="line"><span class="comment"> * buffer is then incremented by &lt;tt&gt;length&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; In other words, an invocation of this method of the form</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;src.get(dst,&amp;nbsp;off,&amp;nbsp;len)&lt;/tt&gt; has exactly the same effect as</span></span><br><span class="line"><span class="comment"> * the loop</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> *     for (int i = off; i &lt; off + len; i++)</span></span><br><span class="line"><span class="comment"> *         dst[i] = src.get():</span></span><br><span class="line"><span class="comment"> * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * except that it first checks that there are sufficient bytes in</span></span><br><span class="line"><span class="comment"> * this buffer and it is potentially much more efficient.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  dst</span></span><br><span class="line"><span class="comment"> *         The array into which bytes are to be written</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  offset</span></span><br><span class="line"><span class="comment"> *         The offset within the array of the first byte to be</span></span><br><span class="line"><span class="comment"> *         written; must be non-negative and no larger than</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;dst.length&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  length</span></span><br><span class="line"><span class="comment"> *         The maximum number of bytes to be written to the given</span></span><br><span class="line"><span class="comment"> *         array; must be non-negative and no larger than</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;dst.length - offset&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  BufferUnderflowException</span></span><br><span class="line"><span class="comment"> *          If there are fewer than &lt;tt&gt;length&lt;/tt&gt; bytes</span></span><br><span class="line"><span class="comment"> *          remaining in this buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment"> *          If the preconditions on the &lt;tt&gt;offset&lt;/tt&gt; and &lt;tt&gt;length&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> *          parameters do not hold</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">get</span><span class="params">(<span class="keyword">byte</span>[] dst, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    checkBounds(offset, length, dst.length);</span><br><span class="line">    <span class="comment">// 判断获取的数据长度是否大于剩余的数据元素长度</span></span><br><span class="line">    <span class="keyword">if</span> (length &gt; remaining())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BufferUnderflowException();</span><br><span class="line">    <span class="keyword">int</span> end = offset + length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; end; i++)</span><br><span class="line">        dst[i] = get();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以我们为了避免获取的数据元素大于剩余的元素的长度可以使用下面这种方式来解决。先获取剩余数据的长度然后在批量移动。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> [] bigArray = <span class="keyword">new</span> <span class="keyword">char</span> [<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get count of chars remaining in the buffer </span></span><br><span class="line"><span class="keyword">int</span> length = buffer.remaining( );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Buffer is known to contain &lt; 1,000 chars</span></span><br><span class="line">buffer.get(bigArrray, <span class="number">0</span>, length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do something useful with the data</span></span><br><span class="line">processData (bigArray, length);</span><br></pre></td></tr></table></figure></p><p>如果缓冲区存有比数组能容纳的数量更多的数据，您可以重复利用如下文所示的程序块进行读取:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] smallArray = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span>(buffer.hasRemaining()) &#123;</span><br><span class="line">    <span class="keyword">int</span> length = Math.min(buffer.remaining(), smallArray.length);</span><br><span class="line">    buffer.get(smallArray, <span class="number">0</span>, length);</span><br><span class="line">    processData(smallArray, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>批量移入的逻辑与批量移出类似<br>第一种方式<code>put(char[] src)</code>实际代码如下，底层实际调用的就是第二种put<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Relative bulk &lt;i&gt;put&lt;/i&gt; method&amp;nbsp;&amp;nbsp;&lt;i&gt;(optional operation)&lt;/i&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; This method transfers the entire content of the given source</span></span><br><span class="line"><span class="comment"> * byte array into this buffer.  An invocation of this method of the</span></span><br><span class="line"><span class="comment"> * form &lt;tt&gt;dst.put(a)&lt;/tt&gt; behaves in exactly the same way as the</span></span><br><span class="line"><span class="comment"> * invocation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     dst.put(a, 0, a.length) &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   src</span></span><br><span class="line"><span class="comment"> *          The source array</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  BufferOverflowException</span></span><br><span class="line"><span class="comment"> *          If there is insufficient space in this buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  ReadOnlyBufferException</span></span><br><span class="line"><span class="comment"> *          If this buffer is read-only</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span>[] src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> put(src, <span class="number">0</span>, src.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种方式<code>put (char [] src, int offset, int length)</code>，实际代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Relative bulk &lt;i&gt;put&lt;/i&gt; method&amp;nbsp;&amp;nbsp;&lt;i&gt;(optional operation)&lt;/i&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; This method transfers bytes into this buffer from the given</span></span><br><span class="line"><span class="comment"> * source array.  If there are more bytes to be copied from the array</span></span><br><span class="line"><span class="comment"> * than remain in this buffer, that is, if</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;length&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;gt;&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;remaining()&lt;/tt&gt;, then no</span></span><br><span class="line"><span class="comment"> * bytes are transferred and a &#123;<span class="doctag">@link</span> BufferOverflowException&#125; is</span></span><br><span class="line"><span class="comment"> * thrown.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Otherwise, this method copies &lt;tt&gt;length&lt;/tt&gt; bytes from the</span></span><br><span class="line"><span class="comment"> * given array into this buffer, starting at the given offset in the array</span></span><br><span class="line"><span class="comment"> * and at the current position of this buffer.  The position of this buffer</span></span><br><span class="line"><span class="comment"> * is then incremented by &lt;tt&gt;length&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; In other words, an invocation of this method of the form</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;dst.put(src,&amp;nbsp;off,&amp;nbsp;len)&lt;/tt&gt; has exactly the same effect as</span></span><br><span class="line"><span class="comment"> * the loop</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> *     for (int i = off; i &lt; off + len; i++)</span></span><br><span class="line"><span class="comment"> *         dst.put(a[i]);</span></span><br><span class="line"><span class="comment"> * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * except that it first checks that there is sufficient space in this</span></span><br><span class="line"><span class="comment"> * buffer and it is potentially much more efficient.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  src</span></span><br><span class="line"><span class="comment"> *         The array from which bytes are to be read</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  offset</span></span><br><span class="line"><span class="comment"> *         The offset within the array of the first byte to be read;</span></span><br><span class="line"><span class="comment"> *         must be non-negative and no larger than &lt;tt&gt;array.length&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  length</span></span><br><span class="line"><span class="comment"> *         The number of bytes to be read from the given array;</span></span><br><span class="line"><span class="comment"> *         must be non-negative and no larger than</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;array.length - offset&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  This buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  BufferOverflowException</span></span><br><span class="line"><span class="comment"> *          If there is insufficient space in this buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment"> *          If the preconditions on the &lt;tt&gt;offset&lt;/tt&gt; and &lt;tt&gt;length&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> *          parameters do not hold</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  ReadOnlyBufferException</span></span><br><span class="line"><span class="comment"> *          If this buffer is read-only</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span>[] src, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    checkBounds(offset, length, src.length);</span><br><span class="line">    <span class="keyword">if</span> (length &gt; remaining())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BufferOverflowException();</span><br><span class="line">    <span class="keyword">int</span> end = offset + length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; end; i++)</span><br><span class="line">        <span class="keyword">this</span>.put(src[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>剩余集中put就不再做展示，整体思路和上面两个put类似。</p><h2 id="二、创建缓冲区"><a href="#二、创建缓冲区" class="headerlink" title="二、创建缓冲区"></a>二、创建缓冲区</h2><h3 id="1-相关API"><a href="#1-相关API" class="headerlink" title="1. 相关API"></a>1. 相关API</h3><p>类似于<code>get()</code>和<code>put()</code>函数，因为Buffer是实现类返回和写入类型不同，所以在Buffer类上没有这两个接口。<br>同样Buffer类上也没有创建缓冲区的方法<code>allocate(int)</code>。<br>下面我们以ByteBuffer为例看一下一些创建缓冲区的关键函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuffer</span> <span class="keyword">extends</span> <span class="title">Buffer</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ByteBuffer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// This is a partial API listing</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> capacity)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">wrap</span><span class="params">(<span class="keyword">byte</span>[] array)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">wrap</span><span class="params">(<span class="keyword">byte</span>[] array, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasArray</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] <span class="title">array</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">arrayOffset</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-使用allocate-int-创建"><a href="#2-使用allocate-int-创建" class="headerlink" title="2. 使用allocate(int)创建"></a>2. 使用allocate(int)创建</h3><p>缓冲区的创建是由分配或者包装操作来实现的。当我们要分配一个容量为100的<code>ByteBuffer</code>的时候可以执行下面这个方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></p><p>函数源码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allocates a new byte buffer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The new buffer's position will be zero, its limit will be its</span></span><br><span class="line"><span class="comment"> * capacity, its mark will be undefined, and each of its elements will be</span></span><br><span class="line"><span class="comment"> * initialized to zero.  It will have a &#123;<span class="doctag">@link</span> #array backing array&#125;,</span></span><br><span class="line"><span class="comment"> * and its &#123;<span class="doctag">@link</span> #arrayOffset array offset&#125; will be zero.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  capacity</span></span><br><span class="line"><span class="comment"> *         The new buffer's capacity, in bytes</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The new byte buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          If the &lt;tt&gt;capacity&lt;/tt&gt; is a negative integer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HeapByteBuffer(capacity, capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到他实际创建的是一个以堆为存储方式的<code>ByteBuffer</code>。也就是<code>HeapByteBuffer</code>。<br>通过阅读<code>HeapByteBuffer</code>的构造方法可以发现实际就是创建了一个大小为容量的byte数组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HeapByteBuffer(<span class="keyword">int</span> cap, <span class="keyword">int</span> lim) &#123;            <span class="comment">// package-private</span></span><br><span class="line">    <span class="keyword">super</span>(-<span class="number">1</span>, <span class="number">0</span>, lim, cap, <span class="keyword">new</span> <span class="keyword">byte</span>[cap], <span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    hb = new byte[cap];</span></span><br><span class="line"><span class="comment">    offset = 0;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-使用warp-创建"><a href="#3-使用warp-创建" class="headerlink" title="3. 使用warp()创建"></a>3. 使用warp()创建</h3><p>当我们自己创建了一个数组作为缓冲区的备份存储器，就可以使用<code>warp()</code>函数进行创建<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> [] myArray = <span class="keyword">new</span> <span class="keyword">byte</span> [<span class="number">100</span>];</span><br><span class="line">ByteBuffer buffer = ByteBuffer.wrap(myArray);</span><br></pre></td></tr></table></figure></p><p>源码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wraps a byte array into a buffer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The new buffer will be backed by the given byte array;</span></span><br><span class="line"><span class="comment"> * that is, modifications to the buffer will cause the array to be modified</span></span><br><span class="line"><span class="comment"> * and vice versa.  The new buffer's capacity will be</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;array.length&lt;/tt&gt;, its position will be &lt;tt&gt;offset&lt;/tt&gt;, its limit</span></span><br><span class="line"><span class="comment"> * will be &lt;tt&gt;offset + length&lt;/tt&gt;, and its mark will be undefined.  Its</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #array backing array&#125; will be the given array, and</span></span><br><span class="line"><span class="comment"> * its &#123;<span class="doctag">@link</span> #arrayOffset array offset&#125; will be zero.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array</span></span><br><span class="line"><span class="comment"> *         The array that will back the new buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  offset</span></span><br><span class="line"><span class="comment"> *         The offset of the subarray to be used; must be non-negative and</span></span><br><span class="line"><span class="comment"> *         no larger than &lt;tt&gt;array.length&lt;/tt&gt;.  The new buffer's position</span></span><br><span class="line"><span class="comment"> *         will be set to this value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  length</span></span><br><span class="line"><span class="comment"> *         The length of the subarray to be used;</span></span><br><span class="line"><span class="comment"> *         must be non-negative and no larger than</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;array.length - offset&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         The new buffer's limit will be set to &lt;tt&gt;offset + length&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The new byte buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment"> *          If the preconditions on the &lt;tt&gt;offset&lt;/tt&gt; and &lt;tt&gt;length&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> *          parameters do not hold</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">wrap</span><span class="params">(<span class="keyword">byte</span>[] array,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeapByteBuffer(array, offset, length);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException x) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面我们看看<code>HeapByteBuffer</code>如何创建，源码如下。<br>通过阅读源码可以知道实际上<code>warp()</code>函数并不是将offset开始的长度为length的数据创建。而是将整个数组的数据都写入缓冲区的备份存储器，并且这个缓冲区的位置为offset，上界为offset + length，容量为数组大小，标记未初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">HeapByteBuffer(<span class="keyword">byte</span>[] buf, <span class="keyword">int</span> off, <span class="keyword">int</span> len) &#123; <span class="comment">// package-private</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以看到mark标记位为-1</span></span><br><span class="line"><span class="comment">     * 位置为offset</span></span><br><span class="line"><span class="comment">     * 上界为offset+length</span></span><br><span class="line"><span class="comment">     * 容量为数组的大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">super</span>(-<span class="number">1</span>, off, off + len, buf.length, buf, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    hb = buf;</span></span><br><span class="line"><span class="comment">    offset = 0;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 他的父类构造器如下</span></span><br><span class="line">ByteBuffer(<span class="keyword">int</span> mark, <span class="keyword">int</span> pos, <span class="keyword">int</span> lim, <span class="keyword">int</span> cap,   <span class="comment">// package-private</span></span><br><span class="line">                 <span class="keyword">byte</span>[] hb, <span class="keyword">int</span> offset) &#123;</span><br><span class="line">    <span class="keyword">super</span>(mark, pos, lim, cap);</span><br><span class="line">    <span class="keyword">this</span>.hb = hb;</span><br><span class="line">    <span class="keyword">this</span>.offset = offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>通过 allocate()或者 wrap()函数创建的缓冲区通常都是间接的，直接缓冲区我们会在后续进行讨论。</p></blockquote><h3 id="4-array-或者arrayOffset-，hasArray-介绍"><a href="#4-array-或者arrayOffset-，hasArray-介绍" class="headerlink" title="4. array()或者arrayOffset()，hasArray()介绍"></a>4. array()或者arrayOffset()，hasArray()介绍</h3><ul><li>使用<code>hasArray()</code>函数来判断缓冲区是够有一个可以存取的备份数组，</li><li>使用<code>array()</code>函数来获取对应的字节数组，</li><li>使用<code>arrayOffset()</code>获取缓冲区第一个元素在这个缓冲区的的偏移量(从数组头 0 开始计算)，如果您使用了带有三个参数的版本的<code>wrap()</code>函数来创建一个缓冲区，则<code>arrayOffset()</code>会一直返回 0，然而，如果 您切分了（可以使用<code>slice()</code>函数）由一个数组提供存储的缓冲区，得到的缓冲区可能会有一个非0的数组偏移量。这个数组偏移量和缓冲区容量值会告诉您数组中哪些元素是被缓冲区使用的。。</li></ul><blockquote><p>在调用<code>array()</code>或者<code>arrayOffset()</code>前应该使用<code>hasArray()</code>来判断数组是否存在，否则会抛出异常<br>下面是三个函数的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tells whether or not this buffer is backed by an accessible byte</span></span><br><span class="line"><span class="comment"> * array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this method returns &lt;tt&gt;true&lt;/tt&gt; then the &#123;<span class="doctag">@link</span> #array() array&#125;</span></span><br><span class="line"><span class="comment"> * and &#123;<span class="doctag">@link</span> #arrayOffset() arrayOffset&#125; methods may safely be invoked.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &lt;tt&gt;true&lt;/tt&gt; if, and only if, this buffer</span></span><br><span class="line"><span class="comment"> *          is backed by an array and is not read-only</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (hb != <span class="keyword">null</span>) &amp;&amp; !isReadOnly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the byte array that backs this</span></span><br><span class="line"><span class="comment"> * buffer&amp;nbsp;&amp;nbsp;&lt;i&gt;(optional operation)&lt;/i&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Modifications to this buffer's content will cause the returned</span></span><br><span class="line"><span class="comment"> * array's content to be modified, and vice versa.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Invoke the &#123;<span class="doctag">@link</span> #hasArray hasArray&#125; method before invoking this</span></span><br><span class="line"><span class="comment"> * method in order to ensure that this buffer has an accessible backing</span></span><br><span class="line"><span class="comment"> * array.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The array that backs this buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  ReadOnlyBufferException</span></span><br><span class="line"><span class="comment"> *          If this buffer is backed by an array but is read-only</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  UnsupportedOperationException</span></span><br><span class="line"><span class="comment"> *          If this buffer is not backed by an accessible array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] array() &#123;</span><br><span class="line">    <span class="keyword">if</span> (hb == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    <span class="keyword">if</span> (isReadOnly)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ReadOnlyBufferException();</span><br><span class="line">    <span class="keyword">return</span> hb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the offset within this buffer's backing array of the first</span></span><br><span class="line"><span class="comment"> * element of the buffer&amp;nbsp;&amp;nbsp;&lt;i&gt;(optional operation)&lt;/i&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this buffer is backed by an array then buffer position &lt;i&gt;p&lt;/i&gt;</span></span><br><span class="line"><span class="comment"> * corresponds to array index &lt;i&gt;p&lt;/i&gt;&amp;nbsp;+&amp;nbsp;&lt;tt&gt;arrayOffset()&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Invoke the &#123;<span class="doctag">@link</span> #hasArray hasArray&#125; method before invoking this</span></span><br><span class="line"><span class="comment"> * method in order to ensure that this buffer has an accessible backing</span></span><br><span class="line"><span class="comment"> * array.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The offset within this buffer's array</span></span><br><span class="line"><span class="comment"> *          of the first element of the buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  ReadOnlyBufferException</span></span><br><span class="line"><span class="comment"> *          If this buffer is backed by an array but is read-only</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  UnsupportedOperationException</span></span><br><span class="line"><span class="comment"> *          If this buffer is not backed by an accessible array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">arrayOffset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hb == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    <span class="keyword">if</span> (isReadOnly)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ReadOnlyBufferException();</span><br><span class="line">    <span class="keyword">return</span> offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="三、复制缓冲区"><a href="#三、复制缓冲区" class="headerlink" title="三、复制缓冲区"></a>三、复制缓冲区</h2><p>首先我们先介绍一个概念</p><blockquote><p>我们可以创建描述从外部存储到数组中的数据元素的缓冲区对象。但是缓冲区不限于管理数组中的外部数据。它们也能管理其他缓冲区中的外部数据。当一个管理其他缓冲器所包含的数据元素的缓冲器被创建时，这个缓冲器被称为<code>视图缓冲器</code>。</p></blockquote><h3 id="1-相关API-1"><a href="#1-相关API-1" class="headerlink" title="1. 相关API"></a>1. 相关API</h3><p>复制缓冲区就是从当前缓冲区对象中复制出来一个新的缓冲区对象，我们以<code>ByteBuffer</code>为例，相关的api如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuffer</span> <span class="keyword">extends</span> <span class="title">Buffer</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ByteBuffer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// This is a partial API listing</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">duplicate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">asReadOnlyBuffer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">slice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-使用duplicate-复制"><a href="#2-使用duplicate-复制" class="headerlink" title="2. 使用duplicate()复制"></a>2. 使用duplicate()复制</h3><p>首先介绍<code>duplicate()</code>函数，他是创建一个共享当前缓冲区内容的新缓冲区，两个缓冲区共享数据元素，一个缓冲区数据的改变也会影响另一个缓冲区中的数据。但是每个缓冲区拥有各自的位置，上界，标记属性。如果原始的缓冲区为只读或者直接缓冲区，新的缓冲区也将继承这些属性（直接缓冲区的内容会在后续进行介绍）。<br>函数源码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new byte buffer that shares this buffer's content.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The content of the new buffer will be that of this buffer.  Changes</span></span><br><span class="line"><span class="comment"> * to this buffer's content will be visible in the new buffer, and vice</span></span><br><span class="line"><span class="comment"> * versa; the two buffers' position, limit, and mark values will be</span></span><br><span class="line"><span class="comment"> * independent.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The new buffer's capacity, limit, position, and mark values will be</span></span><br><span class="line"><span class="comment"> * identical to those of this buffer.  The new buffer will be direct if,</span></span><br><span class="line"><span class="comment"> * and only if, this buffer is direct, and it will be read-only if, and</span></span><br><span class="line"><span class="comment"> * only if, this buffer is read-only.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The new byte buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">duplicate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法的实现以HeapByteBuffer为例实现如下</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">duplicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HeapByteBuffer(hb,</span><br><span class="line">                            <span class="keyword">this</span>.markValue(),</span><br><span class="line">                            <span class="keyword">this</span>.position(),</span><br><span class="line">                            <span class="keyword">this</span>.limit(),</span><br><span class="line">                            <span class="keyword">this</span>.capacity(),</span><br><span class="line">                            offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-使用asReadOnlyBuffer-复制"><a href="#3-使用asReadOnlyBuffer-复制" class="headerlink" title="3. 使用asReadOnlyBuffer()复制"></a>3. 使用asReadOnlyBuffer()复制</h3><p>我们还可以使用<code>asReadOnlyBuffer()</code>函数来生成一个只读的缓冲区视图。与<code>duplicate()</code>相比，这种方式创建的新缓冲区不允许使用<code>put()</code>，并且其<code>isReadOnly()</code>函数将会返回true。对这一只读缓冲区的<code>put()</code>函数的调用尝试会导致抛出<code>ReadOnlyBufferException</code>异常。<br>函数源码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new, read-only byte buffer that shares this buffer's</span></span><br><span class="line"><span class="comment"> * content.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The content of the new buffer will be that of this buffer.  Changes</span></span><br><span class="line"><span class="comment"> * to this buffer's content will be visible in the new buffer; the new</span></span><br><span class="line"><span class="comment"> * buffer itself, however, will be read-only and will not allow the shared</span></span><br><span class="line"><span class="comment"> * content to be modified.  The two buffers' position, limit, and mark</span></span><br><span class="line"><span class="comment"> * values will be independent.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The new buffer's capacity, limit, position, and mark values will be</span></span><br><span class="line"><span class="comment"> * identical to those of this buffer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; If this buffer is itself read-only then this method behaves in</span></span><br><span class="line"><span class="comment"> * exactly the same way as the &#123;<span class="doctag">@link</span> #duplicate duplicate&#125; method.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The new, read-only byte buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">asReadOnlyBuffer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法的实现以HeapByteBuffer为例实现如下</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">asReadOnlyBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此处创建的是一个只读ByteBuffer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HeapByteBufferR(hb,</span><br><span class="line">                             <span class="keyword">this</span>.markValue(),</span><br><span class="line">                             <span class="keyword">this</span>.position(),</span><br><span class="line">                             <span class="keyword">this</span>.limit(),</span><br><span class="line">                             <span class="keyword">this</span>.capacity(),</span><br><span class="line">                             offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面我们来尝试复制一个缓冲区<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">8</span>);</span><br><span class="line">buffer.position(<span class="number">3</span>).limit(<span class="number">6</span>).mark().position(<span class="number">5</span>);</span><br><span class="line">ByteBuffer dupeBuffer = buffer.duplicate();</span><br><span class="line">buffer.clear();</span><br></pre></td></tr></table></figure></p><p>执行完后两个缓冲区数据如下图<br><img src="/images/Java-NIO-缓冲区相关概念及源码梳理/BE251E19-10DB-4FC9-9532-ED0D564C6796_4_5005_c.jpeg" alt="img"></p><h3 id="4-使用slice-切片复制"><a href="#4-使用slice-切片复制" class="headerlink" title="4. 使用slice()切片复制"></a>4. 使用slice()切片复制</h3><p>分割缓冲区与复制相似，但是<code>slice()</code>创建了一个从原始缓冲区的当前位置开始的信缓冲区，并且新缓冲区的容量是原始缓冲区的剩余数量也就是(<code>limit-position</code>)。这个新缓冲区与原始缓冲区共享一段数据元素子序列。分割出来的缓冲区也会继承只读和直接属性。<br>源码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new byte buffer whose content is a shared subsequence of</span></span><br><span class="line"><span class="comment"> * this buffer's content.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The content of the new buffer will start at this buffer's current</span></span><br><span class="line"><span class="comment"> * position.  Changes to this buffer's content will be visible in the new</span></span><br><span class="line"><span class="comment"> * buffer, and vice versa; the two buffers' position, limit, and mark</span></span><br><span class="line"><span class="comment"> * values will be independent.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The new buffer's position will be zero, its capacity and its limit</span></span><br><span class="line"><span class="comment"> * will be the number of bytes remaining in this buffer, and its mark</span></span><br><span class="line"><span class="comment"> * will be undefined.  The new buffer will be direct if, and only if, this</span></span><br><span class="line"><span class="comment"> * buffer is direct, and it will be read-only if, and only if, this buffer</span></span><br><span class="line"><span class="comment"> * is read-only.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The new byte buffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">slice</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法的实现以HeapByteBuffer为例实现如下</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">slice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="keyword">this</span>.position();</span><br><span class="line">    <span class="keyword">int</span> lim = <span class="keyword">this</span>.limit();</span><br><span class="line">    <span class="keyword">int</span> rem = (pos &lt;= lim ? lim - pos : <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 这里我们可以看到slice创建的ByteBuffer与之前带有三个参数的版本的wrap()函数来创建一个缓冲区不同</span></span><br><span class="line">    <span class="comment">// 这里新缓冲区的offset不是0而是原始缓冲区的pos + offset</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HeapByteBuffer(hb,</span><br><span class="line">                            -<span class="number">1</span>,</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            rem,</span><br><span class="line">                            rem,</span><br><span class="line">                            pos + offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面我们尝试分割一个缓冲区<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">8</span>);</span><br><span class="line">buffer.position(<span class="number">3</span>).limit(<span class="number">5</span>);</span><br><span class="line">ByteBuffer sliceBuffer = buffer.slice();</span><br></pre></td></tr></table></figure></p><p>创建的缓冲区如下<br><img src="/images/Java-NIO-缓冲区相关概念及源码梳理/E9421FD9-DA4B-4E4E-83E1-DABC5017BB6C_4_5005_c.jpeg" alt="img"></p><p>要创建一个映射到位置12-20(9个元素)的 buffer对象，应使用下面的代码实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] myBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">ByteBuffer cb = ByteBuffer.wrap(myBuffer);</span><br><span class="line">cb.position(<span class="number">12</span>).limit(<span class="number">21</span>);</span><br><span class="line">ByteBuffer sliced = cb.slice();</span><br></pre></td></tr></table></figure></p><h2 id="四、字节缓冲区"><a href="#四、字节缓冲区" class="headerlink" title="四、字节缓冲区"></a>四、字节缓冲区</h2><p>所有的基本数据类型都有相应的缓冲区类(布尔型除外)，但字节缓冲区有自己的独特之处。字节是操作系统及其 I/O 设备使用的基本数据类型。当在 JVM 和操作系统间传递数据时，将其他的数据类型拆分成构成它们的字节是十分必要的。如我们在后面的章节中将要看到的那样，系统层次的 I/O 面向字节的性质可以在整个缓冲区的设计以及它们互相配合的服务中感受到。</p><h3 id="1-ByteBuffer类完整API"><a href="#1-ByteBuffer类完整API" class="headerlink" title="1. ByteBuffer类完整API"></a>1. ByteBuffer类完整API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.nio;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuffer</span> <span class="keyword">extends</span> <span class="title">Buffer</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ByteBuffer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> capacity)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocateDirect</span><span class="params">(<span class="keyword">int</span> capacity)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isDirect</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">wrap</span><span class="params">(<span class="keyword">byte</span>[] array, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">wrap</span><span class="params">(<span class="keyword">byte</span>[] array)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">duplicate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">asReadOnlyBuffer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">slice</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasArray</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] <span class="title">array</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">arrayOffset</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">get</span><span class="params">(<span class="keyword">byte</span>[] dst, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> ByteBuffer <span class="title">get</span><span class="params">(<span class="keyword">byte</span>[] dst, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">byte</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">put</span><span class="params">(ByteBuffer src)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span>[] src, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span>[] src)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> ByteOrder <span class="title">order</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> ByteBuffer <span class="title">order</span><span class="params">(ByteOrder bo)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">abstract</span> CharBuffer <span class="title">asCharBuffer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ShortBuffer <span class="title">asShortBuffer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IntBuffer <span class="title">asIntBuffer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> LongBuffer <span class="title">asLongBuffer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> FloatBuffer <span class="title">asFloatBuffer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> DoubleBuffer <span class="title">asDoubleBuffer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">char</span> <span class="title">getChar</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">char</span> <span class="title">getChar</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putChar</span><span class="params">(<span class="keyword">char</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putChar</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">short</span> <span class="title">getShort</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">short</span> <span class="title">getShort</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putShort</span><span class="params">(<span class="keyword">short</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putShort</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">short</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putInt</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putInt</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putLong</span><span class="params">(<span class="keyword">long</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putLong</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">long</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">getFloat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">getFloat</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putFloat</span><span class="params">(<span class="keyword">float</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putFloat</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">float</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putDouble</span><span class="params">(<span class="keyword">double</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putDouble</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">double</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">compact</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object ob)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object ob)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-字节顺序"><a href="#2-字节顺序" class="headerlink" title="2. 字节顺序"></a>2. 字节顺序</h3><p>此章忽略</p><h3 id="3-直接缓冲区"><a href="#3-直接缓冲区" class="headerlink" title="3. 直接缓冲区"></a>3. 直接缓冲区</h3><p><strong>推荐观看这个up的视频，讲的非常好</strong> <a href="https://www.bilibili.com/video/BV1ar4y1J7mC?p=11" target="_blank" rel="noopener"><strong>视频链接</strong></a></p><p>首先简单概括一下什么是直接缓冲区</p><blockquote><p>在我们之前使用的缓冲区都是堆内的缓冲区，而直接缓冲区则是可以从堆外申请内存来进行数据的保存，采用操作系统本地的I/O会比堆缓冲区更快一些。</p></blockquote><p>下面我们摘抄一下JAVA NIO一书中的介绍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">操作系统的在内存区域中进行 I/O 操作。这些内存区域，就操作系统方面而言，是相连的字节序列。于是，毫无疑问，只有字节缓冲区有资格参与I/O 操作。也请回想一下操作系统会直接存取进程——在本例中是 JVM 进程的内存空间，以传输数据。这也意味着 I/O 操作的目标内存区域必须是连续的字节序列。在 JVM 中，字节数组可能不会在内存中连续存储，或者无用存储单元收集可能随时对其进行移动。在 Java 中，数组是对象，而数据存储在对象中的方式在不同的 JVM 实现中都各有不同。</span><br><span class="line">出于这一原因，引入了直接缓冲区的概念。直接缓冲区被用于与通道和固有 I/O 例程交互。它们通过使用固有代码来告知操作系统直接释放或填充内存区域，对用于通道直接或原始存取的内存区域中的字节元素的存储尽了最大的努力。</span><br><span class="line"></span><br><span class="line">直接字节缓冲区通常是 I/O 操作最好的选择。在设计方面，它们支持 JVM 可用的最高效 I/O 机制。非直接字节缓冲区可以被传递给通道，但是这样可能导致性能损耗。通常非直接缓冲不可能成为一个本地 I/O 操作的目标。如果您向一个通道中传递一个非直接 ByteBuffer 对象用于写入，通道可能会在每次调用中隐含地进行下面的操作:</span><br><span class="line">1.创建一个临时的直接 ByteBuffer 对象。</span><br><span class="line">2.将非直接缓冲区的内容复制到临时缓冲中。</span><br><span class="line">3.使用临时缓冲区执行低层次 I/O 操作。</span><br><span class="line">4.临时缓冲区对象离开作用域，并最终成为被回收的无用数据。</span><br><span class="line"></span><br><span class="line">这可能导致缓冲区在每个 I/O 上复制并产生大量对象，而这种事都是我们极力避免的。不过，依靠工具，事情可以不这么糟糕。运行时间可能会缓存并重新使用直接缓冲区或者执行其他一些聪明的技巧来提高吞吐量。如果您仅仅为一次使用而创建了一个缓冲区，区别并不是很明显。另一方面，如果您将在一段高性能脚本中重复使用缓冲区，分配直接缓冲区并重新使用它们会使您游刃有余。</span><br><span class="line">直接缓冲区时 I/O 的最佳选择，但可能比创建非直接缓冲区要花费更高的成本。直接缓冲区使用的内存是通过调用本地操作系统方面的代码分配的，绕过了标准 JVM 堆栈。建立和销毁直接缓冲区会明显比具有堆栈的缓冲区更加优秀，这取决于主操作系统以及 JVM 实现。直接缓冲区的内存区域不受无用存储单元收集支配，因为它们位于标准 JVM 堆栈之外。</span><br><span class="line"></span><br><span class="line">使用直接缓冲区或非直接缓冲区的性能权衡会因JVM，操作系统，以及代码设计而产生巨大差异。通过分配堆栈外的内存，您可以使您的应用程序依赖于JVM未涉及的其它力量。当加入其他的移动部分时，确定您正在达到想要的效果。我以一条旧的软件行业格言建议您:先使其工作，再加快其运行。不要一开始就过多担心优化问题;首先要注重正确性。JVM实现可能会执行缓冲区缓存或其他的优化，这会在不需要您参与许多不必要工作的情况下为您提供所需的性能。</span><br></pre></td></tr></table></figure></p><h4 id="3-1-创建直接缓冲区"><a href="#3-1-创建直接缓冲区" class="headerlink" title="3.1 创建直接缓冲区"></a>3.1 创建直接缓冲区</h4><p>下面我们从ByteBuffer的allocateDirect()函数中探寻一下他是如何创建一个直接缓冲区<br>下面是函数源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allocates a new direct byte buffer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The new buffer's position will be zero, its limit will be its</span></span><br><span class="line"><span class="comment"> * capacity, its mark will be undefined, and each of its elements will be</span></span><br><span class="line"><span class="comment"> * initialized to zero.  Whether or not it has a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #hasArray backing array&#125; is unspecified.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  capacity</span></span><br><span class="line"><span class="comment"> *         The new buffer's capacity, in bytes</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The new byte buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          If the &lt;tt&gt;capacity&lt;/tt&gt; is a negative integer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocateDirect</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectByteBuffer(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到到我们创建一个直接缓冲区时，他会去new一个DirectByteBuffer对象<br>下面是DirectByteBuffer类的构造方法，从下面我们可以看到直接缓冲区是使用java的unsafe类直接申请内存。<br>那申请的内存在清除后什么时候被回收，我们可以深入阅读Cleaner类。在里面我们可以看到他其实是一个虚引用的类，当他没有被强引用的情况下就会被回收。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(<span class="keyword">int</span> cap) &#123;                   <span class="comment">// package-private</span></span><br><span class="line">    <span class="comment">// 基础的定义上界，位置，容量，标记位等信息</span></span><br><span class="line">    <span class="keyword">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span><br><span class="line">    <span class="comment">// 是否直接内存分页对齐，操作系统相关信息</span></span><br><span class="line">    <span class="keyword">boolean</span> pa = VM.isDirectMemoryPageAligned();</span><br><span class="line">    <span class="comment">// 页大小</span></span><br><span class="line">    <span class="keyword">int</span> ps = Bits.pageSize();</span><br><span class="line">    <span class="comment">// 计算需要申请的内存大小</span></span><br><span class="line">    <span class="keyword">long</span> size = Math.max(<span class="number">1L</span>, (<span class="keyword">long</span>)cap + (pa ? ps : <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// 判断内存是否足够</span></span><br><span class="line">    Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> base = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 尝试申请内存</span></span><br><span class="line">        base = unsafe.allocateMemory(size);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">        <span class="comment">// 如果出现OOM将一开始的保留内存进行释放</span></span><br><span class="line">        Bits.unreserveMemory(size, cap);</span><br><span class="line">        <span class="keyword">throw</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将申请的内存中的数据进行置0</span></span><br><span class="line">    unsafe.setMemory(base, size, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算申请的内存空间的地址并赋值给address</span></span><br><span class="line">    <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">// Round up to page boundary</span></span><br><span class="line">        address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        address = base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个cleaner对象</span></span><br><span class="line">    cleaner = Cleaner.create(<span class="keyword">this</span>, <span class="keyword">new</span> Deallocator(base, size, cap));</span><br><span class="line">    <span class="comment">// 这个参数的含义我们会在后面的直接缓冲区的复制那部分降到</span></span><br><span class="line">    att = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面我们看看cleaner中的实际如何进行内存的释放<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Deallocator</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Deallocator</span><span class="params">(<span class="keyword">long</span> address, <span class="keyword">long</span> size, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> (address != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果地址为0，表示已经被释放过了</span></span><br><span class="line">        <span class="keyword">if</span> (address == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Paranoia</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将内存进行释放</span></span><br><span class="line">        unsafe.freeMemory(address);</span><br><span class="line">        <span class="comment">// 将地址置0</span></span><br><span class="line">        address = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 取消保留内存</span></span><br><span class="line">        Bits.unreserveMemory(size, capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-2-直接缓冲区如何get"><a href="#3-2-直接缓冲区如何get" class="headerlink" title="3.2 直接缓冲区如何get()"></a>3.2 直接缓冲区如何get()</h4><p>下面是方法源码，从源码中我们可以看到在获取数据的时候，会通过，计算地址所在的位置来获取对应的数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((unsafe.getByte(ix(nextGetIndex()))));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">ix</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> address + ((<span class="keyword">long</span>)i &lt;&lt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks the current position against the limit, throwing a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * BufferUnderflowException&#125; if it is not smaller than the limit, and then</span></span><br><span class="line"><span class="comment"> * increments the position.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The current position value, before it is incremented</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nextGetIndex</span><span class="params">()</span> </span>&#123;                          <span class="comment">// package-private</span></span><br><span class="line">    <span class="keyword">int</span> p = position;</span><br><span class="line">    <span class="keyword">if</span> (p &gt;= limit)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BufferUnderflowException();</span><br><span class="line">    position = p + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>get(int)函数再次就不再进行介绍，自行阅读源码</p></blockquote><h4 id="3-3-直接缓冲区如何put"><a href="#3-3-直接缓冲区如何put" class="headerlink" title="3.3 直接缓冲区如何put()"></a>3.3 直接缓冲区如何put()</h4><p>下面是方法源码，从源码中我们可以看到与get逻辑类似，获取到下一步要put数据的地址，然后将数据写入内存<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span> x)</span> </span>&#123;</span><br><span class="line">    unsafe.putByte(ix(nextPutIndex()), ((x)));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">ix</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> address + ((<span class="keyword">long</span>)i &lt;&lt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks the current position against the limit, throwing a &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * BufferOverflowException&#125; if it is not smaller than the limit, and then</span></span><br><span class="line"><span class="comment"> * increments the position.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The current position value, before it is incremented</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nextPutIndex</span><span class="params">()</span> </span>&#123;                          <span class="comment">// package-private</span></span><br><span class="line">    <span class="keyword">int</span> p = position;</span><br><span class="line">    <span class="keyword">if</span> (p &gt;= limit)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BufferOverflowException();</span><br><span class="line">    position = p + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>put(int)函数再次就不再进行介绍，自行阅读源码</p></blockquote><h4 id="3-4-复制直接缓冲区"><a href="#3-4-复制直接缓冲区" class="headerlink" title="3.4 复制直接缓冲区"></a>3.4 复制直接缓冲区</h4><p>下面我们看看直接缓冲区如何进行复制<br>我们从复制的源码入手<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">duplicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectByteBuffer(<span class="keyword">this</span>,</span><br><span class="line">                              <span class="keyword">this</span>.markValue(),</span><br><span class="line">                              <span class="keyword">this</span>.position(),</span><br><span class="line">                              <span class="keyword">this</span>.limit(),</span><br><span class="line">                              <span class="keyword">this</span>.capacity(),</span><br><span class="line">                              <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DirectByteBuffer(DirectBuffer db,         <span class="comment">// package-private</span></span><br><span class="line">               <span class="keyword">int</span> mark, <span class="keyword">int</span> pos, <span class="keyword">int</span> lim, <span class="keyword">int</span> cap,</span><br><span class="line">               <span class="keyword">int</span> off) &#123;</span><br><span class="line">    <span class="comment">// 基础的定义上界，位置，容量，标记位等信息</span></span><br><span class="line">    <span class="keyword">super</span>(mark, pos, lim, cap);</span><br><span class="line">    <span class="comment">// 将被复制对象的内存地址赋值给复制的缓冲区对象</span></span><br><span class="line">    address = db.address() + off;</span><br><span class="line">    <span class="comment">// 这里的cleaner不需要赋值，因为他本身不需要去考虑内存的释放，实际的释放是由被复制的对象进行</span></span><br><span class="line">    cleaner = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 从这里我们就知道att的作用了，因为我们所谓的复制是和被复制的缓冲区对象使用同一片内存，</span></span><br><span class="line">    <span class="comment">// 假设被复制的缓冲区对象没有被任何对象强引用，这个时候就可能会被JVM的GC删除，所以我们让att强引用了被复制的缓冲区对象，这样哪怕被复制的缓冲区对象被原来强引用的对象断除引用也不会导致这块内存被垃圾回收</span></span><br><span class="line">    att = db;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>slice()函数再次就不再进行介绍，自行阅读源码</p></blockquote><h3 id="4-视图缓冲区"><a href="#4-视图缓冲区" class="headerlink" title="4. 视图缓冲区"></a>4. 视图缓冲区</h3><p>我们之前已经见过了一些的简单例子，在例子中一个缓冲区被复制和切分。ByteBuffer 类允许创建视图来将 byte 型缓冲区字节数据映射为其它的原始数据类型。例如，asLongBuffer()函数 创建一个将八个字节型数据当成一个 long 型数据来存取的视图缓冲区。<br>下面列出的每一个工厂方法都在原有的 ByteBuffer 对象上创建一个视图缓冲区。调用其中的任何一个方法都会创建对应的缓冲区类型，这个缓冲区是基础缓冲区的一个切分，由基 础缓冲区的位置和上界决定。新的缓冲区的容量是字节缓冲区中存在的元素数量除以视图类型中组成一个数据类型的字节数。在切分中任一个超过上界的元素对于这个视图 缓冲区都是不可见的。视图缓冲区的第一个元素从创建它的 ByteBuffer 对象的位置开始 (positon()函数的返回值)。具有能被自然数整除的数据元素个数的视图缓冲区是一种较好的实现。</p><h4 id="4-1-视图缓冲区相关API"><a href="#4-1-视图缓冲区相关API" class="headerlink" title="4.1 视图缓冲区相关API"></a>4.1 视图缓冲区相关API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuffer</span> <span class="keyword">extends</span> <span class="title">Buffer</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ByteBuffer</span>&gt; </span>&#123;</span><br><span class="line">      <span class="comment">// This is a partial API listing</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> CharBuffer <span class="title">asCharBuffer</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ShortBuffer <span class="title">asShortBuffer</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IntBuffer <span class="title">asIntBuffer</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> LongBuffer <span class="title">asLongBuffer</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> FloatBuffer <span class="title">asFloatBuffer</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> DoubleBuffer <span class="title">asDoubleBuffer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-ByteBuffer-gt-CharBuffer"><a href="#4-2-ByteBuffer-gt-CharBuffer" class="headerlink" title="4.2 ByteBuffer -&gt; CharBuffer"></a>4.2 ByteBuffer -&gt; CharBuffer</h4><p>下面我们就医ByteBuffer -&gt; CharBuffer为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">7</span>).order(ByteOrder.BIG_ENDIAN);</span><br><span class="line">CharBuffer charBuffer = byteBuffer.asCharBuffer();</span><br></pre></td></tr></table></figure></p><p>下面是复制的charBuffer的视图<br><img src="/images/Java-NIO-缓冲区相关概念及源码梳理/370474B0-530E-48AF-B7D3-3AB0235AB516_4_5005_c.jpeg" alt="img"></p><p>下面我们尝试代码运行一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferCharView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">7</span>).order(ByteOrder.BIG_ENDIAN);</span><br><span class="line">        CharBuffer charBuffer = byteBuffer.asCharBuffer();</span><br><span class="line">        <span class="comment">// Load the ByteBuffer with some bytes</span></span><br><span class="line">        byteBuffer.put(<span class="number">0</span>, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        byteBuffer.put(<span class="number">1</span>, (<span class="keyword">byte</span>) <span class="string">'H'</span>);</span><br><span class="line">        byteBuffer.put(<span class="number">2</span>, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        byteBuffer.put(<span class="number">3</span>, (<span class="keyword">byte</span>) <span class="string">'i'</span>);</span><br><span class="line">        byteBuffer.put(<span class="number">4</span>, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        byteBuffer.put(<span class="number">5</span>, (<span class="keyword">byte</span>) <span class="string">'!'</span>);</span><br><span class="line">        byteBuffer.put(<span class="number">6</span>, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        println(byteBuffer);</span><br><span class="line">        println(charBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print info about a buffer</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(Buffer buffer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"pos="</span> + buffer.position() + <span class="string">", limit="</span> + buffer.limit() + <span class="string">", capacity="</span> + buffer.capacity() </span><br><span class="line">                + <span class="string">": '"</span> + buffer.toString() + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pos=<span class="number">0</span>, limit=<span class="number">7</span>, capacity=<span class="number">7</span>: <span class="string">'java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]'</span></span><br><span class="line">pos=<span class="number">0</span>, limit=<span class="number">3</span>, capacity=<span class="number">3</span>: <span class="string">'Hi!'</span></span><br></pre></td></tr></table></figure></p><h3 id="5-数据元素视图"><a href="#5-数据元素视图" class="headerlink" title="5. 数据元素视图"></a>5. 数据元素视图</h3><p>ByteBuffer 类提供了一个不太重要的机制来以多字节数据类型的形式存取 byte 数据组。ByteBuffer类为每一种原始数据类型提供了存取的和转化的方法:</p><h4 id="5-1-数据元素视图相关API"><a href="#5-1-数据元素视图相关API" class="headerlink" title="5.1 数据元素视图相关API"></a>5.1 数据元素视图相关API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteBuffer</span> <span class="keyword">extends</span> <span class="title">Buffer</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ByteBuffer</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">public</span> <span class="title">abstract</span> <span class="title">char</span> <span class="title">getChar</span>( )</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">char</span> <span class="title">getChar</span> <span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">short</span> <span class="title">getShort</span><span class="params">( )</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">short</span> <span class="title">getShort</span> <span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">( )</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getInt</span> <span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">( )</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getLong</span> <span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">getFloat</span><span class="params">( )</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">getFloat</span> <span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">( )</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getDouble</span> <span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putChar</span> <span class="params">(<span class="keyword">char</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putChar</span> <span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putShort</span> <span class="params">(<span class="keyword">short</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putShort</span> <span class="params">(<span class="keyword">int</span> index, <span class="keyword">short</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putInt</span> <span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putInt</span> <span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putLong</span> <span class="params">(<span class="keyword">long</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putLong</span> <span class="params">(<span class="keyword">int</span> index, <span class="keyword">long</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putFloat</span> <span class="params">(<span class="keyword">float</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putFloat</span> <span class="params">(<span class="keyword">int</span> index, <span class="keyword">float</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putDouble</span> <span class="params">(<span class="keyword">double</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">putDouble</span> <span class="params">(<span class="keyword">int</span> index, <span class="keyword">double</span> value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-从ByteBuffer中获取int或者long类型元素"><a href="#5-2-从ByteBuffer中获取int或者long类型元素" class="headerlink" title="5.2 从ByteBuffer中获取int或者long类型元素"></a>5.2 从ByteBuffer中获取int或者long类型元素</h4><p>假设一个叫 buffer 的 ByteBuffer 对象处于下图的状态。<br><img src="/images/Java-NIO-缓冲区相关概念及源码梳理/BD8A5C19-D9A9-4440-B63B-861E9C01091E_4_5005_c.jpeg" alt="img"></p><p>这段代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value = buffer.getInt( );</span><br></pre></td></tr></table></figure></p><p>由于int为4个字节，会返回一个由缓冲区中位置 1-4 的 byte 数据值组成的 int 型变量的值。实际的返回值取决于缓冲区的当前的比特排序(byte-order)设置。<br>更具体的写法是:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value = buffer.order (ByteOrder.BIG_ENDIAN).getInt( );</span><br></pre></td></tr></table></figure></p><p>这将会返回值 0x3BC5315E，同时:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value = buffer.order (ByteOrder.LITTLE_ENDIAN).getInt( );</span><br></pre></td></tr></table></figure></p><p>返回值 0x5E31C53B。</p><p>如果您试图获取的原始类型需要比缓冲区中存在的字节数更多的字节，会抛出 BufferUnderflowException。如我们执行下面这行代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个 long 型变量是 8 个字节的，但是缓冲区中只有 5 个字节，所以会抛出 BufferUnderflowException</span></span><br><span class="line"><span class="keyword">long</span> value = buffer.getLong( );</span><br></pre></td></tr></table></figure></p><h3 id="6-内存映射缓冲区"><a href="#6-内存映射缓冲区" class="headerlink" title="6. 内存映射缓冲区"></a>6. 内存映射缓冲区</h3><p>映射缓冲区是带有存储在文件，通过内存映射来存取数据元素的字节缓冲区。映射缓冲区通常是直接存取内存的，只能通过 FileChannel 类创建。映射缓冲区的用法和直接缓冲区类似，但是 MappedByteBuffer 对象可以处理独立于文件存取形式的的许多特定字符。出于这个原因，我们会在讲内存映射文件的时候讲到这部分内容。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink常见知识点</title>
      <link href="/2022/08/26/Flink%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/08/26/Flink%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="1-讲一下flink的运行架构"><a href="#1-讲一下flink的运行架构" class="headerlink" title="1.讲一下flink的运行架构"></a>1.讲一下flink的运行架构</h3><p>当flink集群启动后，首先会启动一个JobManager和一个或者多个TaskManager。有Client提交任务给JobManager，JobManager在调度任务到各个TaskManager去执行，然后 TaskManager 将心跳和统计信息汇报给 JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的 JVM 进程。</p><ul><li>Client 为提交 Job 的客户端，可以是运行在任何机器上（与 JobManager 环境连通即可）。提交 Job 后，Client 可以结束进程（Streaming的任务），也可以不结束并等待结果返回。</li><li>JobManager 主要负责调度 Job 并协调 Task 做 checkpoint，职责上很像 Storm 的 Nimbus。从 Client 处接收到 Job 和 JAR 包等资源后，会生成优化后的执行计划，并以 Task 的单元调度到各个 TaskManager 去执行。</li><li>TaskManager 在启动的时候就设置好了槽位数（Slot），每个 slot 能启动一个 Task，Task 为线程。从 JobManager 处接收需要部署的 Task，部署启动后，与自己的上游建立 Netty 连接，接收数据并处理。</li></ul><h3 id="2-讲一下flink的作业执行流程"><a href="#2-讲一下flink的作业执行流程" class="headerlink" title="2.讲一下flink的作业执行流程"></a>2.讲一下flink的作业执行流程</h3><ul><li><p>以yarn模式Per-job方式为例概述作业提交执行流程<br>当执行executor() 之后,会首先在本地client 中将代码转化为可以提交的 JobGraph如果提交为Per-Job模式,则首先需要启动AM, client会首先向资源系统申请资源, 在yarn下即为申请container开启AM, 如果是Session模式的话则不需要这个步骤</p></li><li><p>Yarn分配资源, 开启AM</p></li><li>Client将Job提交给Dispatcher</li><li>Dispatcher 会开启一个新的 JobManager线程</li><li>JM 向Flink 自己的 Resourcemanager申请slot资源来执行任务</li><li>RM 向 Yarn申请资源来启动 TaskManger (Session模式跳过此步)</li><li>Yarn 分配 Container 来启动 taskManger (Session模式跳过此步)</li><li>Flink 的 RM 向 TM 申请 slot资源来启动 task</li><li>TM 将待分配的 slot 提供给 JM</li><li>JM 提交 task, TM 会启动新的线程来执行任务,开始启动后就可以通过 shuffle模块进行 task之间的数据交换</li></ul>]]></content>
      
      
      <categories>
          
          <category> Flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka常见知识点</title>
      <link href="/2022/08/26/Kafka%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/08/26/Kafka%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="1-讲一下kafka"><a href="#1-讲一下kafka" class="headerlink" title="1. 讲一下kafka"></a>1. 讲一下kafka</h3><p>Producer: 消息生产者</p><ul><li><p>Producer可以发送消息到Topic</p><ul><li>Topic的消息存放在不同的Partition中，不同Partition存放在不同的Broker中</li><li>Producer值需要指定Topic的名字、要连接到的Broker，这样Kafka就可以自动吧消息数据路由到指定的Broker（不一定是指定连接的Broker）</li></ul></li><li><p>Producer发送消息后，可以选择是否要确认消息写入成功（ACK， Acknowledgment）</p><ul><li>ACK = 0: Producer不会等待ACK（消息可能丢失）</li><li>ACK = 1: Producer会等待Leader Partition的ACK（Follower Partition消息可能丢失）</li><li>ACK = all: Producer会等待Leader Partition和Follower Partition的ACK（消息不会丢失）</li></ul></li><li><p>消息key: Producer可以给消息加上key，带相同key的消息会被分发到同一个Partition，这样就可以保证带相同key的消息的消费是有序的</p></li><li><p>Broker: 每个Broker里包含了不同Topic的不同Partition，Partition中包含了有序的消息</p><ul><li>一个Kafka集群由多个Broker（server）组成</li><li>每个Broker都有ID标识</li><li>每个Broker里保存一定数量的Partition</li><li>客户端只要连接上任意一个Broker，就可以连接上整个Kafka集群</li><li>大多数Kafka集群刚开始的时候建议使用至少3个Broker，集群大了可以有上百个Broker。</li></ul></li></ul><p>Consumer：消息消费者</p><ul><li><p>Consumer可以从Topic读取消息进行消费</p><ul><li>Topic的消息存放在不同Partition中，不同Partition存放在不同Broker中</li><li>Consumer只需要指定Topic的名字、要连接到的Broker，这样Kafka就可以自动地把Consumer路由到合适的Broker拉取消息进行消费（不一定是指定连接的Broker）</li><li>每一个Partition中的消息都会被有序消费</li></ul></li><li><p>Consumer Group</p><ul><li>Consumer Group由多个Consumer组成</li><li>Consumer Group里的每个Consumer都会从不同的Partition中读取消息</li><li>如果Consumer的数量大于Partition的数量，那么多出来的Consumer就会空闲下来（浪费资源）</li></ul></li><li><p>Consumer offset</p><ul><li>Kafka会为Consumer Group要消费的每个Partion保存一个offset，这个offset标记了该Consumer Group最后消费消息的位置</li><li>这个offset保存在Kafka里一个名为“__consumer_offsets”的Topic中；当Consumer从Kafka拉取消息消费时，同时也要对这个offset提交修改更新操作。这样若一个Consumer消费消息时挂了，其他Consumer可以通过这个offset值重新找到上一个消息再进行处理</li></ul></li></ul><h3 id="2-kafka实现高吞吐的原理"><a href="#2-kafka实现高吞吐的原理" class="headerlink" title="2.kafka实现高吞吐的原理"></a>2.kafka实现高吞吐的原理</h3><ul><li>读写文件依赖OS文件系统的页缓存，而不是在JVM内部缓存数据，利用OS来缓存，内存利用率高</li><li>sendfile技术（零拷贝），避免了传统网络IO四步流程</li><li>支持End-to-End的压缩</li><li>顺序IO以及常量时间get、put消息</li><li>Partition 可以很好的横向扩展和提供高并发处理</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop常见知识点</title>
      <link href="/2022/08/24/Hadoop%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/08/24/Hadoop%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="1-HDFS架构"><a href="#1-HDFS架构" class="headerlink" title="1. HDFS架构"></a>1. HDFS架构</h3><p><img src="/images/Hadoop常见知识点/4093A846-0B4E-4EF1-8DF2-5F175350D92D_4_5005_c.jpeg" alt="4093A846-0B4E-4EF1-8DF2-5F175350D92D_4_5005_c.jpeg"></p><ol><li>Active NameNode和 Standby NameNode：两台NameNode形成互备，处于Active状态的为主NameNode，另一台处于StandBy状态，为备用NameNode，主要主NameNode对外提供读写服务。</li><li>ZKFailoverController（主备切换控制器，FC）：ZKFailoverController 作为独立的进程运行，对 NameNode 的主备切换进行总体控制。ZKFailoverController 能及时检测到 NameNode 的健康状况，在主 NameNode 故障时借助 Zookeeper 实现自动的主备选举和切换（当然 NameNode 目前也支持不依赖于 Zookeeper 的手动主备切换）；</li><li>Zookeeper 集群：为主备切换控制器提供主备选举支持；</li><li>共享存储系统：共享存储系统是实现 NameNode 的高可用最为关键的部分，共享存储系统保存了 NameNode 在运行过程中所产生的 HDFS 的元数据。主 NameNode 和备 NameNode 通过共享存储系统实现元数据同步。在进行主备切换的时候，新的主 NameNode 在确认元数据完全同步之后才能继续对外提供服务。</li><li>DataNode 节点：因为主 NameNode 和备 NameNode 需要共享 HDFS 的数据块和 DataNode 之间的映射关系，为了使故障切换能够快速进行，DataNode 会同时向主 NameNode 和备 NameNode 上报数据块的位置信息。</li></ol><p>FailoverController<br>FC 最初的目的是为了实现 SNN 和 ANN 之间故障自动切换，FC 是独立与 NN 之外的故障切换控制器，ZKFC 作为 NameNode 机器上一个独立的进程启动 ，它启动的时候会创建 HealthMonitor 和 ActiveStandbyElector 这两个主要的内部组件，其中：</p><ol><li>HealthMonitor：主要负责检测 NameNode 的健康状态，如果检测到 NameNode 的状态发生变化，会回调 ZKFailoverController 的相应方法进行自动的主备选举；</li><li>ActiveStandbyElector：主要负责完成自动的主备选举，内部封装了 Zookeeper 的处理逻辑，一旦 Zookeeper 主备选举完成，会回调 ZKFailoverController 的相应方法来进行 NameNode 的主备状态切换。</li></ol><h4 id="自动触发主备选举"><a href="#自动触发主备选举" class="headerlink" title="自动触发主备选举"></a>自动触发主备选举</h4><ol><li><p>NameNode 在选举成功后，会在 zk 上创建了一个 /hadoop-ha/${dfs.nameservices}/ActiveStandbyElectorLock 节点，而没有选举成功的备 NameNode 会监控这个节点，通过 Watcher 来监听这个节点的状态变化事件，ZKFC 的 ActiveStandbyElector 主要关注这个节点的 NodeDeleted 事件（这部分实现跟 Kafka 中 Controller 的选举一样）。</p></li><li><p>如果 Active NameNode 对应的 HealthMonitor 检测到 NameNode 的状态异常时， ZKFailoverController 会主动删除当前在 Zookeeper 上建立的临时节点 /hadoop-ha/${dfs.nameservices}/ActiveStandbyElectorLock，这样处于 Standby 状态的 NameNode 的 ActiveStandbyElector 注册的监听器就会收到这个节点的 NodeDeleted 事件。收到这个事件之后，会马上再次进入到创建 /hadoop-ha/${dfs.nameservices}/ActiveStandbyElectorLock 节点的流程，如果创建成功，这个本来处于 Standby 状态的 NameNode 就选举为主 NameNode 并随后开始切换为 Active 状态。</p></li><li><p>当然，如果是 Active 状态的 NameNode 所在的机器整个宕掉的话，那么根据 Zookeeper 的临时节点特性，/hadoop-ha/${dfs.nameservices}/ActiveStandbyElectorLock 节点会自动被删除，从而也会自动进行一次主备切换。</p></li></ol><h4 id="HDFS-脑裂问题"><a href="#HDFS-脑裂问题" class="headerlink" title="HDFS 脑裂问题"></a>HDFS 脑裂问题</h4><p>在实际中，NameNode 可能会出现这种情况，NameNode 在垃圾回收（GC）时，可能会在长时间内整个系统无响应，因此，也就无法向 zk 写入心跳信息，这样的话可能会导致临时节点掉线，备 NameNode 会切换到 Active 状态，这种情况，可能会导致整个集群会有同时有两个 NameNode，这就是脑裂问题。</p><p>脑裂问题的解决方案是隔离（Fencing），主要是在以下三处采用隔离措施：</p><ul><li>第三方共享存储：任一时刻，只有一个 NN 可以写入；</li><li>DataNode：需要保证只有一个 NN 发出与管理数据副本有关的删除命令；</li><li>Client：需要保证同一时刻只有一个 NN 能够对 Client 的请求发出正确的响应。</li></ul><p>关于这个问题目前解决方案的实现如下：</p><ol><li>ActiveStandbyElector 为了实现 fencing，会在成功创建 Zookeeper 节点 hadoop-ha/${dfs.nameservices}/ActiveStandbyElectorLock 从而成为 Active NameNode 之后，创建另外一个路径为 /hadoop-ha/${dfs.nameservices}/ActiveBreadCrumb 的持久节点，这个节点里面保存了这个 Active NameNode 的地址信息</li><li>Active NameNode 的 ActiveStandbyElector 在正常的状态下关闭 Zookeeper Session 的时候，会一起删除这个持久节点；</li><li><p>但如果 ActiveStandbyElector 在异常的状态下 Zookeeper Session 关闭 (比如前述的 Zookeeper 假死)，那么由于 /hadoop-ha/${dfs.nameservices}/ActiveBreadCrumb 是持久节点，会一直保留下来，后面当另一个 NameNode 选主成功之后，会注意到上一个 Active NameNode 遗留下来的这个节点，从而会回调 ZKFailoverController 的方法对旧的 Active NameNode 进行 fencing。<br>在进行 fencing 的时候，会执行以下的操作：</p><ol><li>首先尝试调用这个旧 Active NameNode 的 HAServiceProtocol RPC 接口的 transitionToStandby 方法，看能不能把它转换为 Standby 状态；</li><li>如果 transitionToStandby 方法调用失败，那么就执行 Hadoop 配置文件之中预定义的隔离措施。</li></ol></li></ol><blockquote><p>Hadoop 目前主要提供两种隔离措施，通常会选择第一种：</p><ul><li>sshfence：通过 SSH 登录到目标机器上，执行命令 fuser 将对应的进程杀死；</li><li>shellfence：执行一个用户自定义的 shell 脚本来将对应的进程隔离。<br>只有在成功地执行完成 fencing 之后，选主成功的 ActiveStandbyElector 才会回调 ZKFailoverController 的 becomeActive 方法将对应的 NameNode 转换为 Active 状态，开始对外提供服务。</li></ul></blockquote><h4 id="HDFS-2-0-Federation-实现"><a href="#HDFS-2-0-Federation-实现" class="headerlink" title="HDFS 2.0 Federation 实现"></a>HDFS 2.0 Federation 实现</h4><p>在 1.0 中，HDFS 的架构设计有以下缺点：</p><ol><li>namespace 扩展性差：在单一的 NN 情况下，因为所有 namespace 数据都需要加载到内存，所以物理机内存的大小限制了整个 HDFS 能够容纳文件的最大个数（namespace 指的是 HDFS 中树形目录和文件结构以及文件对应的 block 信息）；</li><li>性能可扩展性差：由于所有请求都需要经过 NN，单一 NN 导致所有请求都由一台机器进行处理，很容易达到单台机器的吞吐；</li><li>隔离性差：多租户的情况下，单一 NN 的架构无法在租户间进行隔离，会造成不可避免的相互影响。</li></ol><h5 id="Federation-架构"><a href="#Federation-架构" class="headerlink" title="Federation 架构"></a>Federation 架构</h5><p>Federation 的架构设计如下图所示（图片来自 HDFS Federation）：<br><img src="/images/Hadoop常见知识点/8786F522-742E-4650-913D-392BDAB938DA_4_5005_c.jpeg" alt="8786F522-742E-4650-913D-392BDAB938DA_4_5005_c.jpeg"></p><h6 id="Federation-的核心设计思想"><a href="#Federation-的核心设计思想" class="headerlink" title="Federation 的核心设计思想"></a>Federation 的核心设计思想</h6><p>Federation 的核心思想是将一个大的 namespace 划分多个子 namespace，并且每个 namespace 分别由单独的 NameNode 负责，这些 NameNode 之间互相独立，不会影响，不需要做任何协调工作（其实跟拆集群有一些相似），集群的所有 DataNode 会被多个 NameNode 共享。<br>其中，每个子 namespace 和 DataNode 之间会由数据块管理层作为中介建立映射关系，数据块管理层由若干数据块池（Pool）构成，每个数据块只会唯一属于某个固定的数据块池，而一个子 namespace 可以对应多个数据块池。每个 DataNode 需要向集群中所有的 NameNode 注册，且周期性地向所有 NameNode 发送心跳和块报告，并执行来自所有 NameNode 的命令。<br>一个 block pool 由属于同一个 namespace 的数据块组成，每个 DataNode 可能会存储集群中所有 block pool 的数据块；<br>每个 block pool 内部自治，也就是说各自管理各自的 block，不会与其他 block pool 交流，如果一个 NameNode 挂掉了，不会影响其他 NameNode;<br>某个 NameNode 上的 namespace 和它对应的 block pool 一起被称为 namespace volume，它是管理的基本单位。当一个 NameNode/namespace 被删除后，其所有 DataNode 上对应的 block pool 也会被删除，当集群升级时，每个 namespace volume 可以作为一个基本单元进行升级。</p><h3 id="2-Yarn架构"><a href="#2-Yarn架构" class="headerlink" title="2. Yarn架构"></a>2. Yarn架构</h3><p>待完成</p><h3 id="3-MapReduce过程"><a href="#3-MapReduce过程" class="headerlink" title="3. MapReduce过程"></a>3. MapReduce过程</h3><h3 id="4-Yarn-调度MapReduce"><a href="#4-Yarn-调度MapReduce" class="headerlink" title="4. Yarn 调度MapReduce"></a>4. Yarn 调度MapReduce</h3><h3 id="5-HDFS写流程"><a href="#5-HDFS写流程" class="headerlink" title="5. HDFS写流程"></a>5. HDFS写流程</h3><ol><li>Client调用DistributedFileSystem对象的create方法，创建一个文件输出流（FSDataOutputStream）对象。</li><li>通过DistributedFileSystem对象与集群的NameNode进行一次RPC远程调用，在HDFS的Namespace中创建一个文件条目（Entry），此时该条目没有任何block，NameNode会返回该数据每个块需要拷贝的DataNode地址信息。</li><li>通过FSDataOutputStream对象，开始向DataNode写入数据，数据首先被写入FSDataOutputStream对象内部的数据队列中，数据队列由DataStreamer使用，它通过选择合适的DataNode列表来存储副本，从而要求NameNode分配新的block；</li><li>DataStreamer将数据包以流式传输的方式传输到分配的第一个DataNode中，该数据流将数据包存储到第一个 DataNode 中并将其转发到第二个 DataNode 中，接着第二个 DataNode 节点会将数据包转发到第三个 DataNode 节点；</li><li>DataNode 确认数据传输完成，最后由第一个 DataNode 通知 client 数据写入成功；</li><li>完成向文件写入数据，Client 在文件输出流（FSDataOutputStream）对象上调用 close 方法，完成文件写入；</li><li>调用 DistributedFileSystem 对象的 complete 方法，通知 NameNode 文件写入成功，NameNode 会将相关结果记录到 editlog 中。</li></ol><h3 id="6-HDFS读流程"><a href="#6-HDFS读流程" class="headerlink" title="6. HDFS读流程"></a>6. HDFS读流程</h3><ol><li>Client 通过 DistributedFileSystem 对象与集群的 NameNode 进行一次 RPC 远程调用，获取文件 block 位置信息；</li><li>NameNode 返回存储的每个块的 DataNode 列表；</li><li>Client 将连接到列表中最近的 DataNode；</li><li>Client 开始从 DataNode 并行读取数据；</li><li>一旦 Client 获得了所有必须的 block，它就会将这些 block 组合起来形成一个文件。</li></ol><h3 id="7-hdfs创建一个文件的流程"><a href="#7-hdfs创建一个文件的流程" class="headerlink" title="7. hdfs创建一个文件的流程"></a>7. hdfs创建一个文件的流程</h3><ol><li>客户端通过ClientProtocol协议向RpcServer发起创建文件的RPC请求。</li><li>FSNamesystem封装了各种HDFS操作的实现细节，RpcServer调用FSNamesystem中的相关方法以创建目录。</li><li>进一步的，FSDirectory封装了各种目录树操作的实现细节，FSNamesystem调用FSDirectory中的相关方法在目录树中创建目标文件，并通过日志系统备份文件系统的修改。</li><li>最后，RpcServer将RPC响应返回给客户端。</li></ol><h3 id="8-hadoop1-x-和hadoop-2-x-的区别"><a href="#8-hadoop1-x-和hadoop-2-x-的区别" class="headerlink" title="8. hadoop1.x 和hadoop 2.x 的区别"></a>8. hadoop1.x 和hadoop 2.x 的区别</h3><ol><li><p>资源调度方式的改变<br>在1.x, 使用Jobtracker负责任务调度和资源管理,单点负担过重,在2.x中,新增了yarn作为集群的调度工具.在yarn中,使用ResourceManager进行 资源管理, 单独开启一个Container作为ApplicationMaster来进行任务管理.</p></li><li><p>HA模式<br>在1.x中没有HA模式,集群中只有一个NameNode,而在2.x中可以启用HA模式,存在一个Active NameNode 和Standby NameNode.</p></li><li><p>HDFS Federation<br>Hadoop 2.0中对HDFS进行了改进，使NameNode可以横向扩展成多个，每个NameNode分管一部分目录，进而产生了HDFS Federation，该机制的引入不仅增强了HDFS的扩展性，也使HDFS具备了隔离性</p></li></ol><h3 id="9-hadoop-HA介绍"><a href="#9-hadoop-HA介绍" class="headerlink" title="9. hadoop HA介绍"></a>9. hadoop HA介绍</h3><ol><li>Active NameNode 和 Standby NameNode：两台 NameNode 形成互备，一台处于 Active 状态，为主 NameNode，另外一台处于 Standby 状态，为备 NameNode，只有主 NameNode 才能对外提供读写服务；</li><li>ZKFailoverController（主备切换控制器，FC）：ZKFailoverController 作为独立的进程运行，对 NameNode 的主备切换进行总体控制。ZKFailoverController 能及时检测到 NameNode 的健康状况，在主 NameNode 故障时借助 Zookeeper 实现自动的主备选举和切换（当然 NameNode 目前也支持不依赖于 Zookeeper 的手动主备切换）；</li><li>Zookeeper 集群：为主备切换控制器提供主备选举支持；<br>共享存储系统：共享存储系统是实现 NameNode 的高可用最为关键的部分，共享存储系统保存了 NameNode 在运行过程中所产生的 HDFS 的元数据。主 NameNode 和备 NameNode 通过共享存储系统实现元数据同步。在进行主备切换的时候，新的主 NameNode 在确认元数据完全同步之后才能继续对外提供服务。</li><li>DataNode 节点：因为主 NameNode 和备 NameNode 需要共享 HDFS 的数据块和 DataNode 之间的映射关系，为了使故障切换能够快速进行，DataNode 会同时向主 NameNode 和备 NameNode 上报数据块的位置信息。</li></ol><h3 id="10-小文件过多会有什么危害-如何避免"><a href="#10-小文件过多会有什么危害-如何避免" class="headerlink" title="10. 小文件过多会有什么危害,如何避免?"></a>10. 小文件过多会有什么危害,如何避免?</h3><p>Hadoop上大量HDFS元数据信息存储在NameNode内存中,因此过多的小文件必定会压垮NameNode的内存.</p><p>每个元数据对象约占150byte，所以如果有1千万个小文件，每个文件占用一个block，则NameNode大约需要2G空间。如果存储1亿个文件，则NameNode需要20G空间.</p><p>显而易见的解决这个问题的方法就是合并小文件,可以选择在客户端上传时执行一定的策略先合并,或者是使用Hadoop的CombineFileInputFormat&lt;K,V&gt;实现小文件的合并</p><h3 id="11-启动hadoop集群会分别启动哪些进程-各自的作用"><a href="#11-启动hadoop集群会分别启动哪些进程-各自的作用" class="headerlink" title="11. 启动hadoop集群会分别启动哪些进程,各自的作用"></a>11. 启动hadoop集群会分别启动哪些进程,各自的作用</h3><ul><li><p>NameNode：<br>维护文件系统树及整棵树内所有的文件和目录。这些信息永久保存在本地磁盘的两个文件中：命名空间镜像文件、编辑日志文件<br>记录每个文件中各个块所在的数据节点信息，这些信息在内存中保存，每次启动系统时重建这些信息<br>负责响应客户端的 数据块位置请求 。也就是客户端想存数据，应该往哪些节点的哪些块存；客户端想取数据，应该到哪些节点取<br>接受记录在数据存取过程中，datanode节点报告过来的故障、损坏信息</p></li><li><p>SecondaryNameNode(非HA模式)：<br>实现namenode容错的一种机制。定期合并编辑日志与命名空间镜像，当namenode挂掉时，可通过一定步骤进行上顶。(注意 并不是NameNode的备用节点)</p></li><li><p>DataNode：<br>根据需要存取并检索数据块<br>定期向namenode发送其存储的数据块列表</p></li><li><p>ResourceManager：<br>负责Job的调度,将一个任务与一个NodeManager相匹配。也就是将一个MapReduce之类的任务分配给一个从节点的NodeManager来执行。</p></li><li><p>NodeManager：<br>运行ResourceManager分配的任务，同时将任务进度向application master报告</p></li><li><p>JournalNode(HA下启用):<br>高可用情况下存放namenode的editlog文件</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark常见知识点</title>
      <link href="/2022/08/18/Spark%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/08/18/Spark%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/will-che/BigData-Interview" target="_blank" rel="noopener">大数据面试题【github】</a></p><h3 id="1-spark运行架构"><a href="#1-spark运行架构" class="headerlink" title="1. spark运行架构"></a>1. spark运行架构</h3><p><img src="/images/spark常见知识点/B88CDF76-5160-49FE-AB4C-7EA898015A4B_4_5005_c.jpeg" alt="B88CDF76-5160-49FE-AB4C-7EA898015A4B_4_5005_c.jpeg"></p><ol><li>当<code>Spark应用</code>提交时，根据提交的参数在<code>Driver</code>中创建进程，初始化<code>SparkContext对象</code>。并找到<code>Cluster Manager（Master）进程</code>，对Spark应用进行注册。</li><li>当<code>Master</code>收到Spark应用注册申请，会发送请求给<code>Worker</code>，进行资源的调度和分配。</li><li>Worker收到Master请求后，会为Spark应用启动<code>Executor进程</code>。具体数量由参数决定。Executor启动后，会向Driver反注册，这样Driver就可以知道哪些Executor在运行。</li><li>Driver会根据我们对RDD定义的操作，提交一堆的<code>Task</code>去Executor上执行，<code>Task</code>里面执行的就是具体的<code>map、flatMap</code>这些操作。</li></ol><h3 id="2-一个spark程序的执行流程"><a href="#2-一个spark程序的执行流程" class="headerlink" title="2.一个spark程序的执行流程"></a>2.一个spark程序的执行流程</h3><p><a href="https://zhuanlan.zhihu.com/p/35713084" target="_blank" rel="noopener">参考文章</a><br><img src="/images/spark常见知识点/A5561B89-2C96-4E5F-8833-9558D80B12D0.jpeg" alt="A5561B89-2C96-4E5F-8833-9558D80B12D0.jpeg"></p><ul><li><p>A: 每当Driver进程被启动之后，都会做哪些事情来初始化操作呢？首先它将发送请求到Master上，进行Spark应用程序的注册，也就是我们要让Master知道，现在有一个新的Spark应用程序要运行了。</p></li><li><p>B: 那Master在接收到Spark应用程序的注册申请之后，会发送给Worker，让其进行资源的调度和分配。这也说明资源分配是由executor来分配管理。</p></li><li><p>C: Worter接收Master的请求之后，会为Spark应用启动Executor，来给分配资源。</p></li><li><p>D: Executor启动分配资源好后，就会向Driver进行反注册，这也Driver就会知道哪些Executor是为他进行服务的了。</p></li><li><p>E: 当Driver得到注册了Executor之后，就可以开启正式执行我们的spark应用程序了。首先第一步，就是创建初始RDD，读取数据源，再执行之后的一系列算子。HDFS文件内容被读取到多个worker节点上，形成内存中的分布式数据集，也就是初始RDD 。</p></li><li><p>F: 这时候，Driver就会根据Job任务中的算子形成对应的task，最后提交给Executor，来分配task进行计算的线程。</p></li><li><p>G: 这时的task就会去调用对应自己任务的数据(也就是第一步初始化RDD的partition)来计算，并且task会对调用过来的RDD的partition数据执行指定的算子操作，形成新的RDD的partition，这时一个大的循环就结束了。</p></li></ul><h3 id="3-spark的shuffle介绍"><a href="#3-spark的shuffle介绍" class="headerlink" title="3. spark的shuffle介绍"></a>3. spark的shuffle介绍</h3><p>待整理</p><h3 id="4-Spark的-partitioner-都有哪些"><a href="#4-Spark的-partitioner-都有哪些" class="headerlink" title="4. Spark的 partitioner 都有哪些?"></a>4. Spark的 partitioner 都有哪些?</h3><p><code>Partitioner</code>主要由两个实现类：<code>HashPartitioner</code>和<code>RangePartitioner</code>。<code>HashPartitioner</code>主要用于<code>tansformation算子</code>的默认实现。<code>RangePartitoner</code>主要用于<code>sortBy</code>和<code>sortByKey</code>。</p><ul><li><p>HashPartitoner: numPartitions方法返回传入的分区数，getPartition方法使用key的hashCode值对分区数取模得到PartitionId，写入到对应的bucket中。</p></li><li><p>RangePartioner: 相比于HashPartitoner，RangePartioner能保证每个分区中的数据量的均匀</p></li></ul><h3 id="5-coalesce和repartition区别"><a href="#5-coalesce和repartition区别" class="headerlink" title="5. coalesce和repartition区别"></a>5. coalesce和repartition区别</h3><ul><li>coalesce用已有的partition去尽量减少数据shuffle。</li><li>repartition创建新的partition并且使用 full shuffle。repartition使得每个partition的数据大小都粗略地相等。</li><li>coalesce会使得每个partition不同数量的数据分布（有些时候各个partition会有不同的size）<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repartition</span></span>(numPartitions: <span class="type">Int</span>)(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>] = <span class="literal">null</span>): <span class="type">RDD</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line">  coalesce(numPartitions, shuffle = <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-coalesce如果不进行shuffle为什么会导致数据倾斜"><a href="#6-coalesce如果不进行shuffle为什么会导致数据倾斜" class="headerlink" title="6. coalesce如果不进行shuffle为什么会导致数据倾斜"></a>6. coalesce如果不进行shuffle为什么会导致数据倾斜</h3><ol><li>进行分区缩小时，如果原分区为3个分区中的数据分别为[1,2],[3,4],[5,6]，此时缩小为2若不shuffle，便可能是[1,2],[3,4,5,6]或[1,2,3,4],[5,6]</li><li>进行分区缩小时，如果原分区为2个分区中的数据分别为[1,2],[3,4]，此时扩大为3若不shuffle，便是[1,2],[3,4],[]</li></ol><h3 id="7-Spark有哪几种join"><a href="#7-Spark有哪几种join" class="headerlink" title="7. Spark有哪几种join"></a>7. Spark有哪几种join</h3><p>spark中和join相关的算子有这几个：<code>join</code>, <code>fullOuterJoin</code>, <code>leftOuterJoin</code>, <code>rightOuterJoin</code></p><ul><li><p><code>join</code>: join函数会输出两个RDD中key相同的所有项，并将它们的value联结起来，它联结的key要求在两个表中都存在，类似于SQL中的INNER JOIN。但它不满足交换律，a.join(b)与b.join(a)的结果不完全相同，值插入的顺序与调用关系有关。</p></li><li><p><code>leftOuterJoin</code>: leftOuterJoin会保留对象的所有key，而用None填充在参数RDD other中缺失的值，因此调用顺序会使结果完全不同。如下面展示的结果，</p></li><li><p><code>rightOuterJoin</code>: rightOuterJoin与leftOuterJoin基本一致，区别在于它的结果保留的是参数other这个RDD中所有的key。</p></li><li><p><code>fullOuterJoin</code>: fullOuterJoin会保留两个RDD中所有的key，因此所有的值列都有可能出现缺失的情况，所有的值列都会转为Some对象。</p></li></ul><h3 id="8-RDD有哪些特点"><a href="#8-RDD有哪些特点" class="headerlink" title="8. RDD有哪些特点"></a>8. RDD有哪些特点</h3><ol><li><code>a list of partition</code>: RDD是一个有多个partition（某个节点里的某一片连续的数据）组成的list，将数据加载为RDD是，一般会遵循数据的本地性（一般一个hdfs里的block会记载成一个partition）。</li><li><code>a function for computing each split</code>: RDD的每个partition上面都会有function，也就是函数应用，其作用是实现RDD之间的partition的转换。</li><li><code>A list of dependencies on other RDDs</code>: RDD会记录他的依赖，为了容错（重算，cache，checkpoint），也就是说在内存中的RDD操作是出错或丢失会进行重算。</li><li><code>Optionally, a partitioner for key-value RDDs</code>: 可选项，如果RDD里面存的数据时key-value形式，则可以传递一个自定义的partitioner进行重分区，例如这里自定义的partitioner是基于key进行分区，那则会将不容的RDD里面相同的key的数据放到同一个partition里面。</li><li><code>Optionally, a list of prefered locations to compute each split on</code>: 根据数据的位置进行最优位置的计算。</li></ol><h3 id="9-讲一下宽依赖以及窄依赖"><a href="#9-讲一下宽依赖以及窄依赖" class="headerlink" title="9. 讲一下宽依赖以及窄依赖"></a>9. 讲一下宽依赖以及窄依赖</h3><p><a href="https://www.jianshu.com/p/736a4e628f0f" target="_blank" rel="noopener">spark宽依赖和窄依赖</a><br>宽依赖和窄依赖的区别就是RDD之间是否存在shuffle操作。<br>如果父RDD分区对应1个子RDD的分区就是窄依赖，否则就是宽依赖。</p><h4 id="1-窄依赖"><a href="#1-窄依赖" class="headerlink" title="1.窄依赖"></a>1.窄依赖</h4><p>窄依赖指父RDD的每一个分区最多被一个子RDD的分区所用，即一个父RDD对应一个子RDD或者多个父RDD对应一个子RDD。</p><ul><li>map, filter, union 属于窄依赖</li><li>co-partioned join 属于窄依赖<blockquote><p>join分为宽依赖和窄依赖，如果RDD有相同的partitioner，那么将不会引起shuffle，因此我们可以对RDD进行Hash分区。分别对A和B用同一个函数进行Partition，比如按照首字母进行Partition，那么A和B都可以分成26个Partition，并且A1只需要和B1进行join，A1不需要和B剩下的25个Partition进行join，这样就大大的减少了join次数，最好的办法是对表进行分区，每次只取两个对应分区的数据进行join操作。</p></blockquote></li></ul><h4 id="2-宽依赖"><a href="#2-宽依赖" class="headerlink" title="2.宽依赖"></a>2.宽依赖</h4><p>宽依赖指子RDD的每个分区都依赖于父RDD的多个分区</p><ul><li>group by和join 都属于宽依赖</li><li>DAGScheduler从当前算子往前推，遇到宽依赖就生成一个stage。</li></ul><h4 id="3-为什么spark将依赖分位窄依赖和宽依赖"><a href="#3-为什么spark将依赖分位窄依赖和宽依赖" class="headerlink" title="3.为什么spark将依赖分位窄依赖和宽依赖"></a>3.为什么spark将依赖分位窄依赖和宽依赖</h4><ul><li><p>窄依赖<br>可以支持在一个集群的Executor上，以pipeline管道形式顺序执行多条命令。同时也由于分区内的计算收敛，不需要依赖所有分区的数据，可以并行的在不同的节点计算。所以他的失败恢复也更简单。只需要重新计算丢失的parent partition即可。</p></li><li><p>宽依赖<br>宽依赖需要所有父分区都是可用的，必须等RDD的parent partition数据全部ready之后才能进行计算。从数据恢复的角度，shuffle dependency牵扯到RDD各级的多个parent partition。对于宽依赖，重算的父RDD分区对应多个子RDD分区，这样实际上父RDD 中只有一部分的数据是被用于恢复这个丢失的子RDD分区的，另一部分对应子RDD的其它未丢失分区，这就造成了多余的计算；更一般的，宽依赖中子RDD分区通常来自多个父RDD分区，极端情况下，所有的父RDD分区都要进行重新计算。</p></li></ul><h3 id="10-Spark中的算子有哪些"><a href="#10-Spark中的算子有哪些" class="headerlink" title="10. Spark中的算子有哪些"></a>10. Spark中的算子有哪些</h3><p>Spark分位两大类算子：<br>Transformation 变换/转换算子：这种变换并不触发提交作业，完成作业中间过程处理。Transformation操作是延迟计算的，也就是说从一个RDD转换成另一个RDD的转换操作不是马上执行，需要等到有Action操作的时候才会真正触发计算。</p><p>Action行动算子：这类算子会触发SparkContext提交Job作业。</p><ol><li><p>Value数据类型的Transformation算子</p><ol><li><p>一对一<br>map算子<br>flatMap算子<br>mapPartitions算子<br>glom算子</p></li><li><p>多对一<br>union算子<br>cartesian算子（笛卡尔）</p></li><li><p>多对多<br>groupBy算子</p></li><li><p>输出为输入子集<br>filter算子<br>distinct算子<br>subtract算子（差集）<br>sample算子（抽样调查）<br>takeSample算子</p></li><li><p>Cache型<br>cache算子<br>persist算子</p></li></ol></li><li><p>Key-Value数据类型的Transformation算子</p><ol><li><p>一对一<br>mapValues算子 [对于(K,V)形式的类型只对V进行操作]</p></li><li><p>对单个RDD或两个RDD聚集<br>combineByKey算子<br>reduceByKey算子<br>partitionBy算子<br>Cogroup算子</p></li><li><p>连接<br>join算子<br>leftOutJoin 和 rightOutJoin算子</p></li></ol></li></ol><ol start="3"><li><p>Action算子</p><ol><li><p>无输出<br>foreach算子</p></li><li><p>HDFS算子<br>saveAsTextFile算子<br>saveAsObjectFile算子</p></li><li><p>Scala集合和数据类型<br>collect算子<br>collectAsMap算子<br>reduceByKeyLocally算子<br>lookup算子<br>count算子<br>top算子<br>reduce算子<br>fold算子<br>aggregate算子<br>countByValue<br>countByKey</p></li></ol></li></ol><h3 id="11-RDD的缓存级别"><a href="#11-RDD的缓存级别" class="headerlink" title="11. RDD的缓存级别"></a>11. RDD的缓存级别</h3><ol><li>NONE：什么类型都不是</li><li>DISK_ONLY：磁盘</li><li>DISK_ONLY_2：磁盘；双副本</li><li>MEMORY_ONLY：内存；反序列化；把RDD作为反序列化的方式存储，假如RDD的内容存不下，剩余的分区在以后需要时会重新计算，不会刷到磁盘上</li><li>MEMORY_ONLY_2：内存；反序列化；双副本。</li><li>MEMORY_ONLY_SER：内存；序列化；这种序列化方式，每一个partition以字节数据存储，好处是能带来更好的空间存储，但CPU耗费高</li><li>MEMORY_ONLY_SER_2：内存；序列化；双副本</li><li>MEMORY_AND_DISK：内存 + 磁盘；反序列化；双副本；RDD以反序列化的方式存内存，假如RDD的内容存不下，剩余的会存到磁盘</li><li>MEMORY_AND_DISK_2：内存 + 磁盘；反序列化；双副本</li><li>MEMORY_AND_DISK_SER：内存 + 磁盘；序列化</li><li>MEMORY_AND_DISK_SER_2：内存 + 磁盘；序列化；双副本</li></ol><h3 id="12-RDD懒加载是什么意思"><a href="#12-RDD懒加载是什么意思" class="headerlink" title="12. RDD懒加载是什么意思"></a>12. RDD懒加载是什么意思</h3><p>Transformation 操作是延迟计算的，也就是说从一个RDD转换生成另一个RDD的转换操作不是马上执行，需要等到有Acion操作的时候才会真正触发运算,这也就是懒加载。</p><h3 id="13-讲一下spark的几种部署方式"><a href="#13-讲一下spark的几种部署方式" class="headerlink" title="13. 讲一下spark的几种部署方式"></a>13. 讲一下spark的几种部署方式</h3><p>目前,除了local模式为本地调试模式以为, Spark支持三种分布式部署方式，分别是standalone、spark on mesos和 spark on YARN。</p><ol><li><p>Standalone模式<br>即独立模式，自带完整的服务，可单独部署到一个集群中，无需依赖任何其他资源管理系统。从一定程度上说，该模式是其他两种的基础。目前Spark在standalone模式下是没有任何单点故障问题的，这是借助zookeeper实现的，思想类似于Hbase master单点故障解决方案。</p></li><li><p>Spark On YARN模式<br>spark on yarn 的支持两种模式：<br>yarn-cluster：适用于生产环境；<br>yarn-client：适用于交互、调试，希望立即看到app的输出<br>yarn-cluster和yarn-client的区别在于yarn appMaster，每个yarn app实例有一个appMaster进程，是为app启动的第一个container；负责从ResourceManager请求资源，获取到资源后，告诉NodeManager为其启动container。yarn-cluster和yarn-client模式内部实现还是有很大的区别。如果你需要用于生产环境，那么请选择yarn-cluster；而如果你仅仅是Debug程序，可以选择yarn-client。</p></li><li><p>Spark On Mesos模式<br>略</p></li></ol><h3 id="14-Spark-on-yarn模式下的cluster模式和client模式有什么区别"><a href="#14-Spark-on-yarn模式下的cluster模式和client模式有什么区别" class="headerlink" title="14. Spark on yarn模式下的cluster模式和client模式有什么区别"></a>14. Spark on yarn模式下的cluster模式和client模式有什么区别</h3><ol><li>yarn-cluster适用于生产环境。而yarn-client适用于交互和调试，也就是希望快速地看到application的输出。</li><li>yarn-cluster 和 yarn-client 模式的区别其实就是 Application Master 进程的区别，yarn-cluster 模式下，driver 运行在 AM(Application Master)中，它负责向 YARN 申请资源，并监督作业的运行状况。当用户提交了作业之后，就可以关掉 Client，作业会继续在 YARN 上运行。然而 yarn-cluster 模式不适合运行交互类型的作业。而 yarn-client 模式下，Application Master 仅仅向 YARN 请求 executor，Client 会和请求的container 通信来调度他们工作，也就是说 Client 不能离开。</li></ol><h3 id="15-spark运行原理，从提交一个jar到最后返回结果"><a href="#15-spark运行原理，从提交一个jar到最后返回结果" class="headerlink" title="15. spark运行原理，从提交一个jar到最后返回结果"></a>15. spark运行原理，从提交一个jar到最后返回结果</h3><ol><li>spark-submit提交代码，执行new SparkContext(), 在SparkContext里构造DAGScheduler和TaskScheduler。</li><li>TaskScheduler会通过后台的一个进程，连接master，向master注册Application。</li><li>Master接收到Application请求后，会使用相应的资源调用算法。在Worker上为这个Application启动多个Executor。</li><li>Executor启动后，会自己反向注册到TaskScheduler中。所有Executor都注册到Driver上之后，SparkContext结束初始化，接下来往下执行我们自己的代码。</li><li>每执行到一个 Action，就会创建一个 Job。Job 会提交给 DAGScheduler。</li><li>DAGScheduler 会将 Job划分为多个 stage，然后每个 stage 创建一个 TaskSet。</li><li>TaskScheduler 会把每一个 TaskSet 里的 Task，提交到 Executor 上执行。</li><li>Executor 上有线程池，每接收到一个 Task，就用 TaskRunner 封装，然后从线程池里取出一个线程执行这个 task。(TaskRunner 将我们编写的代码，拷贝，反序列化，执行 Task，每个 Task 执行 RDD 里的一个 partition)</li></ol><h3 id="16-Spark的stage是如何划分的"><a href="#16-Spark的stage是如何划分的" class="headerlink" title="16. Spark的stage是如何划分的"></a>16. Spark的stage是如何划分的</h3><p>stage的划分依据就是看是否产生了shuffle（即宽依赖），遇到一个shuffle操作就划分为前后两个stage。</p><h3 id="17-Spark2-0为什么放弃了akka而用netty"><a href="#17-Spark2-0为什么放弃了akka而用netty" class="headerlink" title="17. Spark2.0为什么放弃了akka而用netty"></a>17. Spark2.0为什么放弃了akka而用netty</h3><ol><li>很多Spark用户也使用Akka，但是由于Akka不同版本之间无法互相通信，这就要求用户必须使用跟Spark完全一样的Akka版本，导致用户无法升级Akka。</li><li>Spark的Akka配置是针对Spark自身来调优的，可能跟用户自己代码中的Akka配置冲突。</li><li>Spark用的Akka特性很少，这部分特性很容易自己实现。同时，这部分代码量相比Akka来说少很多，debug比较容易。如果遇到什么bug，也可以自己马上fix，不需要等Akka上游发布新版本。而且，Spark升级Akka本身又因为第一点会强制要求用户升级他们使用的Akka，对于某些用户来说是不现实的。</li></ol><h3 id="18-Spark的各种HA，master-worker-executor的ha"><a href="#18-Spark的各种HA，master-worker-executor的ha" class="headerlink" title="18. Spark的各种HA，master/worker/executor的ha"></a>18. Spark的各种HA，master/worker/executor的ha</h3><ul><li><p>Master异常<br>spark可以在集群运行时启动一个或多个standby Master,当 Master 出现异常时,会根据规则启动某个standby master接管,在standlone模式下有如下几种配置</p><ul><li><p>ZOOKEEPER<br>集群数据持久化到zk中,当master出现异常时,zk通过选举机制选出新的master,新的master接管是需要从zk获取持久化信息</p></li><li><p>FILESYSTEM<br>集群元数据信息持久化到本地文件系统, 当master出现异常时,只需要在该机器上重新启动master,启动后新的master获取持久化信息并根据这些信息恢复集群状态</p></li><li><p>CUSTOM<br>自定义恢复方式,对 standloneRecoveryModeFactory 抽象类 进行实现并把该类配置到系统中,当master出现异常时,会根据用户自定义行为恢复集群</p></li><li><p>None<br>不持久化集群的元数据, 当 master出现异常时, 新启动的Master 不进行恢复集群状态,而是直接接管集群</p></li></ul></li><li><p>Worker异常<br>Worker以定时发送心跳给Master，让Master知道Worker的实时状态，当Worker出现超时，Master 调用 timeOutDeadWorker 方法进行处理,在处理时根据 Worker 运行的是 Executor 和 Driver 分别进行处理。<br>如果是Executor, Master先把该 Worker 上运行的Executor 发送信息ExecutorUpdate给对应的Driver,告知Executor已经丢失,同时把这些Executor从其应用程序列表删除, 另外, 相关Executor的异常也需要处理<br>如果是Driver, 则判断是否设置重新启动,如果需要,则调用Master.shedule方法进行调度,分配合适节点重启Driver, 如果不需要重启, 则删除该应用程序</p></li><li><p>Executor异常<br>Executor发生异常时由ExecutorRunner捕获该异常并发送ExecutorStateChanged信息给Worker<br>Worker接收到消息时, 在Worker的 handleExecutorStateChanged 方法中, 根据Executor状态进行信息更新,同时把Executor状态发送给Master<br>Master在接受Executor状态变化消息之后,如果发现其是异常退出,会尝试可用的Worker节点去启动Executor</p></li></ul><h3 id="19-spark的内存管理机制-spark-1-6前后分析对比-spark2-0-做出来哪些优化"><a href="#19-spark的内存管理机制-spark-1-6前后分析对比-spark2-0-做出来哪些优化" class="headerlink" title="19. spark的内存管理机制,spark 1.6前后分析对比, spark2.0 做出来哪些优化"></a>19. spark的内存管理机制,spark 1.6前后分析对比, spark2.0 做出来哪些优化</h3><h3 id="20-讲一下spark中的广播变量"><a href="#20-讲一下spark中的广播变量" class="headerlink" title="20. 讲一下spark中的广播变量"></a>20. 讲一下spark中的广播变量</h3><p>broadcast 就是将数据从一个节点发送到其他各个节点上去。这样的场景很多，比如 driver 上有一张表，其他节点上运行的 task 需要 lookup 这张表，那么 driver 可以先把这张表 copy 到这些节点，这样 task 就可以在本地查表了。</p><ul><li><p>为什么broadcast是只读变量<br>这就涉及到一致性的问题，如果变量可以被更新，name一旦变量被某个节点更新，其他的节点要不要一块更新？如果多个节点同事更新，更新顺序是什么？怎么做同步？为了避免维护数据一致性问题，Spark 目前只支持 broadcast 只读变量。</p></li><li><p>为什么broadcast到节点而不是到每个task<br>因为每个task是一个线程，而且同在一个进程运行tasks都属于同一个application。因此每个节点（executor）上放一份就可以被所有task共享。</p></li><li><p>怎么实现broadcast<br>Driver先建一个本地文件夹用于存放需要broadcast的data，并启动一个可以访问该文件的HttpServer。当调用val bdata = sc.broadcast(data)时就把data写入文件夹，同时写入driver自己的blockManger中（StorageLevel 为内存＋磁盘）。如果func用到了 bdata，那么driver submitTask() 的时候会将bdata一同func进行序列化得到 serialized task，<strong>注意序列化的时候不会序列化bdata中包含的data。</strong>上一章讲到 serialized task从driverActor传递到executor时使用Akka的传消息机制，消息不能太大，而实际的data可能很大，所以这时候还不能broadcast data。</p><blockquote><p>driver 为什么会同时将 data 放到磁盘和 blockManager 里面？放到磁盘是为了让 》HttpServer 访问到，放到 blockManager 是为了让 driver program 自身使用 bdata 时方便（其实我觉得不放到 blockManger 里面也行）。<br><strong>那么什么时候传送真正的 data？</strong>在 executor 反序列化 task 的时候，会同时反序列化 task 中的 bdata 对象，这时候会调用 bdata 的 readObject() 方法。该方法先去本地 blockManager 那里询问 bdata 的 data 在不在 blockManager 里面，如果不在就使用下面的两种 fetch 方式之一去将 data fetch 过来。得到 data 后，将其存放到 blockManager 里面，这样后面运行的 task 如果需要 bdata 就不需要再去 fetch data 了。如果在，就直接拿来用了。</p></blockquote></li></ul><p>下面探讨 broadcast data 时候的两种实现方式：</p><ul><li>HttpBroadcast<br>无</li><li>TorrentBroadcast<br>无</li></ul><h3 id="21-什么是数据倾斜，怎样去处理数据倾斜"><a href="#21-什么是数据倾斜，怎样去处理数据倾斜" class="headerlink" title="21. 什么是数据倾斜，怎样去处理数据倾斜"></a>21. 什么是数据倾斜，怎样去处理数据倾斜</h3><p><a href="https://juejin.cn/post/6844903837505945608#heading-9" target="_blank" rel="noopener">参考文章：Spark学习——数据倾斜</a><br><a href="https://blog.csdn.net/qq_35394891/article/details/82260907" target="_blank" rel="noopener">[spark 面试]数据倾斜</a><br>数据倾斜是一种很常见的问题，比方WordCount中某个Key对应的数据量非常大，就会产生数据倾斜，导致两个后果：</p><ul><li>OOM（单或少数的节点）</li><li>拖慢整个Job执行时间（其他已经完成的节点都在等未完成的节点）</li></ul><p>数据倾斜主要分为两类：聚合倾斜和join倾斜</p><ul><li><p>聚合倾斜</p><ul><li>双重聚合（局部聚合+全局聚合）<ul><li>场景：对RDD进行reduceByKey等聚合类shuffle算子，SparkSQL的groupBy做分组聚合这两种情况。</li><li>思路：首先通过map给每个key打上n以内的随机数的前缀并进行局部聚合，即(hello, 1) (hello, 1) (hello, 1) (hello, 1)变为(1_hello, 1) (1_hello, 1) (2_hello, 1)，并进行reduceByKey的局部聚合，然后再次map将key的前缀随机数去掉再次进行全局聚合。</li><li>原理: 对原本相同的key进行随机数附加，变成不同key，让原本一个task处理的数据分摊到多个task做局部聚合，规避单task数据过量。之后再去随机前缀进行全局聚合；</li><li>优点：效果非常好（对聚合类Shuffle操作的倾斜问题）；</li><li>缺点：范围窄（仅适用于聚合类的Shuffle操作，join类的Shuffle还需其它方案）</li></ul></li></ul></li><li><p>join倾斜</p><ul><li><p>将reduce join转化为map join</p><ul><li>场景: 对RDD或Spark SQL使用join类操作或语句，且join操作的RDD或表比较小（百兆或1,2G）； </li><li>思路: 使用broadcast和map类算子实现join的功能替代原本的join，彻底规避shuffle。对较小RDD直接collect到内存，并创建broadcast变量；并对另外一个RDD执行map类算子，在该算子的函数中，从broadcast变量（collect出的较小RDD）与当前RDD中的每条数据依次比对key，相同的key执行你需要方式的join；</li><li>原理: 若RDD较小，可采用广播小的RDD，并对大的RDD进行map，来实现与join同样的效果。简而言之，用broadcast-map代替join，规避join带来的shuffle（无Shuffle无倾斜）； </li><li>优点：效果很好（对join操作导致的倾斜），根治；</li><li>缺点：适用场景小（大表+小表），广播（driver和executor节点都会驻留小表数据）小表也耗内存</li></ul></li><li><p>采样倾斜key并分拆join操作</p><ul><li>场景：两个较大的（无法采用方案五）RDD/Hive表进行join时，且一个RDD/Hive表中少数key数据量过大，另一个RDD/Hive表的key分布较均匀（RDD中两者之一有一个更倾斜）； </li><li>思路:<ul><li>对更倾斜rdd1进行采样（RDD.sample）并统计出数据量最大的几个key；</li><li>对这几个倾斜的key从原本rdd1中拆出形成一个单独的rdd1_1，并打上0~n的随机数前缀，被拆分的原rdd1的另一部分（不包含倾斜key）又形成一个新rdd1_2；</li><li>对rdd2过滤出rdd1倾斜的key，得到rdd2_1，并将其中每条数据扩n倍，对每条数据按顺序附加0~n的前缀，被拆分出key的rdd2也独立形成另一个rdd2_2； 【个人认为，这里扩了n倍，最后union完还需要将每个倾斜key对应的value减去(n-1)】</li><li>将加了随机前缀的rdd1_1和rdd2_1进行join（此时原本倾斜的key被打散n份并被分散到更多的task中进行join）； 【个人认为，这里应该做两次join，两次join中间有一个map去前缀】</li><li>另外两个普通的RDD（rdd1_2、rdd2_2）照常join；</li><li>最后将两次join的结果用union结合得到最终的join结果。 原理：对join导致的倾斜是因为某几个key，可将原本RDD中的倾斜key拆分出原RDD得到新RDD，并以加随机前缀的方式打散n份做join，将倾斜key对应的大量数据分摊到更多task上来规避倾斜；</li></ul></li><li>优点: 前提是join导致的倾斜（某几个key倾斜），避免占用过多内存（只需对少数倾斜key扩容n倍）； </li><li>缺点: 对过多倾斜key不适用。</li></ul></li><li><p>用随机前缀和扩容RDD进行join</p><ul><li>场景：RDD中有大量key导致倾斜； </li><li>思路：与方案六类似<ul><li>查看RDD/Hive表中数据分布并找到造成倾斜的RDD/表；</li><li>对倾斜RDD中的每条数据打上n以内的随机数前缀；</li><li>对另外一个正常RDD的每条数据扩容n倍，扩容出的每条数据依次打上0到n的前缀；</li><li>对处理后的两个RDD进行join。</li></ul></li><li>原理: 与方案六只有唯一不同在于这里对不倾斜RDD中所有数据进行扩大n倍，而不是找出倾斜key进行扩容； </li><li>优点: 对join类的数据倾斜都可处理，效果非常显著； </li><li>缺点: 缓解，扩容需要大内存</li></ul></li></ul></li></ul><h3 id="22-分析一下一段spark代码中哪些部分在Driver端执行-哪些部分在Worker端执行"><a href="#22-分析一下一段spark代码中哪些部分在Driver端执行-哪些部分在Worker端执行" class="headerlink" title="22. 分析一下一段spark代码中哪些部分在Driver端执行,哪些部分在Worker端执行"></a>22. 分析一下一段spark代码中哪些部分在Driver端执行,哪些部分在Worker端执行</h3><p>Driver Program是用户编写的提交给Spark集群执行的application，它包含两部分</p><ul><li>作为驱动： Driver与Master、Worker协作完成application进程的启动、DAG划分、计算任务封装、计算任务分发到各个计算节点(Worker)、计算资源的分配等。</li><li>计算逻辑本身，当计算任务在Worker执行时，执行计算逻辑完成application的计算任务</li></ul><p>一般来说transformation算子均是在worker上执行的,其他类型的代码在driver端执行</p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于JUnit和Mockito的单元测试</title>
      <link href="/2022/03/30/%E5%9F%BA%E4%BA%8EJUnit%E5%92%8CMockito%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/03/30/%E5%9F%BA%E4%BA%8EJUnit%E5%92%8CMockito%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-测试驱动开发TDD"><a href="#1-测试驱动开发TDD" class="headerlink" title="1. 测试驱动开发TDD"></a>1. 测试驱动开发TDD</h3><h4 id="1-1-什么是测试驱动开发"><a href="#1-1-什么是测试驱动开发" class="headerlink" title="1.1. 什么是测试驱动开发"></a>1.1. 什么是测试驱动开发</h4><blockquote><p>测试驱动开发（TDD），指先编写接口，紧接着编写测试。编写完测试后，我们才开始真正编写实现代码。在编写实现代码的过程中，一边写，一边测，什么时候测试全部通过了，那就表示编写的实现完成了：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[编写接口] --&gt; B(编写测试)</span><br><span class="line">B --&gt; C(编写实现)</span><br><span class="line">C --&gt; D(运行测试)</span><br><span class="line">D --&gt; E&#123;是否通过测试&#125;</span><br><span class="line">E --&gt;|Y| F(任务完成)</span><br><span class="line">E --&gt;|N| C</span><br></pre></td></tr></table></figure><h4 id="1-2-如何编写一个简单测试"><a href="#1-2-如何编写一个简单测试" class="headerlink" title="1.2. 如何编写一个简单测试"></a>1.2. 如何编写一个简单测试</h4><p>实际代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factorial</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fact</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            r = r * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fact(<span class="number">10</span>) == <span class="number">3628800</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"pass"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">"fail"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用上述测试方法有很多问题</p><ol><li>一个类只会存在一个<code>main()</code>方法</li><li>无法将实际代码与测试代码分离</li><li>无法简单快捷的打印测试结果和期待结果，例如<code>expected: 3628800, but actual: 123456</code></li><li>很难编写一组通用的测试代码<blockquote><p>因此我们需要一个通用的简单易用的框架来编写单元测试，这就是JUnit</p></blockquote></li></ol><h3 id="2-JUnit介绍及使用"><a href="#2-JUnit介绍及使用" class="headerlink" title="2. JUnit介绍及使用"></a>2. JUnit介绍及使用</h3><h5 id="本章内容基于JUnit4"><a href="#本章内容基于JUnit4" class="headerlink" title="本章内容基于JUnit4"></a><em>本章内容基于JUnit4</em></h5><h4 id="2-1-一个简单的例子"><a href="#2-1-一个简单的例子" class="headerlink" title="2.1. 一个简单的例子"></a>2.1. 一个简单的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(JUnit4.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathFunctionTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">        Assert.assertEquals(a, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@RunWith</code>就是一个运行器<br><code>@RunWith(JUnit4.class)</code>就是指用JUnit4来运行<br><code>@RunWith(SpringRunner.class)</code>，让测试运行于<code>Spring</code>测试环境，以便在测试开始的时候自动创建<code>Spring</code>的应用上下文</p></blockquote><h4 id="2-2-JUnit4常见注解"><a href="#2-2-JUnit4常见注解" class="headerlink" title="2.2. JUnit4常见注解"></a>2.2. JUnit4常见注解</h4><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@BeforeClass</td><td>所注解的方法是JUnit测试时首先被运行的方法且只能运行一次，通常用来进行预处理等操作。</td></tr><tr><td>@Before</td><td>所注解的方法在每个Test测试用例运行前运行，常用来进行初始化测试用例所需的资源。</td></tr><tr><td>@Test</td><td>所注解方法的代码为测试用例，包含对源程序的测试代码。包括expected和timeout两个可选参数。其中：expected表示测试用例运行后应该抛出的异常；timeout表示测试方法的运行时间，以避免程序测试时死循环或测试时间过长。</td></tr><tr><td>@After</td><td>所注解的方法是JUnit测试时最后一个被运行的方法且只能运行一次，通常用来释放相关使用资源。</td></tr><tr><td>@AfterClss</td><td>所注解的方法是JUnit测试时最后一个被运行的方法且只能运行一次，通常用来释放相关使用资源。</td></tr><tr><td>@Ignore</td><td>所注解的方法在测试过程中不会运行。</td></tr></tbody></table><h4 id="2-3-注解举例"><a href="#2-3-注解举例" class="headerlink" title="2.3. 注解举例"></a>2.3. 注解举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(JUnit4.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"beforeClass"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ignoreTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ignoreTest"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterClass"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beforeClass</span><br><span class="line">before</span><br><span class="line">test1</span><br><span class="line">after</span><br><span class="line">before</span><br><span class="line">test2</span><br><span class="line">after</span><br></pre></td></tr></table></figure><h3 id="3-Mockito介绍及使用"><a href="#3-Mockito介绍及使用" class="headerlink" title="3. Mockito介绍及使用"></a>3. Mockito介绍及使用</h3><h4 id="3-1-Mockito"><a href="#3-1-Mockito" class="headerlink" title="3.1. Mockito"></a>3.1. Mockito</h4><p>mockito是一个mock框架，他使得用户能够使用简介的Api做测试。</p><h4 id="3-2-为什么需要Mock"><a href="#3-2-为什么需要Mock" class="headerlink" title="3.2. 为什么需要Mock"></a>3.2. 为什么需要Mock</h4><p>测试驱动的开发(TDD)要求我们先写单元测试，再写实现代码。在写单元测试的过程中，我们往往会遇到要测试的类有很多依赖，这些依赖的类/对象/资源又有别的依赖，从而形成一个大的依赖树，要在单元测试的环境中完整地构建这样的依赖，是一件很困难的事情。如下图所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(Class A) --&gt; B(Class B)</span><br><span class="line">A --&gt; C(Class C)</span><br><span class="line">B --&gt; D(Class D)</span><br><span class="line">B --&gt; E(Class E)</span><br></pre></td></tr></table></figure><p>我们会发现需要测试Class A牵扯到多个类的依赖，这是我们就可以通过Mock B类和C类如下图所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(Class A) --&gt; B(Class B Mock)</span><br><span class="line">A --&gt; C(Class C Mock)</span><br></pre></td></tr></table></figure></p><h4 id="3-4-项目集成Mockito"><a href="#3-4-项目集成Mockito" class="headerlink" title="3.4. 项目集成Mockito"></a>3.4. 项目集成Mockito</h4><blockquote></blockquote><p>SpringBoot项目</p><blockquote><p><code>spring-boot-starter-test</code>中默认集成了<code>Mockito</code>，所以只需要引入<code>spring-boot-starter-test</code>依赖即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具体依赖版本请根据实际情况进行选择 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>非SpringBoot<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mockito/mockito-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具体依赖版本请根据实际情况进行选择 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.23.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="3-5-Mockito常用功能实战"><a href="#3-5-Mockito常用功能实战" class="headerlink" title="3.5. Mockito常用功能实战"></a>3.5. Mockito常用功能实战</h4><blockquote><p><a href="https://changingfond.github.io/mockito-zh-doc.html" target="_blank" rel="noopener">Mockito中文文档</a></p></blockquote><h5 id="3-5-1-创建一个简单mock对象以及测试桩"><a href="#3-5-1-创建一个简单mock对象以及测试桩" class="headerlink" title="3.5.1. 创建一个简单mock对象以及测试桩"></a>3.5.1. 创建一个简单mock对象以及测试桩</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 mock 对象</span></span><br><span class="line">List mockedList = mock(List.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建测试桩</span></span><br><span class="line"><span class="comment">// 下面这行等价于 when(mockedList.get(0)).thenReturn("first", "second");</span></span><br><span class="line">when(mockedList.get(<span class="number">0</span>)).thenReturn(<span class="string">"first"</span>)</span><br><span class="line">        .thenReturn(<span class="string">"second"</span>);</span><br><span class="line"></span><br><span class="line">when(mockedList.get(<span class="number">1</span>)).thenThrow(<span class="keyword">new</span> RuntimeException(<span class="string">"mockedList.get(1)异常"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为返回值为void的函数通过Stub抛出异常</span></span><br><span class="line">doThrow(<span class="keyword">new</span> RuntimeException()).when(mockedList).clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用内置的 anyInt() 参数匹配器</span></span><br><span class="line">when(mockedList.get(anyInt())).thenReturn(<span class="string">"element"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处要注意，当使用基本类型时，应该使用对应的 xxxThat，不要使用argThat，否则会由于自动拆箱导致空指针</span></span><br><span class="line">when(mockedList.get(intThat(argument -&gt; argument &gt; <span class="number">10</span>))).thenReturn(<span class="string">"other"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 mock 对象</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(mockedList.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(mockedList.get(<span class="number">1</span>));</span><br><span class="line">System.out.println(mockedList.get(<span class="number">9</span>));</span><br><span class="line">System.out.println(mockedList.get(<span class="number">11</span>));</span><br></pre></td></tr></table></figure><h5 id="3-5-2-验证调用次数"><a href="#3-5-2-验证调用次数" class="headerlink" title="3.5.2. 验证调用次数"></a>3.5.2. 验证调用次数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 mock 对象</span></span><br><span class="line">List mockedList = mock(List.class);</span><br><span class="line">when(mockedList.get(<span class="number">0</span>)).thenReturn(<span class="string">"first"</span>);</span><br><span class="line">when(mockedList.get(anyInt())).thenReturn(<span class="string">"element"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 mock 对象</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(mockedList.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="comment">// verify(mockedList, times(1)).add("once"); 等价于 verify(mockedList).get(0);</span></span><br><span class="line">verify(mockedList).get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 验证从未被调用</span></span><br><span class="line">verify(mockedList, never()).add(<span class="string">"once"</span>);</span><br><span class="line"><span class="comment">// 验证至少调用一次</span></span><br><span class="line">verify(mockedList, atLeastOnce()).get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 验证至少调用三次</span></span><br><span class="line">verify(mockedList, atLeast(<span class="number">3</span>)).get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 验证至多调用三次</span></span><br><span class="line">verify(mockedList, atMost(<span class="number">3</span>)).get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h5 id="3-5-3-验证调用顺序"><a href="#3-5-3-验证调用顺序" class="headerlink" title="3.5.3. 验证调用顺序"></a>3.5.3. 验证调用顺序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List mockedList1 = mock(List.class);</span><br><span class="line">mockedList1.add(<span class="string">"first1"</span>);</span><br><span class="line">mockedList1.add(<span class="string">"second1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为该 mock 对象创建一个 inOrder 对象</span></span><br><span class="line">InOrder inOrderOne = inOrder(mockedList1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证执行顺序</span></span><br><span class="line">inOrderOne.verify(mockedList1).add(<span class="string">"first1"</span>);</span><br><span class="line">inOrderOne.verify(mockedList1).add(<span class="string">"second1"</span>);</span><br><span class="line"></span><br><span class="line">List mockedList2 = mock(List.class);</span><br><span class="line">mockedList2.add(<span class="string">"first2"</span>);</span><br><span class="line">mockedList2.add(<span class="string">"second2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为这两个 mock 对象创建 inOrder 对象</span></span><br><span class="line">InOrder inOrderTwo = inOrder(mockedList1, mockedList2);</span><br><span class="line"><span class="comment">// 验证它们的执行顺序</span></span><br><span class="line">inOrderTwo.verify(mockedList1).add(<span class="string">"first1"</span>);</span><br><span class="line">inOrderTwo.verify(mockedList2).add(<span class="string">"second1"</span>);</span><br></pre></td></tr></table></figure><h5 id="3-5-4-监控真实对象"><a href="#3-5-4-监控真实对象" class="headerlink" title="3.5.4. 监控真实对象"></a>3.5.4. 监控真实对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; spy = spy(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//optionally, you can stub out some methods:</span></span><br><span class="line"><span class="comment">// 你可以为某些函数打桩</span></span><br><span class="line">when(spy.size()).thenReturn(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//using the spy calls *real* methods</span></span><br><span class="line"><span class="comment">// 通过spy对象调用真实对象的函数</span></span><br><span class="line">spy.add(<span class="string">"one"</span>);</span><br><span class="line">spy.add(<span class="string">"two"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//prints "one" - the first element of a list</span></span><br><span class="line"><span class="comment">// 输出第一个元素</span></span><br><span class="line">System.out.println(spy.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//size() method was stubbed - 100 is printed</span></span><br><span class="line"><span class="comment">// 因为size()函数被打桩了,因此这里返回的是100</span></span><br><span class="line">System.out.println(spy.size());</span><br></pre></td></tr></table></figure><p>对于真实对象进行打桩的时候要注意when方法的使用,例如像下方使用会导致报错<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; spy = spy(list);</span><br><span class="line"></span><br><span class="line">when(spy.get(<span class="number">0</span>)).thenReturn(<span class="string">"mock str"</span>);</span><br><span class="line">System.out.println(spy.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure></p><p>此时会抛出错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0</span><br></pre></td></tr></table></figure></p><p>因为Mockito并不会为真实对象代理函数调用，而是真实调用<code>get(0)</code>方法，然后返回你模拟的返回。因此不要期待从监控对象得到正确的结果。那我们应该如果解决这种问题呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; spy = spy(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你需要使用doReturn()来打桩</span></span><br><span class="line">doReturn(<span class="string">"foo"</span>).when(spy).get(<span class="number">0</span>);</span><br><span class="line">System.out.println(spy.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>因此我们可以知道,在对于真是对象的监控对象时<code>when(someMethod.method(xxx)).thenReturn(xxx)</code>会实际调用该对象的真实方法而<code>doReturn(xxx).when(someMethod).method(xxx)</code>不需要调用真实方法。</p><h5 id="3-5-5-捕获参数"><a href="#3-5-5-捕获参数" class="headerlink" title="3.5.5. 捕获参数"></a>3.5.5. 捕获参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ArgumentCaptor&lt;Integer&gt; argument = ArgumentCaptor.forClass(Integer.class);</span><br><span class="line">List list = mock(ArrayList.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你需要使用doReturn()来打桩</span></span><br><span class="line">doReturn(<span class="string">"foo1"</span>).when(list).get(<span class="number">0</span>);</span><br><span class="line">doReturn(<span class="string">"foo2"</span>).when(list).get(<span class="number">1</span>);</span><br><span class="line">System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">verify(list, atLeastOnce()).get(argument.capture());</span><br><span class="line"><span class="comment">// 获取最后一个捕获的参数</span></span><br><span class="line">System.out.println(argument.getValue());</span><br><span class="line"><span class="comment">// 获取所有捕获的参数</span></span><br><span class="line">System.out.println(argument.getAllValues());</span><br></pre></td></tr></table></figure><p>上面方法的输出是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo1</span><br><span class="line">foo1</span><br><span class="line">foo2</span><br><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><h5 id="3-5-6-重置mock对象"><a href="#3-5-6-重置mock对象" class="headerlink" title="3.5.6. 重置mock对象"></a>3.5.6. 重置mock对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List mock = mock(List.class);</span><br><span class="line">when(mock.size()).thenReturn(<span class="number">10</span>);</span><br><span class="line">mock.add(<span class="number">1</span>);</span><br><span class="line">reset(mock);</span><br></pre></td></tr></table></figure><h5 id="3-5-7-验证超时"><a href="#3-5-7-验证超时" class="headerlink" title="3.5.7. 验证超时"></a>3.5.7. 验证超时</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">verify(mock, timeout(<span class="number">100</span>)).someMethod();</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>).times(<span class="number">1</span>)).someMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100毫秒超时并且次数两次</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>).times(<span class="number">2</span>)).someMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100毫秒超时并且最少调用两次</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>).atLeast(<span class="number">2</span>)).someMethod();</span><br></pre></td></tr></table></figure><h5 id="3-5-8-Mockito常用注解"><a href="#3-5-8-Mockito常用注解" class="headerlink" title="3.5.8. Mockito常用注解"></a>3.5.8. Mockito常用注解</h5><table><thead><tr><th>注解名</th><th>描述</th></tr></thead><tbody><tr><td>@Mock</td><td>简化mock(Object)对象的创建</td></tr><tr><td>@Captor</td><td>简化 ArgumentCaptor 的创建</td></tr><tr><td>@Spy</td><td>代替 spy(Object)方法</td></tr><tr><td>@InjectMocks</td><td>Mockito 会注入模拟对象到添加到当前注解的对象</td></tr></tbody></table><h3 id="4-MockMvc简介以及与Mockito的集成"><a href="#4-MockMvc简介以及与Mockito的集成" class="headerlink" title="4. MockMvc简介以及与Mockito的集成"></a>4. MockMvc简介以及与Mockito的集成</h3><blockquote><p><code>MockMvc</code>是由<code>spring-test</code>包提供，实现了对Http请求的模拟，能够直接使用网络的形式，转换到Controller的调用，使得测试速度快、不依赖网络环境。同时提供了一套验证的工具，结果的验证十分方便。简而言之就是可以直接在测试方法中模拟发送一个请求，而不是使用类似于<code>postman</code>等工具进行测试。</p></blockquote><h4 id="4-1-集成MockMvc"><a href="#4-1-集成MockMvc" class="headerlink" title="4.1. 集成MockMvc"></a>4.1. 集成MockMvc</h4><p>引入的<code>spring-boot-starter-test</code>间接引入了<code>spring-test</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h4 id="4-2-MockMvc对象引入"><a href="#4-2-MockMvc对象引入" class="headerlink" title="4.2. MockMvc对象引入"></a>4.2. MockMvc对象引入</h4><p>SpringBoot项目中引入MockMvc对象有两种方式</p><ol><li>在类上加入@AutoConfigureMockMvc注解，然后注入MockMvc对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>()</span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockMvcControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>手动创建一个MockMvc实例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockMvcControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvcController mockMvcController;</span><br><span class="line"></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 此处并不一样要使用注入的bean对象也可以是手动创建的对象</span></span><br><span class="line">        mockMvc = MockMvcBuilders.standaloneSetup(mockMvcController).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那上面两种有什么区别呢？</p><ul><li>对于集成Mockito来说推荐使用第二种方式，因为第一种方式表示 MockMvc由spring容器构建，无法灵活的将生成的mock对象放入需要测试的对象中。</li><li>第二种方式创建的时候我们可以将MockMvcBuilders.standaloneSetup(xxx).build()中的类选择为mock产生的对象就能使得测试更加灵活。</li></ul><h4 id="4-3-MockMvc与Mockito集成"><a href="#4-3-MockMvc与Mockito集成" class="headerlink" title="4.3. MockMvc与Mockito集成"></a>4.3. MockMvc与Mockito集成</h4><h5 id="4-3-1-MockMvc测试纯Mock对象"><a href="#4-3-1-MockMvc测试纯Mock对象" class="headerlink" title="4.3.1. MockMvc测试纯Mock对象"></a>4.3.1. MockMvc测试纯Mock对象</h5><p>代码样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AiControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    MockMvcService mockMvcService;</span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    MockMvcController mockMvcController;</span><br><span class="line"></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br><span class="line">        mockMvc = MockMvcBuilders.standaloneSetup(mockMvcController).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetRankConfig</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        when(mockMvcService.get(anyString())).thenReturn(<span class="string">"result"</span>);</span><br><span class="line">        <span class="keyword">final</span> String result = mockMvc.perform(MockMvcRequestBuilders</span><br><span class="line">                .get(<span class="string">"/get"</span>)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                .param(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>)</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.content().string(<span class="string">"nnn"</span>))</span><br><span class="line">                .andReturn().getResponse().getContentAsString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-2-MockMvc测试真实对象"><a href="#4-3-2-MockMvc测试真实对象" class="headerlink" title="4.3.2. MockMvc测试真实对象"></a>4.3.2. MockMvc测试真实对象</h5><p>在测试真实对象，然后对象中部分接口需要mock时<br>代码样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AiControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    MockMvcService mockMvcService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvcController mockMvcController;</span><br><span class="line"></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br><span class="line">        AiController aiController = <span class="keyword">new</span> AiController();</span><br><span class="line">        ReflectionTestUtils.setField(mockMvcController, <span class="string">"mockMvcService"</span>, mockMvcService);</span><br><span class="line">        mockMvc = MockMvcBuilders.standaloneSetup(mockMvcController).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetRankConfig</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        when(mockMvcService.get(anyString())).thenReturn(<span class="string">"result"</span>);</span><br><span class="line">        <span class="keyword">final</span> String result = mockMvc.perform(MockMvcRequestBuilders</span><br><span class="line">                .get(<span class="string">"/get"</span>)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                .param(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.content().string(<span class="string">"nnn"</span>))</span><br><span class="line">                .andReturn().getResponse().getContentAsString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;String,  Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line">            put(<span class="string">"aaa"</span>, <span class="string">"1"</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String result = mockMvc.perform(MockMvcRequestBuilders</span><br><span class="line">                .post(<span class="string">"/xxx"</span>)</span><br><span class="line">                .content(JSON.toJSONString(map))</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andReturn().getResponse().getContentAsString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Idea单元测试工具使用"><a href="#4-Idea单元测试工具使用" class="headerlink" title="4. Idea单元测试工具使用"></a>4. Idea单元测试工具使用</h3><p>参考文章：<br><a href="https://www.cnblogs.com/Ming8006/p/6297333.html" target="_blank" rel="noopener">https://www.cnblogs.com/Ming8006/p/6297333.html</a><br><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304048154181666" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1252599548343744/1304048154181666</a><br><a href="https://www.w3cschool.cn/junit/ari41hv9.html" target="_blank" rel="noopener">https://www.w3cschool.cn/junit/ari41hv9.html</a><br><a href="https://changingfond.github.io/mockito-zh-doc.html" target="_blank" rel="noopener">https://changingfond.github.io/mockito-zh-doc.html</a><br><a href="https://blog.csdn.net/u010675669/article/details/86574956" target="_blank" rel="noopener">https://blog.csdn.net/u010675669/article/details/86574956</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JUnit </tag>
            
            <tag> Mockito </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty核心模块组件梳理</title>
      <link href="/2022/01/21/Netty%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%BB%84%E4%BB%B6%E6%A2%B3%E7%90%86/"/>
      <url>/2022/01/21/Netty%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%BB%84%E4%BB%B6%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Bootstarp、ServerBootstrap"><a href="#一、Bootstarp、ServerBootstrap" class="headerlink" title="一、Bootstarp、ServerBootstrap"></a>一、Bootstarp、ServerBootstrap</h3><p>Bootstrap意思是引导，一个Netty应用通常的Bootstrap开始，主要用于配置整个Netty程序。Netty中Bootstrap类是客户端程序的启动引导类，ServerBootstrap是服务端启动引导类。</p><h4 id="1-1-方法汇总"><a href="#1-1-方法汇总" class="headerlink" title="1.1 方法汇总"></a>1.1 方法汇总</h4><table><thead><tr><th>方法名</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>group(EventLoopGroup parentGroup, EventLoopGroup childGroup)</td><td>本方法用于服务端引导</td><td>parent指bossGroup，childGroup指workerGroup</td></tr><tr><td>group(EventLoopGroup group)</td><td>本方法用于客户端引导</td><td></td></tr><tr><td>channel(Class&lt;? extends C&gt; channelClass)</td><td>配置通道实现类</td><td></td></tr><tr><td>option(ChannelOption<t> option, T value)</t></td><td>用来给ServerChannel添加配置</td><td></td></tr><tr><td>childOption(ChannelOption<t> childOption, T value)</t></td><td>用来给接收到的通道添加配置</td><td></td></tr><tr><td>childHandler(ChannelHandler childHandler</td><td>该方法用来设置业务处理类(自定义的</td></tr></tbody></table><p>handler) |  |<br>| bind(int inetPort) | 该方法用于服务器端，用来设置占用的端口号 |  |<br>| connect(String inetHost, int inetPort) | 该方法用于客户端，用来连接服务器端 |  |</p><h3 id="二、Future-ChannelFuture"><a href="#二、Future-ChannelFuture" class="headerlink" title="二、Future, ChannelFuture"></a>二、Future, ChannelFuture</h3><p>Netty 中所有的 IO 操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 Future 和 ChannelFutures，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件。</p><h4 id="1-2-常见的方法"><a href="#1-2-常见的方法" class="headerlink" title="1.2 常见的方法"></a>1.2 常见的方法</h4><p>Channel channel()，返回当前正在进行 IO 操作的通道<br>ChannelFuture sync()，等待异步操作执行完毕</p><h3 id="三、Channel"><a href="#三、Channel" class="headerlink" title="三、Channel"></a>三、Channel</h3><p>1) Netty 网络通信的组件，能够用于执行网络 I/O 操作。<br>2) 通过Channel可获得当前网络连接的通道的状态<br>3) 通过Channel可获得网络连接的配置参数(例如接收缓冲区大小)<br>4) Channel 提供异步的网络 I/O 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 I/O 调用都将立即返 回，并且不保证在调用结束时所请求的 I/O 操作已完成<br>5) 调用立即返回一个 ChannelFuture 实例，通过注册监听器到 ChannelFuture 上，可以 I/O 操作成功、失败或取 消时回调通知调用方<br>6) 支持关联 I/O 操作与对应的处理程序<br>7) 不同协议、不同的阻塞类型的连接都有不同的 Channel 类型与之对应，常用的 Channel 类型:<br>NioSocketChannel，异步的客户端 TCP Socket 连接。<br>NioServerSocketChannel，异步的服务器端 TCP Socket 连接。<br>NioDatagramChannel，异步的 UDP 连接。<br>NioSctpChannel，异步的客户端 Sctp 连接。<br>NioSctpServerChannel，异步的 Sctp 服务器端连接，这些通道涵盖了 UDP 和 TCP 网络 IO 以及文件 IO。</p><h3 id="四、Selector"><a href="#四、Selector" class="headerlink" title="四、Selector"></a>四、Selector</h3><p>1) Netty 基于 Selector 对象实现 I/O 多路复用，通过 Selector 一个线程可以监听多个连接的 Channel 事件。<br>2) 当向一个 Selector 中注册 Channel 后，Selector 内部的机制就可以自动不断地查询(Select) 这些注册的 Channel 是否有已就绪的 I/O 事件(例如可读，可写，网络连接完成等)，这样程序就可以很简单地使用一个<br>线程高效地管理多个 Channel</p><h3 id="五、ChannelHandler"><a href="#五、ChannelHandler" class="headerlink" title="五、ChannelHandler"></a>五、ChannelHandler</h3><p>1) ChannelHandler 是一个接口，处理 I/O 事件或拦截 I/O 操作，并将其转发到其 ChannelPipeline(业务处理链) 中的下一个处理程序。<br>2) ChannelHandler 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类<br>3) ChannelHandler 及其实现类一览图(后)</p><p>ChannelInboundHandler用于处理入站I/O事件。<br>ChannelOutboundHandler用于处理出站I/O操作。<br>适配器<br>ChannelInboundHandlerAdapter用于处理入站I/O事件。<br>ChannelOutboundHandlerAdapter用于处理出站I/O操作。<br>ChannelDuplexHandler用于处理入站和出站事件。</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-NIO知识点简单梳理</title>
      <link href="/2022/01/21/Java-NIO%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AE%80%E5%8D%95%E6%A2%B3%E7%90%86/"/>
      <url>/2022/01/21/Java-NIO%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AE%80%E5%8D%95%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Buffer梳理"><a href="#一、Buffer梳理" class="headerlink" title="一、Buffer梳理"></a>一、Buffer梳理</h3><h4 id="1-1-字段解释"><a href="#1-1-字段解释" class="headerlink" title="1.1 字段解释"></a>1.1 字段解释</h4><p>表中几个字段的数学关系是：0 &lt;= <code>mark</code> &lt;= <code>positon</code> &lt;= <code>limit</code> &lt;= <code>capacity</code></p><table><thead><tr><th>字段名</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>capacity</code></td><td>buffer容量</td><td>比如在<code>ByteBuffer.allocate(1024)</code>表示将容量设置为1024</td></tr><tr><td><code>position</code></td><td>当前指针偏移量</td><td>比如在新创建的byteBuffer中<code>put()</code>一个byte，此时<code>position</code>由0变为1</td></tr><tr><td><code>limit</code></td><td>限制指针的大小</td><td>比如<code>ByteBuffer.allocate(1024)</code>此时<code>limit</code>为1024，所以<code>position</code>最大为1024。</td></tr><tr><td><code>mark</code></td><td>临时标记，默认是未定义的</td><td>假设<code>IntBuffer.allocate(1024)</code>，现在<code>position</code>位置为10，现在只想发送512到1024之间的缓冲数据，此时我们可以<code>buffer.mark(buffer.position())</code>既将position记入mark位置，然后<code>buffer.postion(512)</code>，此时发送的数据就是512到1024之间的数据。发送完成后，调用<code>buffer.reset()</code>将mark临时标记赋值给<code>position</code>使得<code>position=mark</code>。注意如果未设定<code>mark</code>，而调用了<code>buffer.reset()</code>方法则会抛出<code>InvalidMarkException</code></td></tr></tbody></table><h4 id="1-2-方法汇总"><a href="#1-2-方法汇总" class="headerlink" title="1.2 方法汇总"></a>1.2 方法汇总</h4><table><thead><tr><th>方法</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>capacity()</code></td><td>获取容量大小</td><td></td></tr><tr><td><code>position()</code></td><td>获取当前值的偏移量</td><td></td></tr><tr><td><code>position(int newPosition)</code></td><td>设置偏移量指针未知</td><td><code>newPosition</code>需要小于<code>capacity</code></td></tr><tr><td><code>limit()</code></td><td>获取当前<code>limit</code>大小</td><td></td></tr><tr><td><code>limit(int newLimit)</code></td><td>设置当前<code>limit</code>大小</td><td><code>limit</code>应该小于等于<code>capacity</code>并大于0</td></tr><tr><td><code>mark()</code></td><td>记录当前的偏移量位置</td><td>即 <code>mark=position</code></td></tr><tr><td><code>reset()</code></td><td>重置为先前偏移量的位置</td><td>本方法一般要和<code>mark()</code>方法配合使用，当没有初始化<code>mark()</code>值会抛出<code>InvalidMarkException</code>异常</td></tr><tr><td><code>clear()</code></td><td>清除缓冲区</td><td>将<code>position=0,limit=capacity,mark=-1</code></td></tr><tr><td><code>flip()</code></td><td>读写翻转</td><td>将<code>limit=position,position=0,mark=-1</code>。需要注意假设一个<code>position=1,capacity=1024</code>的读状态的buffer翻转此时limit=1而不是1024</td></tr><tr><td><code>rewind()</code></td><td>回退缓冲区</td><td>他只是将<code>position=0</code>和<code>mark=-1</code></td></tr><tr><td><code>remaining()</code></td><td>返回当前位置和limit之前的元素数</td><td></td></tr><tr><td><code>hasRemaining()</code></td><td>判断当前位置和limit之前是否还存在元素</td></tr></tbody></table><h3 id="二、Channel梳理"><a href="#二、Channel梳理" class="headerlink" title="二、Channel梳理"></a>二、Channel梳理</h3><h4 id="1-1-基本介绍"><a href="#1-1-基本介绍" class="headerlink" title="1.1 基本介绍"></a>1.1 基本介绍</h4><p>channel可以同时进行读写而流只能读或者写<br>channel可以从buffer中读数据，也可以向buffer中写数据<br>常用的 <code>Channel</code> 类有：<code>FileChannel</code>、<code>DatagramChannel</code>、<code>ServerSocketChannel</code>、<code>SocketChannel</code>、<code>ServerSocketChannel</code>、<code>SocketChannel</code></p><h3 id="三、Selector梳理"><a href="#三、Selector梳理" class="headerlink" title="三、Selector梳理"></a>三、Selector梳理</h3><h4 id="3-1-基本介绍"><a href="#3-1-基本介绍" class="headerlink" title="3.1 基本介绍"></a>3.1 基本介绍</h4><ol><li>Java 的 NIO，用非阻塞的 IO 方式。可以用一个线程，处理多个的客户端连接，就会使用到Selector(选择器)</li><li>Selector 能够检测多个注册的通道上是否有事件发生(注意:多个Channel以事件的方式可以注册到同一个Selector)，如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。</li><li>只有在 连接/通道 真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程4) 避免了多线程之间的上下文切换导致的开销</li></ol><h4 id="3-2-方法汇总"><a href="#3-2-方法汇总" class="headerlink" title="3.2 方法汇总"></a>3.2 方法汇总</h4><table><thead><tr><th>方法名</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>open()</td><td>创建一个selector</td><td></td></tr><tr><td>isOpen()</td><td>判断当前selector是否开启</td><td></td></tr><tr><td>keys()</td><td>返回当前selector注册的所有channel的selectionKey</td><td></td></tr><tr><td>selectedKeys()</td><td>返回当前selector中等待io操作的channel的selectionKey</td><td></td></tr><tr><td>selectNow()</td><td>通过非阻塞的方式获取当前等待io的channel的键数量</td><td></td></tr><tr><td>select()</td><td>通过阻塞的方式获取当前等待io的channel的键数量</td><td></td></tr><tr><td>select(long timeout)</td><td>同上，只不过多了一个等待超时时间</td><td></td></tr><tr><td>wakeup()</td><td>唤醒阻塞的select()</td><td>调用wakeup()没有select操作，下次调用select相关操作立即返回，不执行poll()，包括selectNow()。多次调用与一次效果一样</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring核心容器简介-BeanFactory，ApplicationContext</title>
      <link href="/2021/08/17/Spring%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8%E7%AE%80%E4%BB%8B-BeanFactory%EF%BC%8CApplicationContext/"/>
      <url>/2021/08/17/Spring%E6%A0%B8%E5%BF%83%E5%AE%B9%E5%99%A8%E7%AE%80%E4%BB%8B-BeanFactory%EF%BC%8CApplicationContext/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在Spring中容器的实现类并不是唯一的，Spring框架中提供了多个容器的实现。主要分为两套体系：一套是早期的BeanFactory体系，还有一个就是ApplicationContext，也被成为服务上下文，它继承了BeanFactory，除了BeanFactory的功能外还提供了事务，AOP，国际化的消息源以及应用程序事务处理等企业级服务。</p></blockquote><h2 id="1-BeanFactory"><a href="#1-BeanFactory" class="headerlink" title="1.BeanFactory"></a>1.BeanFactory</h2><p>首先我们来看一下BeanFacotry源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主要是用于FactoryBean的转义进行定义，因为当使用FactoryBean创建Bean时，使用名字进行检索获取的是FactoryBean所创建的Bean对象</span></span><br><span class="line"><span class="comment"> * 而需要使用转义来获取FactoryBean本身。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String FACTORY_BEAN_PREFIX = <span class="string">"&amp;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据bean的名称获取容器中的实例，这个bean可以是单例bean也可以是原型bean。</span></span><br><span class="line"><span class="comment">     * 当无法获取指定名称的bean将会抛出NoSuchBeanDefinitionException异常。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据bean的名称和bean的类型来获取容器中的bean实例，这个bean可以是单例bean也可以是原型bean。</span></span><br><span class="line"><span class="comment">     * 当获取的bean不是所需类型，则抛出BeanNotOfRequiredTypeException异常。可以简单理解成增加了安全验证机制。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据名称来获取bean，第二个参数args可以用来给bean进行赋值。复制的方式有两种，构造方法和工厂方法。</span></span><br><span class="line"><span class="comment"> * 但是通过这种方式获取的bean必须为原型bean而不是单例bean。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Object <span class="title">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据bean类型来获取容器中的bean，当bean不唯一是抛出NoUniqueBeanDefinitionException异常。</span></span><br><span class="line"><span class="comment">     * 当没有获得对应bean时抛出NoSuchBeanDefinitionException异常。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该方法与getBean(String name, Class&lt;T&gt; requiredType)方法类似</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定bean的提供者，可以简单理解为，假设一个bean是通过FactoryBean生成，此处将返回创建该bean的FactoryBean。</span></span><br><span class="line"><span class="comment">     * 调用这个方法返回的是一个对象的实例。此接口通常用于封装一个泛型工厂，在每次调用的时候返回一些目标对象新的实例。</span></span><br><span class="line"><span class="comment">     * ObjectFactory和FactoryBean是类似的，只不过FactoryBean通常被定义为BeanFactory中的服务提供者（SPI）实例，</span></span><br><span class="line"><span class="comment">     * 而ObjectFactory通常是以API的形式提供给其他的bean。简单的来说，ObjectFactory一般是提供给开发者使用的，</span></span><br><span class="line"><span class="comment">     * FactoryBean一般是提供给BeanFactory使用的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">ObjectProvider&lt;T&gt; <span class="title">getBeanProvider</span><span class="params">(Class&lt;T&gt; requiredType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">ObjectProvider&lt;T&gt; <span class="title">getBeanProvider</span><span class="params">(ResolvableType requiredType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断当前容器是否存在某种名称的bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断bean是否为单例bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断bean是否为原型bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据bean名称，判断是否有指定类型匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, ResolvableType typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, Class&lt;?&gt; typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取bean的类型，对于FactoryBean，返回Factory.getObjectType()返回的类型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回给定bean的别名（如果有的话），在getBean调用中，所有这些别名都指向同一个bean。</span></span><br><span class="line"><span class="comment">     * 如果给定的名称是别名，则返回相应的原始bean名称和其他别名。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] getAliases(String name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2、ApplicationContext"><a href="#2、ApplicationContext" class="headerlink" title="2、ApplicationContext"></a>2、ApplicationContext</h2><p>ApplicationContext为BeanFactory的子类，它不仅包含BeanFactory的所有功能，还对其进行了扩展。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> <span class="keyword">extends</span> <span class="title">EnvironmentCapable</span>, <span class="title">ListableBeanFactory</span>, <span class="title">HierarchicalBeanFactory</span>,</span></span><br><span class="line"><span class="class"><span class="title">MessageSource</span>, <span class="title">ApplicationEventPublisher</span>, <span class="title">ResourcePatternResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前应用程序上下文的唯一ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前应用程序上下文所属应用程序的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getApplicationName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前应用程序上下文的具象化类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getDisplayName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前应用上下文第一次加载时的时间戳</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getStartupDate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取父级应用程序上下文，如果没有则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">ApplicationContext <span class="title">getParent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过getAutowireCapableBeanFactory这个方法将 AutowireCapableBeanFactory这个接口暴露给外部使用，</span></span><br><span class="line"><span class="comment"> * AutowireCapableBeanFactory这个接口一般在applicationContext的内部是较少使用的，</span></span><br><span class="line"><span class="comment"> * 它的功能主要是为了装配applicationContext管理之外的Bean。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">AutowireCapableBeanFactory <span class="title">getAutowireCapableBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ApplicationContext本身实现的方法较少，也比较简单，但是他通过继承六个接口来实现了Bean相关的方法等常用功能。<br>ApplicationContext有多种实现类，其中最重要的两类是ConfigurableApplicationContext和WebApplicationContext。</p><h3 id="2-1、ConfigurableApplicationContext"><a href="#2-1、ConfigurableApplicationContext" class="headerlink" title="2.1、ConfigurableApplicationContext"></a>2.1、ConfigurableApplicationContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span>, <span class="title">Lifecycle</span>, <span class="title">Closeable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面这些字符会被认为是用于分割上下文配置路径的分隔符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String CONFIG_LOCATION_DELIMITERS = <span class="string">",; \t\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在BeanFactory中ConversionService对应的bean名称。如果没有实现该类的实例，则使用默认的转换规则。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String CONVERSION_SERVICE_BEAN_NAME = <span class="string">"conversionService"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LoadTimeWaver类所对应的Bean在容器中的名字。如果提供了该实例，上下文会使用临时的 ClassLoader。</span></span><br><span class="line"><span class="comment"> * 这样，LoadTimeWaver就可以使用bean确切的类型了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String LOAD_TIME_WEAVER_BEAN_NAME = <span class="string">"loadTimeWeaver"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Environment在容器中的Bean名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String ENVIRONMENT_BEAN_NAME = <span class="string">"environment"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * System系统变量在容器中对应的Bean名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String SYSTEM_PROPERTIES_BEAN_NAME = <span class="string">"systemProperties"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * System环境变量在容器中对应的Bean名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String SYSTEM_ENVIRONMENT_BEAN_NAME = <span class="string">"systemEnvironment"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给当前应用上下文设置唯一ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为当前容器设置父容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(@Nullable ApplicationContext parent)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置当前容器的环境变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(ConfigurableEnvironment environment)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以ConfigurableEnvironment的形式返回当前容器的环境变量。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">ConfigurableEnvironment <span class="title">getEnvironment</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为当前容器新增一个BeanFactoryPostProcessor。增加的BeanFactoryPostProcessor将在容器进行refresh操作后使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addBeanFactoryPostProcessor</span><span class="params">(BeanFactoryPostProcessor postProcessor)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为当前容器新增一个ApplicationListener，增加的Listener将用于发布上下文时间。如初始化刷新容器，关闭容器。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为当前容器新增一个ProtocolResolver，ProtocolResolver主要用于自定义协议的解析。</span></span><br><span class="line"><span class="comment"> * 比如spring就有一个 “classpath:”开头的特定协议（但是spring并不是自定义ProtocolResolver 实现来完成这个功能的）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addProtocolResolver</span><span class="params">(ProtocolResolver resolver)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载或者刷新配置，可能是xml文件或者是properties文件，或者是连接数据源。</span></span><br><span class="line"><span class="comment"> * 由于这是一个初始化方法，当前方法执行失败时，则已经创建的Bean也会销毁。</span></span><br><span class="line"><span class="comment"> * 所以调用此方法时，要么所有的Bean都实例化成功，要么一个Bean都没有实例化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向JVM注册一个关闭当前应用上下文的回调函数。当前方法可以多次调用，但是一个应用上下文只会有一个回调函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerShutdownHook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭当前应用程序上下文，释放所占用对的资源和锁，并且销毁所有已经创建的单例Bean</span></span><br><span class="line"><span class="comment"> * 该close()方法不会调用父类的close方法。父级应用上下文有自己的生命周期。</span></span><br><span class="line"><span class="comment"> * 这个方法可以被多次调用而没有副作用：对已经关闭的上下文的后续close调用将被忽略。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断当前应用上下文是否处于启动状态，即是否至少执行一次refresh()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前应用上下文的BeanFactory容器。不要使用当前方法对BeanFactory生成的Bean进行后置处理，因为此时Bean已经初始化完成。</span></span><br><span class="line"><span class="comment"> * 应该是用BeanFactoryPostProcessor来在Bean声称之前对其进行处理。在获取容器是应该保证容器是在启动状态，即在refresh()和close()之间。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、WebApplicationContext"><a href="#2-2、WebApplicationContext" class="headerlink" title="2.2、WebApplicationContext"></a>2.2、WebApplicationContext</h3><p>WebApplicationCOntext是专门为Web应用所准备的，其允许从相对于Web根目录的路径中加载配置文件完成初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整个Web应用上下文是作为属性放置在ServletContext中的，该常量就是应用上下文在ServletContext属性列表中的key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE = WebApplicationContext.class.getName() + <span class="string">".ROOT"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * request作用域，只要发出一个请求就会创建一个request，它的作用域：尽在当前请求中有效。</span></span><br><span class="line"><span class="comment"> * 用处：常用于服务器间同一请求不同页面之间的参数传递，常应用于表单的控件值传递。</span></span><br><span class="line"><span class="comment"> * 方法：request.setAttribute(); request.getAttribute(); request.removeAttribute(); request.getParameter().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String SCOPE_REQUEST = <span class="string">"request"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器会为每个会话创建一个session对象，所以session中的数据可供当前会话中所有servlet共享。</span></span><br><span class="line"><span class="comment"> * 会话：用户打开浏览器会话开始，直到关闭浏览器会话才会结束。一次会话期间只会创建一个session对象。</span></span><br><span class="line"><span class="comment"> * 用处：常用于web开发中的登陆验证界面（当用户登录成功后浏览器分配其一个session键值对）。</span></span><br><span class="line"><span class="comment"> * 方法：session.setAttribute(); session.getAttribute(); session.removeAttribute();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String SCOPE_SESSION = <span class="string">"session"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 作用范围：所有的用户都可以取得此信息，此信息在整个服务器上被保留。Application属性范围值，只要设置一次，则所有的网页窗口都可以取得数据。</span></span><br><span class="line"><span class="comment"> * ServletContext在服务器启动时创建，在服务器关闭时销毁，一个JavaWeb应用只创建一个ServletContext对象，</span></span><br><span class="line"><span class="comment"> * 所有的客户端在访问服务器时都共享同一个ServletContext对象;ServletContext对象一般用于在多个客户端间共享数据时使用;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String SCOPE_APPLICATION = <span class="string">"application"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在工厂中的bean名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String SERVLET_CONTEXT_BEAN_NAME = <span class="string">"servletContext"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServletContext 初始化参数名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String CONTEXT_PARAMETERS_BEAN_NAME = <span class="string">"contextParameters"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在工厂中 ServletContext 属性值环境bean的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String CONTEXT_ATTRIBUTES_BEAN_NAME = <span class="string">"contextAttributes"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来获取 ServletContext 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、ApplicationContext和BeanFactory对比"><a href="#3、ApplicationContext和BeanFactory对比" class="headerlink" title="3、ApplicationContext和BeanFactory对比"></a>3、ApplicationContext和BeanFactory对比</h3><p>1.ApplicationContext包含BeanFactory的所有特性，所以一般情况下我们都选择使用ApplicationContext，但是在一些限制情况下，如对于内存消耗要求比较严格的时候使用轻量的BeanFactory是更合理的选择。<br>2.在BeanFactory采用延迟加载的形式来注入Bean。只有使用到某个Bean是，才会对Bean进行加载实例化。而ApplicationContext则相反，它在容器启动时，一次性创建了所有Bean。这样我们就能在容器启动时发现Spring存在的配置错误。<br>3.BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。</p><table><thead><tr><th>功能/特点</th><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>Bean加载方式</td><td>延迟加载</td><td>容器启动时加载所有Bean</td></tr><tr><td>Bean 实例化/装配</td><td>有</td><td>有</td></tr><tr><td>BeanPostProcessor 自动注册</td><td>没有</td><td>有</td></tr><tr><td>BeanFactoryPostProcessor 自动注册</td><td>没有</td><td>有</td></tr><tr><td>MessageSource 便捷访问（针对i18n）</td><td>没有</td><td>有</td></tr><tr><td>ApplicationEvent 发布</td><td>没有</td><td>有</td></tr></tbody></table><h2 id="3、ApplicationContext准备启动"><a href="#3、ApplicationContext准备启动" class="headerlink" title="3、ApplicationContext准备启动"></a>3、ApplicationContext准备启动</h2><p> ps:ContextLoaderListener简介<a href="https://www.cnblogs.com/xunyi/p/10363290.html" target="_blank" rel="noopener">https://www.cnblogs.com/xunyi/p/10363290.html</a></p><p> 在容器启动时会调用ContextLoaderListener中的contextInitialized()方法<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContextLoaderListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ContextLoaderListener</span><span class="params">(WebApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化根web应用程序上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类ContextLoader的方法进行web容器初始化</span></span><br><span class="line">initWebApplicationContext(event.getServletContext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭根web应用程序上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">closeWebApplicationContext(event.getServletContext());</span><br><span class="line">ContextCleanupListener.cleanupAttributes(event.getServletContext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们查看父类的initWebApplicationListener<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoader</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 将上下文存储在本地实例变量中，以确保在ServletContext关闭时可用。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.context == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 createWebApplicationContext 方法创建应用上下文</span></span><br><span class="line"><span class="keyword">this</span>.context = createWebApplicationContext(servletContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) <span class="keyword">this</span>.context;</span><br><span class="line"><span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 在该方法中调用上下文的 refresh 方法，refresh 就是启动上下文的入口</span></span><br><span class="line">configureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureAndRefreshWebApplicationContext</span><span class="params">(ConfigurableWebApplicationContext wac, ServletContext sc)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">wac.refresh();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用SpringBoot启动ApplicationContext时<br>首先我们可以看SpringBoot的启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>点击进入SpringApplication的run方法我们可以得知<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 创建一个应用上下文            </span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 进入refreshContext方法可以发现实际是调用refresh启动上下文方法</span></span><br><span class="line">refreshContext(context);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过对ContextLoaderListener和SpringApplication两个类的分析我们可以发现，实际最终他们都调用了refresh()方法，所以我们接下来对refresh()进行分析。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 预刷新，做一些准备工作。记录了启动时间戳，标记为活动，非关闭状态，并处理配置文件中的占位符</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析配置文件，创建BeanFactory，对Bean进行包装成BeanDefinition</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对BeanFactory进行增强处理，比如添加BeanPostProcessor，手动注册部分bean等。</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 钩子方法，BeanFactory创建后，对BeanFactory的自定义操作。</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重点：调用了postProcessBeanDefinitionRegistry(registry);</span></span><br><span class="line">            <span class="comment">// springboot中很多激活自动配置的注解都是通过这里导入的。</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重点：从beanFactory中获取所有的BeanPostProcessor，优先进行getBean操作，实例化</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 国际化支持</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化ApplicationEventMulticaster。 如果上下文中未定义，则使用SimpleApplicationEventMulticaster。</span></span><br><span class="line">            <span class="comment">// 这里是监听器的支持，监听器时间多播。</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 钩子方法，springBoot中的嵌入式tomcat就是通过此方法实现的</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 监听器注册</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重点方法：完成容器中bean的实例化，及代理的生成等操作。</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 完成此上下文的刷新，调用LifecycleProcessor的onRefresh（）方法并发布</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                        <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结： 容器是Spring中最为重要的概念之一，也是Spring大厦的基石。通过总结我们可以发现，Spring Bean的自动注入大大简化了操作，下一步我们将分析，Spring是如何通过Xml文件或者注解的方式将我们需要的Bean放入容器中的。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> BeanFactory </tag>
            
            <tag> ApplicationContext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive之行列互转</title>
      <link href="/2020/12/07/Hive%E4%B9%8B%E8%A1%8C%E5%88%97%E4%BA%92%E8%BD%AC/"/>
      <url>/2020/12/07/Hive%E4%B9%8B%E8%A1%8C%E5%88%97%E4%BA%92%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="一、行转列"><a href="#一、行转列" class="headerlink" title="一、行转列"></a>一、行转列</h3><h4 id="1-1-函数说明"><a href="#1-1-函数说明" class="headerlink" title="1.1 函数说明"></a>1.1 函数说明</h4><p><code>CONCAT(string A/col, string B/col...)</code></p><ul><li>返回输入字符串连接后的结果，支持任意个输入字符串</li></ul><p><code>CONCAT_WS(separator, str1, str2,...)</code></p><ul><li>他是一个特殊形式的CONCAT()，第一个参数是剩余参数间的分隔符。分隔符可以是与剩余参数一样的字符串。如果分隔符是NULL返回值也是NULL。这个函数会跳过分隔符参数后的任何NULL和空字符串。分隔符将被加到被连接的字符串之间;</li></ul><p><code>COLLECT_SET(col)</code></p><ul><li>函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段。</li></ul><h4 id="1-2-准备数据"><a href="#1-2-准备数据" class="headerlink" title="1.2 准备数据"></a>1.2 准备数据</h4><table><thead><tr><th>name</th><th>constellation</th><th>blood_type</th></tr></thead><tbody><tr><td>孙悟空</td><td>白羊座</td><td>A</td></tr><tr><td>大海</td><td>射手座</td><td>A</td></tr><tr><td>宋宋</td><td>白羊座</td><td>B</td></tr><tr><td>猪八戒</td><td>白羊座</td><td>A</td></tr><tr><td>凤姐</td><td>射手座</td><td>A</td></tr></tbody></table><h4 id="1-3-需求描述"><a href="#1-3-需求描述" class="headerlink" title="1.3 需求描述"></a>1.3 需求描述</h4><p>将星座和血型一样的人归类到一起<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">射手座,A 大海|凤姐</span><br><span class="line">白羊座,A 孙悟空|猪八戒</span><br><span class="line">白羊座,B 宋宋</span><br></pre></td></tr></table></figure></p><h4 id="1-4-实现SQL"><a href="#1-4-实现SQL" class="headerlink" title="1.4 实现SQL"></a>1.4 实现SQL</h4><p>sql<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t1.base, <span class="keyword">CONCAT_WS</span>(<span class="string">"|"</span>, CONCAT_SET(t1.name)) <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">name</span>, <span class="keyword">CONCAT</span>(constellation, <span class="string">","</span>, blood_type) base <span class="keyword">FROM</span> person_info) t1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> t1.base;</span><br></pre></td></tr></table></figure></p><h3 id="二、列转行"><a href="#二、列转行" class="headerlink" title="二、列转行"></a>二、列转行</h3><h4 id="2-1-函数说明"><a href="#2-1-函数说明" class="headerlink" title="2.1 函数说明"></a>2.1 函数说明</h4><p><code>EXPLODE(col)</code></p><ul><li>将hive一列中复杂的array或者map结构拆分成多行。</li></ul><p><code>LATERAL VIEW</code></p><ul><li>用法:LATERAL VIEW udtf(expression) tableAlias AS columnAlias</li><li>解释:用于和split,explode等UDTF一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。</li></ul><h4 id="2-2-数据准备"><a href="#2-2-数据准备" class="headerlink" title="2.2 数据准备"></a>2.2 数据准备</h4><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑,动作,科幻,剧情</td></tr><tr><td>《Lie to me》</td><td>悬疑,警匪,动作,心理,剧情</td></tr><tr><td>《战狼 2》</td><td>战争,动作,灾难</td></tr></tbody></table><h4 id="2-3-需求描述"><a href="#2-3-需求描述" class="headerlink" title="2.3 需求描述"></a>2.3 需求描述</h4><p>将电影分类中的数组数据展开。结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">《疑犯追踪》 悬疑</span><br><span class="line">《疑犯追踪》 动作</span><br><span class="line">《疑犯追踪》 科幻</span><br><span class="line">《疑犯追踪》 剧情</span><br><span class="line">《Lie to me》 悬疑</span><br><span class="line">《Lie to me》 警匪</span><br><span class="line">《Lie to me》 动作</span><br><span class="line">《Lie to me》 心理</span><br><span class="line">《Lie to me》 剧情</span><br><span class="line">《战狼 2》 战争</span><br><span class="line">《战狼 2》 动作</span><br><span class="line">《战狼 2》 灾难</span><br></pre></td></tr></table></figure></p><h4 id="2-4-实现SQL"><a href="#2-4-实现SQL" class="headerlink" title="2.4 实现SQL"></a>2.4 实现SQL</h4><p>sql<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">movie,</span><br><span class="line">category_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">movie_info lateral <span class="keyword">view</span> explode(<span class="keyword">category</span>) table_tmp <span class="keyword">as</span> category_name;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive之窗口函数</title>
      <link href="/2020/11/30/Hive%E4%B9%8B%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/"/>
      <url>/2020/11/30/Hive%E4%B9%8B%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、常见窗口函数函数"><a href="#一、常见窗口函数函数" class="headerlink" title="一、常见窗口函数函数"></a>一、常见窗口函数函数</h3><ol><li><code>OVER()</code> </li></ol><ul><li>指定分析函数工作的数据窗口大小，这个数据窗口的大小可能会随着行的变化而变化。</li></ul><ol start="2"><li><code>CURRENT ROW</code></li></ol><ul><li>当前行</li></ul><ol start="3"><li><code>n PRECEDING</code></li></ol><ul><li>往前n行数据</li></ul><ol start="4"><li><code>n FOLLOWING</code></li></ol><ul><li>往后n行数据</li></ul><ol start="5"><li><code>UNBOUNDED</code></li></ol><ul><li>起点，UNBOUNDED PRECEDING表示从前面的起点，UNBOUNDED FOLLOWING表示到后面的终点</li></ul><ol start="6"><li><code>LAG(col, n)</code></li></ol><ul><li>往前第n行数据</li></ul><ol start="7"><li><code>LEAD(col, n)</code></li></ol><ul><li>往后第n行数据</li></ul><ol start="8"><li><code>NTILE(n)</code></li></ol><ul><li>把有序分区中的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。注意：n必须为int类型。</li></ul><h3 id="二、案例实操"><a href="#二、案例实操" class="headerlink" title="二、案例实操"></a>二、案例实操</h3><h4 id="2-1-数据准备-business表"><a href="#2-1-数据准备-business表" class="headerlink" title="2.1 数据准备 business表"></a>2.1 数据准备 business表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name，orderdate，cost</span><br><span class="line">jack,2017-01-01,10</span><br><span class="line">tony,2017-01-02,15</span><br><span class="line">jack,2017-02-03,23</span><br><span class="line">tony,2017-01-04,29</span><br><span class="line">jack,2017-01-05,46</span><br><span class="line">jack,2017-04-06,42</span><br><span class="line">tony,2017-01-07,50</span><br><span class="line">jack,2017-01-08,55</span><br><span class="line">mart,2017-04-08,62</span><br><span class="line">mart,2017-04-09,68</span><br><span class="line">neil,2017-05-10,12</span><br><span class="line">mart,2017-04-11,75</span><br><span class="line">neil,2017-06-12,80</span><br><span class="line">mart,2017-04-13,94</span><br></pre></td></tr></table></figure><h4 id="2-2-查询在2017年4月份购买过的顾客及总人数"><a href="#2-2-查询在2017年4月份购买过的顾客及总人数" class="headerlink" title="2.2 查询在2017年4月份购买过的顾客及总人数"></a>2.2 查询在2017年4月份购买过的顾客及总人数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, <span class="keyword">count</span>(*) <span class="keyword">over</span>()</span><br><span class="line"><span class="keyword">from</span> business</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">substring</span>(ordergate, <span class="number">1</span>, <span class="number">7</span>) = <span class="string">'2017-04'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure><h4 id="2-3-查询顾客的购买明细及月购买总额"><a href="#2-3-查询顾客的购买明细及月购买总额" class="headerlink" title="2.3 查询顾客的购买明细及月购买总额"></a>2.3 查询顾客的购买明细及月购买总额</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, orderdate, <span class="keyword">cost</span>, <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">substring</span>(ordergate, <span class="number">1</span>, <span class="number">7</span>))</span><br><span class="line"><span class="keyword">from</span> business</span><br></pre></td></tr></table></figure><h4 id="2-4-上述的场景-要将cost按照日期进行累加"><a href="#2-4-上述的场景-要将cost按照日期进行累加" class="headerlink" title="2.4 上述的场景,要将cost按照日期进行累加"></a>2.4 上述的场景,要将cost按照日期进行累加</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,orderdate,<span class="keyword">cost</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>() <span class="keyword">as</span> sample1,<span class="comment">--所有行相加</span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span>) <span class="keyword">as</span> sample2,<span class="comment">--按name分组，组内 数据相加</span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> sample3,<span class="comment">--按name分组，组内数据累加</span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">UNBOUNDED</span> <span class="keyword">PRECEDING</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span> ) <span class="keyword">as</span> sample4 ,<span class="comment">--和sample3一样,由起点到当前行的聚合</span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">PRECEDING</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span>) <span class="keyword">as</span> sample5, <span class="comment">--当前行和前面一行做聚合</span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">PRECEDING</span> <span class="keyword">AND</span> <span class="number">1</span> <span class="keyword">FOLLOWING</span> ) <span class="keyword">as</span> sample6,<span class="comment">--当前行和前边一行及后面一行</span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">current</span> <span class="keyword">row</span> <span class="keyword">and</span> <span class="keyword">UNBOUNDED</span> <span class="keyword">FOLLOWING</span> ) <span class="keyword">as</span> sample7 <span class="comment">--当前行及后面所有行</span></span><br><span class="line"><span class="keyword">from</span> business;</span><br></pre></td></tr></table></figure><h4 id="2-5-查询顾客上次的购买时间"><a href="#2-5-查询顾客上次的购买时间" class="headerlink" title="2.5 查询顾客上次的购买时间"></a>2.5 查询顾客上次的购买时间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, orderdate, <span class="keyword">cost</span>, lag(orderdate, <span class="number">1</span>, <span class="string">'1900-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span>, <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> time1</span><br><span class="line"><span class="keyword">from</span> business;</span><br></pre></td></tr></table></figure><h4 id="2-6-查询前20-时间的订单信息"><a href="#2-6-查询前20-时间的订单信息" class="headerlink" title="2.6 查询前20%时间的订单信息"></a>2.6 查询前20%时间的订单信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">name</span>,orderdate,<span class="keyword">cost</span>, ntile(<span class="number">5</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> orderdate) sorted <span class="keyword">from</span> business)t</span><br><span class="line"><span class="keyword">where</span> sorted = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive之分桶</title>
      <link href="/2020/11/27/Hive%E4%B9%8B%E5%88%86%E6%A1%B6/"/>
      <url>/2020/11/27/Hive%E4%B9%8B%E5%88%86%E6%A1%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="一、分桶及抽样数据存储"><a href="#一、分桶及抽样数据存储" class="headerlink" title="一、分桶及抽样数据存储"></a>一、分桶及抽样数据存储</h3><p>分区针对的是数据的存储路径；分桶针对的是数据文件。</p><p>分区提供一个隔离数据和优化查询到的便利方式。不过并非所有的数据集都可形成合理的分区，特别是之前所提到的要确定合适的划分大小这个疑虑。<br>分桶试讲数据及分解成更容易管理的若干部分的另一个技术。</p><h3 id="二、创建分桶表"><a href="#二、创建分桶表" class="headerlink" title="二、创建分桶表"></a>二、创建分桶表</h3><h4 id="2-1-首先设置相关属性"><a href="#2-1-首先设置相关属性" class="headerlink" title="2.1 首先设置相关属性"></a>2.1 首先设置相关属性</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hive.ecforce.bucketing=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces=<span class="number">-1</span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-创建一个分桶表"><a href="#2-2-创建一个分桶表" class="headerlink" title="2.2 创建一个分桶表"></a>2.2 创建一个分桶表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_bucket(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="keyword">string</span>)</span><br><span class="line">clustered <span class="keyword">by</span> (<span class="keyword">id</span>) <span class="keyword">into</span> <span class="number">4</span> buckets</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">field</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br></pre></td></tr></table></figure><h4 id="2-3-将stu表的数据导入分桶表中"><a href="#2-3-将stu表的数据导入分桶表中" class="headerlink" title="2.3 将stu表的数据导入分桶表中"></a>2.3 将stu表的数据导入分桶表中</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> stu_buck</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure><h3 id="三、分桶抽样调查"><a href="#三、分桶抽样调查" class="headerlink" title="三、分桶抽样调查"></a>三、分桶抽样调查</h3><p>对于非常大的数据集，又是用户需要使用过的是一个具有代表性的查询结果而不是全部结果。Hive可以通过对表的抽样来满足这个需求<br>查询表stu_buck中的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu_buck tablesample(bucket <span class="number">1</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">on</span> <span class="keyword">id</span>);</span><br></pre></td></tr></table></figure></p><p>tablesample是抽样语句，语法：<code>TABLESAMPLE(BUCKET x OUT OF y)</code><br>y必须是table总bucket数的倍数或者因子。Hive根据y的大小，决定取样的比例。例如table总共有4份，如果y=2是，则抽取2个bucket数据， 如果y=8，则抽取1/2个bucket的数据。<br>x表示从哪个bucket开始抽取，如果需要取多个分区，以后的分区号为当前分区号加上y。例如<code>tablesample(bucket 1 out of 2)</code>，表示总共抽取(4/2=)2个bucket的数据，抽取第1(x)个和第3(x+y)个bucket的数据。</p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HiveDML数据操作之查询</title>
      <link href="/2020/11/25/HiveDML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9F%A5%E8%AF%A2/"/>
      <url>/2020/11/25/HiveDML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="一、常用函数"><a href="#一、常用函数" class="headerlink" title="一、常用函数"></a>一、常用函数</h3><p>总行数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><p>最大值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><p>最小值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><p>总和<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><p>平均值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><h3 id="二、案例实操"><a href="#二、案例实操" class="headerlink" title="二、案例实操"></a>二、案例实操</h3><h3 id="2-1-比较运算符"><a href="#2-1-比较运算符" class="headerlink" title="2.1 比较运算符"></a>2.1 比较运算符</h3><p>查出薪水大于1000的虽有员工emp<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; <span class="number">1000</span>;</span><br></pre></td></tr></table></figure></p><p>查出薪水等于1000的员工<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure></p><p>查询工资在1000到5000的员工<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">1000</span> <span class="keyword">and</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure></p><p>查询comm为空的所有员工<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>查询工资是1000或者5000的员工<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span> (<span class="number">1000</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure></p><h3 id="2-2-Like-RLike"><a href="#2-2-Like-RLike" class="headerlink" title="2.2 Like RLike"></a>2.2 Like RLike</h3><p>查询薪资是以2开头的员工<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">like</span> <span class="string">'2%'</span>;</span><br></pre></td></tr></table></figure></p><p>查询薪水中第二个数值为2的员工信息<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">like</span> <span class="string">'_2%'</span>;</span><br></pre></td></tr></table></figure></p><p>查询薪水中含有2的员工信息 (rlike是Hive的一个扩展功能，可以通过正则表达式来指定匹配条件)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">rlike</span> <span class="string">'[2]'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-Group-By"><a href="#2-3-Group-By" class="headerlink" title="2.3 Group By"></a>2.3 Group By</h3><p>计算各个部门的平均工资<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure></p><p>计算各部门中各个岗位的最高薪水<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno, job, <span class="keyword">max</span>(<span class="keyword">sql</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno, job;</span><br></pre></td></tr></table></figure></p><h3 id="2-4-Having"><a href="#2-4-Having" class="headerlink" title="2.4 Having"></a>2.4 Having</h3><p>1.having 与 where 不同点<br>(1)where 针对表中的列发挥作用，查询数据;having 针对查询结果中的列发挥作用， 筛选数据。<br>(2)where 后面不能写聚合函数，而 having 后面可以使用聚合函数。 (3)having 只用于 group by 分组统计语句。<br>计算平均薪资大于2000的部门<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="keyword">as</span> avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> avg_sal &gt; <span class="number">2000</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-JOIN"><a href="#2-5-JOIN" class="headerlink" title="2.5 JOIN"></a>2.5 JOIN</h3><p>Join 连接谓词中不支持 or<br>左连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></p><p>右连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></p><p>内连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></p><p>满外连接（将会返回所有表中符合 WHERE 语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用 NULL 值替代。）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">full</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></p><p>笛卡尔积<br>1.笛卡尔集会在下面条件下产生<br>(1)省略连接条件 (2)连接条件无效 (3)所有表中的所有行互相连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno, dname <span class="keyword">from</span> emp, dept;</span><br></pre></td></tr></table></figure></p><h3 id="2-6-排序"><a href="#2-6-排序" class="headerlink" title="2.6 排序"></a>2.6 排序</h3><ul><li>Order By: 全局排序，一个Reducer</li><li>Sort By: 每个Reducer内部进行排序，对全局结果集来说不是排序。</li><li>Distribute By: 类似MR中partition，进行分区，结合sort by使用。</li><li>Cluster By: 当distribute by和sorts by字段相同时，可以使用cluster by方式。cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</li></ul><h3 id="2-7-分桶表"><a href="#2-7-分桶表" class="headerlink" title="2.7 分桶表"></a>2.7 分桶表</h3><p>略</p><h3 id="2-8-CASE-WHEN"><a href="#2-8-CASE-WHEN" class="headerlink" title="2.8 CASE WHEN"></a>2.8 CASE WHEN</h3><ol><li>数据准备</li></ol><table><thead><tr><th>name</th><th>dept_id</th><th>sex</th></tr></thead><tbody><tr><td>悟空</td><td>A</td><td>男</td></tr><tr><td>大海</td><td>A</td><td>男</td></tr><tr><td>宋宋</td><td>B</td><td>男</td></tr><tr><td>凤姐</td><td>A</td><td>女</td></tr><tr><td>婷姐</td><td>B</td><td>女</td></tr><tr><td>婷婷</td><td>B</td><td>女</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">dept_id,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'男'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) male_count, <span class="keyword">sum</span>(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'女'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) female_count</span><br><span class="line"><span class="keyword">from</span> emp_sex</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  dept_id;</span><br></pre></td></tr></table></figure><h3 id="2-9-其他常用的查询函数"><a href="#2-9-其他常用的查询函数" class="headerlink" title="2.9 其他常用的查询函数"></a>2.9 其他常用的查询函数</h3><p>空字段赋值<br>NVL赋值，它的格式是NVL(string1, replace_with)。它的功能是如果string1是NULL，则NVL函数返回replace_with的值，否则返回string1的值，如果两个参数都是NULL，则返回NULL。</p><p>1)date_format:格式化时间<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive(default)&gt; select date_format('2019-06-29','yyyy-MM-dd');</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-06-29</span><br></pre></td></tr></table></figure></p><p>2)date_add:时间跟天数相加<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select date_add('2019-06-29',5);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-07-04</span><br><span class="line">hive (default)&gt; select date_add('2019-06-29',-5);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-06-24</span><br></pre></td></tr></table></figure></p><p>3)date_sub:时间跟天数相减<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select date_sub('2019-06-29',5);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-06-24</span><br><span class="line">hive (default)&gt; select date_sub('2019-06-29 12:12:12',5);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-06-24</span><br><span class="line">hive (default)&gt; select date_sub('2019-06-29',-5);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-07-04</span><br></pre></td></tr></table></figure></p><p>4)datediff:两个时间相减<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select datediff('2019-06-29','2019-06-24');</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">5</span><br><span class="line">hive (default)&gt; select datediff('2019-06-24','2019-06-29');</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">-5</span><br><span class="line">hive (default)&gt; select datediff('2019-06-24 12:12:12','2019-06-29');</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">-5</span><br><span class="line">hive (default)&gt; select datediff('2019-06-24 12:12:12','2019-06-29 13:13:13');</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">-5</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HiveDML数据操作之导入导出</title>
      <link href="/2020/11/24/HiveDML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
      <url>/2020/11/24/HiveDML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据导入"><a href="#一、数据导入" class="headerlink" title="一、数据导入"></a>一、数据导入</h3><p>向表中加载数据Load<br>语法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> [<span class="keyword">local</span>] inpath <span class="string">'/opt/module/datas/student.txt'</span> [overwrite] | <span class="keyword">into</span> <span class="keyword">table</span> student [<span class="keyword">partition</span> (partcol1=val1,...)];</span><br></pre></td></tr></table></figure></p><p>load data：表示加载数据<br>local： 表示从本地数据中加载数据到Hive表中，否则是从HDFS中加载数据到Hive表<br>inpath： 表示加载数据的路径<br>overwrite： 表示覆盖表中的已有数据，否则表示追加<br>into table： 表示加载到哪张表<br>student： 表示表名<br>partition： 表示上传到指定的分区</p><p>案例实操</p><p>创建一张表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(<span class="keyword">id</span> <span class="keyword">string</span>, <span class="keyword">name</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure></p><p>加载本地文件到hive<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/datas/student.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> default.student;</span><br></pre></td></tr></table></figure></p><p>加载HDFS文件到Hive<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> inpath <span class="string">'/user/suiwo/hive/student.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> default.student;</span><br></pre></td></tr></table></figure></p><p>加载数据覆盖表中的已有的数据<br>上传文件到HDFS<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs -put /opt/module/datas/student.txt /user/suiwo/hive;</span><br></pre></td></tr></table></figure></p><p>加载数据覆盖表中已有的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> inpath <span class="string">"/user/suiwo/hive/student.txt"</span> overwrite <span class="keyword">into</span> <span class="keyword">table</span> default.student;</span><br></pre></td></tr></table></figure></p><p>通过查询语句向表中插入数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201708'</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span>;</span><br></pre></td></tr></table></figure></p><p>查询语句中创建表并加载数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> student3</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></p><p>import数据到指定的Hive表中（此处导入的数据格式应该是和导出的数据格式相同）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import table student2 partition(month='201709') from '/user/hive/warehouse/export/student';</span><br></pre></td></tr></table></figure></p><h3 id="二、数据导出"><a href="#二、数据导出" class="headerlink" title="二、数据导出"></a>二、数据导出</h3><p>将查询的结果导出到本地（将local去掉便是将数据导出到HDFS）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/opt/module/datas/export/student1'</span> <span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></p><p>将查询的结果格式化导出到本地<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/opt/module/datas/export/student1'</span> <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> dields <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></p><p>Hadoop命令导出到本地<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dfs -get /user/hive/warehouse/student/month=2017/00000_0</span><br><span class="line">/opt/module/datas/export/studemt3.txt</span><br></pre></td></tr></table></figure></p><p>Hive Shell 命令导出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hive -e <span class="string">'select * from default.student;'</span> &gt; /opt/module/datas/<span class="built_in">export</span>/student3.txt;</span><br></pre></td></tr></table></figure></p><p>export 导出到HDFS上<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export table default.student to '/user/hive/warehouse/export/student'</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HiveDDL数据操作</title>
      <link href="/2020/11/23/HiveDDL%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/11/23/HiveDDL%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-Hive集合数据类型"><a href="#一、-Hive集合数据类型" class="headerlink" title="一、 Hive集合数据类型"></a>一、 Hive集合数据类型</h3><p>除了常见的基本数据类型，Hive还支持三种复杂的数据类型ARRAY、MAP和STRUCT。ARRAY和MAP与Java中的Array和Map类似，而STRUCT与C语言中的Struct类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。</p><table><thead><tr><th>数据类型</th><th>描述</th><th>语法示例</th></tr></thead><tbody><tr><td>STRUCT</td><td>和c语言中的struct类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是STRUCT{first STRING, last STRING},那么第1个元素可以通过字段.first来引用。</td><td>struct()</td></tr><tr><td>MAP</td><td>MAP是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是MAP，其中键-&gt;值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么可以通过字段名[‘last’]获取最后一个元素</td><td>map()</td></tr><tr><td>ARRAY</td><td>数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’, ‘Doe’]，那么第2个元素可以通过数组名[1]进行引用。</td><td>Array()</td></tr></tbody></table><h4 id="1-案例实操"><a href="#1-案例实操" class="headerlink" title="1. 案例实操"></a>1. 案例实操</h4><p>假设某表有如下一行，我们用JSON格式来表示其数据结构。下面这个json字符串存在列表，键值对，以及结构体<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"songsong"</span>,</span><br><span class="line">    <span class="attr">"friends"</span>:[ // Array</span><br><span class="line">        <span class="string">"bingbing"</span>,</span><br><span class="line">        <span class="string">"lili"</span></span><br><span class="line">    ],</span><br><span class="line">    "children":&#123; // Map</span><br><span class="line">        "xiao song":18,</span><br><span class="line">        "xiaoxiao song":19</span><br><span class="line">    &#125;,</span><br><span class="line">    "address":&#123; // Struct</span><br><span class="line">        "street":"huilongguan",</span><br><span class="line">        "city":"beijing"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们尝试创建对应的表，并将上述的json中包含的数据导入到这个表中。<br>首先我们创建本地的测试文件test.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">songsong,bingbing_lili,xiaosong:18_xiaoxiaosong:19,huilongguan_beijing</span><br><span class="line">yangyang,caicai_susu,xiaoyang:18_xiaoxiaoyang:19,chaoyang_beijing</span><br></pre></td></tr></table></figure></p><p>注意:MAP，STRUCT和ARRAY里的元素间关系都可以用同一个字符表示，这里用“_”。</p><p>首先我们创建一个数据表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">friend <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">children <span class="keyword">map</span>&lt;<span class="keyword">string</span>, <span class="built_in">int</span>&gt;,</span><br><span class="line">address <span class="keyword">struct</span>&lt;street:<span class="keyword">string</span>, city:<span class="keyword">string</span>&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="comment">-- 列分隔符</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'_'</span> <span class="comment">-- MAP，ARRAY，STRUCT的分隔符</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">keys</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span> <span class="comment">-- MAP中的key与value的分隔符</span></span><br><span class="line"><span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>; <span class="comment">-- 行分隔符</span></span><br></pre></td></tr></table></figure></p><p>将文本数据导入到测试表中<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">"/filepath/test.txt"</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure></p><p>之后我们尝试访问三种集合列中的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> friend[<span class="number">1</span>], children[<span class="string">'xiaosong'</span>], address.city <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'songsong'</span>;</span><br></pre></td></tr></table></figure></p><p>执行后可以发现返回结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OK</span><br><span class="line">_c0 _c1 city</span><br><span class="line">lili 18 beijing</span><br><span class="line">Time taken: 0.076 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure></p><h4 id="2-类型转换"><a href="#2-类型转换" class="headerlink" title="2. 类型转换"></a>2. 类型转换</h4><p>使用CAST操作显示进行数据类型转换<br>例如CAST(‘1’ AS INT)将把字符串’1’转换成整数1;如果强制类型转换失败，如执行CAST(‘X’ AS INT)，表达式返回空值NULL。</p><h3 id="二、-DDL数据操作"><a href="#二、-DDL数据操作" class="headerlink" title="二、 DDL数据操作"></a>二、 DDL数据操作</h3><h4 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h4><p>为了避免已创建的数据库已存在，建议增加if not exists进行判断<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> db_hive;</span><br></pre></td></tr></table></figure></p><p>创建数据库可以指定HDFS上存放的位置<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> db_hive location <span class="string">'/db_hive2.db'</span>;</span><br></pre></td></tr></table></figure></p><h4 id="3-查询数据库"><a href="#3-查询数据库" class="headerlink" title="3. 查询数据库"></a>3. 查询数据库</h4><p>显示数据库<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure></p><p>过滤显示查询的数据库<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span> <span class="keyword">like</span> <span class="string">'db_hive*'</span>;</span><br></pre></td></tr></table></figure></p><h4 id="4-查看数据库详细"><a href="#4-查看数据库详细" class="headerlink" title="4. 查看数据库详细"></a>4. 查看数据库详细</h4><p>显示数据库信息<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc database db_hive;</span><br></pre></td></tr></table></figure></p><p>查询数据库详细信息， extended<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc database extended db_hive;</span><br></pre></td></tr></table></figure></p><h4 id="5-切换当前数据库"><a href="#5-切换当前数据库" class="headerlink" title="5. 切换当前数据库"></a>5. 切换当前数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> db_hive;</span><br></pre></td></tr></table></figure><h4 id="6-修改数据库"><a href="#6-修改数据库" class="headerlink" title="6. 修改数据库"></a>6. 修改数据库</h4><p>用户可以使用ALTER DATABASE命令为某个数据库的DBPROPERTIES设置键-值对属性值，来描述这个数据库的属性信息。数据库的其他元数据信息都是不可更改的，包括数据库名和数据库所在的目录位置。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> hive <span class="keyword">set</span> dbproperties(<span class="string">'createtime'</span>=<span class="string">'20170830'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="7-删除数据库"><a href="#7-删除数据库" class="headerlink" title="7. 删除数据库"></a>7. 删除数据库</h4><p>最好采用if exists判断数据库是否存在<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> db_hive2;</span><br></pre></td></tr></table></figure></p><p>对于数据库不为空的时候，可以使用cascade命令强制删除<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> db_hive <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure></p><h4 id="8-创建表"><a href="#8-创建表" class="headerlink" title="8. 创建表"></a>8. 创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name</span><br><span class="line">[(col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)]</span><br><span class="line">[<span class="keyword">COMMENT</span> table_comment]</span><br><span class="line">[PARTITIONED <span class="keyword">BY</span> (col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)] [CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...)</span><br><span class="line">[SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>], ...)] <span class="keyword">INTO</span> num_buckets BUCKETS]</span><br><span class="line">[<span class="keyword">ROW</span> <span class="keyword">FORMAT</span> row_format]</span><br><span class="line">[<span class="keyword">STORED</span> <span class="keyword">AS</span> file_format]</span><br><span class="line">[LOCATION hdfs_path]</span><br></pre></td></tr></table></figure><p>字段解释说明<br>(1)CREATE TABLE创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常;用户可以用IFNOTEXISTS选项来忽略这个异常。<br>(2)EXTERNAL 关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际 数据的路径(LOCATION)，Hive创建内部表时，会将数据移动到数据仓库指向的路径;若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。<br>(3)COMMENT:为表和列添加注释。<br>(4)PARTITIONED BY创建分区表<br>(5)CLUSTERED BY创建分桶表<br>(6)SORTED BY不常用<br>(7)ROW FORMAT<br>DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char] [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char] | SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, …)]<br>用户在建表的时候可以自定义SerDe或者使用自带的 SerDe。如果没有指定ROW FORMAT或者ROW FORMAT DELIMITED，将会使用自带的SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的SerDe，Hive 通过SerDe确定表的具体的列的数据。SerDe是Serialize/Deserilize的简称，目的是用于序列化和反序列化。<br>(8)STORED AS指定存储文件类型,常用的存储文件类型:SEQUENCEFILE(二进制序列文件)、TEXTFILE(文本)、 RCFILE(列式存储格式文件),如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用STORED AS SEQUENCEFILE。<br>(9)LOCATION:指定表在HDFS上的存储位置。<br>(10)LIKE允许用户复制现有的表结构，但是不复制数据。</p><h4 id="9-内部表，外部表，分区表"><a href="#9-内部表，外部表，分区表" class="headerlink" title="9. 内部表，外部表，分区表"></a>9. 内部表，外部表，分区表</h4><p>略</p><h3 id="三-分区表常见操作"><a href="#三-分区表常见操作" class="headerlink" title="三. 分区表常见操作"></a>三. 分区表常见操作</h3><ol><li><p>创建分区表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept_partition(deptno <span class="built_in">int</span>, dname <span class="keyword">string</span>, loc <span class="keyword">string</span>)</span><br><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">month</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure></li><li><p>加载数据到分区表</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/datas/dept.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> default.dept_partition <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201709'</span>);</span><br><span class="line">hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition partition(month='201708');</span><br><span class="line">hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition partition(month='201707’);</span><br></pre></td></tr></table></figure></li><li><p>创建单个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201706'</span>) ;</span><br></pre></td></tr></table></figure></li><li><p>创建多个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201705'</span>) <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201704'</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除单个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">month</span>=<span class="string">'201704'</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除多个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">month</span>=<span class="string">'201705'</span>), <span class="keyword">partition</span> (<span class="keyword">month</span>=<span class="string">'201706'</span>);</span><br></pre></td></tr></table></figure></li></ol><p><em>记得区分创建多个和删除多个的时候，分隔符一个为空格一个为逗号。</em></p><ol start="7"><li>创建二级分区<br>(1) 首先创建一个表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept_partition2(deptno <span class="built_in">int</span>, dname <span class="keyword">string</span>, loc <span class="keyword">string</span>)</span><br><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">month</span> <span class="keyword">string</span>, <span class="keyword">day</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure></li></ol><p>(2) 正常的加载数据,加载数据到二级分区表中<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/filepath/test.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> default.dept_partition2 <span class="keyword">partition</span>(moth=<span class="string">'201709'</span>, <span class="keyword">day</span>=<span class="string">'13'</span>);</span><br></pre></td></tr></table></figure></p><p>(3) 查询分区数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_partition2 <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span> <span class="keyword">and</span> <span class="keyword">day</span>=<span class="string">'13'</span>;</span><br></pre></td></tr></table></figure></p><ol start="8"><li>当我们把数据直接上传到分区目录上的时候，我们需要让分区表和数据产生关联，一共有三种方式</li></ol><p>(1) 上传数据后修复<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br><span class="line">dfs -put /opt/module/datas/dept.txt /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br></pre></td></tr></table></figure></p><p>此时我们是查询不到数据的，需要执行修复指令<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msck <span class="keyword">repair</span> <span class="keyword">table</span> dept_partition2;</span><br></pre></td></tr></table></figure></p><p>这个时候便可以查询到数据了</p><p>(2) 上传数据后添加分区<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br><span class="line">dfs -put /opt/module/datas/dept.txt /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br></pre></td></tr></table></figure></p><p>执行添加分区<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition2 <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201709'</span>,<span class="keyword">day</span>=<span class="string">'11'</span>);</span><br></pre></td></tr></table></figure></p><p>(3) 创建文件夹后load数据到分区<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br><span class="line">dfs -put /opt/module/datas/dept.txt /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br></pre></td></tr></table></figure></p><p>上传数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/datas/dept.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> dept_partition2 <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201709'</span>,<span class="keyword">day</span>=<span class="string">'10'</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive基础</title>
      <link href="/2020/11/23/Hive%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/11/23/Hive%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-Hive介绍"><a href="#一、-Hive介绍" class="headerlink" title="一、 Hive介绍"></a>一、 Hive介绍</h3><p>Hive是为了解决<code>海量结构化日志</code>的数据统计框架，他是一个基于Hadoop的<code>数据仓库工具</code>，可以将<code>结构化的数据映射为一张表</code>，并提供<code>类SQL</code>的查询功能。本质就是<code>将HQL转化成MR程序</code>。<br>简化流程可以理解成： </p><ol><li>编写SQL。</li><li>Hive匹配出相对应的MR模板并将将SQL转化成MR程序。</li><li>运行MR程序，生成相应的分析结果。</li><li>将结果写入持久化存储。</li></ol><p>Hive优点：</p><ol><li>类SQL语句，简单易上手。</li><li>自动转化成MR程序，减少开发人员学习成本。</li><li>Hive支持自定义函数，用户可以根据自己需求来实现自己的函数。</li></ol><p>Hive缺点：</p><ol><li>效率低，自动生成的MR程序通常情况下不够智能，并且调优比较困难。</li><li>HQL表达能力有限。</li><li>只适合实时性要求不高的场合。</li></ol><h3 id="二、-Hive架构"><a href="#二、-Hive架构" class="headerlink" title="二、 Hive架构"></a>二、 Hive架构</h3><p><img src="/images/Hive基础/0E472121-19CE-4CC2-A08C-9F3B4F42B545.jpeg" alt="a11d648f4c81611b4ccc929be282dba6.jpeg"></p><ol><li><p>Hive提供了三种用户接口<br>CLI(Hive shell)： CLI启动的时候，会同时启动一个Hive副本，CLI会连接到client是Hive的客户端会连接到Hive Server。在启动Client模式的时候，需要指出Hive Server所在节点，并且在该节点启动Hive Server。<br>JDBC/ODBC：使用Java访问Hive。<br>WUI：通过浏览器访问Hive。</p></li><li><p>元数据Metastore<br>Hive将元数据存储在数据库中，如mysql、derby。Hive中的元数据包括表的名字，表所属的数据库(默认是 default)，表的拥有者，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在目录等。</p></li><li><p>Hadoop<br>Hive使用HDFS进行存储，使用MR进行计算。</p></li><li><p>驱动器:Driver<br>解析器(SQL Parser):将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr;对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。<br>编译器(Physical Plan):将AST编译生成逻辑执行计划。<br>优化器(Query Optimizer):对逻辑执行计划进行优化。<br>执行器(Execution):把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是将其转化成MR/Spark。</p></li></ol><h3 id="三、-Hive与数据库进行比较"><a href="#三、-Hive与数据库进行比较" class="headerlink" title="三、 Hive与数据库进行比较"></a>三、 Hive与数据库进行比较</h3><p>查询语言： SQL被广泛应用在数据仓库中，因此专门针对Hive的提醒设计了类SQL的查询语句HQL。熟悉SQL的开发者可以很方便的使用Hive进行开发。<br>数据存储位： Hive是数据Hadoop生态下的一个数据仓库工具，显然，Hive中的数据是存放在HDFS中的。而数据库一般则是将数据保存在块设备或者本地文件系统中。<br>数据更新：Hive是针对数据仓库应用设计的，而数据仓库的内容一般是读多写少。因此Hive中不建议对数据进行改写。所有数据应当在加载时就确认好。而数据库中的数据通常是需要经常进行修改的，所以使用INSERT，UPDATE比较常见。<br>索引：Hive在加载数据的过程中不会对数据进行任何的处理，甚至不会对数据进行扫描，因此也没有对数据中的某些Key创建索引。Hive想要访问满足条件的特定值的时候，需要使用暴力扫描，因此访问数据的延迟比较大。也正因为延迟大，所以Hive不适合在线数据查询。因为引入了MR，Hive可以进行并行访问数据，所以即使没有索引，在遇到大数据量的访问时，Hive仍然可以体现出优势。数据库中，通常会对常用的列创建一个或者多个索引，因此可以有较高的效率以及较小的延迟。<br>执行： Hive中对的大多数查询的执行都是通过MR来实现的。而数据库通常是存在自己的执行引擎的。<br>执行延迟： Hive由于没有索引，需要扫描整个表，因此延迟较高。并且由于MR自身的延迟就较高，所以在使用MR执行Hive查询的时候，也会有较高的延迟。所以在数据量小的时候数据库的执行能力更好，但是当数据规模比较大，达到超过了数据库的数据处理能力的时候，Hive并行查询能力的优势显然能体现出来了。<br>可扩展性： 由Hive是建立在Hadoop之上的，因此Hive的可扩展性适合Hadoop的可扩展性一致的。数据库由于ACID的严格限制，扩展行非常有限。目前最先进的并行数据库Oracle在理论上的扩展能力也只有100台左右。<br>数据规模： Hive是建立在集群上的，可以利用MR进行并行计算，因此可以执行很大规模的数据。对应的数据库可以支持的数据规模较小。</p><h3 id="四、-Hive常见操作"><a href="#四、-Hive常见操作" class="headerlink" title="四、 Hive常见操作"></a>四、 Hive常见操作</h3><p>在操作Hive之前，我们需要部署好Hive，这部分可以参考<a href="https://suiwo.xyz/2020/05/24/Hive%E5%88%9D%E8%AF%86/">Hive初识</a>中的介绍。<br>并且由于Hive默认的Metastore为derby的性能限制，建议将Metastore改成MYSQL，详细更改方式同样参考<a href="https://suiwo.xyz/2020/05/24/Hive%E5%88%9D%E8%AF%86/">Hive初识</a>。<br>启动Hive  进行Hive文件夹下对的bin目录，我们可以执行<code>./hive</code>启动hive客户端</p><p>查看数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; show databases;</span><br></pre></td></tr></table></figure></p><p>打开默认数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; use default;</span><br></pre></td></tr></table></figure></p><p>显示 default 数据库中的表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; show tables;</span><br></pre></td></tr></table></figure></p><p>创建一张表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student(id int, name string);</span><br></pre></td></tr></table></figure></p><p>显示数据库中有几张表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; show tables;</span><br></pre></td></tr></table></figure></p><p>查看表的结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; desc student;</span><br></pre></td></tr></table></figure></p><p>向表中插入数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; insert into student values(1000,&quot;ss&quot;);</span><br></pre></td></tr></table></figure></p><p>查询表中数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select * from student;</span><br></pre></td></tr></table></figure></p><p>退出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive hive&gt; quit;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MR学习总结</title>
      <link href="/2020/08/07/MR%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2020/08/07/MR%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是在尚硅谷MapReduce课程后的课后总结</p></blockquote><h3 id="一、-MapReduce介绍"><a href="#一、-MapReduce介绍" class="headerlink" title="一、 MapReduce介绍"></a>一、 MapReduce介绍</h3><p>MapReduce是一种编程模型，用于大规模数据集（大于1TB）的并行运算。概念”Map（映射）”和”Reduce（归约）”，是它们的主要思想，都是从函数式编程语言里借来的，还有从矢量编程语言里借来的特性。它极大地方便了编程人员在不会分布式并行编程的情况下，将自己的程序运行在分布式系统上。 当前的软件实现是指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（归约）函数，用来保证所有映射的键值对中的每一个共享相同的键组。</p><hr><h3 id="二、-MapReduce进程"><a href="#二、-MapReduce进程" class="headerlink" title="二、 MapReduce进程"></a>二、 MapReduce进程</h3><p>一个完整的MapReduce程序在分布式运行时有三类实例进程：<br>| 进程类型 | 作用 |<br>| — | — |<br>| MrAppMaster | 负责整个程序的过程调度及状态协调 |<br>| MapTask | 负责Map阶段的整个数据处理流程 |<br>| ReduceTask | 负责Reduce阶段的整个数据处理流程 |</p><hr><h3 id="三、-常见数据序列化类型"><a href="#三、-常见数据序列化类型" class="headerlink" title="三、 常见数据序列化类型"></a>三、 常见数据序列化类型</h3><table><thead><tr><th>Java类型</th><th>Hadoop Writable类型</th></tr></thead><tbody><tr><td>boolean</td><td>BooleanWritable</td></tr><tr><td>byte</td><td>ByteWritable</td></tr><tr><td>int</td><td>IntWritable</td></tr><tr><td>float</td><td>FloatWritable</td></tr><tr><td>long</td><td>LongWritable</td></tr><tr><td>double</td><td>DoubleWritable</td></tr><tr><td>String</td><td>Text</td></tr><tr><td>map</td><td>MapWritable</td></tr><tr><td>array</td><td>ArrayWritable</td></tr></tbody></table><hr><h3 id="四、-maven包准备"><a href="#四、-maven包准备" class="headerlink" title="四、 maven包准备"></a>四、 maven包准备</h3><h4 id="1-在项目中添加以下pom配置"><a href="#1-在项目中添加以下pom配置" class="headerlink" title="1. 在项目中添加以下pom配置"></a>1. 在项目中添加以下pom配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-在resource目录下添加日志相关配置文件-log4j-properties"><a href="#2-在resource目录下添加日志相关配置文件-log4j-properties" class="headerlink" title="2. 在resource目录下添加日志相关配置文件 log4j.properties"></a>2. 在resource目录下添加日志相关配置文件 log4j.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line">log4j.appender.logfile=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.logfile.File=target/spring.log</span><br><span class="line">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</span><br></pre></td></tr></table></figure><hr><h3 id="五、-实现WordCount"><a href="#五、-实现WordCount" class="headerlink" title="五、 实现WordCount"></a>五、 实现WordCount</h3><h4 id="1-统计数据如下"><a href="#1-统计数据如下" class="headerlink" title="1. 统计数据如下"></a>1. 统计数据如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello hadoop</span><br><span class="line">hello hdfs</span><br><span class="line">hello scala</span><br><span class="line">mapreduce</span><br><span class="line">word count</span><br></pre></td></tr></table></figure><h4 id="2-期望输出数据："><a href="#2-期望输出数据：" class="headerlink" title="2. 期望输出数据："></a>2. 期望输出数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">count1</span><br><span class="line">hadoop1</span><br><span class="line">hdfs1</span><br><span class="line">hello3</span><br><span class="line">mapreduce1</span><br><span class="line">scala1</span><br><span class="line">word1</span><br></pre></td></tr></table></figure><h4 id="3-编写Mapper方法"><a href="#3-编写Mapper方法" class="headerlink" title="3. 编写Mapper方法"></a>3. 编写Mapper方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">private</span> IntWritable v = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString();</span><br><span class="line">        String[] lineArr = line.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : lineArr) &#123;</span><br><span class="line">            k.set(s);</span><br><span class="line">            context.write(k, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写Reducer方法"><a href="#4-编写Reducer方法" class="headerlink" title="4. 编写Reducer方法"></a>4. 编写Reducer方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        context.write(key, <span class="keyword">new</span> IntWritable(sum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-编写Driver方法"><a href="#5-编写Driver方法" class="headerlink" title="5. 编写Driver方法"></a>5. 编写Driver方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>, <span class="string">"/output/path"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">// 获取Job对象</span></span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        <span class="comment">// 设置jar存储位置</span></span><br><span class="line">        job.setJarByClass(WordCountDriver.class);</span><br><span class="line">        <span class="comment">// 关联map和reduce</span></span><br><span class="line">        job.setMapperClass(WordCountMapper.class);</span><br><span class="line">        job.setReducerClass(WordCountReducer.class);</span><br><span class="line">        <span class="comment">// 设置mapper阶段输出数据</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置最终数据输出类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置程序输入路径和输出路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 提交job</span></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-执行Driver方法"><a href="#6-执行Driver方法" class="headerlink" title="6. 执行Driver方法"></a>6. 执行Driver方法</h4><p>可在输出路径下看到结果与预期一致</p><hr><h3 id="六、-自定义序列化对象"><a href="#六、-自定义序列化对象" class="headerlink" title="六、 自定义序列化对象"></a>六、 自定义序列化对象</h3><h4 id="1-什么是序列化"><a href="#1-什么是序列化" class="headerlink" title="1. 什么是序列化"></a>1. 什么是序列化</h4><p>序列化就是把内存中的对象，转换成字节序列（或其他数据传输协议）以便于存储到磁盘（持久化）和网络传输。<br>反序列化就是将收到字节序列（或其他数据传输协议）或者是磁盘的持久化数据，转换成内存中的对象。</p><h4 id="2-自定义bean对象实现序列化接口（Writable）"><a href="#2-自定义bean对象实现序列化接口（Writable）" class="headerlink" title="2. 自定义bean对象实现序列化接口（Writable）"></a>2. 自定义bean对象实现序列化接口（Writable）</h4><p>实现一个bean对象的序列化需要以下7个步骤</p><ol><li>类必须实现Writable接口</li><li><p>反序列化的时候，需要反射调用无参构造函数，所以类必须有无参构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WritableBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写序列化方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写反序列化方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反序列化顺序和序列化顺序必须完全一致。否则会导致反序列化失败</p></li><li>要想把结果显示在文件中，需要重写toString()，可用”\t”分开，方便后续用</li><li>如果自定义bean需要在key中传输，需要实现Comparable接口，因为MapReduce的Shuffle阶段要求key是可排序的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(WritableBean o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-案例实操"><a href="#3-案例实操" class="headerlink" title="3. 案例实操"></a>3. 案例实操</h4><h5 id="1-需求如下："><a href="#1-需求如下：" class="headerlink" title="1. 需求如下："></a>1. 需求如下：</h5><p>需要统计下列数据中每个手机号的总上行流量，总下行流量以及总流量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">113736230513192.196.100.1www.atguigu.com248124681200</span><br><span class="line">213846544121192.196.100.22640200</span><br><span class="line">3 13956435636192.196.100.31321512200</span><br><span class="line">4 13966251146192.168.100.12400404</span><br><span class="line">5 18271575951192.168.100.2www.atguigu.com15272106200</span><br><span class="line">6 84188413192.168.100.3www.atguigu.com41161432200</span><br><span class="line">7 13590439668192.168.100.41116954200</span><br><span class="line">8 15910133277192.168.100.5www.hao123.com31562936200</span><br><span class="line">9 13729199489192.168.100.62400200</span><br><span class="line">10 13630577991192.168.100.7www.shouhu.com6960690200</span><br><span class="line">11 15043685818192.168.100.8www.baidu.com36593538200</span><br><span class="line">12 15959002129192.168.100.9www.atguigu.com1938180500</span><br><span class="line">13 13560439638192.168.100.109184938200</span><br><span class="line">14 13470253144192.168.100.11180180200</span><br><span class="line">15 13682846555192.168.100.12www.qq.com19382910200</span><br><span class="line">16 13992314666192.168.100.13www.gaga.com30083720200</span><br><span class="line">17 13509468723192.168.100.14www.qinghua.com7335110349404</span><br><span class="line">18 18390173782192.168.100.15www.sogou.com95312412200</span><br><span class="line">19 13975057813192.168.100.16www.baidu.com1105848243200</span><br><span class="line">20 13768778790192.168.100.17120120200</span><br><span class="line">21 13568436656192.168.100.18www.alibaba.com248124681200</span><br><span class="line">22 13568436656192.168.100.191116954200</span><br></pre></td></tr></table></figure></p><h5 id="2-期望输出数据：-1"><a href="#2-期望输出数据：-1" class="headerlink" title="2. 期望输出数据："></a>2. 期望输出数据：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">13470253144180180360</span><br><span class="line">135094687237335110349117684</span><br><span class="line">1356043963891849385856</span><br><span class="line">1356843665635972563529232</span><br><span class="line">1359043966811169542070</span><br><span class="line">1363057799169606907650</span><br><span class="line">13682846555193829104848</span><br><span class="line">137291994892400240</span><br><span class="line">1373623051324812468127162</span><br><span class="line">13768778790120120240</span><br><span class="line">138465441212640264</span><br><span class="line">1395643563613215121644</span><br><span class="line">139662511462400240</span><br><span class="line">13975057813110584824359301</span><br><span class="line">13992314666300837206728</span><br><span class="line">15043685818365935387197</span><br><span class="line">15910133277315629366092</span><br><span class="line">1595900212919381802118</span><br><span class="line">18271575951152721063633</span><br><span class="line">183901737829531241211943</span><br><span class="line">84188413411614325548</span><br></pre></td></tr></table></figure><h5 id="3-创建流量统计Bean对象"><a href="#3-创建流量统计Bean对象" class="headerlink" title="3. 创建流量统计Bean对象"></a>3. 创建流量统计Bean对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上行流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">    <span class="comment">// 下行流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> downFlow;</span><br><span class="line">    <span class="comment">// 总流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = upFlow + downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeLong(upFlow);</span><br><span class="line">        dataOutput.writeLong(downFlow);</span><br><span class="line">        dataOutput.writeLong(sumFlow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        upFlow = dataInput.readLong();</span><br><span class="line">        downFlow = dataInput.readLong();</span><br><span class="line">        sumFlow = dataInput.readLong();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUpFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFlow</span><span class="params">(<span class="keyword">long</span> upFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDownFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDownFlow</span><span class="params">(<span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSumFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSumFlow</span><span class="params">(<span class="keyword">long</span> sumFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow + <span class="string">"\t"</span> + downFlow + <span class="string">"\t"</span> + sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-编写Mapper类"><a href="#4-编写Mapper类" class="headerlink" title="4. 编写Mapper类"></a>4. 编写Mapper类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">private</span> FlowBean flowBean = <span class="keyword">new</span> FlowBean();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取一行</span></span><br><span class="line">        String line = value.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切割</span></span><br><span class="line">        String[] lineArr = line.split(<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装对象</span></span><br><span class="line">        k.set(lineArr[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">long</span> upFLow = Long.parseLong(lineArr[lineArr.length - <span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">long</span> downFLow = Long.parseLong(lineArr[lineArr.length - <span class="number">2</span>]);</span><br><span class="line">        flowBean.setUpFlow(upFLow);</span><br><span class="line">        flowBean.setDownFlow(downFLow);</span><br><span class="line">        flowBean.setSumFlow(upFLow + downFLow);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出</span></span><br><span class="line">        context.write(k, flowBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-编写Reducer类"><a href="#5-编写Reducer类" class="headerlink" title="5. 编写Reducer类"></a>5. 编写Reducer类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">FlowBean</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FlowBean flowBean = <span class="keyword">new</span> FlowBean();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;FlowBean&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sumUpFlow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> sumDownFlow = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 累计求和</span></span><br><span class="line">        <span class="keyword">for</span> (FlowBean value : values) &#123;</span><br><span class="line">            sumDownFlow += value.getDownFlow();</span><br><span class="line">            sumUpFlow += value.getUpFlow();</span><br><span class="line">        &#125;</span><br><span class="line">        flowBean.setUpFlow(sumUpFlow);</span><br><span class="line">        flowBean.setDownFlow(sumDownFlow);</span><br><span class="line">        flowBean.setSumFlow(sumDownFlow + sumUpFlow);</span><br><span class="line">        <span class="comment">// 写出</span></span><br><span class="line">        context.write(key, flowBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-编写Driver类"><a href="#6-编写Driver类" class="headerlink" title="6. 编写Driver类"></a>6. 编写Driver类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>, <span class="string">"/output_path"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        job.setJarByClass(FlowCountDriver.class);</span><br><span class="line">        job.setMapperClass(FlowCountMapper.class);</span><br><span class="line">        job.setReducerClass(FlowCountReducer.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-执行Driver类"><a href="#7-执行Driver类" class="headerlink" title="7. 执行Driver类"></a>7. 执行Driver类</h5><p>可得统计结果与预期一致</p><hr><h3 id="七、-FileInputFormat实现类介绍"><a href="#七、-FileInputFormat实现类介绍" class="headerlink" title="七、 FileInputFormat实现类介绍"></a>七、 FileInputFormat实现类介绍</h3><p>FileInputFormat常见的接口实现类包括：TextInputFormat、KeyValueTextInputFormat、NLineInputFormat、CombineTextInputFormat和自定义InputFormat等。</p><h4 id="1-TextInputFormat"><a href="#1-TextInputFormat" class="headerlink" title="1. TextInputFormat"></a>1. TextInputFormat</h4><p>TextInputFormat是默认的FileInputFormat实现类。按行读取每条记录。键是存储该行在整个文件中的起始字节偏移量， LongWritable类型。值是这行的内容，不包括任何行终止符（换行符和回车符），Text类型。<br>以下是一个示例，比如，一个分片包含了如下4条文本记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rich learning form</span><br><span class="line">Intelligent learning engine</span><br><span class="line">Learning more convenient</span><br><span class="line">From the real demand for more close to the enterprise</span><br></pre></td></tr></table></figure></p><p>每条记录表示为以下键/值对：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(0,Rich learning form)</span><br><span class="line">(19,Intelligent learning engine)</span><br><span class="line">(47,Learning more convenient)</span><br><span class="line">(72,From the real demand for more close to the enterprise)</span><br></pre></td></tr></table></figure></p><h4 id="2-KeyValueTextInputFormat"><a href="#2-KeyValueTextInputFormat" class="headerlink" title="2. KeyValueTextInputFormat"></a>2. KeyValueTextInputFormat</h4><p>每一行均为一条记录，被分隔符分割为key，value。可以通过在驱动类中添加以下配置来设定分隔符。默认分隔符是<code>tab（\t）</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conf.set(KeyValueLineRecordReader.KEY_VALUE_SEPERATOR, <span class="string">"\t"</span>);</span><br></pre></td></tr></table></figure></p><p>以下是一个示例，输入是一个包含4条记录的分片。其中——&gt;表示一个（水平方向的）制表符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">line1 ——&gt;Rich learning form</span><br><span class="line">line2 ——&gt;Intelligent learning engine</span><br><span class="line">line3 ——&gt;Learning more convenient</span><br><span class="line">line4 ——&gt;From the real demand for more close to the enterprise</span><br></pre></td></tr></table></figure></p><p>每条记录表示为以下键/值对：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(line1,Rich learning form)</span><br><span class="line">(line2,Intelligent learning engine)</span><br><span class="line">(line3,Learning more convenient)</span><br><span class="line">(line4,From the real demand for more close to the enterprise)</span><br></pre></td></tr></table></figure></p><p>此时的键是每行排在制表符之前的Text序列。</p><h4 id="3-NLineInputFormat"><a href="#3-NLineInputFormat" class="headerlink" title="3. NLineInputFormat"></a>3. NLineInputFormat</h4><p>如果使用NlineInputFormat，代表每个map进程处理的InputSplit不再按Block块去划分，而是按NlineInputFormat指定的行数N来划分。即输入文件的总行数/N=切片数，如果不整除，切片数=商+1。<br>以下是一个示例，仍然以上面的4行输入为例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rich learning form</span><br><span class="line">Intelligent learning engine</span><br><span class="line">Learning more convenient</span><br><span class="line">From the real demand for more close to the enterprise</span><br></pre></td></tr></table></figure></p><p>例如，如果N是2，则每个输入分片包含两行。开启2个MapTask。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(0,Rich learning form)</span><br><span class="line">(19,Intelligent learning engine)</span><br></pre></td></tr></table></figure></p><p>另一个 mapper 则收到后两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(47,Learning more convenient)</span><br><span class="line">(72,From the real demand for more close to the enterprise)</span><br></pre></td></tr></table></figure></p><p>这里的键和值与TextInputFormat生成的一样。</p><h4 id="4-CombineTextInputFormat"><a href="#4-CombineTextInputFormat" class="headerlink" title="4. CombineTextInputFormat"></a>4. CombineTextInputFormat</h4><p>框架默认的TextInputFormat切片机制是对任务按文件规划切片，不管文件多小，都会是一个单独的切片，都会交给一个MapTask，这样如果有大量小文件，就会产生大量的MapTask，处理效率极其低下。<br>设置虚拟存储切片最大值方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值。</span></span><br><span class="line">CombineTextInputFormat.setMaxInputSplitSize(job, <span class="number">4194304</span>);<span class="comment">// 4m</span></span><br></pre></td></tr></table></figure></p><p>（1）虚拟存储过程：<br>将输入目录下所有文件大小，依次和设置的setMaxInputSplitSize值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块；当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件均分成2个虚拟存储块（防止出现太小切片）。<br>例如setMaxInputSplitSize值为4M，输入文件大小为8.02M，则先逻辑上分成一个4M。剩余的大小为4.02M，如果按照4M逻辑划分，就会出现0.02M的小的虚拟存储文件，所以将剩余的4.02M文件切分成（2.01M和2.01M）两个文件。<br>（2）切片过程：<br>（a）判断虚拟存储的文件大小是否大于setMaxInputSplitSize值，大于等于则单独形成一个切片。<br>（b）如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。<br>（c）测试举例：有4个小文件大小分别为1.7M、5.1M、3.4M以及6.8M这四个小文件，则虚拟存储之后形成6个文件块，大小分别为：1.7M，（2.55M、2.55M），3.4M以及（3.4M、3.4M）<br>最终会形成3个切片，大小分别为：（1.7+2.55）M，（2.55+3.4）M，（3.4+3.4）M</p><hr><h3 id="八、-KeyValueTextInputFormat实操"><a href="#八、-KeyValueTextInputFormat实操" class="headerlink" title="八、 KeyValueTextInputFormat实操"></a>八、 KeyValueTextInputFormat实操</h3><h4 id="1-需求如下：-1"><a href="#1-需求如下：-1" class="headerlink" title="1. 需求如下："></a>1. 需求如下：</h4><p>统计输入文件中每一行的第一个单词相同的行数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br></pre></td></tr></table></figure></p><h4 id="2-期望输出数据：-2"><a href="#2-期望输出数据：-2" class="headerlink" title="2. 期望输出数据："></a>2. 期望输出数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">banzhang2</span><br><span class="line">xihuan2</span><br></pre></td></tr></table></figure><h4 id="3-编写Mapper类"><a href="#3-编写Mapper类" class="headerlink" title="3. 编写Mapper类"></a>3. 编写Mapper类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KVTextMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    IntWritable intWritable = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        context.write(key, intWritable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写Reducer类"><a href="#4-编写Reducer类" class="headerlink" title="4. 编写Reducer类"></a>4. 编写Reducer类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KVTextReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    IntWritable intWritable = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        intWritable.set(sum);</span><br><span class="line">        context.write(key, intWritable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-编写Driver类"><a href="#5-编写Driver类" class="headerlink" title="5. 编写Driver类"></a>5. 编写Driver类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KVTextDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>, <span class="string">"/output_path"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">// 设置切割符</span></span><br><span class="line">        conf.set(KeyValueLineRecordReader.KEY_VALUE_SEPERATOR, <span class="string">" "</span>);</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        job.setJarByClass(KVTextDriver.class);</span><br><span class="line">        job.setMapperClass(KVTextMapper.class);</span><br><span class="line">        job.setReducerClass(KVTextReducer.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setInputFormatClass(KeyValueTextInputFormat.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-执行Driver方法-1"><a href="#6-执行Driver方法-1" class="headerlink" title="6. 执行Driver方法"></a>6. 执行Driver方法</h4><p>发现输出结果与期望数据一致</p><hr><h3 id="九、-NLineInputFormat实操"><a href="#九、-NLineInputFormat实操" class="headerlink" title="九、 NLineInputFormat实操"></a>九、 NLineInputFormat实操</h3><h4 id="1-需求如下：-2"><a href="#1-需求如下：-2" class="headerlink" title="1. 需求如下："></a>1. 需求如下：</h4><p>对每个单词进行个数统计，要求根据每个输入文件的行数来规定输出多少个切片。此案例要求每三行放入一个切片中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br></pre></td></tr></table></figure></p><h4 id="2-期待输出数据："><a href="#2-期待输出数据：" class="headerlink" title="2. 期待输出数据："></a>2. 期待输出数据：</h4><p>在日志中打印的分区数为4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Number of splits:4</span><br></pre></td></tr></table></figure></p><h4 id="3-编写Mapper类-1"><a href="#3-编写Mapper类-1" class="headerlink" title="3. 编写Mapper类"></a>3. 编写Mapper类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NLineMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    Text k = <span class="keyword">new</span> Text();</span><br><span class="line">    IntWritable v = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString();</span><br><span class="line">        String[] strArr = line.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : strArr) &#123;</span><br><span class="line">            k.set(s);</span><br><span class="line">            context.write(k, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写Reducer类-1"><a href="#4-编写Reducer类-1" class="headerlink" title="4. 编写Reducer类"></a>4. 编写Reducer类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NLineReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    IntWritable v = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        v.set(sum);</span><br><span class="line">        context.write(key, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-编写Driver类-1"><a href="#5-编写Driver类-1" class="headerlink" title="5. 编写Driver类"></a>5. 编写Driver类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NLineDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>, <span class="string">"/output_path"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        <span class="comment">// 设置每个切片InputSplit中划分三条记录</span></span><br><span class="line">        NLineInputFormat.setNumLinesPerSplit(job, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 使用NLineInputFormat处理记录数</span></span><br><span class="line">        job.setInputFormatClass(NLineInputFormat.class);</span><br><span class="line">        job.setJarByClass(NLineDriver.class);</span><br><span class="line">        job.setMapperClass(NLineMapper.class);</span><br><span class="line">        job.setReducerClass(NLineReducer.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="自定义InputFormat"><a href="#自定义InputFormat" class="headerlink" title="自定义InputFormat"></a>自定义InputFormat</h3><p>无论HDFS还是MapReduce，在处理小文件时效率都非常低，但又难免面临处理大量小文件的场景，此时，就需要有相应解决方案。可以自定义InputFormat实现小文件的合并。</p><h4 id="1．需求"><a href="#1．需求" class="headerlink" title="1．需求"></a>1．需求</h4><p>将多个小文件合并成一个SequenceFile文件（SequenceFile文件是Hadoop用来存储二进制形式的key-value对的文件格式），SequenceFile里面存储着多个文件，存储的形式为文件路径+名称为key，文件内容为value。<br>输入数据为三个文件，所存储的数据分别如下<br>1.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yongpeng weidong weinan</span><br><span class="line">sanfeng luozong xiaoming</span><br></pre></td></tr></table></figure></p><p>2.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">longlong fanfan</span><br><span class="line">mazong kailun yuhang yixin</span><br><span class="line">longlong fanfan</span><br><span class="line">mazong kailun yuhang yixin</span><br></pre></td></tr></table></figure></p><p>3.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuaige changmo zhenqiang </span><br><span class="line">dongli lingu xuanxuan</span><br></pre></td></tr></table></figure></p><h4 id="2-自定义InputFormat流程"><a href="#2-自定义InputFormat流程" class="headerlink" title="2. 自定义InputFormat流程"></a>2. 自定义InputFormat流程</h4><ol><li>自定义一个类继承FileInputFormat<br>（1）重写isSplitable()方法，返回false不可切割<br>（2）重写createRecordReader()，创建自定义的RecordReader对象，并初始化</li><li>改写RecordReader，实现一次读取一个完整文件封装为KV<br>（1）采用IO流一次读取一个文件输出到value中，因为设置了不可切片，最终把所有文件都封装到了value中<br>（2）获取文件路径信息+名称，并设置key</li><li>设置Driver<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （1）设置输入的自定义inputFormat</span></span><br><span class="line">job.setInputFormatClass(XXXFileInputformat.class);</span><br><span class="line"><span class="comment">// （2）设置输出的outputFormat</span></span><br><span class="line">job.setOutputFormatClass(SequenceFileOutputFormat.class);</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-实现WholeFileInputFormat"><a href="#3-实现WholeFileInputFormat" class="headerlink" title="3. 实现WholeFileInputFormat"></a>3. 实现WholeFileInputFormat</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WholeFileInputFormat</span> <span class="keyword">extends</span> <span class="title">FileInputFormat</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RecordReader&lt;Text, BytesWritable&gt; <span class="title">createRecordReader</span><span class="params">(InputSplit inputSplit, TaskAttemptContext taskAttemptContext)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        WholeRecordReader recordReader = <span class="keyword">new</span> WholeRecordReader();</span><br><span class="line">        recordReader.initialize(inputSplit, taskAttemptContext);</span><br><span class="line">        <span class="keyword">return</span> recordReader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-实现WholeRecordReader类"><a href="#4-实现WholeRecordReader类" class="headerlink" title="4. 实现WholeRecordReader类"></a>4. 实现WholeRecordReader类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WholeRecordReader</span> <span class="keyword">extends</span> <span class="title">RecordReader</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    FileSplit split;</span><br><span class="line">    Configuration configuration;</span><br><span class="line">    Text k = <span class="keyword">new</span> Text();</span><br><span class="line">    BytesWritable v = <span class="keyword">new</span> BytesWritable();</span><br><span class="line">    <span class="keyword">boolean</span> isProgress = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(InputSplit inputSplit, TaskAttemptContext taskAttemptContext)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">this</span>.split = (FileSplit) inputSplit;</span><br><span class="line">        <span class="keyword">this</span>.configuration = taskAttemptContext.getConfiguration();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">nextKeyValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 核心业务</span></span><br><span class="line">        <span class="keyword">if</span> (isProgress)&#123;</span><br><span class="line">            <span class="comment">// 1. 获取fileSystem对象</span></span><br><span class="line">            Path path = split.getPath();</span><br><span class="line">            FileSystem fileSystem = path.getFileSystem(configuration);</span><br><span class="line">            <span class="comment">// 2. 获取输入流</span></span><br><span class="line">            FSDataInputStream fsDataInputStream = fileSystem.open(path);</span><br><span class="line">            <span class="comment">// 3. 拷贝</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) split.getLength()];</span><br><span class="line">            IOUtils.readFully(fsDataInputStream, buf, <span class="number">0</span>, buf.length);</span><br><span class="line">            <span class="comment">// 4. 封装kv</span></span><br><span class="line">            k.set(path.toString());</span><br><span class="line">            v.set(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">            <span class="comment">// 5. 关闭资源</span></span><br><span class="line">            IOUtils.closeStream(fsDataInputStream);</span><br><span class="line">            isProgress = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Text <span class="title">getCurrentKey</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BytesWritable <span class="title">getCurrentValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getProgress</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-编写Mapper方法"><a href="#5-编写Mapper方法" class="headerlink" title="5. 编写Mapper方法"></a>5. 编写Mapper方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFileMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>, <span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, BytesWritable value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        context.write(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-编写Reducer方法"><a href="#6-编写Reducer方法" class="headerlink" title="6. 编写Reducer方法"></a>6. 编写Reducer方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFileReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>, <span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;BytesWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (BytesWritable value : values) &#123;</span><br><span class="line">            context.write(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-编写Driver方法"><a href="#7-编写Driver方法" class="headerlink" title="7. 编写Driver方法"></a>7. 编写Driver方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFileDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>, <span class="string">"/output_path"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        job.setJarByClass(SequenceFileDriver.class);</span><br><span class="line">        job.setMapperClass(SequenceFileMapper.class);</span><br><span class="line">        job.setReducerClass(SequenceFileReducer.class);</span><br><span class="line">        <span class="comment">// 设置输入的inputFormat</span></span><br><span class="line">        job.setInputFormatClass(WholeFileInputFormat.class);</span><br><span class="line">        <span class="comment">// 设置输出的outputFormat</span></span><br><span class="line">        job.setOutputFormatClass(SequenceFileOutputFormat.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(BytesWritable.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="十、-实现自定义Partition分区"><a href="#十、-实现自定义Partition分区" class="headerlink" title="十、 实现自定义Partition分区"></a>十、 实现自定义Partition分区</h3><h4 id="1-需求："><a href="#1-需求：" class="headerlink" title="1. 需求："></a>1. 需求：</h4><p>在之前统计流量的基础上，将统计结果按照手机归属地不同省份输出到不同文件中</p><h4 id="2-在之前的案例中添加一个自定义分区类"><a href="#2-在之前的案例中添加一个自定义分区类" class="headerlink" title="2. 在之前的案例中添加一个自定义分区类"></a>2. 在之前的案例中添加一个自定义分区类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvincePartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text text, FlowBean flowBean, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> partition = <span class="number">4</span>;</span><br><span class="line">        String prePhone = text.toString().substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"136"</span>.equals(prePhone)) &#123;</span><br><span class="line">            partition = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"137"</span>.equals(prePhone)) &#123;</span><br><span class="line">            partition = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"138"</span>.equals(prePhone)) &#123;</span><br><span class="line">            partition = <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"139"</span>.equals(prePhone)) &#123;</span><br><span class="line">            partition = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> partition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-在原案例的Driver方法中添加分区配置"><a href="#3-在原案例的Driver方法中添加分区配置" class="headerlink" title="3. 在原案例的Driver方法中添加分区配置"></a>3. 在原案例的Driver方法中添加分区配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/Users/zhangjia/Desktop/phone.txt"</span>, <span class="string">"/Users/zhangjia/Desktop/result_phone"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        job.setJarByClass(FlowCountDriver.class);</span><br><span class="line">        job.setMapperClass(FlowCountMapper.class);</span><br><span class="line">        job.setReducerClass(FlowCountReducer.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line">        <span class="comment">// 设置自定义分区类</span></span><br><span class="line">        job.setPartitionerClass(ProvincePartitioner.class);</span><br><span class="line">        <span class="comment">// 设定Reducer任务数量</span></span><br><span class="line">        job.setNumReduceTasks(<span class="number">5</span>);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-执行"><a href="#4-执行" class="headerlink" title="4. 执行"></a>4. 执行</h4><p>发现输出结果已经按照手机号前三位进行分区</p><h4 id="5-注意"><a href="#5-注意" class="headerlink" title="5. 注意"></a>5. 注意</h4><p>对于Driver中设置的Reducer Task任务数量<br>（1）如果ReduceTask的数量&gt; getPartition的结果数，则会多产生几个空的输出文件part-r-000xx；<br>（2）如果1&lt;ReduceTask的数量&lt;getPartition的结果数，则有一部分分区数据无处安放，会Exception；<br>（3）如果ReduceTask的数量=1，则不管MapTask端输出多少个分区文件，最终结果都交给这一个ReduceTask，最终也就只会产生一个结果文件 part-r-00000；<br>（4）分区号必须从零开始，逐一累加。<br>举例：例如：假设自定义分区数为5，则</p><table><thead><tr><th>DriverTask数</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>会正常运行，只不过会产生一个输出文件</td></tr><tr><td>2</td><td>会报错</td></tr><tr><td>6</td><td>大于5，程序会正常运行，会产生空文件</td></tr></tbody></table><h3 id="十一、-自定义WritableComparable排序"><a href="#十一、-自定义WritableComparable排序" class="headerlink" title="十一、 自定义WritableComparable排序"></a>十一、 自定义WritableComparable排序</h3><h4 id="1-原理分析"><a href="#1-原理分析" class="headerlink" title="1. 原理分析"></a>1. 原理分析</h4><p>bean对象做为key传输，需要实现WritableComparable接口重写compareTo方法，就可以实现排序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-WritableComparable排序案例实操（全排序）"><a href="#2-WritableComparable排序案例实操（全排序）" class="headerlink" title="2. WritableComparable排序案例实操（全排序）"></a>2. WritableComparable排序案例实操（全排序）</h4><h5 id="1-输入数据为之前流量统计的输出数据"><a href="#1-输入数据为之前流量统计的输出数据" class="headerlink" title="1. 输入数据为之前流量统计的输出数据"></a>1. 输入数据为之前流量统计的输出数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">13470253144180180360</span><br><span class="line">135094687237335110349117684</span><br><span class="line">1356043963891849385856</span><br><span class="line">1356843665635972563529232</span><br><span class="line">1359043966811169542070</span><br><span class="line">1363057799169606907650</span><br><span class="line">13682846555193829104848</span><br><span class="line">137291994892400240</span><br><span class="line">1373623051324812468127162</span><br><span class="line">13768778790120120240</span><br><span class="line">138465441212640264</span><br><span class="line">1395643563613215121644</span><br><span class="line">139662511462400240</span><br><span class="line">13975057813110584824359301</span><br><span class="line">13992314666300837206728</span><br><span class="line">15043685818365935387197</span><br><span class="line">15910133277315629366092</span><br><span class="line">1595900212919381802118</span><br><span class="line">18271575951152721063633</span><br><span class="line">183901737829531241211943</span><br><span class="line">84188413411614325548</span><br></pre></td></tr></table></figure><h5 id="2-期望输出数据"><a href="#2-期望输出数据" class="headerlink" title="2. 期望输出数据"></a>2. 期望输出数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">135094687237335110349117684</span><br><span class="line">13975057813110584824359301</span><br><span class="line">1356843665635972563529232</span><br><span class="line">1373623051324812468127162</span><br><span class="line">183901737829531241211943</span><br><span class="line">1363057799169606907650</span><br><span class="line">15043685818365935387197</span><br><span class="line">13992314666300837206728</span><br><span class="line">15910133277315629366092</span><br><span class="line">1356043963891849385856</span><br><span class="line">84188413411614325548</span><br><span class="line">13682846555193829104848</span><br><span class="line">18271575951152721063633</span><br><span class="line">1595900212919381802118</span><br><span class="line">1359043966811169542070</span><br><span class="line">1395643563613215121644</span><br><span class="line">13470253144180180360</span><br><span class="line">138465441212640264</span><br><span class="line">139662511462400240</span><br><span class="line">13768778790120120240</span><br><span class="line">137291994892400240</span><br></pre></td></tr></table></figure><h5 id="3-编写自定义FlowBean类"><a href="#3-编写自定义FlowBean类" class="headerlink" title="3. 编写自定义FlowBean类"></a>3. 编写自定义FlowBean类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上行流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">    <span class="comment">// 下行流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> downFlow;</span><br><span class="line">    <span class="comment">// 总流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = upFlow + downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sumFlow &gt; o.getSumFlow() ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeLong(upFlow);</span><br><span class="line">        dataOutput.writeLong(downFlow);</span><br><span class="line">        dataOutput.writeLong(sumFlow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        upFlow = dataInput.readLong();</span><br><span class="line">        downFlow = dataInput.readLong();</span><br><span class="line">        sumFlow = dataInput.readLong();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUpFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFlow</span><span class="params">(<span class="keyword">long</span> upFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDownFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDownFlow</span><span class="params">(<span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSumFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSumFlow</span><span class="params">(<span class="keyword">long</span> sumFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow + <span class="string">"\t"</span> + downFlow + <span class="string">"\t"</span> + sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-编写Mapper类-1"><a href="#4-编写Mapper类-1" class="headerlink" title="4. 编写Mapper类"></a>4. 编写Mapper类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountSortMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    FlowBean flowBean = <span class="keyword">new</span> FlowBean();</span><br><span class="line">    Text v = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString();</span><br><span class="line">        String[] strArr = line.split(<span class="string">"\t"</span>);</span><br><span class="line">        String phoneNum = strArr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">long</span> upFlow = Long.parseLong(strArr[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">long</span> downFlow = Long.parseLong(strArr[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">long</span> sumFlow = Long.parseLong(strArr[<span class="number">3</span>]);</span><br><span class="line">        flowBean.setUpFlow(upFlow);</span><br><span class="line">        flowBean.setDownFlow(downFlow);</span><br><span class="line">        flowBean.setSumFlow(sumFlow);</span><br><span class="line">        v.set(phoneNum);</span><br><span class="line">        context.write(flowBean, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-编写Reducer类-1"><a href="#5-编写Reducer类-1" class="headerlink" title="5. 编写Reducer类"></a>5. 编写Reducer类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountSortReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">FlowBean</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(FlowBean key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Text value : values) &#123;</span><br><span class="line">            context.write(value, key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-编写Driver方法"><a href="#6-编写Driver方法" class="headerlink" title="6. 编写Driver方法"></a>6. 编写Driver方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountSortDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 输入输出路径需要根据自己电脑上实际的输入输出路径设置</span></span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>,<span class="string">"/output_path"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 获取配置信息，或者job对象实例</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 指定本程序的jar包所在的本地路径</span></span><br><span class="line">        job.setJarByClass(FlowCountSortDriver.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 指定本业务job要使用的mapper/Reducer业务类</span></span><br><span class="line">        job.setMapperClass(FlowCountSortMapper.class);</span><br><span class="line">        job.setReducerClass(FlowCountSortReducer.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4 指定mapper输出数据的kv类型</span></span><br><span class="line">        job.setMapOutputKeyClass(FlowBean.class);</span><br><span class="line">        job.setMapOutputValueClass(Text.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 指定最终输出的数据的kv类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6 指定job的输入原始文件所在目录</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7 将job中配置的相关参数，以及job所用的java类所在的jar包， 提交给yarn去运行</span></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-执行"><a href="#7-执行" class="headerlink" title="7. 执行"></a>7. 执行</h5><p>执行后发现结果与期望数据一致</p><p>注：如果希望实现区内排序，只需要在之前需求的基础上添加一个自定义Partition类即可。</p>]]></content>
      
      
      <categories>
          
          <category> MapReduce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Flume </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume自定义Sink</title>
      <link href="/2020/06/02/Flume%E8%87%AA%E5%AE%9A%E4%B9%89Sink/"/>
      <url>/2020/06/02/Flume%E8%87%AA%E5%AE%9A%E4%B9%89Sink/</url>
      
        <content type="html"><![CDATA[<p>本文为尚硅谷Flume课程随堂笔记</p><hr><hr><h3 id="一、-项目介绍"><a href="#一、-项目介绍" class="headerlink" title="一、 项目介绍"></a>一、 项目介绍</h3><p>使用 flume 接收数据，并在 Sink 端给每条数据添加前缀和后缀，输出到控制台。前后 缀可在flume任务配置文件中配置。</p><blockquote><p><a href="https://flume.apache.org/FlumeDeveloperGuide.html#sink" target="_blank" rel="noopener">https://flume.apache.org/FlumeDeveloperGuide.html#sink</a> 根据官方说明自定义 MySink 需要继承 AbstractSink 类并实现 Configurable 接口。</p></blockquote><hr><hr><h3 id="二、-Sink"><a href="#二、-Sink" class="headerlink" title="二、 Sink"></a>二、 Sink</h3><h4 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1.创建maven项目"></a>1.创建maven项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-ng-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="2-构建自定义类"><a href="#2-构建自定义类" class="headerlink" title="2. 构建自定义类"></a>2. 构建自定义类</h4><p>根据官方说明自定义 MySink 需要继承 AbstractSink 类并实现 Configurable 接口。<br>具体代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flume.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.conf.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.sink.AbstractSink;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> MySink</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/2 14:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySink</span> <span class="keyword">extends</span> <span class="title">AbstractSink</span> <span class="keyword">implements</span> <span class="title">Configurable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String subfix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 获取Channel</span></span><br><span class="line"><span class="comment">     * 2. 从Channel获取事务以及数据</span></span><br><span class="line"><span class="comment">     * 3. 发送数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">process</span><span class="params">()</span> <span class="keyword">throws</span> EventDeliveryException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 定义返回值</span></span><br><span class="line">        Status status;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取Channel</span></span><br><span class="line">        Channel channel = getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 从Channel中获取事务</span></span><br><span class="line">        Transaction transaction = channel.getTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 启动事务</span></span><br><span class="line">        transaction.begin();</span><br><span class="line">        Event event;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 5. 从Channel中获取数据</span></span><br><span class="line">            event = channel.take();</span><br><span class="line">        &#125; <span class="keyword">while</span> (event == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 处理事件</span></span><br><span class="line">            String body = <span class="keyword">new</span> String(event.getBody());</span><br><span class="line">            System.out.println(prefix + <span class="string">"--"</span> + body + <span class="string">"--"</span> + subfix);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7. 提交事务</span></span><br><span class="line">            transaction.commit();</span><br><span class="line">            status = Status.READY;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ChannelException e) &#123;</span><br><span class="line">            transaction.rollback();</span><br><span class="line">            <span class="comment">// 10. 修改状态</span></span><br><span class="line">            status = Status.BACKOFF;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 11. 关闭事务</span></span><br><span class="line">            transaction.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        prefix = context.getString(<span class="string">"prefix"</span>);</span><br><span class="line">        subfix = context.getString(<span class="string">"subfix"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-maven打包"><a href="#3-maven打包" class="headerlink" title="3. maven打包"></a>3. maven打包</h4><p>将项目打包，并将项目放至flume的lib目录下</p><hr><hr><h3 id="三、编写Flume相关配置"><a href="#三、编写Flume相关配置" class="headerlink" title="三、编写Flume相关配置"></a>三、编写Flume相关配置</h3><h4 id="1-编写my-sink-conf"><a href="#1-编写my-sink-conf" class="headerlink" title="1. 编写my-sink.conf"></a>1. 编写my-sink.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = xyz.suiwo.flume.sink.MySink</span><br><span class="line">a1.sinks.k1.prefix = suiwo</span><br><span class="line">a1.sinks.k1.subfix = haha</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><hr><hr><h3 id="四、-启动测试"><a href="#四、-启动测试" class="headerlink" title="四、 启动测试"></a>四、 启动测试</h3><p>执行下面指令启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -c conf -f job/my-sink.conf -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume自定义Source</title>
      <link href="/2020/06/01/Flume%E8%87%AA%E5%AE%9A%E4%B9%89Source/"/>
      <url>/2020/06/01/Flume%E8%87%AA%E5%AE%9A%E4%B9%89Source/</url>
      
        <content type="html"><![CDATA[<p>本文为尚硅谷Flume课程随堂笔记</p><hr><hr><h3 id="一、-项目介绍"><a href="#一、-项目介绍" class="headerlink" title="一、 项目介绍"></a>一、 项目介绍</h3><p>在本案例中使用flume接收数据，并给每条数据添加前缀，输出到控制台。前缀可从flume配置文件中配置。<br>整个架构大致如下图：</p><p><img src="/images/Flume自定义Source/8E64C481-2E59-4986-B367-98B5A0A28EA1.png" alt="flume"></p><hr><p>官方也提供了自定义<code>source</code>的接口:<br><a href="https://flume.apache.org/FlumeDeveloperGuide.html#source" target="_blank" rel="noopener">https://flume.apache.org/FlumeDeveloperGuide.html#source</a> 根据官方说明自定义<code>MySource</code>需要继承<code>AbstractSource</code>类并实现<code>Configurable</code>和<code>PollableSource</code>接口。</p><hr><hr><h3 id="二、-构建自定义Source代码"><a href="#二、-构建自定义Source代码" class="headerlink" title="二、 构建自定义Source代码"></a>二、 构建自定义Source代码</h3><h4 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1.创建maven项目"></a>1.创建maven项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-ng-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="2-构建自定义类"><a href="#2-构建自定义类" class="headerlink" title="2. 构建自定义类"></a>2. 构建自定义类</h4><p>首先创建自定义类继承<code>AbstractSource</code>类并实现<code>Configurable</code>和<code>PollableSource</code>接口。<br>具体代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flume.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.Event;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.EventDeliveryException;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.PollableSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.conf.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.event.SimpleEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.source.AbstractSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> MySource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/2 13:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySource</span> <span class="keyword">extends</span> <span class="title">AbstractSource</span> <span class="keyword">implements</span> <span class="title">Configurable</span>, <span class="title">PollableSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String subfix;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        prefix = context.getString(<span class="string">"prefix"</span>);</span><br><span class="line">        subfix = context.getString(<span class="string">"sub"</span>,<span class="string">"noSubfix"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 接收数据（for循环造数据）</span></span><br><span class="line"><span class="comment">     * 2. 封装为时间</span></span><br><span class="line"><span class="comment">     * 3. 将时间传给Channel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">process</span><span class="params">()</span> <span class="keyword">throws</span> EventDeliveryException </span>&#123;</span><br><span class="line">        Status status = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 1. 接受数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2. 构建事件对象</span></span><br><span class="line">                SimpleEvent event = <span class="keyword">new</span> SimpleEvent();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3. 给事件设置值</span></span><br><span class="line">                event.setBody((prefix + <span class="string">"--"</span> + i + <span class="string">"--"</span> + subfix).getBytes());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 4. 将时间传递给Channel</span></span><br><span class="line">                getChannelProcessor().processEvent(event);</span><br><span class="line"></span><br><span class="line">                status = Status.READY;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            status = Status.BACKOFF;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getBackOffSleepIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getMaxBackOffSleepInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-maven打包"><a href="#3-maven打包" class="headerlink" title="3. maven打包"></a>3. maven打包</h4><p>将项目打包，并将项目放至flume的lib目录下</p><hr><hr><h3 id="三、编写Flume相关配置"><a href="#三、编写Flume相关配置" class="headerlink" title="三、编写Flume相关配置"></a>三、编写Flume相关配置</h3><h4 id="1-编写my-source-conf"><a href="#1-编写my-source-conf" class="headerlink" title="1. 编写my-source.conf"></a>1. 编写my-source.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = xyz.suiwo.flume.source.MySource</span><br><span class="line">a1.sources.r1.prefix = suiwo</span><br><span class="line">a1.sources.r1.subfix = zaixian</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><hr><hr><h3 id="四、-启动测试"><a href="#四、-启动测试" class="headerlink" title="四、 启动测试"></a>四、 启动测试</h3><p>执行下面指令启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -c conf -f job/my-source.conf -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><blockquote><p>此时可以发现prefix参数获取成功，subfix因为配置文件中未配置，所以使用默认值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume自定义Interceptor</title>
      <link href="/2020/05/31/Flume%E8%87%AA%E5%AE%9A%E4%B9%89Interceptor/"/>
      <url>/2020/05/31/Flume%E8%87%AA%E5%AE%9A%E4%B9%89Interceptor/</url>
      
        <content type="html"><![CDATA[<p>本文为尚硅谷Flume课程随堂笔记</p><hr><h3 id="一、-项目介绍"><a href="#一、-项目介绍" class="headerlink" title="一、 项目介绍"></a>一、 项目介绍</h3><p>在该案例中，我们以端口数据模拟日志，以是否存在“Hello”模拟不同类型的日志，我们需要自定义interceptor区分是否存在，将其分别发往不同的分析系统 (Channel)。<br>整个架构大致如下图：<br><img src="/images/Flume自定义Interceptor/C13A7432-8217-463A-BF50-7BD20C0F81BB.png" alt="Flume"></p><hr><hr><h3 id="二、-构建拦截器代码"><a href="#二、-构建拦截器代码" class="headerlink" title="二、 构建拦截器代码"></a>二、 构建拦截器代码</h3><h4 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1.创建maven项目"></a>1.创建maven项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-ng-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="2-创建自定义拦截器"><a href="#2-创建自定义拦截器" class="headerlink" title="2.创建自定义拦截器"></a>2.创建自定义拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flume.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.Event;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.interceptor.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> TypeInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/31 14:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Event&gt; result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        result = <span class="keyword">new</span> ArrayList&lt;Event&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单个事件拦截</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">intercept</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取事件中的头信息</span></span><br><span class="line">        Map&lt;String, String&gt; headers = event.getHeaders();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取事件中的body信息</span></span><br><span class="line">        String body = <span class="keyword">new</span> String(event.getBody());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据body中是否有Hello来决定添加怎样的头信息</span></span><br><span class="line">        <span class="keyword">if</span> (body.contains(<span class="string">"Hello"</span>)) &#123;</span><br><span class="line">            <span class="comment">// channel选择器通过type字段中的值向指定的avro发送信息</span></span><br><span class="line">            headers.put(<span class="string">"type"</span>, <span class="string">"suiwo"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            headers.put(<span class="string">"type"</span>, <span class="string">"inc"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量事件拦截</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Event&gt; <span class="title">intercept</span><span class="params">(List&lt;Event&gt; list)</span> </span>&#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        <span class="keyword">for</span> (Event event : list) &#123;</span><br><span class="line">            result.add(intercept(event));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">Interceptor</span>.<span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Interceptor <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TypeInterceptor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-maven打包"><a href="#3-maven打包" class="headerlink" title="3. maven打包"></a>3. maven打包</h4><p>将项目打包，并将项目放至flume的lib目录下</p><hr><hr><h3 id="三、编写Flume相关配置"><a href="#三、编写Flume相关配置" class="headerlink" title="三、编写Flume相关配置"></a>三、编写Flume相关配置</h3><h4 id="1-编写flume1"><a href="#1-编写flume1" class="headerlink" title="1. 编写flume1"></a>1. 编写flume1</h4><p>编写flume1的配置文件<code>flume1.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># Name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line"></span><br><span class="line"># Source</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># Channel</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 1000</span><br><span class="line">a1.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Sink</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = localhost</span><br><span class="line">a1.sinks.k1.port = 4141</span><br><span class="line">a1.sinks.k2.type= avro</span><br><span class="line">a1.sinks.k2.hostname = localhost</span><br><span class="line">a1.sinks.k2.port = 4142</span><br><span class="line"></span><br><span class="line"># Bind</span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line"># Channel Selector</span><br><span class="line">a1.sources.r1.selector.type = multiplexing</span><br><span class="line">a1.sources.r1.selector.header = type</span><br><span class="line">a1.sources.r1.selector.mapping.suiwo = c1</span><br><span class="line">a1.sources.r1.selector.mapping.inc = c2</span><br><span class="line"></span><br><span class="line"># Interceptor</span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line"># 使用拦截器全类名，$符号后的为Builder内部类名</span><br><span class="line">a1.sources.r1.interceptors.i1.type = xyz.suiwo.flume.interceptor.TypeInterceptor$Builder</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-编写flume2"><a href="#2-编写flume2" class="headerlink" title="2. 编写flume2"></a>2. 编写flume2</h4><p>书写flume2的配置文件<code>flume2.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a2.sources = r2</span><br><span class="line">a2.sinks = k2</span><br><span class="line">a2.channels = c2</span><br><span class="line">a2.sources.r2.type = avro</span><br><span class="line">a2.sources.r2.bind = localhost</span><br><span class="line">a2.sources.r2.port = 4141</span><br><span class="line">a2.sinks.k2.type = logger</span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 1000</span><br><span class="line">a2.channels.c2.transactionCapacity = 100</span><br><span class="line">a2.sinks.k2.channel = c2</span><br><span class="line">a2.sources.r2.channels = c2</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-编写flume3"><a href="#3-编写flume3" class="headerlink" title="3. 编写flume3"></a>3. 编写flume3</h4><p>书写flume3的配置文件<code>flume3.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a3.sources = r3</span><br><span class="line">a3.sinks = k3</span><br><span class="line">a3.channels = c3</span><br><span class="line">a3.sources.r3.type = avro</span><br><span class="line">a3.sources.r3.bind = localhost</span><br><span class="line">a3.sources.r3.port = 4142</span><br><span class="line">a3.sinks.k3.type = logger</span><br><span class="line">a3.channels.c3.type = memory</span><br><span class="line">a3.channels.c3.capacity = 1000</span><br><span class="line">a3.channels.c3.transactionCapacity = 100</span><br><span class="line">a3.sinks.k3.channel = c3</span><br><span class="line">a3.sources.r3.channels = c3</span><br></pre></td></tr></table></figure></p><hr><hr><h3 id="四、-启动测试"><a href="#四、-启动测试" class="headerlink" title="四、 启动测试"></a>四、 启动测试</h3><ol><li>先启动flume2以及flume3最后启动flume1。</li><li>使用<code>netcat</code>工具向<code>44444</code>端口发送消息。</li><li>经过测试发现，拦截功能已实现。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume初识</title>
      <link href="/2020/05/26/Flume%E5%88%9D%E8%AF%86/"/>
      <url>/2020/05/26/Flume%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是尚硅谷Flume课程随手笔记，记录课程的一些实战的操作步骤</p></blockquote><hr><h3 id="一、安装Flume并实现一个简易端口监控"><a href="#一、安装Flume并实现一个简易端口监控" class="headerlink" title="一、安装Flume并实现一个简易端口监控"></a>一、安装Flume并实现一个简易端口监控</h3><blockquote><p>实现监控端口案例，通过Flume来监听端口数据，并将数据打印到控制台</p></blockquote><hr><h4 id="1-首先进入官网下载Flume源码包"><a href="#1-首先进入官网下载Flume源码包" class="headerlink" title="1. 首先进入官网下载Flume源码包"></a>1. 首先进入官网下载Flume源码包</h4><hr><h4 id="2-修改flume-env-sh文件"><a href="#2-修改flume-env-sh文件" class="headerlink" title="2. 修改flume-env.sh文件"></a>2. 修改flume-env.sh文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure><hr><h4 id="3-添加配置文件"><a href="#3-添加配置文件" class="headerlink" title="3. 添加配置文件"></a>3. 添加配置文件</h4><p>创建Flume Agent配置文件<code>flume-netcat-logger.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为netcat端口类型</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line"># 表示a1的监听的主机</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line"># 表示a1的监听的端口号</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="4-启动Flume"><a href="#4-启动Flume" class="headerlink" title="4. 启动Flume"></a>4. 启动Flume</h4><p>启动终端，在终端中属于下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf/ --name a1 --conf-file job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>使用下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc localhost 44444</span><br></pre></td></tr></table></figure></p><p>通过netcat发送数据，发现此时flume日志中显示接收到数据</p><hr><hr><h3 id="二、-实时监控单个追加文件"><a href="#二、-实时监控单个追加文件" class="headerlink" title="二、 实时监控单个追加文件"></a>二、 实时监控单个追加文件</h3><blockquote><p>实时监控 Hive 日志，并上传到 HDFS 中</p></blockquote><hr><h4 id="1-添加配置文件"><a href="#1-添加配置文件" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h4><p>创建本次程序的配置文件，创建 flume-file-logger.conf 文件，根据官网添加一下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为exec source类型</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line"># 监控文件</span><br><span class="line">a1.sources.r1.command = tail -F /Users/user/Library/Hive/logs/hive.log</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-启动Flume"><a href="#2-启动Flume" class="headerlink" title="2. 启动Flume"></a>2. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-flume-logger.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后启动该任务，并且可以监听hive的日志文件</p><hr><hr><h3 id="三、-实时监控单个追加文件到HDFS"><a href="#三、-实时监控单个追加文件到HDFS" class="headerlink" title="三、 实时监控单个追加文件到HDFS"></a>三、 实时监控单个追加文件到HDFS</h3><blockquote><p>Flume监控Hive实时更新日志然后上传到HDFS</p></blockquote><hr><h4 id="1-添加相关依赖包"><a href="#1-添加相关依赖包" class="headerlink" title="1. 添加相关依赖包"></a>1. 添加相关依赖包</h4><p>首先将需要使用的相关Jar包放入Flume的lib目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">commons-configuration-1.6.jar、</span><br><span class="line">hadoop-auth-2.7.2.jar、</span><br><span class="line">hadoop-common-2.7.2.jar、</span><br><span class="line">hadoop-hdfs-2.7.2.jar、</span><br><span class="line">commons-io-2.4.jar、</span><br><span class="line">htrace-core-3.1.0-incubating.jar</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-添加配置文件"><a href="#2-添加配置文件" class="headerlink" title="2.添加配置文件"></a>2.添加配置文件</h4><p>创建本次程序的配置文件，创建 flume-file-hdfs.conf 文件，根据官网添加一下配置，因为这里与上一节区别主要在sink部分，所以只需要在上一节配置的基础上对sink相关的部分进行修改即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为exec source类型</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line"># 监控文件</span><br><span class="line">a1.sources.r1.command = tail -F /Users/user/Library/Hive/logs/hive.log</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"></span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://localhost:9000/flume/%Y%m%d/%H</span><br><span class="line"># 上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logs- </span><br><span class="line"># 是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round = true </span><br><span class="line"># 多少时间单位创建一个新的文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"># 重新定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"># 积攒多少个 Event 才 flush 到 HDFS 一次</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"># 设置文件类型，可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"># 多久生成一个新的文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"># 设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"># 文件的滚动与 Event 数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-启动Flume"><a href="#3-启动Flume" class="headerlink" title="3. 启动Flume"></a>3. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-file-hdfs.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后启动该任务，并且可以监听文件的追加</p><hr><hr><h3 id="四、-实时监控目录下的多个新文件至HDFS"><a href="#四、-实时监控目录下的多个新文件至HDFS" class="headerlink" title="四、 实时监控目录下的多个新文件至HDFS"></a>四、 实时监控目录下的多个新文件至HDFS</h3><blockquote><p>当监控的目录下有新文件时，进行上传</p></blockquote><hr><h4 id="1-添加配置文件-1"><a href="#1-添加配置文件-1" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h4><p>写下如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为spooldir类型</span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line"># 监控文件的路径</span><br><span class="line">a1.sources.r1.spoolDir = /Users/user/Library/Flume/upload</span><br><span class="line"># 上传完成文件后缀</span><br><span class="line">a1.sources.r1.fileSuffix = .COMPLETED</span><br><span class="line"># 忽略所有以.tmp 结尾的文件，不上传</span><br><span class="line">a1.sources.r1.ignorePattern = ([^ ]*\.tmp)</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"></span><br><span class="line"># 表示a1的输出目的地是控制台hdfs类型</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://localhost:9000/flume/%Y%m%d/%H</span><br><span class="line"># 上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = upload- </span><br><span class="line"># 是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round = true </span><br><span class="line"># 多少时间单位创建一个新的文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"># 重新定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"># 积攒多少个 Event 才 flush 到 HDFS 一次</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"># 设置文件类型，可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"># 多久生成一个新的文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"># 设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"># 文件的滚动与 Event 数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-启动Flume-1"><a href="#2-启动Flume-1" class="headerlink" title="2. 启动Flume"></a>2. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-dir-hdfs.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后我们向upload文件夹添加文件，发现成功上传至HDFS。</p><blockquote><p>注： 但是它并不能监控动态变化的数据，在使用 Spooling Directory Source 时，不要在监控目录中创建并持续修改文件，上传完成的文件会以.COMPLETED 结尾，被监控文件夹每 500 毫秒扫描一次文件变动。</p></blockquote><hr><hr><h3 id="五、-实时监控目录下的多个追加文件"><a href="#五、-实时监控目录下的多个追加文件" class="headerlink" title="五、 实时监控目录下的多个追加文件"></a>五、 实时监控目录下的多个追加文件</h3><blockquote><p>Exec source 适用于监控一个实时追加的文件，但不能保证数据不丢失;Spooldir Source 能够保证数据不丢失，且能够实现断点续传，但延迟较高，不能实时监控;而 Taildir Source 既能够实现断点续传，又可以保证数据不丢失，还能够进行实时监控。</p></blockquote><hr><h4 id="1-添加配置文件-2"><a href="#1-添加配置文件-2" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">#表示a1的输入源类型为TAILDIR类型</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line"># 指定position_file位置</span><br><span class="line">a1.sources.r1.positionFile = /Users/user/Library/Flume/upload/tail_dir.json</span><br><span class="line"># 文件组</span><br><span class="line">a1.sources.r1.filegroups = f1 f2</span><br><span class="line"># f1文件组</span><br><span class="line">a1.sources.r1.filegroups.f1 = /Users/user/Library/Flume/upload/dict1/a.log</span><br><span class="line"># f2文件组</span><br><span class="line">a1.sources.r1.filegroups.f2 = /Users/user/Library/Flume/upload/dict2/.*.txt</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"></span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://localhost:9000/flume/%Y%m%d/%H</span><br><span class="line"># 上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = upload- </span><br><span class="line"># 是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round = true </span><br><span class="line"># 多少时间单位创建一个新的文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"># 重新定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"># 积攒多少个 Event 才 flush 到 HDFS 一次</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"># 设置文件类型，可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"># 多久生成一个新的文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"># 设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"># 文件的滚动与 Event 数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><hr><h4 id="2-启动Flume-2"><a href="#2-启动Flume-2" class="headerlink" title="2. 启动Flume"></a>2. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-taildir-hdfs.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后我们对监控的文件组中的文件进行追加，发现成功监听。</p><blockquote><p>注： 在查看tail_dir.json中可以发现监听记录，同时每条记录都存在inode字段和pos字段，inode字段为文件唯一标识符，不随文件名称的变化而变化，pos则是上传文件的偏移量，正是通过这个来实现断点续传。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Flume </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive初识</title>
      <link href="/2020/05/24/Hive%E5%88%9D%E8%AF%86/"/>
      <url>/2020/05/24/Hive%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-安装Hive并启动"><a href="#一、-安装Hive并启动" class="headerlink" title="一、 安装Hive并启动"></a>一、 安装Hive并启动</h3><hr><h4 id="1-下载源码包"><a href="#1-下载源码包" class="headerlink" title="1. 下载源码包"></a>1. 下载源码包</h4><p>解压源码包后，配置hive-env.sh<br>(a)配置 <code>HADOOP_HOME</code> 路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=$&#123;Hadoop的路径&#125;</span><br></pre></td></tr></table></figure></p><p>(b)配置 <code>HIVE_CONF_DIR</code> 路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_CONF_DIR=$&#123;Hive配置文件路径&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-启动hadoop"><a href="#2-启动hadoop" class="headerlink" title="2. 启动hadoop"></a>2. 启动hadoop</h4><hr><h4 id="3-启动Hive客户端"><a href="#3-启动Hive客户端" class="headerlink" title="3. 启动Hive客户端"></a>3. 启动Hive客户端</h4><p>调用bin/hive进入Hive的客户端</p><blockquote><p>启动Hive后会发现Hive源码包中多了<code>derby.log</code>和<code>metastore_db</code>这个就是Hive默认的元数据</p></blockquote><hr><h4 id="4-创建数据表"><a href="#4-创建数据表" class="headerlink" title="4. 创建数据表"></a>4. 创建数据表</h4><p>在Hive客户端中创建一个数据表，并数据表中插入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student(id int, name string);</span><br><span class="line">hive&gt; insert into student values(1000,<span class="string">"ss"</span>);</span><br></pre></td></tr></table></figure></p><p>此时我们可以发现在hdfs中出现了<code>user/hive/warehouse</code>文件夹下存在一个与表名同名的文件夹，这个文件夹中存储的就是数据表的数据</p><hr><hr><h3 id="二、-尝试在文件系统中加载数据"><a href="#二、-尝试在文件系统中加载数据" class="headerlink" title="二、 尝试在文件系统中加载数据"></a>二、 尝试在文件系统中加载数据</h3><hr><h4 id="1-创建测试数据"><a href="#1-创建测试数据" class="headerlink" title="1. 创建测试数据"></a>1. 创建测试数据</h4><p>创建一个<code>student.txt</code>文件（id与姓名之间用tab隔开）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1001    zhangsan</span><br><span class="line">1002    lisi</span><br><span class="line">1003    wangwu</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-使用load导入数据"><a href="#2-使用load导入数据" class="headerlink" title="2. 使用load导入数据"></a>2. 使用load导入数据</h4><p>在hive中执行以下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; load data <span class="built_in">local</span> inpath <span class="string">'文件路径'</span> into table student;</span><br></pre></td></tr></table></figure></p><p>此时我们可以发现<code>user/hive/warehouse/student</code>文件夹下多了一个student.txt文件，所以可以理解这其实就是一个上传操作，但是使用select语句查询时发现查询结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NULLNULL</span><br><span class="line">NULLNULL</span><br><span class="line">NULLNULL</span><br></pre></td></tr></table></figure></p><p>这是因为我们在创建表时并未声明文件分隔符，所以我们重新创建数据表，并声明分隔符为’\t’<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student(id int, name string) ROW FORMAT DELIMITED FIELDS TERMINATED BY <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure></p><p>之后重新导入后数据发现可以正常查询了。</p><hr><h4 id="3-通过上传文件导入数据"><a href="#3-通过上传文件导入数据" class="headerlink" title="3. 通过上传文件导入数据"></a>3. 通过上传文件导入数据</h4><p>现在我们再创建一个student1.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1004    zhaoliu</span><br><span class="line">1005    chenba</span><br><span class="line">1006    sunjiu</span><br></pre></td></tr></table></figure></p><p>然后直接上传到hdfs的<code>user/hive/warehouse/student</code>路径下<br>之后在查询，可以发现我们上传的<code>student1.txt</code>文件中的数据也可以查询到了。</p><blockquote><p>在实际开发中，可以选择使用load指令或者直接上传两种方式，如果我们想使用load指令加载hdfs下的数据，同样可以使用load指令，此时可以理解成将该文件移动到数据表所对应的文件之下<br>hive&gt; load data inpath ‘文件路径’ into table student;</p></blockquote><hr><hr><h3 id="三、-配置Hive元数据至MySQL"><a href="#三、-配置Hive元数据至MySQL" class="headerlink" title="三、 配置Hive元数据至MySQL"></a>三、 配置Hive元数据至MySQL</h3><blockquote><p>我们会发现一个问题同一时间只能启动一个Hive客户端。这就是数据derby数据库的原因，所以我们接下来要将我们的元数据转移到MySQL中，MySQL安装在此不做赘述。</p></blockquote><hr><h4 id="1-添加MySQL连接驱动"><a href="#1-添加MySQL连接驱动" class="headerlink" title="1. 添加MySQL连接驱动"></a>1. 添加MySQL连接驱动</h4><p>安装好MySQL后，首先我们需要下载mysql连接驱动也就是<code>mysql-connector-java-5.1.47.jar</code>（这个jar包可以在maven的本地仓库中找到，如果之前在maven中使用过这个依赖）文件放入到hive的lib目录中。</p><hr><h4 id="2-配置hive-site-xml"><a href="#2-配置hive-site-xml" class="headerlink" title="2. 配置hive-site.xml"></a>2. 配置<code>hive-site.xml</code></h4><p>按照官方配置，将下列数据拷贝到文件中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop102:3306/metastore?createDatabaseI fNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>000000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置完毕后，如果启动 hive 异常，可以重启hadoop，此时我们可以看到mysql中创建了相关的数据库。</p><hr><h4 id="3-创建数据表"><a href="#3-创建数据表" class="headerlink" title="3. 创建数据表"></a>3. 创建数据表</h4><p>然后我们创建一个数据表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student1(id int, name string);</span><br></pre></td></tr></table></figure></p><p>这时我们在数据库中的TBLS数据表中会发现我们创建者条数据的记录，在DBS表中可以看到我们的数据库路径。</p>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YARN集群搭建</title>
      <link href="/2020/04/20/YARN%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/04/20/YARN%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要是记录集群搭建流程，具体细节较为简略</p></blockquote><h3 id="一、YARN简介"><a href="#一、YARN简介" class="headerlink" title="一、YARN简介"></a>一、YARN简介</h3><p>Apache Hadoop YARN （Yet Another Resource Negotiator，另一种资源协调者）是一种新的 Hadoop 资源管理器，它是一个通用资源管理系统，可为上层应用提供统一的资源管理和调度，它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。</p><h3 id="二、集群规划"><a href="#二、集群规划" class="headerlink" title="二、集群规划"></a>二、集群规划</h3><table><thead><tr><th>主机名</th><th>作用</th></tr></thead><tbody><tr><td>hadoop11</td><td>NameNode &amp; DataNode &amp; NodeManager</td></tr><tr><td>hadoop12</td><td>DataNode &amp; ResourceManager &amp; NodeManager</td></tr><tr><td>hadoop13</td><td>NameNode &amp; DataNode &amp; NodeManager</td></tr></tbody></table><h3 id="三、搭建集群"><a href="#三、搭建集群" class="headerlink" title="三、搭建集群"></a>三、搭建集群</h3><ol><li>修改主机名以及<code>host</code>映射并重启机器</li><li>配置<code>ssh</code>免密登录</li><li>配置<code>JAVA</code>环境变量</li><li>安装Hadoop<br>(1). 修改<code>hadoop-env.sh</code><br>(2). 修改<code>core-site.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop11:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/zhangjia/hadoop-2.9.2/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>(3). 修改<code>hdfs-site.xml</code><br>不需要修改，默认配置即可<br>(4). 修改mapred-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(5). 修改<code>yarn-site.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop12<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(6). 配置<code>slaves</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop11</span><br><span class="line">hadoop12</span><br><span class="line">hadoop13</span><br></pre></td></tr></table></figure></p><p>(7). 格式化NameNode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure></p><p>(8). 启动HDFS集群<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></p><p>(9). 启动YARN集群(只可以在ResourceManager节点启动)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure></p><p>(10). 可以在 <a href="http://hadoop12:8088查看当前YARN启动情况" target="_blank" rel="noopener">http://hadoop12:8088查看当前YARN启动情况</a></p>]]></content>
      
      
      <categories>
          
          <category> Yarn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
            <tag> Yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS高可用集群搭建</title>
      <link href="/2020/04/20/HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/04/20/HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境</p><ul><li>CentOS 7</li><li>JAVA 1.8</li><li>Zookeeper 2.9.2</li><li>Hadoop 3.4.14</li></ul></blockquote><hr><h3 id="一、简单HDFS集群中存在的问题及解决办法"><a href="#一、简单HDFS集群中存在的问题及解决办法" class="headerlink" title="一、简单HDFS集群中存在的问题及解决办法"></a>一、简单HDFS集群中存在的问题及解决办法</h3><ol><li><p>如何解决NameNode的单节点问题</p><p> 多个NameNode备份原NameNode数据</p></li><li><p>如何解决多个NameNode是集群脑裂问题<br> 使用QJM，<code>QJM（Quorum Journal Manager）</code>是Hadoop专门为Namenode共享存储开发的组件。其集群运行一组<code>Journal Node</code>，每个Journal 节点暴露一个简单的RPC接口，允许Namenode读取和写入数据，数据存放在Journal节点的本地磁盘。当Namenode写入<code>edit log</code>时，它向集群的所有Journal Node发送写入请求，当多数节点回复确认成功写入之后，edit log就认为是成功写入。例如有3个Journal Node，Namenode如果收到来自2个节点的确认消息，则认为写入成功。<br> 而在故障自动转移的处理上，引入了监控Namenode状态的ZookeeperFailController（ZKFC）。ZKFC一般运行在Namenode的宿主机器上，与Zookeeper集群协作完成故障的自动转移。整个集群架构图如下：<br> <img src="/images/HDFS高可用集群搭建/SouthEast.png" alt="img"></p></li><li><p>在HA集群中如何ZK与<code>NameNode active</code>出现网络延迟问题这种情况，ZK会自动将<code>NameNode standby</code>切换为活跃节点，这个时候就出现了多个active节点，也就意味着现有集群面临脑裂问题<br> 使用JournalNode</p><ol><li>负责NameNode的edit log同步</li><li>JournalNode隔离机制，保证在一个时刻只有一个NameNode active，使用ssh登录到NameNode节点使用kill命令杀死NameNode。</li></ol></li></ol><hr><h3 id="二、集群规划"><a href="#二、集群规划" class="headerlink" title="二、集群规划"></a>二、集群规划</h3><h4 id="1-相关要求："><a href="#1-相关要求：" class="headerlink" title="1. 相关要求："></a>1. 相关要求：</h4><ul><li>节点个数最好是奇数个 3个节点</li><li>每个zookeeper服务会启动至少三个端口<ul><li>1.client处理</li><li>2.内部数据原子广播</li><li>3.内部选举投票端口</li></ul></li></ul><h4 id="2-服务器相关信息"><a href="#2-服务器相关信息" class="headerlink" title="2. 服务器相关信息"></a>2. 服务器相关信息</h4><table><thead><tr><th>hostname</th><th>所运行服务</th><th>IP地址</th></tr></thead><tbody><tr><td>zk1</td><td>zkNode1</td><td>按照实际IP地址</td></tr><tr><td>zk2</td><td>zkNode2</td><td>按照实际IP地址</td></tr><tr><td>zk3</td><td>zkNode3</td><td>按照实际IP地址</td></tr><tr><td>hadoop1</td><td>NameNode(active) &amp; DataNode &amp; JournalNode &amp; ZKFC</td><td>按照实际IP地址</td></tr><tr><td>hadoop2</td><td>NameNode(standby) &amp; DataNode &amp; JournalNode &amp; ZKFC</td><td>按照实际IP地址</td></tr><tr><td>hadoop3</td><td>DataNode &amp; JournalNode &amp; ZKFC</td><td>按照实际IP地址</td></tr></tbody></table><h4 id="3-共同配置"><a href="#3-共同配置" class="headerlink" title="3. 共同配置"></a>3. 共同配置</h4><p>(1) 修改所有机器hostname<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure></p><p>(2) 配置hosts文件，将ip地址与主机名进行映射<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure></p><p>(3) 重启机器</p><p>(4) 配置ssh免密登录，实现start-dfs.sh执行的机器可以免密登录其他的NameNode和DataNode节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. hadoop1: ssh-keygen -t -rsa</span><br><span class="line">2. hadoop1: ssh-copy-id hadoop1</span><br><span class="line">3. hadoop1: ssh-copy-id hadoop2</span><br><span class="line">4. hadoop1: ssh-copy-id hadoop3</span><br></pre></td></tr></table></figure></p><p>(5) 配置JAVA环境</p><p>(6) 修改环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入配置文件</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_251-amd64</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p><hr><h3 id="三、zk集群搭建"><a href="#三、zk集群搭建" class="headerlink" title="三、zk集群搭建"></a>三、zk集群搭建</h3><h4 id="1-解压zookeeper文件"><a href="#1-解压zookeeper文件" class="headerlink" title="1. 解压zookeeper文件"></a>1. 解压zookeeper文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper文件</span><br></pre></td></tr></table></figure><h4 id="2-在每一个zk节点上创建zk的数据目录"><a href="#2-在每一个zk节点上创建zk的数据目录" class="headerlink" title="2. 在每一个zk节点上创建zk的数据目录"></a>2. 在每一个zk节点上创建zk的数据目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/zkdata</span><br></pre></td></tr></table></figure><h4 id="3-在每一个节点存放zk数据的目录中必须创建一个myid文件"><a href="#3-在每一个节点存放zk数据的目录中必须创建一个myid文件" class="headerlink" title="3. 在每一个节点存放zk数据的目录中必须创建一个myid文件"></a>3. 在每一个节点存放zk数据的目录中必须创建一个myid文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zk1: <span class="built_in">echo</span> <span class="string">"1"</span> &gt;&gt; /home/zkdata/myid</span><br><span class="line">zk2: <span class="built_in">echo</span> <span class="string">"2"</span> &gt;&gt; /home/zkdata/myid</span><br><span class="line">zk3: <span class="built_in">echo</span> <span class="string">"3"</span> &gt;&gt; /home/zkdata/myid</span><br></pre></td></tr></table></figure><h4 id="4-创建zookeeper的基础配置文件zoo-cfg"><a href="#4-创建zookeeper的基础配置文件zoo-cfg" class="headerlink" title="4. 创建zookeeper的基础配置文件zoo.cfg"></a>4. 创建zookeeper的基础配置文件zoo.cfg</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/zkdata/zoo.cfg</span><br></pre></td></tr></table></figure><p>配置内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 3001为client端口</span><br><span class="line"># 3002为原子广播端口</span><br><span class="line"># 3003为选举投票端口</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/zkdata</span><br><span class="line">clientPort=3001</span><br><span class="line">server.1=zk1:3002:3003</span><br><span class="line">server.2=zk2:3002:3003</span><br><span class="line">server.3=zk3:3002:3003</span><br></pre></td></tr></table></figure></p><h4 id="5-启动zk节点，进入zk文件的bin目录下执行以下命令"><a href="#5-启动zk节点，进入zk文件的bin目录下执行以下命令" class="headerlink" title="5. 启动zk节点，进入zk文件的bin目录下执行以下命令"></a>5. 启动zk节点，进入zk文件的bin目录下执行以下命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start /home/zkdata/zoo.cfg</span><br></pre></td></tr></table></figure><h4 id="6-执行jps命令发现已成功启动QuorumPeerMain进程"><a href="#6-执行jps命令发现已成功启动QuorumPeerMain进程" class="headerlink" title="6. 执行jps命令发现已成功启动QuorumPeerMain进程"></a>6. 执行jps命令发现已成功启动QuorumPeerMain进程</h4><h4 id="7-查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower"><a href="#7-查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower" class="headerlink" title="7. 查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower"></a>7. 查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status /home/zkdata/zoo.cfg</span><br></pre></td></tr></table></figure><h4 id="8-zk集群搭建完毕"><a href="#8-zk集群搭建完毕" class="headerlink" title="8. zk集群搭建完毕"></a>8. zk集群搭建完毕</h4><hr><h3 id="四、HDFS集群搭建"><a href="#四、HDFS集群搭建" class="headerlink" title="四、HDFS集群搭建"></a>四、HDFS集群搭建</h3><h4 id="1-在所有hadoop节点添加Cent-OS依赖"><a href="#1-在所有hadoop节点添加Cent-OS依赖" class="headerlink" title="1. 在所有hadoop节点添加Cent OS依赖"></a>1. 在所有hadoop节点添加Cent OS依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install psmisc -y</span><br></pre></td></tr></table></figure><h4 id="2-安装hadoop-配置Hadoop环境变量-非必须"><a href="#2-安装hadoop-配置Hadoop环境变量-非必须" class="headerlink" title="2. 安装hadoop(配置Hadoop环境变量 非必须)"></a>2. 安装hadoop(配置Hadoop环境变量 非必须)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/home/hadoop-2.9.2</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>(1) 配置<code>hadoop-env.sh</code><br>修改JAVA相关配置</p><p>(2) 配置<code>core-site.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop-2.9.2/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置zk集群节点数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>zk1:3001,zk2:3001,zk3:3001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(3) 配置<code>hdfs-site.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定hdfs的nameservices为ns，需要与core-site.xml中保持一致 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ns下面有两个nameNode分别是nn1，nn2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn1的rpc通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn1的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn2的rpc通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop2:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop2:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定nameNode的元数据在JournalNode上的存放位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hadoop1:8485;hadoop2:8485;hadoop3:8485/ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定journalNode在本地磁盘中存放数据的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/zhangjia/journal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启nameNode故障时自动切换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置隔离机制。如果ssh默认是22端口，value直接写sshfence即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用隔离机制需要ssh免登陆 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(4) 配置<code>slaves</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop1</span><br><span class="line">hadoop2</span><br><span class="line">hadoop3</span><br></pre></td></tr></table></figure></p><p>(5) 启动集群</p><p>(6) 在任意NameNode节点格式化Zk<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure></p><p>(7) 出现下面这句话则说明格式化成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ha.ActiveStandbyElector: Successfully created /hadoop-ha/ns in ZK.</span><br></pre></td></tr></table></figure></p><p>(8) 启动JournalNode节点</p><blockquote><p>因为Journal在HA中需要同步edit log，所以他需要在edit log没有生成之前启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop1: hadoop-daemon.sh start journalnode</span><br><span class="line">hadoop2: hadoop-daemon.sh start journalnode</span><br><span class="line">hadoop3: hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure></p></blockquote><p>(9) 使用jps发现JournalNode进程已启动并且在根文件夹出现journal文件夹</p><p>(10) 格式化NameNode,在选中的active的节点上执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format ns</span><br></pre></td></tr></table></figure></p><p>(11) 启动hdfs集群<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></p><p>(12) 在standby 的 NameNode节点上执行如下命令进行同步active节点的edit log<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -bootstrapStandby</span><br></pre></td></tr></table></figure></p><p>(13) 启动standby节点的NameNode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemon.sh start namenode</span><br></pre></td></tr></table></figure></p><p>此时进入两个NameNode节点的图形化界面 <a href="http://hadoop1:50070" target="_blank" rel="noopener">http://hadoop1:50070</a> 可以发现一个为active一个为standby</p><p>(14) 此时HA集群搭建完毕</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔问题总结</title>
      <link href="/2020/01/04/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/04/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本递归实现"><a href="#一、基本递归实现" class="headerlink" title="一、基本递归实现"></a>一、基本递归实现</h2><p>下面是普遍的汉诺塔问题的递归解法代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, String x, String y, String z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(x + <span class="string">" -&gt; "</span> + z);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            hanoi(n - <span class="number">1</span>, x, z, y);</span><br><span class="line">            System.out.println(x + <span class="string">" -&gt; "</span> + z);</span><br><span class="line">            hanoi(n - <span class="number">1</span>, y, x, z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        hanoi(<span class="number">3</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x -&gt; z</span><br><span class="line">x -&gt; y</span><br><span class="line">z -&gt; y</span><br><span class="line">x -&gt; z</span><br><span class="line">y -&gt; x</span><br><span class="line">y -&gt; z</span><br><span class="line">x -&gt; z</span><br></pre></td></tr></table></figure><hr><hr><h2 id="二、基本非递归实现"><a href="#二、基本非递归实现" class="headerlink" title="二、基本非递归实现"></a>二、基本非递归实现</h2><p>非递归实现的方式本质就是尝试使用栈来模拟递归</p><h4 id="1-创建一个保存状态的类"><a href="#1-创建一个保存状态的类" class="headerlink" title="1.创建一个保存状态的类"></a>1.创建一个保存状态的类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> n; <span class="comment">// 当前层数</span></span><br><span class="line">    <span class="keyword">public</span> String x; <span class="comment">// 起始柱</span></span><br><span class="line">    <span class="keyword">public</span> String y; <span class="comment">// 辅助柱</span></span><br><span class="line">    <span class="keyword">public</span> String z; <span class="comment">// 目标柱</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">State</span><span class="params">(<span class="keyword">int</span> n, String x, String y, String z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-实现主程序"><a href="#2-实现主程序" class="headerlink" title="2.实现主程序"></a>2.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, String x, String y, String z)</span> </span>&#123;</span><br><span class="line">        Stack&lt;State&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        s.push(<span class="keyword">new</span> State(n, x, y, z));</span><br><span class="line">        State state;</span><br><span class="line">        <span class="keyword">while</span> (!s.empty() &amp;&amp; (state = s.pop()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.n == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(state.x + <span class="string">" -&gt; "</span> + state.y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 栈结构先进后出，所以需要逆序进栈，这部分是理解重点，用栈模拟递归</span></span><br><span class="line">                s.push(<span class="keyword">new</span> State(state.n - <span class="number">1</span>, state.y, state.x, state.z));</span><br><span class="line">                s.push(<span class="keyword">new</span> State(<span class="number">1</span>, state.x, state.y, state.z));</span><br><span class="line">                s.push(<span class="keyword">new</span> State(state.n - <span class="number">1</span>, state.x, state.z, state.y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"非递归方式："</span>);</span><br><span class="line">        Hanoi.hanoi(<span class="number">3</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-输出结果"><a href="#3-输出结果" class="headerlink" title="3.输出结果"></a>3.输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">非递归方式：</span><br><span class="line">x -&gt; z</span><br><span class="line">x -&gt; y</span><br><span class="line">z -&gt; y</span><br><span class="line">x -&gt; z</span><br><span class="line">y -&gt; x</span><br><span class="line">y -&gt; z</span><br><span class="line">x -&gt; z</span><br></pre></td></tr></table></figure><hr><hr><h2 id="三、汉诺塔问题扩展"><a href="#三、汉诺塔问题扩展" class="headerlink" title="三、汉诺塔问题扩展"></a>三、汉诺塔问题扩展</h2><p>我们尝试更改一下题目要求，不只是需要输出交换步骤，我们还需要记录交换过程中的三个柱子的圆盘存在情况</p><h4 id="1-创建柱子类"><a href="#1-创建柱子类" class="headerlink" title="1.创建柱子类"></a>1.创建柱子类</h4><p>该类用于表示汉诺塔的每一个柱子，并且这个类将记录每个柱子上的圆盘情况<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HanoiPillar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> n; <span class="comment">// 记录传递hanoi的圆盘数量</span></span><br><span class="line">    <span class="keyword">public</span> String name; <span class="comment">// 柱子名称</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">//用于记录当前柱子上所存在的圆盘</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化A柱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HanoiPillar</span><span class="params">(<span class="keyword">int</span> n, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">this</span>.arr.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化B柱和C柱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HanoiPillar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断该柱子上方是否为顶部盘子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!arr.isEmpty() &amp;&amp; arr.size() != <span class="number">0</span> &amp;&amp; arr.get(arr.size() - <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveTo</span><span class="params">(HanoiPillar hanoiPillar)</span> </span>&#123;</span><br><span class="line">        hanoiPillar.arr.add(<span class="keyword">this</span>.getDiskSize());</span><br><span class="line">        <span class="keyword">this</span>.arr.remove(<span class="keyword">this</span>.arr.size() - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">" -&gt; "</span> + hanoiPillar.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到当前柱子的圆盘的列表，转化为String</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.arr.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.arr.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                result.append(<span class="keyword">this</span>.arr.get(i)).append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.length() == <span class="number">0</span> ? <span class="string">"null"</span> : result.toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到该柱子中最小的圆盘的数值。以1、2、3、4、......、n来表示各个圆盘的大小。并且方便比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDiskSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.arr.get(<span class="keyword">this</span>.arr.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-实现主程序-1"><a href="#2-实现主程序-1" class="headerlink" title="2.实现主程序"></a>2.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> step;</span><br><span class="line">    <span class="keyword">private</span> HanoiPillar a;</span><br><span class="line">    <span class="keyword">private</span> HanoiPillar b;</span><br><span class="line">    <span class="keyword">private</span> HanoiPillar c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, String a, String b, String c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.step = (<span class="keyword">int</span>) (Math.pow(<span class="number">2</span>, n) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="keyword">new</span> HanoiPillar(n, a);</span><br><span class="line">        <span class="keyword">this</span>.b = <span class="keyword">new</span> HanoiPillar(b);</span><br><span class="line">        <span class="keyword">this</span>.c = <span class="keyword">new</span> HanoiPillar(c);</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            HanoiPillar tmp = <span class="keyword">this</span>.b;</span><br><span class="line">            <span class="keyword">this</span>.b = <span class="keyword">this</span>.c;</span><br><span class="line">            <span class="keyword">this</span>.c = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.step &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 进行top的移动</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.a.top()) &#123;</span><br><span class="line">                list();</span><br><span class="line">                <span class="keyword">this</span>.a.moveTo(<span class="keyword">this</span>.b);</span><br><span class="line">                <span class="keyword">this</span>.step--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.b.top()) &#123;</span><br><span class="line">                list();</span><br><span class="line">                <span class="keyword">this</span>.b.moveTo(<span class="keyword">this</span>.c);</span><br><span class="line">                <span class="keyword">this</span>.step--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.c.top()) &#123;</span><br><span class="line">                list();</span><br><span class="line">                <span class="keyword">this</span>.c.moveTo(<span class="keyword">this</span>.a);</span><br><span class="line">                <span class="keyword">this</span>.step--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 因为step为奇数，而最后完成后step=0；</span></span><br><span class="line">            <span class="comment">// 同时可以理解为最后一次移动一定是top移动，所以需要进行一次循环判断</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.step == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行第二步移动</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.a.top()) &#123;</span><br><span class="line">                move2(<span class="keyword">this</span>.b, <span class="keyword">this</span>.c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.b.top()) &#123;</span><br><span class="line">                move2(<span class="keyword">this</span>.a, <span class="keyword">this</span>.c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.c.top()) &#123;</span><br><span class="line">                move2(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">this</span>.a.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.a.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.b.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.b.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.c.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.c.getStore() + <span class="string">""</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(<span class="keyword">this</span>.a.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.a.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.c.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.c.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.b.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.b.getStore() + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行第二部移动</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">move2</span><span class="params">(HanoiPillar a, HanoiPillar b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.arr.size() == <span class="number">0</span>) &#123; <span class="comment">// a柱为空，则将b上层的盘子移到a</span></span><br><span class="line">            list();</span><br><span class="line">            b.moveTo(a);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b.arr.size() == <span class="number">0</span>) &#123; <span class="comment">// b柱为空，则将a上层的盘子移到b</span></span><br><span class="line">            list();</span><br><span class="line">            a.moveTo(b);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.getDiskSize() &gt; b.getDiskSize()) &#123; <span class="comment">// 由于b盘子小于a盘子，所以将b的top盘子移动到a的top盘子</span></span><br><span class="line">            list();</span><br><span class="line">            b.moveTo(a);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 由于a盘子小于b盘子，所以将a的top盘子移动到b的top盘子</span></span><br><span class="line">            list();</span><br><span class="line">            a.moveTo(b);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        Hanoi.hanoi(<span class="number">3</span>, <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-输出结果-1"><a href="#3-输出结果-1" class="headerlink" title="3.输出结果"></a>3.输出结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A柱：<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,B柱：<span class="keyword">null</span>C柱：<span class="keyword">null</span>       A -&gt; C</span><br><span class="line">A柱：<span class="number">2</span>,<span class="number">3</span>,B柱：<span class="keyword">null</span>C柱：<span class="number">1</span>,    A -&gt; B</span><br><span class="line">A柱：<span class="number">3</span>,        B柱：<span class="number">2</span>,        C柱：<span class="number">1</span>,    C -&gt; B</span><br><span class="line">A柱：<span class="number">3</span>,        B柱：<span class="number">1</span>,<span class="number">2</span>,C柱：<span class="keyword">null</span>A -&gt; C</span><br><span class="line">A柱：<span class="keyword">null</span>B柱：<span class="number">1</span>,<span class="number">2</span>,C柱：<span class="number">3</span>,    B -&gt; A</span><br><span class="line">A柱：<span class="number">1</span>,        B柱：<span class="number">2</span>,        C柱：<span class="number">3</span>,    B -&gt; C</span><br><span class="line">A柱：<span class="number">1</span>,        B柱：<span class="keyword">null</span>C柱：<span class="number">2</span>,<span class="number">3</span>,    A -&gt; C</span><br><span class="line">A柱：<span class="keyword">null</span>B柱：<span class="keyword">null</span>C柱：<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br></pre></td></tr></table></figure><hr><hr><h2 id="四、汉诺塔问题改编（递归实现）"><a href="#四、汉诺塔问题改编（递归实现）" class="headerlink" title="四、汉诺塔问题改编（递归实现）"></a>四、汉诺塔问题改编（递归实现）</h2><p>今天在做《程序员代码面试指南：IT名企算法与数据结构题目最优解（第二版）》时，遇到了一个稍微复杂一些的汉诺塔问题，但是理解之后发现本体只是在上面简易递归的基础上进行优化。</p><h4 id="1-题目要求"><a href="#1-题目要求" class="headerlink" title="1.题目要求"></a>1.题目要求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">【题目】</span><br><span class="line"> *  汉诺塔问题比较经典，这里修改一下游戏规则：</span><br><span class="line"> *  现在限制不能从最左侧的塔直接移动到最右侧，也不能从最右侧直接移动到最左侧，而是必须经过中间。</span><br><span class="line"> *  求当塔有N层的时候，打印最优移动过程和最优移动总步数。</span><br><span class="line"> *  1.如果希望从“左”移到“中”，打印“Move 1 from left to mid”。</span><br><span class="line"> *  2.如果希望从“中”移到“左”，打印“Move 1 from mid to left”。</span><br><span class="line"> *  3.如果希望从“中”移到“右”，打印“Move 1 from mid to right”。</span><br><span class="line"> *  4.如果希望从“右”移到“中”，打印“Move 1 from right to mid”。</span><br><span class="line"> *  5.如果希望从“左”移到“右”，打印“Move 1 from left to mid”和“Move 1 from mid to right”。</span><br><span class="line"> *  6.如果希望从“右”移到“左”，打印“Move 1 from right to mid”和“Move 1 from mid to left”。</span><br><span class="line"> *</span><br><span class="line"> *  例如，当塔数为两层时，最上层的塔记为1，最下层的塔记为2，则打印：</span><br><span class="line"> *  Move 1 from left to mid</span><br><span class="line"> *  Move 1 from mid to right</span><br><span class="line"> *  Move 2 from left to mid</span><br><span class="line"> *  Move 1 from right to mid</span><br><span class="line"> *  Move 1 from mid to left</span><br><span class="line"> *  Move 2 from mid to right</span><br><span class="line"> *  Move 1 from left to mid</span><br><span class="line"> *  Move 1 from mid to right</span><br><span class="line"> *  It wi11 move 8 steps.</span><br></pre></td></tr></table></figure><hr><h4 id="2-情况分析"><a href="#2-情况分析" class="headerlink" title="2.情况分析"></a>2.情况分析</h4><p>首先我们尝试使用递归方式实现，然后进行常见情况分析</p><ol><li>假设剩余N层塔都在<code>左</code>，希望全都移到<code>中</code>，则有下面三个步骤<ol><li>将1~N-1层从<code>左</code>移到<code>右</code>，该过程为递归</li><li>将N层从<code>左</code>移到<code>中</code></li><li>将1~N-1层从<code>右</code>移到<code>中</code>，该过程为递归</li></ol></li></ol><ol start="2"><li>假设剩余N层塔都是从<code>中</code>移到<code>右</code>，或者从<code>中</code>移到<code>左</code>，或者从有<code>右</code>到<code>中</code>，其实原理与情况1相同，所以不做赘述</li></ol><ol start="3"><li>假设剩余N层塔都在<code>左</code>，希望都移到<code>右</code>，则有下面五个步骤<ol><li>将1~N-1层从<code>左</code>移到<code>右</code>，该过程为递归</li><li>将N层从<code>左</code>移到<code>中</code></li><li>将1~N-1层从<code>右</code>移到<code>左</code>，此过程为递归</li><li>将N层从<code>中</code>移到<code>右</code></li><li>将1~N-1层从<code>左</code>移到<code>右</code>，此过程为递归</li></ol></li></ol><hr><h4 id="3-实现主程序"><a href="#3-实现主程序" class="headerlink" title="3.实现主程序"></a>3.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hanoiProblem</span> <span class="params">(<span class="keyword">int</span> num, String left, String mid,</span></span></span><br><span class="line"><span class="function"><span class="params">                              String right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> process(num, left, mid, right, left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> num, String left, String mid, String right,</span></span></span><br><span class="line"><span class="function"><span class="params">                       String from, String to)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (from.equals(mid) || to.equals(mid)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Move 1 from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"Move 1 from "</span> + from + <span class="string">" to "</span> + mid);</span><br><span class="line">                System.out.println(<span class="string">"Move 1 from "</span> + mid + <span class="string">" to "</span> + to);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (from.equals(mid) || to.equals(mid)) &#123;</span><br><span class="line">            String another = (from.equals(left) || to.equals(left)) ? right : left;</span><br><span class="line">            <span class="keyword">int</span> part1 = process(num - <span class="number">1</span>, left, mid, right, from, another);</span><br><span class="line">            <span class="keyword">int</span> part2 = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + num + <span class="string">" from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">            <span class="keyword">int</span> part3 = process(num - <span class="number">1</span>, left, mid, right, another, to);</span><br><span class="line">            <span class="keyword">return</span> part1 + part2 + part3;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> part1 = process(num - <span class="number">1</span>, left, mid, right, from, to);</span><br><span class="line">            <span class="keyword">int</span> part2 = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + num + <span class="string">" from "</span> + from + <span class="string">" to "</span> + mid);</span><br><span class="line">            <span class="keyword">int</span> part3 = process(num - <span class="number">1</span>, left, mid, right, to, from);</span><br><span class="line">            <span class="keyword">int</span> part4 = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + num + <span class="string">" from "</span> + mid + <span class="string">" to "</span> + to);</span><br><span class="line">            <span class="keyword">int</span> part5 = process(num - <span class="number">1</span>, left, mid, right, from, to);</span><br><span class="line">            <span class="keyword">return</span> part1 + part2 + part3 + part4 + part5;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        hanoi.hanoiProblem(<span class="number">3</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-输出结果"><a href="#4-输出结果" class="headerlink" title="4.输出结果"></a>4.输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 2 from x to y</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 2 from y to z</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 3 from x to y</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 2 from z to y</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 2 from y to x</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 3 from y to z</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 2 from x to y</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 2 from y to z</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br></pre></td></tr></table></figure><hr><hr><h2 id="五、汉诺塔问题改编（非递归实现）"><a href="#五、汉诺塔问题改编（非递归实现）" class="headerlink" title="五、汉诺塔问题改编（非递归实现）"></a>五、汉诺塔问题改编（非递归实现）</h2><h4 id="1-题目分析"><a href="#1-题目分析" class="headerlink" title="1.题目分析"></a>1.题目分析</h4><blockquote><p>我们把左、中、右三个地点抽象成栈，依次记为LS、MS和RS。最初所有的塔都在LS上。那么如上4个动作就可以看作是：某一个栈（from）把栈顶元素弹出，然后压入到另一个栈里（to），作为这一个栈（to）的栈顶。</p></blockquote><blockquote><p>例如，如果是7层塔，在最初时所有的塔都在LS上，LS从栈顶到栈底就依次是1～7，如果现在发生了“左”到“中”的动作，这个动作对应的操作是LS栈将栈顶元素1弹出，然后1压入到MS栈中，成为MS的栈顶。其他操作同理。</p></blockquote><p>一个动作能发生的先决条件是<em>不违反小压大的原则</em>。<br>from栈弹出的元素num如果想压入到to栈中，那么num的值必须小于当前to栈的栈顶。还有一个原则不是很明显，但也是非常重要的，叫<em>相邻不可逆原则</em>，解释如下：</p><ol><li>我们把4个动作依次定义为：<code>L-＞M</code>、<code>M-＞L</code>、<code>M-＞R</code>和<code>R-＞M</code>。</li><li>很明显，<code>L-＞M</code>和<code>M-＞L</code>过程互为逆过程，<code>M-＞R</code>和<code>R-＞M</code>互为逆过程。</li><li>在修改后的汉诺塔游戏中，如果想走出最少步数，那么任何两个相邻的动作都不是互为逆过程的。举个例子：如果上一步的动作是 <code>L-＞M</code>，那么这一步绝不可能是 <code>M-＞L</code>，直观地解释为：你在上一步把一个栈顶数从“左”移动到“中”，这一步为什么又要移回去呢？这必然不是取得最小步数的走法。同理，<code>M-＞R</code>动作和<code>R-＞M</code>动作也不可能相邻发生。</li></ol><p>有了小压大和相邻不可逆原则后，可以推导出两个十分有用的结论–非递归的方法核心结论：</p><ol><li>游戏的第一个动作一定是<code>L-＞M</code>，这是显而易见的。</li><li>在走出最少步数过程中的任何时刻，4个动作中只有一个动作不违反小压大和相邻不可逆原则，另外三个动作一定都会违反。</li></ol><p>对于结论2，现在进行简单的证明。<br>因为游戏的第一个动作已经确定是<code>L-＞M</code>，则以后的每一步都会有前一步的动作。</p><h5 id="假设前一步的动作是L-＞M："><a href="#假设前一步的动作是L-＞M：" class="headerlink" title="假设前一步的动作是L-＞M："></a>假设前一步的动作是<code>L-＞M</code>：</h5><ol><li>根据小压大原则，<code>L-＞M</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>M-＞L</code>的动作也不该发生。</li><li>根据小压大原则，<code>M-＞R</code>和<code>R-＞M</code>只会有一个达标。</li></ol><h5 id="假设前一步的动作是M-＞L："><a href="#假设前一步的动作是M-＞L：" class="headerlink" title="假设前一步的动作是M-＞L："></a>假设前一步的动作是<code>M-＞L</code>：</h5><ol><li>根据小压大原则，<code>M-＞L</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>L-＞M</code>的动作也不该发生。</li><li>根据小压大原则，<code>M-＞R</code>和<code>R-＞M</code>只会有一个达标。</li></ol><h5 id="假设前一步的动作是M-＞R："><a href="#假设前一步的动作是M-＞R：" class="headerlink" title="假设前一步的动作是M-＞R："></a>假设前一步的动作是<code>M-＞R</code>：</h5><ol><li>根据小压大原则，<code>M-＞R</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>R-＞M</code>的动作也不该发生。</li><li>根据小压大原则，<code>L-＞M</code>和<code>M-＞L</code>只会有一个达标。</li></ol><h5 id="假设前一步的动作是R-＞M："><a href="#假设前一步的动作是R-＞M：" class="headerlink" title="假设前一步的动作是R-＞M："></a>假设前一步的动作是<code>R-＞M</code>：</h5><ol><li>根据小压大原则，<code>R-＞M</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>M-＞R</code>的动作也不该发生。</li><li>根据小压大原则，<code>L-＞M</code>和<code>M-＞L</code>只会有一个达标。</li></ol><p>综上所述，每一步只会有一个动作达标。那么只要每走一步都根据这两个原则考查所有的动作就可以，哪个动作达标就走哪个动作，反正每次都只有一个动作满足要求，按顺序走下来即可</p><h4 id="2-实现主程序-2"><a href="#2-实现主程序-2" class="headerlink" title="2.实现主程序"></a>2.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hanoiProblem</span><span class="params">(<span class="keyword">int</span> num, String left, String mid, String right)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; lS = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; mS = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; rS = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化这四个栈，可以避免栈溢出问题，同时可以使while循环中的四个函数无论谁在前，都必定会限制性 l -&gt; m</span></span><br><span class="line">        lS.push(Integer.MAX_VALUE);<span class="comment">//最大值：2147483647(2的7次方-1)</span></span><br><span class="line">        mS.push(Integer.MAX_VALUE);</span><br><span class="line">        rS.push(Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num; i &gt; <span class="number">0</span>; i--) &#123;<span class="comment">//将数字(最小数字在栈顶)压入左栈[1,2,3]</span></span><br><span class="line">            lS.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用枚举，记录上一步操作 创建一个数组而不是直接创建一个Action对象是为了使用引用传递而不是值传递</span></span><br><span class="line">        Action[] record = &#123;Action.No&#125;;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//size();stack类从vector继承的方法；返回此向量中的组件数</span></span><br><span class="line">        <span class="keyword">while</span> (rS.size() != num + <span class="number">1</span>) &#123;<span class="comment">//当右栈未将数字全部存入时</span></span><br><span class="line">            <span class="comment">//按顺序移动,下面这四个函数顺序并不影响因为每次必定只会有一个函数是满足条件的</span></span><br><span class="line">            step += fStackToStack(record, Action.MToL, Action.LToM, lS, mS, left, mid);</span><br><span class="line">            step += fStackToStack(record, Action.LToM, Action.MToL, mS, lS, mid, left);</span><br><span class="line">            step += fStackToStack(record, Action.RToM, Action.MToR, mS, rS, mid, right);</span><br><span class="line">            step += fStackToStack(record, Action.MToR, Action.RToM, rS, mS, left, mid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fStackToStack</span><span class="params">(Action[] record,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Action preNoAet,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Action nowAct,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Stack&lt;Integer&gt; fStack,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Stack&lt;Integer&gt; tStack,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String from,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String to)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// fStack.peek() &lt; tStack.peek() 必然可以保证 record[0] != nowAct 两条件互斥</span></span><br><span class="line">        <span class="keyword">if</span> (record[<span class="number">0</span>] != preNoAet &amp;&amp; fStack.peek() &lt; tStack.peek()) &#123;<span class="comment">//发生移动且必须小的数字往大的数字上移动</span></span><br><span class="line">            tStack.push(fStack.pop());<span class="comment">//fStack 移动到 tStack 且删掉from的栈顶元素</span></span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + tStack.peek() + <span class="string">" from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">            record[<span class="number">0</span>] = nowAct;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi Hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        <span class="keyword">int</span> step = hanoi.hanoiProblem(<span class="number">3</span>, <span class="string">"左"</span>, <span class="string">"中"</span>, <span class="string">"右"</span>);</span><br><span class="line">        System.out.println(<span class="string">"总共需要"</span> + step + <span class="string">"步"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> Action &#123;</span><br><span class="line">        No, <span class="comment">// 无操作</span></span><br><span class="line">        LToM, <span class="comment">// 从左移到中</span></span><br><span class="line">        MToL, <span class="comment">// 从中移到左</span></span><br><span class="line">        MToR, <span class="comment">// 从中移到右</span></span><br><span class="line">        RToM <span class="comment">// 从右移到中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-输出结果-2"><a href="#3-输出结果-2" class="headerlink" title="3.输出结果"></a>3.输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 2 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 2 from 中 to 右</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 3 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 2 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 2 from 中 to 左</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 3 from 中 to 右</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 2 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 2 from 中 to 右</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">总共需要26步</span><br></pre></td></tr></table></figure><p>参考视频<br><a href="https://www.bilibili.com/video/av31023017?from=search&amp;seid=15595573244367663980" target="_blank" rel="noopener">https://www.bilibili.com/video/av31023017?from=search&amp;seid=15595573244367663980</a></p><p>参考文章<br><a href="https://blog.csdn.net/weixin_42636076/article/details/81031580" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42636076/article/details/81031580</a><br><a href="https://www.jb51.net/article/128701.htm" target="_blank" rel="noopener">https://www.jb51.net/article/128701.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 汉诺塔问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase中使用过滤器筛选数据</title>
      <link href="/2019/12/17/HBase%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/12/17/HBase%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、过滤器能干什么"><a href="#一、过滤器能干什么" class="headerlink" title="一、过滤器能干什么"></a>一、过滤器能干什么</h2><ul><li>HBase为筛选数据提供了一组过滤器，通过过滤器可以在HBase中的数据的多个维度(行，列，数据版本)上进行对数据的筛选操作。</li><li>通常来说，通过行键、列来筛选数据的应用场景较多。</li></ul><hr><h2 id="二、常见的过滤器"><a href="#二、常见的过滤器" class="headerlink" title="二、常见的过滤器"></a>二、常见的过滤器</h2><ol><li>基于行的过滤器<ul><li>PrefixFilter: 行的前缀匹配</li><li>PageFilter: 基于行的分页</li></ul></li></ol><ol start="2"><li>基于列的过滤器<ul><li>ColumnPrefixFilter: 列前缀匹配</li><li>FirstKeyOnlyFilter: 只返回每一行的第一列</li></ul></li></ol><ol start="3"><li>基于单元值的过滤器<ul><li>KeyOnlyFilter: 返回的数据不包括单元值，只包含行键与列</li><li>TimestampsFilter: 根据数据的时间戳版本进行过滤</li></ul></li></ol><ol start="4"><li>基于列和单元值的过滤器<ul><li>SingleColumnValueFilter: 对该列的单元值进行比较过滤</li><li>SingleColumnValueExcludeFilter: 对该列的单元值进行比较过滤</li></ul></li></ol><ol start="5"><li>比较过滤器<ul><li>比较过滤器通常需要一个比较运算符以及一个比较器来实现过滤</li><li>RowFilter、 FamilyFilter、 QualifierFilter、 ValueFilter</li></ul></li></ol><ol start="6"><li>常见过滤器总结</li></ol><table><thead><tr><th>过滤器(Filter)</th><th>功能</th></tr></thead><tbody><tr><td>RowFilter</td><td>筛选出匹配的所有的行</td></tr><tr><td>PrefixFilter</td><td>筛选出具有特定前缀的行键的数据</td></tr><tr><td>KeyOnlyFilter</td><td>只返回每行的行键，值全部为空</td></tr><tr><td>ColumnPrefixFilter</td><td>按照列名的前缀来筛选单元格</td></tr><tr><td>ValueFilter</td><td>按照具体的值来筛选单元格的过滤器</td></tr><tr><td>TimestampsFilter</td><td>根据数据的时间戳版本进行过滤</td></tr><tr><td>FilterList</td><td>用于综合使用多个过滤器</td></tr></tbody></table><hr><h2 id="三、开发演示"><a href="#三、开发演示" class="headerlink" title="三、开发演示"></a>三、开发演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseFilterTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/9 15:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 尝试使用过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseFilterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.createTable(<span class="string">"FileTable"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"fileInfo"</span>, <span class="string">"saveInfo"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFileDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file1.txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"1024"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo1"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file2.jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"2048"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo3"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file3.jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"2048"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey1</span></span><br><span class="line"><span class="comment">     * fileName = file1.txt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rowFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> RowFilter(CompareFilter.CompareOp.EQUAL, <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(<span class="string">"rowkey1"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MUST_PASS_ALL指必须通过所有的Filter</span></span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line"></span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey2</span></span><br><span class="line"><span class="comment">     * fileName = file2.jpg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prefixFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> PrefixFilter(Bytes.toBytes(<span class="string">"rowkey2"</span>));</span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey1</span></span><br><span class="line"><span class="comment">     * fileName = </span></span><br><span class="line"><span class="comment">     * rowkey = rowkey2</span></span><br><span class="line"><span class="comment">     * fileName = </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyOnlyFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> KeyOnlyFilter(<span class="keyword">true</span>);</span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey1</span></span><br><span class="line"><span class="comment">     * fileName = file1.txt</span></span><br><span class="line"><span class="comment">     * fileType = null</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey2</span></span><br><span class="line"><span class="comment">     * fileName = file2.jpg</span></span><br><span class="line"><span class="comment">     * fileType = null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">columnPrefixFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> ColumnPrefixFilter(Bytes.toBytes(<span class="string">"nam"</span>));<span class="comment">// 前缀为nam</span></span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">                System.out.println(<span class="string">"fileType = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"type"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> HBase </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构网课总结</title>
      <link href="/2019/12/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BD%91%E8%AF%BE%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BD%91%E8%AF%BE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="网课推荐"><a href="#网课推荐" class="headerlink" title="网课推荐"></a>网课推荐</h3><p>主要推荐下面的课有几个以及我个人觉得的优缺点</p><ol><li><p>郝斌老师的数据结构<br> 链接：<a href="https://www.bilibili.com/video/av6159200" target="_blank" rel="noopener">https://www.bilibili.com/video/av6159200</a><br> 优缺点：讲的非常的通俗易懂，但是课程只讲到了咱们课本的前面几章的知识，后面的图之类的知识没有涉及（排序讲了部分）。</p></li><li><p>小甲鱼老师的数据结构<br> 链接：<a href="https://study.163.com/course/courseMain.htm?courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseMain.htm?courseId=468002</a><br> 优缺点：基本他的课涉及到了我们考试的所有知识点，但是我当时学习的时候可能是由于老师的口音原因，所以有的时候听的时候会有些分心，还有我记得好像当时我听有一两个章节当时听得有点迷糊。总体来说虽然没有郝斌老师将的通俗易懂，但是也可以说是生动形象了。</p></li><li><p>浙江大学的数据结构<br> 链接：<a href="https://www.bilibili.com/video/av18586085?from=search&amp;seid=16468445350579187548" target="_blank" rel="noopener">https://www.bilibili.com/video/av18586085?from=search&amp;seid=16468445350579187548</a><br> 优缺点：这个课我认为优缺点是非常明显的，优点是每一节课比较短，可以让你对知识点有个简单地认识。缺点也是这个，就是讲的太短，缺少前期的知识由浅入深的代入。并且缺乏代码实战。不是很简易系统的看这个。我的建议是，如果你其他的网课对于某个知识点看不懂，可以尝试着看看这个课能否对你的理解有帮助，但是不要想着通过这个课学会。</p></li><li><p>严蔚敏老师的数据结构<br> 链接：<a href="https://www.bilibili.com/video/av6239731" target="_blank" rel="noopener">https://www.bilibili.com/video/av6239731</a><br> 优缺点：严蔚敏老师的数据结构我并没有系统的去看，只是在一些比较难的知识点部分尝试去听了严蔚敏老师的课。总体来说给我的感觉就是讲的真的非常的好，但是可能对于新学习一个知识没有小甲鱼老师将的生动。适合当你听了郝斌老师或者小甲鱼老师的课之后对这个知识已经一知半解但是还没有彻底理解的时候看。当然了严蔚敏老师的课也有一个很明显的缺点就是他每节课都讲的很久，如果想从头到尾的看肯定是来不及的。</p></li><li><p>慕课上的数据结构从入门到精通<br> 百度网盘链接：<a href="https://pan.baidu.com/s/1o36E3xrZ0pFx4-vjc89HsA" target="_blank" rel="noopener">https://pan.baidu.com/s/1o36E3xrZ0pFx4-vjc89HsA</a>  密码:0nbm<br> 优缺点：这个课，其实我觉得对于考试来说并不是一个比较好的课，我知识觉得他在第12章AVL树部分讲的还行，其他部分就不建议看了先。这个等你以后找工作的时候在系统的看一下吧。</p></li></ol><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li>我之前学习的时候是以郝斌老师以及小甲鱼老师的课为主，严蔚敏老师以及浙大的课为辅。慕课的那个avl树部分我觉得考试也不是重点，看不看都行。</li><li>数据结构这部分有的课不是一遍就能听懂的，可能需要两遍甚至三遍才能看懂，所以必要的时候可以多看一两遍。</li><li>数据结构，可能你们学的时候觉得很难，但是考试是真的很简单，所以不要把过多的备考精力放在数据结构这一门课上。</li></ul><hr><h3 id="其他建议"><a href="#其他建议" class="headerlink" title="其他建议"></a>其他建议</h3><blockquote><p>下面是我对部分个章节自己的一些想法（因为这个都是我凭借自己的记忆然后根据我记忆中老师当时给的重点写的建议，可能有些部分不是很准确，所以仅供参考。。。。。。）</p></blockquote><ol><li><p>线性表堆栈以及队列<br> 这部分整体内容比较简单，所以基本上大家都讲的不错，不过我觉得这部分直接看书就足够了，如果觉得看书还是不太懂，可以去我给你的课中针对的学习一下。</p></li><li><p>数组和字符串<br> 这部分我个人认为难的可能就是在KMP算法，不过期末考试也不知道会不会考KMP算法，下面是我总结的一些比较好的KMP算法的课</p><ol><li><p><a href="https://www.bilibili.com/video/av6239731/?p=11" target="_blank" rel="noopener">https://www.bilibili.com/video/av6239731/?p=11</a></p><p> 这个是严蔚敏老师的课，因为这个每个视频没有写讲的什么，然后我看了一下我以前的总结，P11讲的是KMP算法，这样你就不用一个一个找对应了。</p></li><li><p><a href="https://www.bilibili.com/video/av3246487?from=search&amp;seid=8682896714663607035" target="_blank" rel="noopener">https://www.bilibili.com/video/av3246487?from=search&amp;seid=8682896714663607035</a></p><p> 这个是一个印度程序员讲的kmp我觉得也是讲的很好地。</p></li><li><p><a href="https://study.163.com/course/courseLearn.htm?courseId=468002#/learn/video?lessonId=1023415&amp;courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=468002#/learn/video?lessonId=1023415&amp;courseId=468002</a></p><p> 这个就是小甲鱼讲的了。</p></li></ol></li><li><p>树<br> 这部分，我觉得郝斌的树讲的还是挺好的，不过他的课有一个缺点就是没有讲到哈弗曼树，哈弗曼树这部分，这部分可以补充着小甲鱼的课进行学习<br> 郝斌：<a href="https://www.bilibili.com/video/av6159200?p=51" target="_blank" rel="noopener">https://www.bilibili.com/video/av6159200?p=51</a><br> 小甲鱼：<a href="https://study.163.com/course/courseLearn.htm?courseId=468002&amp;from=study#/learn/video?lessonId=1482172&amp;courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=468002&amp;from=study#/learn/video?lessonId=1482172&amp;courseId=468002</a></p></li><li><p>集合搜索、搜索树、跳表以及散列表<br> 这部分我觉得不是特别难，也没有太多其他的多余的建议了。这部分，我记得是没有太多的考试占比好像，不知道现在变了没，但是我觉得看了小甲鱼的课以及浙大的那个课基本上对这个有个概念的认识就差不多了。</p></li><li><p>图<br> 这部分和上两章也是一样的，就是学的挺多的，但是考的不多，所以先把听网课把所有概念都搞懂，然后等老师给了考点，再把考点部分再认真的学就好了。</p></li><li><p>排序<br> 这部分是很重要的一部分，但是我也觉得这个相较而言并不是特别难。这个没有太多技巧，尝试自己多写几遍代码理解透彻就好了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> wqf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Java操作HBase数据库</title>
      <link href="/2019/12/09/%E4%BD%BF%E7%94%A8Java%E6%93%8D%E4%BD%9CHBase%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/12/09/%E4%BD%BF%E7%94%A8Java%E6%93%8D%E4%BD%9CHBase%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h2><p>首先我们在maven项目中添加下面两个依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hbase依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单元测试依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><hr><h2 id="二、连接HBase数据库"><a href="#二、连接HBase数据库" class="headerlink" title="二、连接HBase数据库"></a>二、连接HBase数据库</h2><h3 id="1-编写连接数据库的实现"><a href="#1-编写连接数据库的实现" class="headerlink" title="1. 编写连接数据库的实现"></a>1. 编写连接数据库的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseConnection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/8 20:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 连接HBase数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HBaseConnection INSTANCE = <span class="keyword">new</span> HBaseConnection();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HBaseConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(configuration == <span class="keyword">null</span>)&#123;</span><br><span class="line">                configuration = HBaseConfiguration.create();</span><br><span class="line">                configuration.set(<span class="string">"hbase.zookeeper.quorum"</span>, <span class="string">"localhost:2181"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span> || connection.isClosed())&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getHBaseConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Table <span class="title">getTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE.getConnection().getTable(TableName.valueOf(tableName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-编写数据库连接测试类"><a href="#2-编写数据库连接测试类" class="headerlink" title="2. 编写数据库连接测试类"></a>2. 编写数据库连接测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/8 21:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseConnectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnectionTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection hBaseConnection = HBaseConnection.getHBaseConnection();</span><br><span class="line">        System.out.println(hBaseConnection.isClosed());</span><br><span class="line">        HBaseConnection.closeConnection();</span><br><span class="line">        System.out.println(hBaseConnection.isClosed());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTableTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Table table = HBaseConnection.getTable(<span class="string">"US_POPULATION"</span>);</span><br><span class="line">            System.out.println(table.getName().getNameAsString());</span><br><span class="line">            table.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="三、使用Java实现HBase常见操作"><a href="#三、使用Java实现HBase常见操作" class="headerlink" title="三、使用Java实现HBase常见操作"></a>三、使用Java实现HBase常见操作</h2><h3 id="1-编写操作数据库的实现"><a href="#1-编写操作数据库的实现" class="headerlink" title="1. 编写操作数据库的实现"></a>1. 编写操作数据库的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/9 11:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 操作HBase工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建HBase表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfs 列族的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否创建成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">createTable</span><span class="params">(String tableName, String[] cfs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (HBaseAdmin admin = (HBaseAdmin)HBaseConnection.getHBaseConnection().getAdmin())&#123;</span><br><span class="line">            <span class="keyword">if</span>(admin.tableExists(tableName))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            HTableDescriptor tableDescriptor = <span class="keyword">new</span> HTableDescriptor(TableName.valueOf(tableName));</span><br><span class="line">            Arrays.stream(cfs).forEach(cf -&gt; &#123;</span><br><span class="line">                HColumnDescriptor columnDescriptor = <span class="keyword">new</span> HColumnDescriptor(cf);</span><br><span class="line">                columnDescriptor.setMaxVersions(<span class="number">1</span>);</span><br><span class="line">                tableDescriptor.addFamily(columnDescriptor);</span><br><span class="line">            &#125;);</span><br><span class="line">            admin.createTable(tableDescriptor);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除HBase表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteTable</span><span class="params">(String tableName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (HBaseAdmin admin = (HBaseAdmin)HBaseConnection.getHBaseConnection().getAdmin())&#123;</span><br><span class="line">            admin.disableTable(tableName);</span><br><span class="line">            admin.deleteTable(tableName);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HBase表中插入一条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roeKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfName 列族名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qualifier 列标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否插入成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">putRow</span><span class="params">(String tableName, String roeKey, String cfName, String qualifier, String data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Put put = <span class="keyword">new</span> Put(Bytes.toBytes(roeKey));</span><br><span class="line">            put.addColumn(Bytes.toBytes(cfName), Bytes.toBytes(qualifier), Bytes.toBytes(data));</span><br><span class="line">            table.put(put);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HBase表中批量插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> puts</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">putRows</span><span class="params">(String tableName, List&lt;Put&gt; puts)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            table.put(puts);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一表标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">getRow</span><span class="params">(String tableName, String rowKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line">            <span class="keyword">return</span> table.get(get);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据过滤器来获取单条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterList 过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">getRow</span><span class="params">(String tableName, String rowKey, FilterList filterList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line">            get.setFilter(filterList);</span><br><span class="line">            <span class="keyword">return</span> table.get(get);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过Scan来检索数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">getScanner</span><span class="params">(String tableName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.setCaching(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> table.getScanner(scan);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量检索数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startRowKey 起始rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endRowKey 终止rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">getScanner</span><span class="params">(String tableName, String startRowKey, String endRowKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.withStartRow(Bytes.toBytes(startRowKey));</span><br><span class="line">            scan.withStopRow(Bytes.toBytes(endRowKey));</span><br><span class="line">            scan.setCaching(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> table.getScanner(scan);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用过滤器批量检索数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startRowKey 起始rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endRowKey 终止rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterList 过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">getScanner</span><span class="params">(String tableName, String startRowKey, String endRowKey, FilterList filterList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.withStartRow(Bytes.toBytes(startRowKey));</span><br><span class="line">            scan.withStopRow(Bytes.toBytes(endRowKey));</span><br><span class="line">            scan.setFilter(filterList);</span><br><span class="line">            scan.setCaching(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> table.getScanner(scan);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HBase删除一行结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteRow</span><span class="params">(String tableName, String rowKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowKey));</span><br><span class="line">            table.delete(delete);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个列族</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfName 列族名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteColumnFamily</span><span class="params">(String tableName, String cfName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (HBaseAdmin admin = (HBaseAdmin)HBaseConnection.getHBaseConnection().getAdmin())&#123;</span><br><span class="line">            admin.deleteColumn(tableName, cfName);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除某一列的qualifier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfName 列族名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qualifier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteQualifier</span><span class="params">(String tableName, String rowKey, String cfName, String qualifier)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowKey));</span><br><span class="line">            delete.addColumn(Bytes.toBytes(cfName), Bytes.toBytes(qualifier));</span><br><span class="line">            table.delete(delete);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-编写相关测试类进行测试"><a href="#2-编写相关测试类进行测试" class="headerlink" title="2. 编写相关测试类进行测试"></a>2. 编写相关测试类进行测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseUtilTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/9 11:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseUtilTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.createTable(<span class="string">"FileTable"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"fileInfo"</span>, <span class="string">"saveInfo"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFileDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file1.txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"1024"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo1"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file2.jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"2048"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFileDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Result result = HBaseUtil.getRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">            System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanFileDetail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"rowkey2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteRow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.deleteRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.deleteTable(<span class="string">"FileTable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 大数据 </tag>
            
            <tag> HBase </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase伪分布式集群安装</title>
      <link href="/2019/12/08/HBase%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
      <url>/2019/12/08/HBase%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载HBase安装包"><a href="#一、下载HBase安装包" class="headerlink" title="一、下载HBase安装包"></a>一、下载HBase安装包</h2><p>为了防止HBase和Hadoop版本间冲突，可以在CDH上下载和Hadoop兼容的HBase版本，本次搭建选择的是<code>hbase-1.2.0</code><br>下载路径：<a href="http://archive.cloudera.com/cdh5/" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/</a></p><hr><h2 id="二、配置伪分布式环境"><a href="#二、配置伪分布式环境" class="headerlink" title="二、配置伪分布式环境"></a>二、配置伪分布式环境</h2><blockquote><p>HBase相关配置文件在<code>/conf</code>文件之下,我们需要修改的配置文件有<code>hbase-env.sh</code>和<code>hbase-site.xml</code></p><ol><li>我们先将hadoop中的<code>hdfs-site.xml</code>和<code>core-site.xml</code>文件复制HBase的<code>/conf</code>目录之下<br>之后我们需要配置HBase相关</li><li>去配置<code>hbase-env.sh</code>，修改java环境变量，因为我们使用的是JDK8所以我们将文件中的下面这两行注释掉 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_MASTER_OPTS="$HBASE_MASTER_OPTS -XX:PermSize=128m -XX:MaxPermSize=128m"</span><br><span class="line">export HBASE_REGIONSERVER_OPTS="$HBASE_REGIONSERVER_OPTS -XX:PermSize=128m -XX:MaxPermSize=128m"</span><br></pre></td></tr></table></figure></li></ol></blockquote><pre><code>之后在最后面有下面这个注释，他表示使用HBase自带的Zookeeper进行运行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> export HBASE_MANAGES_ZK=true</span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li>配置<code>hbase-site.xml</code> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个表示HBase在HDFS中的路径，因为我们的HDFS启动端口为9000，所以我们这里配置如下，这样启动后我们就可以在hdfs的根路径下看到/hbase文件夹 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个指HBase自带的zookeeper的datdaDir的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>nbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/XXX/HBase/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个是指是不是以集群的方式运行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="三、-启动"><a href="#三、-启动" class="headerlink" title="三、 启动"></a>三、 启动</h2><ol><li>我们进入<code>/bin</code>目录下执行<code>./start-hbase.sh</code>指令</li><li><p>我们执行<code>jps</code>可以查看到下面三个和HBase相关的进程</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">91593 HQuorumPeer</span><br><span class="line">91642 HMaster</span><br><span class="line">91738 HRegionServer</span><br></pre></td></tr></table></figure></li><li><p>我们进入<code>/bin</code>执行<code>./hbase shell</code>进入HBase命令行</p></li><li><p>在HBase命令行中执行status指令查看当前状态</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 active master, 0 backup masters, 1 servers, 0 dead, 2.0000 average load</span><br></pre></td></tr></table></figure></li><li><p>进入HDFS中查看有没有创建成功，进入到Hadoop的<code>/bin</code>目录下执行<code>./hdfs -dfs -ls /</code>,这个时候我们可以看到根目录下存在<code>/hbase</code>文件夹</p></li><li>至此HBase的伪分布式集群安装完毕</li></ol><h2 id="配置web管理界面"><a href="#配置web管理界面" class="headerlink" title="配置web管理界面"></a>配置web管理界面</h2><p>1.0.0之后的版本的hbase的master web 默认是不运行的，所以需要自己配置默认端口。<br>在hbase-site.xml中加入一下内容即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新增的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新增的配置 --&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后访问<code>localhost:60010</code>即可访问</p>]]></content>
      
      
      <categories>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> HBase </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop伪分布式集群安装</title>
      <link href="/2019/12/07/Hadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
      <url>/2019/12/07/Hadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载hadoop安装包"><a href="#一、下载hadoop安装包" class="headerlink" title="一、下载hadoop安装包"></a>一、下载hadoop安装包</h2><p>hadoop安装包分为apache官方以及CDH，具体区别在此不做介绍，本次搭建选择的是<code>hadoop-2.6.0-cdh5.7.0</code>版本<br>下载路径<a href="http://archive.cloudera.com/cdh5/" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/</a></p><hr><h2 id="二、配置hadoop"><a href="#二、配置hadoop" class="headerlink" title="二、配置hadoop"></a>二、配置hadoop</h2><p>hadoop相关配置文件在<code>/etc</code>目录下<br>我们需要修改的文件有<br><code>core-site.xml</code>，<code>hadoop-env.sh</code>，<code>hdfs-site.xml</code></p><ol><li>对<code>hadoop-env.sh</code>文件中的<code>JAVA_HOME</code>进行一下配置</li><li><p>在<code>hdfs-site.xml</code>文件中添加配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 存储副本的数量，因为我们是伪分布式，所以副本数量为1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- namenode相关信息存储路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/XXX/Hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- datanode相关信息存储路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/XXX/Hadoop/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 配置好之后我们需要创建<code>/XXX/Hadoop/dfs/name</code>和<code>/XXX/Hadoop/dfs/data</code>这两个文件</p></li><li><p>配置<code>core-site.xml</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表明我们hdfs的默认ip --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表明我们tmp文件的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/XXX/Hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 之后我们需要进到/bin目录下面执行<code>./hdfs namenode -format</code>对namenode进行格式化<br> 如果看到下面这段话则说明格式化成功</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19/12/07 15:04:31 INFO util.ExitUtil: Exiting with status 0</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h2><ol><li>/sbin目录下面使用<code>./start-dfs.sh</code>启动hdfs集群</li><li>使用<code>./hdfs dfs -ls /</code>查看hdfs根目录为空</li><li>然后我们在执行<code>./hdfs dfs -mkdir /test</code>之后再查询会发现根目录已经存在/test文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用iTerm2和OhMyZsh实现一个强大终端</title>
      <link href="/2019/11/16/%E4%BD%BF%E7%94%A8iTerm2%E5%92%8COhMyZsh%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF/"/>
      <url>/2019/11/16/%E4%BD%BF%E7%94%A8iTerm2%E5%92%8COhMyZsh%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>参考文章：<br><a href="https://blog.csdn.net/qianghaohao/article/details/79440961" target="_blank" rel="noopener">https://blog.csdn.net/qianghaohao/article/details/79440961</a><br><a href="https://www.jianshu.com/p/9c3439cc3bdb" target="_blank" rel="noopener">https://www.jianshu.com/p/9c3439cc3bdb</a><br><a href="https://www.jianshu.com/p/d194d29e488c?open_source=weibo_search" target="_blank" rel="noopener">https://www.jianshu.com/p/d194d29e488c?open_source=weibo_search</a><br><a href="https://www.jianshu.com/p/a78845c3f476" target="_blank" rel="noopener">https://www.jianshu.com/p/a78845c3f476</a></p><hr><p>首先我们看一下最终效果<br><img src="/images/使用iTerm2和OhMyZsh实现一个强大终端/67CBDB40-30BD-436F-AE5D-4F153F59FA46.png" alt="这里写图片描述"></p><hr><h3 id="一、下载iTerm2"><a href="#一、下载iTerm2" class="headerlink" title="一、下载iTerm2"></a>一、下载iTerm2</h3><p>官网下载地址：<a href="https://www.iterm2.com/" target="_blank" rel="noopener">https://www.iterm2.com/</a></p><hr><h3 id="二、安装zsh"><a href="#二、安装zsh" class="headerlink" title="二、安装zsh"></a>二、安装<code>zsh</code></h3><p><code>zsh</code>一般Mac已经自带了，无需额外安装。可以用<code>cat /etc/shells</code>查看zsh是否安装，如果列出了<code>/bin/zsh</code>则表明zsh已经安装了。<br>接下来修改iTerm2终端的默认Shell，可以用<code>echo $SHELL</code>查看当前Shell是什么，如果不是<code>/bin/zsh</code>则用如下命令修改iTerm2的默认Shell为<code>zsh</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure></p><p>这个是默认的样子<br><img src="/images/使用iTerm2和OhMyZsh实现一个强大终端/2411388-d80b6825cd00fb0d.png" alt="这里写图片描述"></p><hr><h3 id="三、使用Oh-my-zsh"><a href="#三、使用Oh-my-zsh" class="headerlink" title="三、使用Oh my zsh"></a>三、使用<code>Oh my zsh</code></h3><blockquote><p>zsh的功能极其强大，只是配置过于复杂，起初只有极客才在用。后来，有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的bash, 于是他创建了一个名为oh-my-zsh的开源项目</p></blockquote><h4 id="1-安装Oh-my-zsh"><a href="#1-安装Oh-my-zsh" class="headerlink" title="1.安装Oh my zsh"></a>1.安装Oh my zsh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curl 安装方式</span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wget 安装方式</span><br><span class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure><p>在安装过程中我们发现总是出现无法下载<code>instal.sh</code>文件的情况，所以下面是<code>install.sh</code>文件的源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  # Use colors, but only if connected to a terminal, and that terminal</span><br><span class="line">  # supports them.</span><br><span class="line">  if which tput &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">      ncolors=$(tput colors)</span><br><span class="line">  fi</span><br><span class="line">  if [ -t 1 ] &amp;&amp; [ -n &quot;$ncolors&quot; ] &amp;&amp; [ &quot;$ncolors&quot; -ge 8 ]; then</span><br><span class="line">    RED=&quot;$(tput setaf 1)&quot;</span><br><span class="line">    GREEN=&quot;$(tput setaf 2)&quot;</span><br><span class="line">    YELLOW=&quot;$(tput setaf 3)&quot;</span><br><span class="line">    BLUE=&quot;$(tput setaf 4)&quot;</span><br><span class="line">    BOLD=&quot;$(tput bold)&quot;</span><br><span class="line">    NORMAL=&quot;$(tput sgr0)&quot;</span><br><span class="line">  else</span><br><span class="line">    RED=&quot;&quot;</span><br><span class="line">    GREEN=&quot;&quot;</span><br><span class="line">    YELLOW=&quot;&quot;</span><br><span class="line">    BLUE=&quot;&quot;</span><br><span class="line">    BOLD=&quot;&quot;</span><br><span class="line">    NORMAL=&quot;&quot;</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  # Only enable exit-on-error after the non-critical colorization stuff,</span><br><span class="line">  # which may fail on systems lacking tput or terminfo</span><br><span class="line">  set -e</span><br><span class="line"></span><br><span class="line">  CHECK_ZSH_INSTALLED=$(grep /zsh$ /etc/shells | wc -l)</span><br><span class="line">  if [ ! $CHECK_ZSH_INSTALLED -ge 1 ]; then</span><br><span class="line">    printf &quot;$&#123;YELLOW&#125;Zsh is not installed!$&#123;NORMAL&#125; Please install zsh first!\n&quot;</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line">  unset CHECK_ZSH_INSTALLED</span><br><span class="line"></span><br><span class="line">  if [ ! -n &quot;$ZSH&quot; ]; then</span><br><span class="line">    ZSH=~/.oh-my-zsh</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [ -d &quot;$ZSH&quot; ]; then</span><br><span class="line">    printf &quot;$&#123;YELLOW&#125;You already have Oh My Zsh installed.$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">    printf &quot;You&apos;ll need to remove $ZSH if you want to re-install.\n&quot;</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  # Prevent the cloned repository from having insecure permissions. Failing to do</span><br><span class="line">  # so causes compinit() calls to fail with &quot;command not found: compdef&quot; errors</span><br><span class="line">  # for users with insecure umasks (e.g., &quot;002&quot;, allowing group writability). Note</span><br><span class="line">  # that this will be ignored under Cygwin by default, as Windows ACLs take</span><br><span class="line">  # precedence over umasks except for filesystems mounted with option &quot;noacl&quot;.</span><br><span class="line">  umask g-w,o-w</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;BLUE&#125;Cloning Oh My Zsh...$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">  hash git &gt;/dev/null 2&gt;&amp;1 || &#123;</span><br><span class="line">    echo &quot;Error: git is not installed&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  &#125;</span><br><span class="line">  # The Windows (MSYS) Git is not compatible with normal use on cygwin</span><br><span class="line">  if [ &quot;$OSTYPE&quot; = cygwin ]; then</span><br><span class="line">    if git --version | grep msysgit &gt; /dev/null; then</span><br><span class="line">      echo &quot;Error: Windows/MSYS Git is not supported on Cygwin&quot;</span><br><span class="line">      echo &quot;Error: Make sure the Cygwin git package is installed and is first on the path&quot;</span><br><span class="line">      exit 1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">  env git clone --depth=1 https://github.com/robbyrussell/oh-my-zsh.git $ZSH || &#123;</span><br><span class="line">    printf &quot;Error: git clone of oh-my-zsh repo failed\n&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;BLUE&#125;Looking for an existing zsh config...$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">  if [ -f ~/.zshrc ] || [ -h ~/.zshrc ]; then</span><br><span class="line">    printf &quot;$&#123;YELLOW&#125;Found ~/.zshrc.$&#123;NORMAL&#125; $&#123;GREEN&#125;Backing up to ~/.zshrc.pre-oh-my-zsh$&#123;NORMAL&#125;\n&quot;;</span><br><span class="line">    mv ~/.zshrc ~/.zshrc.pre-oh-my-zsh;</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;BLUE&#125;Using the Oh My Zsh template file and adding it to ~/.zshrc$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">  cp $ZSH/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line">  sed &quot;/^export ZSH=/ c\\</span><br><span class="line">  export ZSH=$ZSH</span><br><span class="line">  &quot; ~/.zshrc &gt; ~/.zshrc-omztemp</span><br><span class="line">  mv -f ~/.zshrc-omztemp ~/.zshrc</span><br><span class="line"></span><br><span class="line">  # If this user&apos;s login shell is not already &quot;zsh&quot;, attempt to switch.</span><br><span class="line">  TEST_CURRENT_SHELL=$(expr &quot;$SHELL&quot; : &apos;.*/\(.*\)&apos;)</span><br><span class="line">  if [ &quot;$TEST_CURRENT_SHELL&quot; != &quot;zsh&quot; ]; then</span><br><span class="line">    # If this platform provides a &quot;chsh&quot; command (not Cygwin), do it, man!</span><br><span class="line">    if hash chsh &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">      printf &quot;$&#123;BLUE&#125;Time to change your default shell to zsh!$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">      chsh -s $(grep /zsh$ /etc/shells | tail -1)</span><br><span class="line">    # Else, suggest the user do so manually.</span><br><span class="line">    else</span><br><span class="line">      printf &quot;I can&apos;t change your shell automatically because this system does not have chsh.\n&quot;</span><br><span class="line">      printf &quot;$&#123;BLUE&#125;Please manually change your default shell to zsh!$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;GREEN&#125;&quot;</span><br><span class="line">  echo &apos;         __                                     __   &apos;</span><br><span class="line">  echo &apos;  ____  / /_     ____ ___  __  __   ____  _____/ /_  &apos;</span><br><span class="line">  echo &apos; / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \ &apos;</span><br><span class="line">  echo &apos;/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / / &apos;</span><br><span class="line">  echo &apos;\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/  &apos;</span><br><span class="line">  echo &apos;                        /____/                       ....is now installed!&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;Please look over the ~/.zshrc file to select plugins, themes, and options.&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;p.s. Follow us at https://twitter.com/ohmyzsh.&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;p.p.s. Get stickers and t-shirts at https://shop.planetargon.com.&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  printf &quot;$&#123;NORMAL&#125;&quot;</span><br><span class="line">  env zsh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure></p><p>之后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL install.sh)&quot;</span><br></pre></td></tr></table></figure></p><h4 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2.修改主题"></a>2.修改主题</h4><blockquote><p>下面我们进行主题修改，主题简介链接：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p></blockquote><h5 id="（1）打开配置文件"><a href="#（1）打开配置文件" class="headerlink" title="（1）打开配置文件"></a>（1）打开配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><h5 id="（2）主题换成自己喜爱的主题"><a href="#（2）主题换成自己喜爱的主题" class="headerlink" title="（2）主题换成自己喜爱的主题"></a>（2）主题换成自己喜爱的主题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;agnoster&quot;</span><br></pre></td></tr></table></figure><h5 id="（3）更新配置"><a href="#（3）更新配置" class="headerlink" title="（3）更新配置"></a>（3）更新配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><hr><h3 id="四、安装PowerFonts字体"><a href="#四、安装PowerFonts字体" class="headerlink" title="四、安装PowerFonts字体"></a>四、安装PowerFonts字体</h3><p>有的同学会发现，执行完上一步后，使用可能会出现乱码，这是因为我们缺少PowerFonts字体<br>安装字体库需要首先将项目clone至本地，然后执行源码中的<code>install.sh</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:powerline/fonts.git</span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></p><p>安装好字体库之后，我们来设置iTerm2的字体，具体的操作是<code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text</code>，在Font区域选中<code>Change Font</code>，然后找到<code>Roboto Mono for Powerline</code>字体。</p><hr><h3 id="五、安装配色方案"><a href="#五、安装配色方案" class="headerlink" title="五、安装配色方案"></a>五、安装配色方案</h3><p>配色链接：<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">https://github.com/mbadolato/iTerm2-Color-Schemes</a></p><blockquote><p>配色方案在使用VIM或<code>Colorful Log</code>时会变得非常有用，同时界面也不会一片黑绿一样死板。</p></blockquote><h4 id="1-git-clone的方式下载源码进行安装："><a href="#1-git-clone的方式下载源码进行安装：" class="headerlink" title="1.git clone的方式下载源码进行安装："></a>1.git clone的方式下载源码进行安装：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Desktop/OpenSource</span><br><span class="line">git clone https://github.com/altercation/solarized</span><br><span class="line">cd solarized/iterm2-colors-solarized/</span><br><span class="line">open .</span><br></pre></td></tr></table></figure><ol><li>在打开的finder窗口中，双击<code>Solarized Dark.itermcolors</code>和<code>Solarized Light.itermcolors</code>安装明暗两种配色</li><li>进入<code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets</code></li><li>根据个人喜好选择<code>solarized dark</code>和<code>solarized light</code>两种配色中的一种即可。</li></ol><h4 id="2-手动安装"><a href="#2-手动安装" class="headerlink" title="2.手动安装"></a>2.手动安装</h4><p>但是下面这个是我最喜欢的配色</p><blockquote><p><a href="https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/Solarized%20Dark%20Higher%20Contrast.itermcolors" target="_blank" rel="noopener">https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/Solarized%20Dark%20Higher%20Contrast.itermcolors</a></p></blockquote><p>将该配色方案文件（Solarized Dark Higher Contrast.itermcolors）复制出来，保存到本地，文件命名为 <code>SolarizedDarkHigherContrast.itermcolors</code>，然后双击即可安装。</p><hr><h3 id="六、增加高亮"><a href="#六、增加高亮" class="headerlink" title="六、增加高亮"></a>六、增加高亮</h3><p>这是oh my zsh的一个插件，安装方式与theme大同小异：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure></p><h4 id="1-添加plugins"><a href="#1-添加plugins" class="headerlink" title="1.添加plugins"></a>1.添加plugins</h4><p>这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">git</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>请务必保证插件顺序，<code>zsh-syntax-highlighting</code>必须在最后一个。</p><h4 id="2-文件的最后一行添加"><a href="#2-文件的最后一行添加" class="headerlink" title="2.文件的最后一行添加"></a>2.文件的最后一行添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure><h4 id="3-修改生效："><a href="#3-修改生效：" class="headerlink" title="3.修改生效："></a>3.修改生效：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><hr><h3 id="七、安装命令补全"><a href="#七、安装命令补全" class="headerlink" title="七、安装命令补全"></a>七、安装命令补全</h3><p>跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做<code>zsh-autosuggestion</code>，用于命令建议和补全。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions</span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure></p><blockquote><p>之后将插件加入zsh配置与上一个一致</p></blockquote><hr><h3 id="八、使用技巧"><a href="#八、使用技巧" class="headerlink" title="八、使用技巧"></a>八、使用技巧</h3><p>参考文章：<a href="https://www.jianshu.com/p/a78845c3f476" target="_blank" rel="noopener">https://www.jianshu.com/p/a78845c3f476</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iTerm2 </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka初试</title>
      <link href="/2019/11/07/Kafka%E5%88%9D%E8%AF%95/"/>
      <url>/2019/11/07/Kafka%E5%88%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Apache Kafka起源于LinkedIn，后来于2011年成为开源Apache项目，然后于2012年成为First-class Apache项目。Kafka是用Scala和Java编写的。 Apache Kafka是基于发布订阅的容错消息系统。 它是快速，可扩展和设计分布。</p><hr><h3 id="二、安装Kafka"><a href="#二、安装Kafka" class="headerlink" title="二、安装Kafka"></a>二、安装Kafka</h3><ol><li>安装Java</li><li>安装Zookeeper<ul><li>启动命令： <code>zkServer.sh start</code></li><li>停止命令： <code>zkServer.sh stop</code></li></ul></li><li>安装Kafka<ul><li>启动命令： <code>kafka-server-start.sh config/server.properties</code></li><li>启动命令： <code>kafka-server-stop.sh config/server.properties</code></li></ul></li></ol><hr><h3 id="三、代码实践"><a href="#三、代码实践" class="headerlink" title="三、代码实践"></a>三、代码实践</h3><p>添加Maven依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>生产者客户端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerFastStart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String brokerList = <span class="string">"localhost:9092"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String topic = <span class="string">"topic-demo"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"bootstrap.servers"</span>, brokerList);</span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> ProducerRecord&lt;&gt;(topic, <span class="string">"hello, Kafka!"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            producer.send(record);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>消费者客户端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerFastStart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String brokerList = <span class="string">"localhost:9092"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String topic = <span class="string">"topic-demo"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String groupId = <span class="string">"group.demo"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"bootstrap.servers"</span>, brokerList);</span><br><span class="line">        properties.put(<span class="string">"group.id"</span>, groupId);</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">1000</span>));</span><br><span class="line">            <span class="keyword">for</span>(ConsumerRecord&lt;String, String&gt; record : records)&#123;</span><br><span class="line">                System.out.println(record.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Kafka </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建一个基于Redis的id生成器</title>
      <link href="/2019/08/26/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8ERedis%E7%9A%84id%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2019/08/26/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8ERedis%E7%9A%84id%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<hr><p>参考文章：</p><ul><li><a href="https://blog.csdn.net/hengyunabc/article/details/44244951" target="_blank" rel="noopener">https://blog.csdn.net/hengyunabc/article/details/44244951</a></li><li><a href="https://www.jianshu.com/p/955909e1bd71" target="_blank" rel="noopener">https://www.jianshu.com/p/955909e1bd71</a></li><li><a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="noopener">https://tech.meituan.com/2017/04/21/mt-leaf.html</a></li></ul><p>参考项目：<a href="https://github.com/hengyunabc/redis-id-generator值。" target="_blank" rel="noopener">https://github.com/hengyunabc/redis-id-generator值。</a><br>evalsha教程：<a href="https://www.runoob.com/redis/scripting-evalsha.html" target="_blank" rel="noopener">https://www.runoob.com/redis/scripting-evalsha.html</a><br>eval教程：<a href="https://www.runoob.com/redis/scripting-eval.html" target="_blank" rel="noopener">https://www.runoob.com/redis/scripting-eval.html</a></p><hr><hr><h3 id="一、分布式id生成器需要满足的要求"><a href="#一、分布式id生成器需要满足的要求" class="headerlink" title="一、分布式id生成器需要满足的要求"></a>一、分布式id生成器需要满足的要求</h3><h4 id="1-全局唯一"><a href="#1-全局唯一" class="headerlink" title="1.全局唯一"></a>1.全局唯一</h4><h4 id="2-尽可能保证id的递增"><a href="#2-尽可能保证id的递增" class="headerlink" title="2.尽可能保证id的递增"></a>2.尽可能保证id的递增</h4><blockquote><p>因为在查询的时候经常会有例如分页以及排序之类的需求，这个时候如果主键的id本身能够体现出时许效率会更加好。而对于常见的排序还有分页，我们解决办法有两种：</p><ol><li>在数据表中添加一个时间字段，对其创建一个普通索引。</li><li>id本生就是按照时间大致有序的。</li></ol></blockquote><p>因为常见的普通索引的访问效率是比聚集索引要慢的，所以我们尽可能使用第二种解决方案</p><h4 id="3-其他的一些要求"><a href="#3-其他的一些要求" class="headerlink" title="3.其他的一些要求"></a>3.其他的一些要求</h4><ol><li>id要尽可能的短，这样可以减少存储的空间以及增加查询的效率。</li><li>要有足够数量的id可以使用，不然当数据量非常大时，id耗尽就不行了</li><li>要考虑不同机器之间的时间不一致问题</li><li>QPS尽量要高，这样就可以，否则例如像类SNOWFLAKE算法会在64位ID中利用部分位数（如12）表示单位时间内生成的ID序号，这部分序号用完了，这个单位时间就不能再生成序号了</li></ol><hr><hr><h3 id="二、常见的id生成器方案："><a href="#二、常见的id生成器方案：" class="headerlink" title="二、常见的id生成器方案："></a>二、常见的id生成器方案：</h3><h4 id="1-利用mysql数据库的自增主键特性"><a href="#1-利用mysql数据库的自增主键特性" class="headerlink" title="1.利用mysql数据库的自增主键特性"></a>1.利用mysql数据库的自增主键特性</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>简单，代码方便，性能还行</li><li>数字的id是递增的，方便进行分页和排序</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>不同的数据库语法和实现不同，实现数据迁移或者多数据库版本的时候可能会出现一些问题</li><li>我们常见的是一主多从数据库，这会产生单点故障，以及性能瓶颈</li><li>数据量大时需要考虑分库分表</li></ul><h5 id="优化方案："><a href="#优化方案：" class="headerlink" title="优化方案："></a>优化方案：</h5><ul><li>使用多个master，对每个master设置的初始id不同，步长不同，例如有四个master，我们可以让master1生成（1，5，9），master2生成（2，6，10），master3生成（3，7，11），master4生成（4，8，12），这样可以降低单个数据库的压力</li></ul><hr><h4 id="2-UUID"><a href="#2-UUID" class="headerlink" title="2.UUID"></a>2.UUID</h4><blockquote><p>常见的一种分布式id生成器，可以利用数据库也可以利用代码。</p></blockquote><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ul><li>简单，方便</li><li>生成id的性能好，基本上不会有性能问题</li><li>全球唯一，对于数据库合并，迁移等问题不会存在冲突</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>不是有序的</li><li>UUID的字符串长度较长，查询效率不高，且消耗存储空间比较大，如果是海量数据库就需要考虑存储量的问题了</li><li>可读性差</li></ul><hr><h4 id="3-redis生成id"><a href="#3-redis生成id" class="headerlink" title="3.redis生成id"></a>3.redis生成id</h4><blockquote><p>redis的大致原理和普通数据库的生成原理是大致相同的，只不过redis不是使用自增组件，而是使用原子操作 INCR和INCRBY来实现。</p></blockquote><h5 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h5><ul><li>不依赖于数据库，灵活方便，且性能优于数据库。<br>数字ID天然排序，对分页或者需要排序的结果很有帮助。</li></ul><h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>如果系统中没有Redis，还需要引入新的组件，增加系统复杂度。</li><li>需要编码和配置的工作量比较大。</li></ul><hr><h4 id="4-snowflake算法"><a href="#4-snowflake算法" class="headerlink" title="4.snowflake算法"></a>4.snowflake算法</h4><blockquote><ol><li>一个ID由64位生成</li><li>41bit作为时间戳，记录当前时间到标记的起始时间（如到2018.1.1）差，精确到毫秒，那么服务可用时长为(1&lt;&lt;41)/(1000<em> 60 </em> 60 <em> 24 </em> 365) = 69.73年</li><li>10bit作为机器ID，也就是可以有1024台机器</li><li>12bit作为序列号，代表单位时间（这里是毫秒）内允许生成的ID总数，也就是1ms内允许生成4096个ID</li></ol></blockquote><h5 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h5><ul><li>不依赖于数据库，灵活方便，且性能优于数据库。</li><li>ID按照时间在单机上是递增的。</li></ul><h5 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。</li></ul><hr><h4 id="5-类SNOWFLAKE算法"><a href="#5-类SNOWFLAKE算法" class="headerlink" title="5.类SNOWFLAKE算法"></a>5.类SNOWFLAKE算法</h4><blockquote><p>SNOWFLAKE给出的主要是一个思想，把ID划分为多个段，有不同的含义，可以结合自己的要求进行重新划分。按照个人理解，时间戳位数少了，机器位数多了，序列号位数多了。借鉴snowflake的思想，结合各公司的业务逻辑和并发量，可以实现自己的分布式ID生成算法。</p></blockquote><h5 id="举例，假设某公司ID生成器服务的需求如下："><a href="#举例，假设某公司ID生成器服务的需求如下：" class="headerlink" title="举例，假设某公司ID生成器服务的需求如下："></a>举例，假设某公司ID生成器服务的需求如下：</h5><ul><li>单机高峰并发量小于1W，预计未来5年单机高峰并发量小于10W</li><li>有2个机房，预计未来5年机房数量小于4个</li><li>每个机房机器数小于100台</li><li>目前有5个业务线有ID生成需求，预计未来业务线数量小于10个</li></ul><h5 id="分析过程如下："><a href="#分析过程如下：" class="headerlink" title="分析过程如下："></a>分析过程如下：</h5><ul><li>高位取从2017年1月1日到现在的毫秒数（假设系统ID生成器服务在这个时间之后上线），假设系统至少运行10年，那至少需要10年 <em> 365天 </em> 24小时 <em> 3600秒 </em> 1000毫秒 = 320 * 10 ^ 9，差不多预留39bit给毫秒数</li><li>每秒的单机高峰并发量小于10W，即平均每毫秒的单机高峰并发量小于100，差不多预留7bit给每毫秒内序列号</li><li>5年内机房数小于4个，预留2bit给机房标识</li><li>每个机房小于100台机器，预留7bit给每个机房内的服务器标识</li><li>业务线小于10个，预留4bit给业务线标识</li></ul><h5 id="这样设计的64bit标识，可以保证："><a href="#这样设计的64bit标识，可以保证：" class="headerlink" title="这样设计的64bit标识，可以保证："></a>这样设计的64bit标识，可以保证：</h5><ul><li>每个业务线、每个机房、每个机器生成的ID都是不同的</li><li>同一个机器，每个毫秒内生成的ID都是不同的</li><li>同一个机器，同一个毫秒内，以序列号区区分保证生成的ID是不同的</li><li>将毫秒数放在最高位，保证生成的ID是趋势递增的</li></ul><h5 id="缺点：-3"><a href="#缺点：-3" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>由于“没有一个全局时钟”，每台服务器分配的ID是绝对递增的，但从全局看，生成的ID只是趋势递增的（有些服务器的时间早，有些服务器的时间晚）</li></ul><hr><hr><h3 id="三、实现一个简易的redis的id生成器"><a href="#三、实现一个简易的redis的id生成器" class="headerlink" title="三、实现一个简易的redis的id生成器"></a>三、实现一个简易的redis的id生成器</h3><blockquote><p>利用redis的lua脚本执行功能，在每个节点上通过lua脚本生成唯一id，其中使用的是雪花算法。<br>生成的ID是64位的：</p><ul><li>使用41 bit来存放时间，精确到毫秒，可以使用41年。</li><li>使用12 bit来存放逻辑分片ID，最大分片ID是4095</li><li>使用10 bit来存放自增长ID，意味着每个节点，每毫秒最多可以生成1024个ID</li></ul></blockquote><p>比如GTM时间 <code>Fri Mar 13 10:00:00 CST 2015</code> ，它的距1970年的毫秒数是 1426212000000，假定分片ID是53，自增长序列是4，则生成的ID是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左移22位，指代最前面14bit的存储信息，再左移10位表示中间存储分片信息的12bit</span></span><br><span class="line"><span class="number">5981966696448054276</span> = <span class="number">1426212000000</span> &lt;&lt; <span class="number">22</span> + <span class="number">53</span> &lt;&lt; <span class="number">10</span> + <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>redis提供了TIME命令，可以取得redis服务器上的秒数和微秒数。因些lua脚本返回的是一个四元组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">second, microSecond, partition, seq</span><br></pre></td></tr></table></figure></p><p>客户端要自己处理，生成最终ID。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((second * <span class="number">1000</span> + microSecond / <span class="number">1000</span>) &lt;&lt; (<span class="number">12</span> + <span class="number">10</span>)) + (shardId &lt;&lt; <span class="number">10</span>) + seq;</span><br></pre></td></tr></table></figure></p><p>seq对应的是集群中的节点值<br>如集群里有3个节点，则节点1返回的seq是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0, 3, 6, 9, 12 ...</span><br></pre></td></tr></table></figure></p><p>节点2返回的seq是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1, 4, 7, 10, 13 ...</span><br></pre></td></tr></table></figure></p><p>节点3返回的seq是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2, 5, 8, 11, 14 ...</span><br></pre></td></tr></table></figure></p><p>我们可以将lua脚本转换成sha1值，然后通过EVALSHA指令传递这个</p><h5 id="下面我们直接看代码"><a href="#下面我们直接看代码" class="headerlink" title="下面我们直接看代码"></a>下面我们直接看代码</h5><p>项目主程序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String tab = <span class="string">"order"</span>;</span><br><span class="line"><span class="keyword">long</span> userId = <span class="number">123456789</span>;</span><br><span class="line"></span><br><span class="line">IdGenerator idGenerator = IdGenerator.builder()</span><br><span class="line">.addHost(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>, <span class="string">"c5809078fa6d652e0b0232d552a9d06d37fe819c"</span>)</span><br><span class="line"><span class="comment">//.addHost("127.0.0.1", 7379, "accb7a987d4fb0fd85c57dc5a609529f80ec3722")</span></span><br><span class="line"><span class="comment">//.addHost("127.0.0.1", 8379, "f55f781ca4a00a133728488e15a554c070b17255")</span></span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> id = idGenerator.next(tab, userId);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"id:"</span> + id);</span><br><span class="line">List&lt;Long&gt; result = IdGenerator.parseId(id);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"miliSeconds:"</span> + result.get(<span class="number">0</span>) + <span class="string">", partition:"</span></span><br><span class="line">+ result.get(<span class="number">1</span>) + <span class="string">", seq:"</span> + result.get(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="id生成器相关代码"><a href="#id生成器相关代码" class="headerlink" title="id生成器相关代码"></a>id生成器相关代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(IdGenerator.class);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JedisPool, luaSha</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Pair&lt;JedisPool, String&gt;&gt; jedisPoolList;</span><br><span class="line"><span class="keyword">int</span> retryTimes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">IdGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">IdGenerator</span><span class="params">(List&lt;Pair&lt;JedisPool, String&gt;&gt; jedisPoolList,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> retryTimes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jedisPoolList = jedisPoolList;</span><br><span class="line"><span class="keyword">this</span>.retryTimes = retryTimes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IdGeneratorBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> IdGeneratorBuilder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IdGeneratorBuilder</span> </span>&#123;</span><br><span class="line">List&lt;Pair&lt;JedisPool, String&gt;&gt; jedisPoolList = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">int</span> retryTimes = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IdGeneratorBuilder <span class="title">addHost</span><span class="params">(String host, <span class="keyword">int</span> port, String luaSha)</span> </span>&#123;</span><br><span class="line">jedisPoolList.add(Pair.of(<span class="keyword">new</span> JedisPool(host, port), luaSha));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IdGeneratorBuilder <span class="title">retryTimes</span><span class="params">(<span class="keyword">int</span> retryTimes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.retryTimes = retryTimes;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IdGenerator <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> IdGenerator(jedisPoolList, retryTimes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">next</span><span class="params">(String tab)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next(tab, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">next</span><span class="params">(String tab, <span class="keyword">long</span> shardId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; retryTimes; ++i) &#123;</span><br><span class="line">Long id = innerNext(tab, shardId);</span><br><span class="line"><span class="keyword">if</span> (id != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can not generate id!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Long <span class="title">innerNext</span><span class="params">(String tab, <span class="keyword">long</span> shardId)</span> </span>&#123;</span><br><span class="line">index++;</span><br><span class="line">Pair&lt;JedisPool, String&gt; pair = jedisPoolList.get(index</span><br><span class="line">% jedisPoolList.size());</span><br><span class="line">JedisPool jedisPool = pair.getLeft();</span><br><span class="line"></span><br><span class="line">String luaSha = pair.getRight();</span><br><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">jedis = jedisPool.getResource();</span><br><span class="line">List&lt;Long&gt; result = (List&lt;Long&gt;) jedis.evalsha(luaSha, <span class="number">2</span>, tab, <span class="string">""</span> + shardId);</span><br><span class="line"><span class="keyword">long</span> id = buildId(result.get(<span class="number">0</span>), result.get(<span class="number">1</span>), result.get(<span class="number">2</span>),</span><br><span class="line">result.get(<span class="number">3</span>));</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125; <span class="keyword">catch</span> (JedisConnectionException e) &#123;</span><br><span class="line"><span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">jedisPool.returnBrokenResource(jedis);</span><br><span class="line">&#125;</span><br><span class="line">logger.error(<span class="string">"generate id error!"</span>, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">jedisPool.returnResource(jedis);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">buildId</span><span class="params">(<span class="keyword">long</span> second, <span class="keyword">long</span> microSecond, <span class="keyword">long</span> shardId,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">long</span> seq)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> miliSecond = (second * <span class="number">1000</span> + microSecond / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">return</span> (miliSecond &lt;&lt; (<span class="number">12</span> + <span class="number">10</span>)) + (shardId &lt;&lt; <span class="number">10</span>) + seq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Long&gt; <span class="title">parseId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> miliSecond = id &gt;&gt;&gt; <span class="number">22</span>;</span><br><span class="line"><span class="comment">// 2 ^ 12 = 0xFFF</span></span><br><span class="line"><span class="keyword">long</span> shardId = (id &amp; (<span class="number">0xFFF</span> &lt;&lt; <span class="number">10</span>)) &gt;&gt; <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> seq = id &amp; <span class="number">0x3FF</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Long&gt; re = <span class="keyword">new</span> ArrayList&lt;Long&gt;(<span class="number">4</span>);</span><br><span class="line">re.add(miliSecond);</span><br><span class="line">re.add(shardId);</span><br><span class="line">re.add(seq);</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>至此我们的基于redis的id生成器就完成了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式 </tag>
            
            <tag> SNOWFLAKE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写SpringMVC，剑指优秀开源框架灵魂</title>
      <link href="/2019/08/20/%E6%89%8B%E5%86%99SpringMVC%EF%BC%8C%E5%89%91%E6%8C%87%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%81%B5%E9%AD%82/"/>
      <url>/2019/08/20/%E6%89%8B%E5%86%99SpringMVC%EF%BC%8C%E5%89%91%E6%8C%87%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%81%B5%E9%AD%82/</url>
      
        <content type="html"><![CDATA[<hr><p>由于Spring官方就是选择gradle作为自动化构建工具，所以我们在本次尝试中就按照spring的选择也是用gradle<br>在整个项目中，我们一共包含两个模块framework模块用于首先实现我们springmvc的常见功能，test模块则是用来测试我们手写的模块是否正确<br>项目链接：<a href="https://github.com/ZhangJia97/Mini-Spring" target="_blank" rel="noopener">https://github.com/ZhangJia97/Mini-Spring</a></p><hr><p>下面是项目结构，只保留了我们用到的文件结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">├── build.gradle</span><br><span class="line">├── framework</span><br><span class="line">│   ├── build.gradle</span><br><span class="line">│   └── src</span><br><span class="line">│       ├── main</span><br><span class="line">│           ├── java</span><br><span class="line">│               └── xyz</span><br><span class="line">│                   └── suiwo</span><br><span class="line">│                       └── imooc</span><br><span class="line">│                           ├── beans</span><br><span class="line">│                           │   ├── Autowired.java</span><br><span class="line">│                           │   ├── Bean.java</span><br><span class="line">│                           │   └── BeanFactory.java</span><br><span class="line">│                           ├── core</span><br><span class="line">│                           │   └── ClassScanner.java</span><br><span class="line">│                           ├── starter</span><br><span class="line">│                           │   └── MiniApplication.java</span><br><span class="line">│                           └── web</span><br><span class="line">│                               ├── handler</span><br><span class="line">│                               │   ├── HandlerManager.java</span><br><span class="line">│                               │   └── MappingHandler.java</span><br><span class="line">│                               ├── mvc</span><br><span class="line">│                               │   ├── Controller.java</span><br><span class="line">│                               │   ├── RequestMapping.java</span><br><span class="line">│                               │   └── RequestParam.java</span><br><span class="line">│                               ├── server</span><br><span class="line">│                               │   └── TomcatServer.java</span><br><span class="line">│                               └── servlet</span><br><span class="line">│                                   └── DispatcherServlet.java</span><br><span class="line">└── <span class="built_in">test</span></span><br><span class="line">    ├── build.gradle</span><br><span class="line">    └── src</span><br><span class="line">        ├── main</span><br><span class="line">             ├── java</span><br><span class="line">                └── xyz</span><br><span class="line">                    └── suiwo</span><br><span class="line">                        └── imooc</span><br><span class="line">                            ├── Application.java</span><br><span class="line">                            ├── controller</span><br><span class="line">                            │   └── SalaryController.java</span><br><span class="line">                            └── service</span><br><span class="line">                                └── SalaryService.java</span><br></pre></td></tr></table></figure></p><hr><p>首先我们需要在framework的依赖中添加tomcat的依赖，因为springboot就是通过加入tomcat依赖来实现的<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.12'</span></span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'org.apache.tomcat.embed'</span>, name: <span class="string">'tomcat-embed-core'</span>, version: <span class="string">'8.5.23'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>接下来让我们看看如何去创建一个tomcat服务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatServer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Tomcat tomcat;</span><br><span class="line">    <span class="keyword">private</span> String[] args;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TomcatServer</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.args = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startServer</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">        tomcat.setPort(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">        Context context = <span class="keyword">new</span> StandardContext();</span><br><span class="line">        context.setPath(<span class="string">""</span>);</span><br><span class="line">        context.addLifecycleListener(<span class="keyword">new</span> Tomcat.FixContextListener());</span><br><span class="line">        DispatcherServlet dispatcherServlet = <span class="keyword">new</span> DispatcherServlet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// servlet注册到tomcat容器内并开启异步支持</span></span><br><span class="line">        Tomcat.addServlet(context, <span class="string">"dispatcherServlet"</span>, dispatcherServlet).setAsyncSupported(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        context.addServletMappingDecoded(<span class="string">"/"</span>, <span class="string">"dispatcherServlet"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册到默认host容器</span></span><br><span class="line">        tomcat.getHost().addChild(context);</span><br><span class="line">        tomcat.start();</span><br><span class="line"></span><br><span class="line">        Thread awaitThread = <span class="keyword">new</span> Thread(<span class="string">"tomcat_await_thread"</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                TomcatServer.<span class="keyword">this</span>.tomcat.getServer().await();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置成非守护线程</span></span><br><span class="line">        awaitThread.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">        awaitThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>然后我们可以看到上述代码向tomcat中set了一个dispatchServlet用于处理请求，我们看看DispatchServlet如何去处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(MappingHandler mappingHandler : HandlerManager.mappingHandlerList)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(mappingHandler.handle(req, res))&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在已经成功创建了一个Tomcat的服务类，下面我们就可以在主类中启动tomcat服务了</p><hr><p>然后我们看一些framework的主类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Class&lt;?&gt; cls, String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Mini-Spring!"</span>);</span><br><span class="line">        <span class="comment">// 创建一个Tomcat服务</span></span><br><span class="line">        TomcatServer tomcatServer = <span class="keyword">new</span> TomcatServer(args);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 启动tomcat</span></span><br><span class="line">            tomcatServer.startServer();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 扫描项目中当前cls目录下的所有包</span></span><br><span class="line">            List&lt;Class&lt;?&gt;&gt; classList = ClassScanner.scannerClass(cls.getPackage().getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化所有bean</span></span><br><span class="line">            BeanFactory.init(classList);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化所有的MappingHandler</span></span><br><span class="line">            HandlerManager.resolveMappingHandler(classList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>我们再创建三个mvc相关的注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestParam &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>然后我们看一下ClassScanner类，这个类主要用于扫描包<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassScanner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Class&lt;?&gt;&gt; scannerClass(String packageName) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; classList= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String path = packageName.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取默认类加载器</span></span><br><span class="line">        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取资源文件的路径</span></span><br><span class="line">        Enumeration&lt;URL&gt; resources = classLoader.getResources(path);</span><br><span class="line">        <span class="keyword">while</span>(resources.hasMoreElements())&#123;</span><br><span class="line">            URL resource = resources.nextElement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断资源类型</span></span><br><span class="line">            <span class="keyword">if</span>(resource.getProtocol().contains(<span class="string">"jar"</span>))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果资源类型是jar包，则我们先获取jar包的绝对路径</span></span><br><span class="line">                JarURLConnection jarURLConnection = (JarURLConnection) resource.openConnection();</span><br><span class="line">                String jarFilePath = jarURLConnection.getJarFile().getName();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取这个jar包下所有的类</span></span><br><span class="line">                classList.addAll(getClassesFromJar(jarFilePath, path));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// todo 处理非jar包的情况</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Class&lt;?&gt;&gt; getClassesFromJar(String jarFilePath, String path) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//初始化一个容器用于存储类</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过路径获取JarFile实例</span></span><br><span class="line">        JarFile jarFile = <span class="keyword">new</span> JarFile(jarFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历jar包，每个jarEntry都是jar包里的一个文件</span></span><br><span class="line">        Enumeration&lt;JarEntry&gt; jarEntryEnumeration = jarFile.entries();</span><br><span class="line">        <span class="keyword">while</span>(jarEntryEnumeration.hasMoreElements())&#123;</span><br><span class="line">            JarEntry jarEntry = jarEntryEnumeration.nextElement();</span><br><span class="line">            String entryName = jarEntry.getName();  <span class="comment">// xyz/suiwo/imooc/test/Test.class</span></span><br><span class="line">            <span class="keyword">if</span>(entryName.startsWith(path) &amp;&amp; entryName.endsWith(<span class="string">".class"</span>))&#123;</span><br><span class="line">                <span class="comment">// 把分隔符换成点，并去除.class后缀</span></span><br><span class="line">                String classFullName = entryName.replace(<span class="string">"/"</span>, <span class="string">"."</span>).substring(<span class="number">0</span>, entryName.length() - <span class="number">6</span>);</span><br><span class="line">                classes.add(Class.forName(classFullName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>作为spring的经典ioc思想，初始化创建bean是重中之重，下面让我们看看如何实现吧<br>对于常见与Bean相关的注解就是<code>@Bean</code>还有<code>@Autowired</code><br>所以我们首先创建两个注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>下面我们看看如何去初始化bean吧<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class&lt;?&gt;, Object&gt; classToBean = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(Class&lt;?&gt; cls)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classToBean.get(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(List&lt;Class&lt;?&gt;&gt; classList)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; toCreate = <span class="keyword">new</span> ArrayList&lt;&gt;(classList);</span><br><span class="line">        <span class="keyword">while</span> (toCreate.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> remainSize = toCreate.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; toCreate.size(); i++)&#123;</span><br><span class="line">                <span class="comment">// 返回true则说明创建成功或者说当前类不是一个bean</span></span><br><span class="line">                <span class="comment">// 返回false则此时可能存存在当前需要创建的bean的依赖还没有创建所以暂时先跳过</span></span><br><span class="line">                <span class="keyword">if</span>(finishCreate(toCreate.get(i)))&#123;</span><br><span class="line">                    toCreate.remove(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果数量没有改变则说明出现了死循环，抛出异常</span></span><br><span class="line">            <span class="keyword">if</span>(toCreate.size() == remainSize)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"死循环"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">finishCreate</span><span class="params">(Class&lt;?&gt; cls)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">// 如果没有满足的注解，则直接返回true</span></span><br><span class="line">        <span class="keyword">if</span>(!cls.isAnnotationPresent(Bean.class) &amp;&amp; !cls.isAnnotationPresent(Controller.class))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object bean = cls.newInstance();</span><br><span class="line">        <span class="keyword">for</span>(Field field : cls.getDeclaredFields())&#123;</span><br><span class="line">            <span class="keyword">if</span>(field.isAnnotationPresent(Autowired.class))&#123;</span><br><span class="line">                Class&lt;?&gt; fieldType = field.getType();</span><br><span class="line">                Object reliantBean = BeanFactory.getBean(fieldType);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果为空，则说明当前类中的字段所依赖的类还没有注入，所以返回false，先跳过，等到所需要依赖注入之后再创建</span></span><br><span class="line">                <span class="keyword">if</span>(reliantBean == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                field.set(bean, reliantBean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将创建好的bean放入容器中</span></span><br><span class="line">        classToBean.put(cls, bean);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>然后我们来看一下控制器，每一个MappingHandler都是一个请求映射器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappingHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要处理的uri</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所对应的方法</span></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所对应的方法</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; controller;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所需要的参数</span></span><br><span class="line">    <span class="keyword">private</span> String[] args;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MappingHandler</span><span class="params">(String uri, Method method, Class&lt;?&gt; controller, String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uri = uri;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.controller = controller;</span><br><span class="line">        <span class="keyword">this</span>.args = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若与MappingHandler匹配成功，执行方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handle</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, InvocationTargetException, IOException </span>&#123;</span><br><span class="line">        String requestUri = ((HttpServletRequest)req).getRequestURI();</span><br><span class="line">        <span class="keyword">if</span>(!uri.equals(requestUri))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] parameters = <span class="keyword">new</span> Object[args.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++)&#123;</span><br><span class="line">            parameters[i] = req.getParameter(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Object ctl = BeanFactory.getBean(controller);</span><br><span class="line">        Object response = method.invoke(ctl, parameters);</span><br><span class="line">        res.getWriter().println(response.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>我们在创建一个管理器去管理这些MappingHandler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;MappingHandler&gt; mappingHandlerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把Controller类挑选出来，并将类中的带有@RequestMapping方法初始化成MappingHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resolveMappingHandler</span><span class="params">(List&lt;Class&lt;?&gt;&gt; classList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Class&lt;?&gt; cls : classList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cls.isAnnotationPresent(Controller.class))&#123;</span><br><span class="line">                parseHandlerFromController(cls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析controller类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseHandlerFromController</span><span class="params">(Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class="line">        Method[] methods = cls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!method.isAnnotationPresent(RequestMapping.class))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String uri = method.getDeclaredAnnotation(RequestMapping.class).value();</span><br><span class="line">            List&lt;String&gt; paramNameList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(Parameter parameter : method.getParameters())&#123;</span><br><span class="line">                <span class="keyword">if</span>(parameter.isAnnotationPresent(RequestParam.class))&#123;</span><br><span class="line">                    paramNameList.add(parameter.getDeclaredAnnotation(RequestParam.class).value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] params = paramNameList.toArray(<span class="keyword">new</span> String[paramNameList.size()]);</span><br><span class="line">            MappingHandler mappingHandler = <span class="keyword">new</span> MappingHandler(uri, method, cls, params);</span><br><span class="line">            HandlerManager.mappingHandlerList.add(mappingHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，我们就已经成功的将整个框架大致完成了，对于test模块中的代码，我就不在这里在书写了，因为和我们日常写springboot业务相同只是为了测试我们手写框架的几个功能。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aop链式调用</title>
      <link href="/2019/08/19/Aop%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/"/>
      <url>/2019/08/19/Aop%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><p>多个aop如果叠加<br>采用了责任链的模式<br><img src="/images/aop链式调用/42CA7E10-07EF-4031-8CB9-E37BFE013FA6.png" alt="这里写图片描述"><br>使用ConcerteHandler实现类实现HandleProcess接口同时这个实现类又组合了这个接口，通过successor判断来进行链式调用</p><hr><p>首先我们新建一个Handler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler successor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getSuccessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        handleProcess();</span><br><span class="line">        <span class="keyword">if</span>(successor != <span class="keyword">null</span>)&#123;</span><br><span class="line">            successor.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>下面我们看看client端实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerA</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by a"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerB</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by b"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerC</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by c"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Handler handlerA = <span class="keyword">new</span> HandlerA();</span><br><span class="line">        Handler handlerB = <span class="keyword">new</span> HandlerB();</span><br><span class="line">        Handler handlerC = <span class="keyword">new</span> HandlerC();</span><br><span class="line">        handlerA.setSuccessor(handlerB);</span><br><span class="line">        handlerB.setSuccessor(handlerC);</span><br><span class="line">        handlerA.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此我们实现了链式调用，但是我们也发现了每次都需要设置从属关系。</p><hr><p>下面我们对上面方法改造，使用另外一个Chain对再下面的代码进行一次封装<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Handler handlerA = <span class="keyword">new</span> HandlerA();</span><br><span class="line">    Handler handlerB = <span class="keyword">new</span> HandlerB();</span><br><span class="line">    Handler handlerC = <span class="keyword">new</span> HandlerC();</span><br><span class="line">    handlerA.setSuccessor(handlerB);</span><br><span class="line">    handlerB.setSuccessor(handlerC);</span><br><span class="line">    handlerA.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>下面我们新建一个ChainHandler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Chain chain)</span></span>&#123;</span><br><span class="line">        handleProcess();</span><br><span class="line">        chain.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Chain对链式关系封装起来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ChainHandler&gt; handlers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chain</span><span class="params">(List&lt;ChainHandler&gt; handlers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handlers = handlers;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">proceed</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= handlers.size())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        handlers.get(index++).execute(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>下面我们看一下如何实现调用类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainHandlerA</span> <span class="keyword">extends</span> <span class="title">ChainHandler</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by chain a"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainHandlerB</span> <span class="keyword">extends</span> <span class="title">ChainHandler</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by chain b"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainHandlerC</span> <span class="keyword">extends</span> <span class="title">ChainHandler</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handler by chain c"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;ChainHandler&gt; handlers = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> ChainHandlerA(),</span><br><span class="line">                <span class="keyword">new</span> ChainHandlerB(),</span><br><span class="line">                <span class="keyword">new</span> ChainHandlerC()</span><br><span class="line">        );</span><br><span class="line">        Chain chain = <span class="keyword">new</span> Chain(handlers);</span><br><span class="line">        chain.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Aop </tag>
            
            <tag> 链式调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cglib动态代理</title>
      <link href="/2019/08/19/cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2019/08/19/cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><p>首先我们看一下如何实现cglib的动态代理</p><hr><p>cglib通过实现MethodInterceptor接口来实现动态代理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before in cglib"</span>);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            result = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"after in cglib"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>下面代码是告诉我们如何实现cglib的调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInterceptorClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(RealSubject.class);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> DemoMethodInterceptor());</span><br><span class="line">        Subject subject = (Subject) enhancer.create();</span><br><span class="line">        subject.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><hr><h3 id="JDK与Cglib代理对比"><a href="#JDK与Cglib代理对比" class="headerlink" title="JDK与Cglib代理对比"></a>JDK与Cglib代理对比</h3><p>JDK只能针对有接口的类的接口方法进行动态代理<br>Cglib基 于继承来实现代理,无法对static、final类进行代理,<br>Cglib基于继承来实现代理,无法对private、static方法进行代理</p><p>最后我们看看Spring还如何创建动态代理类的</p><p><img src="/images/cglib动态代理/F0B90539-0325-42E7-A7EE-2B8BBBB352CD.png" alt="这里写图片描述"></p><p>下面我们看一下DefalutAopProxyFactory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title">AopProxyFactory</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultAopProxyFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!config.isOptimize() &amp;&amp; !config.isProxyTargetClass() &amp;&amp; !<span class="keyword">this</span>.hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">            <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (AopProxy)(!targetClass.isInterface() &amp;&amp; !Proxy.isProxyClass(targetClass) ? <span class="keyword">new</span> ObjenesisCglibAopProxy(config) : <span class="keyword">new</span> JdkDynamicAopProxy(config));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasNoUserSuppliedProxyInterfaces</span><span class="params">(AdvisedSupport config)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt;[] ifcs = config.getProxiedInterfaces();</span><br><span class="line">        <span class="keyword">return</span> ifcs.length == <span class="number">0</span> || ifcs.length == <span class="number">1</span> &amp;&amp; SpringProxy.class.isAssignableFrom(ifcs[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在代码中我们可以看到有<code>!config.isOptimize() &amp;&amp; !config.isProxyTargetClass() &amp;&amp; !this.hasNoUserSuppliedProxyInterfaces(config)</code>这三个选项，如果这三个都不满足就会走JDK的实现。或者本身是JDK代理的话也会走JDK代理，其他都是走cglib代理</p><hr><p>那我们如何强制使用cglib呢<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 强制使用cglib</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AopDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>总结：<br>如果目标对象实现了接口,则默认采用JDK动态代理<br>如果目标对象没有实现接口,则采用Cglib进行动态代理<br>如果目标对象实现了接口,且强制cglib代理,则使用cglib代理</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
            <tag> cglib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK动态代理解析</title>
      <link href="/2019/08/19/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/08/19/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<hr><p>首先我们生成的时候调用了Proxy.newInstance()这个方法，这个方法会调用getProxyCLass0()方法，而getProxyCLass0()是从ProxyClassFactory中生成proxy代码，而ProxyClassFactory又是使用ProxyGenerator来生成的代码，然后生成的字节码，使用反射来new一个实例。<br>整个调用大致就是 newInstance() -&gt; getProxyCLass0() -&gt; ProxyClassFactory -&gt; ProxyGenerator -&gt; generateProxyClass</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = (Subject) Proxy.newProxyInstance(DynamicClient.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Subject.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> JDKProxySubject(<span class="keyword">new</span> RealSubject()));</span><br><span class="line">        subject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>我们使用newProxyInstance新建一个实例，进入源码中查看会发现源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      InvocationHandler h)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">    <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">        <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">        <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        Throwable t = e.getCause();</span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>在源码中有这行代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寻找或生成制定的代理类</span></span><br><span class="line">Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br></pre></td></tr></table></figure></p><p>进入这个函数，源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a proxy class.  Must call the checkProxyAccess method</span></span><br><span class="line"><span class="comment"> * to perform permission checks before calling this.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                       Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">    <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"interface limit exceeded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the proxy class defined by the given loader implementing</span></span><br><span class="line">    <span class="comment">// the given interfaces exists, this will simply return the cached copy;</span></span><br><span class="line">    <span class="comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span></span><br><span class="line">    <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现函数会先从缓存中获取，如果缓存中不存在，则生成一个放入缓存</p><hr><p>缓存如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * a cache of proxy classes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span><br><span class="line">    proxyClassCache = <span class="keyword">new</span> WeakCache&lt;&gt;(<span class="keyword">new</span> KeyFactory(), <span class="keyword">new</span> ProxyClassFactory());</span><br></pre></td></tr></table></figure></p><p>由此可见当不存在的时候是由ProxyClassFactory()来生成的</p><hr><p>然后我们看以下这个Factory的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * A factory function that generates, defines and returns the proxy class given</span></span><br><span class="line"><span class="comment">    * the ClassLoader and array of interfaces.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClassFactory</span></span></span><br><span class="line">    implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// prefix for all proxy class names</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">"$Proxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// next number to use for generation of unique proxy class names</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that the class loader resolves the name of this</span></span><br><span class="line"><span class="comment">                * interface to the same Class object.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    intf + <span class="string">" is not visible from class loader"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that the Class object actually represents an</span></span><br><span class="line"><span class="comment">                * interface.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    interfaceClass.getName() + <span class="string">" is not an interface"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Verify that this interface is not a duplicate.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"repeated interface: "</span> + interfaceClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line">        <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Record the package of a non-public proxy interface so that the</span></span><br><span class="line"><span class="comment">            * proxy class will be defined in the same package.  Verify that</span></span><br><span class="line"><span class="comment">            * all non-public proxy interfaces are in the same package.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                accessFlags = Modifier.FINAL;</span><br><span class="line">                String name = intf.getName();</span><br><span class="line">                <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">                String pkg = ((n == -<span class="number">1</span>) ? <span class="string">""</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    proxyPkg = pkg;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"non-public interfaces from different packages"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// if no non-public proxy interfaces, use com.sun.proxy package</span></span><br><span class="line">            proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">"."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Choose a name for the proxy class to generate.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">        String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">            proxyName, interfaces, accessFlags);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                                proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">                * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">                * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">                * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">                * exceeded).</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>在这个类的源码中的apply函数可以看到这几行代码生成字节码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">    proxyName, interfaces, accessFlags);</span><br></pre></td></tr></table></figure></p><hr><p>下面我们在调用接口的类中添加这个系统配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br><span class="line">        Subject subject = (Subject) Proxy.newProxyInstance(DynamicClient.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Subject.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> JDKProxySubject(<span class="keyword">new</span> RealSubject()));</span><br><span class="line">        subject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>之后在我们运行后会发现项目根路径中出现了下面这个文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com/sun/proxy/<span class="variable">$Proxy0</span>.class</span><br></pre></td></tr></table></figure></p><hr><p>这个就是生成的字节码文件<br>进行反编译之后，代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"><span class="keyword">import</span> xyz.suiwo.demo.Subject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m4 = Class.forName(<span class="string">"xyz.suiwo.demo.Subject"</span>).getMethod(<span class="string">"hello"</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"xyz.suiwo.demo.Subject"</span>).getMethod(<span class="string">"request"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>然后我们大致阅读以下反编译的代码，就会有大致了解了，所以我们多添加一个接口的时候，动态代理就会在解析成字节码文件的时候动态生成代理。但是通过静态代理，新添加多少个类就需要手动添加多少次</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态代理与动态代理</title>
      <link href="/2019/08/19/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2019/08/19/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理存在一些缺点，如每当要代理的方法越多，那你需要代理的方法也越多，这样可能会有很多的重复<br>下面我们先实现以下静态代理的例子</p><p>先创建一个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is request"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个静态代理类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxySubject</span><span class="params">(RealSubject realSubject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            realSubject.request();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"after"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用静态代理类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> ProxySubject(<span class="keyword">new</span> RealSubject());</span><br><span class="line">        subject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设我们这个时候在Subject接口中新建一个hello()方法，这个时候我们需要重写RealSubject以及ProxySubject这两个类，这是很不方便的，下面让我们看一下动态代理如何实现的</p><hr><h3 id="JDK与Cglib代理对比"><a href="#JDK与Cglib代理对比" class="headerlink" title="JDK与Cglib代理对比"></a>JDK与Cglib代理对比</h3><ul><li>JDK只能针对有接口的类的接口方法进行动态代理</li><li>Cglib基于继承来实现代理,无法对static、final类进行代理</li><li>Cglib基于继承来实现代理,无法对private、static方法进行代理</li></ul><hr><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理有两类实现：基于接口的代理和基于继承的代理，而这两类的代表分别为JDK代理和Cglib代理，下面我们来演示一下基于JDK的动态代理</p><p>而对于JDK动态代理的实现要点有以下三个</p><ol><li>通过java.lang.reflect.Proxy类动态生成代理类</li><li>实现InvocationHandler这个几口</li><li>JDK代理只能基于接口的动态代理</li></ol><p>首先我们创建一个JDK代理类去实现InvocationHandler这个接口，然后重写里面的invoke方法，然后利用反射动态去反射方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxySubject</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDKProxySubject</span><span class="params">(RealSubject realSubject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy before"</span>);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = method.invoke(realSubject, args);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"proxy after"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们看看动态代理的调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = (Subject) Proxy.newProxyInstance(DynamicClient.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Subject.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> JDKProxySubject(<span class="keyword">new</span> RealSubject()));</span><br><span class="line">        subject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个时候如果我们又要在Subject接口中新添加一个方法，这个时候我们的动态代理实现类并不需要去重写接口，因为我们实现了基于方法的反射机制</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
            <tag> 静态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流编程</title>
      <link href="/2019/08/18/Stream%E6%B5%81%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/08/18/Stream%E6%B5%81%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="外部迭代与内部迭代"><a href="#外部迭代与内部迭代" class="headerlink" title="外部迭代与内部迭代"></a>外部迭代与内部迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> res1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            res1 += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"结果是："</span> + res1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res2 = IntStream.of(nums).sum();</span><br><span class="line">        System.out.println(<span class="string">"结果是："</span> + res2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="中间操作-终止操作和惰性操作"><a href="#中间操作-终止操作和惰性操作" class="headerlink" title="中间操作/终止操作和惰性操作"></a>中间操作/终止操作和惰性操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">// map就是中间操作（返回stream的操作）</span></span><br><span class="line">        <span class="comment">// sum就是终止操作</span></span><br><span class="line">        <span class="keyword">int</span> res = IntStream.of(nums).map(StreamDemo::doubleNum).sum();</span><br><span class="line">        System.out.println(<span class="string">"结果是："</span> + res);</span><br><span class="line">        System.out.println(<span class="string">"惰性求值就是在终止操作没有执行的情况下，中间操作不会执行"</span>);</span><br><span class="line">        IntStream.of(nums).map(StreamDemo::doubleNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">doubleNum</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入了doubleNum静态方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以看到输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">进入了doubleNum静态方法</span><br><span class="line">进入了doubleNum静态方法</span><br><span class="line">进入了doubleNum静态方法</span><br><span class="line">结果是：12</span><br><span class="line">惰性求值就是在终止操作没有执行的情况下，中间操作不会执行</span><br></pre></td></tr></table></figure><p>因为我们有三个数，所以执行了三次，但是因为第二次的是惰性求值所以没有执行静态方法。</p><hr><h3 id="Stream流编程的创建"><a href="#Stream流编程的创建" class="headerlink" title="Stream流编程的创建"></a>Stream流编程的创建</h3><p><img src="/images/Stream流编程/03F1D1B2-7333-4DFC-A23F-F6EA97FB1555.png" alt="这里写图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从集合创建</span></span><br><span class="line">        list.stream();</span><br><span class="line">        list.parallelStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从数组创建</span></span><br><span class="line">        Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建数字流</span></span><br><span class="line">        IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从random中创建一个无限流</span></span><br><span class="line">        <span class="keyword">new</span> Random().ints().limit(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义创建</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Stream.generate(() -&gt; random.nextInt()).limit(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="stream中间操作"><a href="#stream中间操作" class="headerlink" title="stream中间操作"></a>stream中间操作</h3><p><img src="/images/Stream流编程/F5306CA6-DE45-4C0C-99CE-BCC26DDFDCDF.png" alt="这里写图片描述"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"my name is 007"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把每个单词中单词长度大于2的长度调用出来</span></span><br><span class="line">        Stream.of(str.split(<span class="string">" "</span>)).filter(s -&gt; s.length() &gt; <span class="number">2</span>).map(s -&gt; s.length()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// flatMap A-&gt;B 属性是一个集合，最终得到所有的A元素中的所有B属性</span></span><br><span class="line">        <span class="comment">// intStream/longStream并不是Stream的子类，所以要使用装箱 boxed</span></span><br><span class="line">        Stream.of(str.split(<span class="string">" "</span>)).flatMap(s -&gt; s.chars().boxed()).forEach(</span><br><span class="line">                i -&gt; System.out.println((<span class="keyword">char</span>)i.intValue())</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------- start peek --------"</span>);</span><br><span class="line">        <span class="comment">// peek用于debug，是一个中间操作，和forEach是个终止操作</span></span><br><span class="line">        Stream.of(str.split(<span class="string">" "</span>)).peek(System.out::println).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------- start random --------"</span>);</span><br><span class="line">        <span class="comment">// limit的使用，主要用于无限流</span></span><br><span class="line">        <span class="keyword">new</span> Random().ints().filter(i -&gt; i &gt; <span class="number">100</span> &amp;&amp; i &lt; <span class="number">10000</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="stream流终止操作"><a href="#stream流终止操作" class="headerlink" title="stream流终止操作"></a>stream流终止操作</h3><p><img src="/images/Stream流编程/769A860A-899C-4621-9F9B-CE103A196B4B.png" alt="这里写图片描述"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"my name is 007"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用并行流</span></span><br><span class="line">        str.chars().parallel().forEach(i -&gt; System.out.println((<span class="keyword">char</span>)i));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用并行流顺序打印</span></span><br><span class="line">        str.chars().parallel().forEachOrdered(i -&gt; System.out.println((<span class="keyword">char</span>)i));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收集到list</span></span><br><span class="line">        List&lt;String&gt; list = Stream.of(str.split(<span class="string">" "</span>)).collect(Collectors.toList());</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Reduce拼接字符串</span></span><br><span class="line">        Optional&lt;String&gt; letters = Stream.of(str.split(<span class="string">" "</span>)).reduce((s1, s2) -&gt; s1 + <span class="string">"|"</span> + s2);</span><br><span class="line">        System.out.println(letters.orElse(<span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用初始化值的reduce</span></span><br><span class="line">        String reduce = Stream.of(str.split(<span class="string">" "</span>)).reduce(<span class="string">""</span>, (s1, s2) -&gt; s1 + <span class="string">"|"</span> + s2);</span><br><span class="line">        System.out.println(reduce);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用初始化值的reduce</span></span><br><span class="line">        Integer reduce1 = Stream.of(str.split(<span class="string">" "</span>)).map(String::length).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        System.out.println(reduce1);</span><br><span class="line"></span><br><span class="line">        Optional&lt;String&gt; max = Stream.of(str.split(<span class="string">" "</span>)).max(Comparator.comparingInt(String::length));</span><br><span class="line">        System.out.println(max.get());</span><br><span class="line"></span><br><span class="line">        OptionalInt first = <span class="keyword">new</span> Random().ints().findFirst();</span><br><span class="line">        System.out.println(first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 串行</span></span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">100</span>).peek(StreamDemo4::debug1).count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 并行，并行流默认使用线程池ForkJoinPool.commonPool-worker，默认大小为当前机器的cpu个数，可以使用</span></span><br><span class="line">        <span class="comment">// System.setProperty"java.util.concurrent.ForkJoinPool.common.parallelism "20");</span></span><br><span class="line">        <span class="comment">// 来设置默认线程数</span></span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">100</span>).parallel().peek(StreamDemo4::debug2).count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多次调用以最后一次为准</span></span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">100</span>).parallel().peek(StreamDemo4::debug1).sequential().peek(StreamDemo4::debug2).count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用自己的线程池，防止都是用默认线程然后导致的线程阻塞</span></span><br><span class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool(<span class="number">20</span>);</span><br><span class="line">        pool.submit(() -&gt; IntStream.range(<span class="number">0</span>, <span class="number">100</span>).parallel().peek(StreamDemo4::debug1).count());</span><br><span class="line">        pool.shutdown();</span><br><span class="line">        pool.wait();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debug1</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" debug1 "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debug2</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.err.println(Thread.currentThread().getName() + <span class="string">" debug2 "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="收集器"><a href="#收集器" class="headerlink" title="收集器"></a>收集器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan1"</span>, <span class="number">11</span>, Sex.MALE, Gender.ONE),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan2"</span>, <span class="number">12</span>, Sex.FEMAlE, Gender.TWO),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan3"</span>, <span class="number">13</span>, Sex.MALE, Gender.THREE),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan4"</span>, <span class="number">14</span>, Sex.FEMAlE, Gender.ONE),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan5"</span>, <span class="number">15</span>, Sex.MALE, Gender.TWO),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan6"</span>, <span class="number">16</span>, Sex.FEMAlE, Gender.THREE),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"zhangsan7"</span>, <span class="number">17</span>, Sex.MALE, Gender.ONE)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以使用多种方式创建多种的集合</span></span><br><span class="line">        List&lt;Integer&gt; ages = list.stream().map(Student::getAge).collect(Collectors.toList());</span><br><span class="line">        Set&lt;Integer&gt; agesSet1 = list.stream().map(Student::getAge).collect(Collectors.toSet());</span><br><span class="line">        Set&lt;Integer&gt; agesSet2 = list.stream().map(Student::getAge).collect(Collectors.toCollection(TreeSet::<span class="keyword">new</span>));</span><br><span class="line">        System.out.println(<span class="string">"所有学生的年龄是："</span> + ages);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取学生的年龄汇总信息</span></span><br><span class="line">        IntSummaryStatistics studentList = list.stream().collect(Collectors.summarizingInt(Student::getAge));</span><br><span class="line">        System.out.println(<span class="string">"学生的汇总信息是："</span> + studentList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分块</span></span><br><span class="line">        Map&lt;Boolean, List&lt;Student&gt;&gt; sex = list.stream().collect(Collectors.partitioningBy(s -&gt; s.getSex() == Sex.MALE));</span><br><span class="line">        System.out.println(<span class="string">"按照性别分块的结果是："</span> + sex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分组</span></span><br><span class="line">        Map&lt;Gender, List&lt;Student&gt;&gt; groups = list.stream().collect(Collectors.groupingBy(Student::getGender));</span><br><span class="line">        System.out.println(<span class="string">"按照班级分组的结果是："</span> + groups);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取每个班级的人数</span></span><br><span class="line">        Map&lt;Gender, Long&gt; nums = list.stream().collect(Collectors.groupingBy(Student::getGender, Collectors.counting()));</span><br><span class="line">        System.out.println(<span class="string">"每个班级的人数结果是："</span> + nums);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Sex sex;</span><br><span class="line">    <span class="keyword">private</span> Gender gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Integer age, Sex sex, Gender gender)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sex <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gender <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Gender gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", sex="</span> + sex +</span><br><span class="line">                <span class="string">", gender="</span> + gender +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Sex&#123;</span><br><span class="line">    MALE, FEMAlE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Gender&#123;</span><br><span class="line">    ONE, TWO, THREE, FOUR, FIVE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Stream运行机制"><a href="#Stream运行机制" class="headerlink" title="Stream运行机制"></a>Stream运行机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证Stream运行机制</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.所有操作都是链式调用，一个元素之迭代一次</span></span><br><span class="line"><span class="comment"> * 2.每一个中间操作返回一个新的流，流里面有一个属性sourceStage执行同一个地方，就是Head</span></span><br><span class="line"><span class="comment"> * 3.Head -&gt; nextStage -&gt; nextStage -&gt; ... -&gt; null</span></span><br><span class="line"><span class="comment"> * 4.如果多个无状态操作与有状态操作交错存在，，则每个有状态操作会把之前的无状态操作段单独处理</span></span><br><span class="line"><span class="comment"> * 5.并行状态下，有状态的中间操作不一定能并行操作</span></span><br><span class="line"><span class="comment"> * 6.parallel()操作和sequential()都是中间操作（也是但会stream）但是他们不创建流，他们只修改我们的Head的并行标志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Stream.generate(() -&gt; random.nextInt())</span><br><span class="line">                <span class="comment">//产生五百个数据</span></span><br><span class="line">                .limit(<span class="number">500</span>)</span><br><span class="line">                <span class="comment">// 第一个无状态操作</span></span><br><span class="line">                .peek(s -&gt; print(<span class="string">"peek:"</span> + s))</span><br><span class="line">                <span class="comment">// 第二个无状态操作</span></span><br><span class="line">                .filter(s -&gt; &#123;</span><br><span class="line">                   print(<span class="string">"filter:"</span> + s);</span><br><span class="line">                   <span class="keyword">return</span> s &gt; <span class="number">10000</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 终止操作</span></span><br><span class="line">                .count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK8 </tag>
            
            <tag> Stream流编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda表达式</title>
      <link href="/2019/08/18/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/08/18/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="什么是lambda表达式"><a href="#什么是lambda表达式" class="headerlink" title="什么是lambda表达式"></a>什么是lambda表达式</h3><p>“Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包（注意和数学传统意义上的不同）。</p><h5 id="下面是我们常见的命令式编程"><a href="#下面是我们常见的命令式编程" class="headerlink" title="下面是我们常见的命令式编程"></a>下面是我们常见的命令式编程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"start"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="下面这个就是函数式编程"><a href="#下面这个就是函数式编程" class="headerlink" title="下面这个就是函数式编程"></a>下面这个就是函数式编程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"start"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由此可见我们可以对一些接口代码进行简化，但是是什么样的接口都可以使用lambda表达式吗？显然不是的。接口必须满足接口里面只有一个要实现的方法。我们可以在想要实现函数式编程的接口添加注解<code>@FunctionalInterface</code>，进行编译期间的校验，当接口不满足我们的条件的时候，将会有错误信息。</p></blockquote><hr><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>在上面我们说了接口要实现只有一个要实现的方法，并不是说接口只能有一个方法，这个时候我们可以使用比如像默认方法这样的方式来解决<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterfaceTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is default method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p><img src="/images/lambda表达式/AD98F8C6-742B-46F0-9498-0301BBE9103D.png" alt="这里写图片描述"></p><hr><h3 id="静态方法-动态方法的引用"><a href="#静态方法-动态方法的引用" class="headerlink" title="静态方法 动态方法的引用"></a>静态方法 动态方法的引用</h3><p>下面是对于一些常见方法引用的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法引用</span></span><br><span class="line">        Consumer&lt;String&gt; consumer1 = System.out::println;</span><br><span class="line">        consumer1.accept(<span class="string">"接受的"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法的引用</span></span><br><span class="line">        Consumer&lt;Dog&gt; consumer2 = Dog::bark;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        consumer2.accept(dog);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非静态方法引用，使用对象实例的方法引用</span></span><br><span class="line"><span class="comment">//        Function&lt;Integer, Integer&gt; function = dog::eat;</span></span><br><span class="line"><span class="comment">//        UnaryOperator&lt;Integer&gt; function = dog::eat;</span></span><br><span class="line"><span class="comment">//        System.out.println("还剩下" + function.apply(2) + "斤");</span></span><br><span class="line"></span><br><span class="line">        IntUnaryOperator function = dog::eat;</span><br><span class="line">        System.out.println(<span class="string">"还剩下"</span> + function.applyAsInt(<span class="number">2</span>) + <span class="string">"斤"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用类名来引用非静态方法</span></span><br><span class="line">        BiFunction&lt;Dog, Integer, Integer&gt; eatFunction = Dog::eat;</span><br><span class="line">        System.out.println(<span class="string">"还剩下"</span> + eatFunction.apply(dog, <span class="number">2</span>) + <span class="string">"斤"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数的方法引用</span></span><br><span class="line">        Supplier&lt;Dog&gt; dogSupplier = Dog::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(<span class="string">"创建了新对象："</span> + dogSupplier.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 带参数的构造方法的引用</span></span><br><span class="line">        Function&lt;String, Dog&gt; dogFunction = Dog::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(<span class="string">"创建了新对象："</span> + dogFunction.apply(<span class="string">"旺财"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"dog"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer food = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">(Dog dog)</span></span>&#123;</span><br><span class="line">        System.out.println(dog + <span class="string">"叫了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eat</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃了"</span> + i + <span class="string">"斤"</span>);</span><br><span class="line">        <span class="keyword">this</span>.food -= i;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.food;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dog&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="级联和柯"><a href="#级联和柯" class="headerlink" title="级联和柯"></a>级联和柯</h3><ul><li>柯里化：把多个参数的函数转换成只有一个参数的函数 </li><li>柯里化的目的：函数标准化 </li><li>高阶函数：返回函数的函数</li></ul><p>下面是对级联和柯里化的一些代码实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurryDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 级联表达式</span></span><br><span class="line">        Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; fun1 = x -&gt; y -&gt; x + y;</span><br><span class="line">        System.out.println(fun1.apply(<span class="number">1</span>).apply(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        Function&lt;Integer, Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt;&gt; fun2 = x -&gt; y -&gt; z -&gt; x + y + z;</span><br><span class="line">        System.out.println(fun2.apply(<span class="number">1</span>).apply(<span class="number">2</span>).apply(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        Function f = fun2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f <span class="keyword">instanceof</span> Function)&#123;</span><br><span class="line">                Object obj = f.apply(i);</span><br><span class="line">                <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Function)&#123;</span><br><span class="line">                    f = (Function) obj;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"调用结束：结果为"</span> + obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk8 </tag>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
            <tag> 级联 </tag>
            
            <tag> 柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消费端限流、重回队列、TTL以及死信队列</title>
      <link href="/2019/08/16/%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81%E3%80%81%E9%87%8D%E5%9B%9E%E9%98%9F%E5%88%97%E3%80%81TTL%E4%BB%A5%E5%8F%8A%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/"/>
      <url>/2019/08/16/%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81%E3%80%81%E9%87%8D%E5%9B%9E%E9%98%9F%E5%88%97%E3%80%81TTL%E4%BB%A5%E5%8F%8A%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="什么是消费端的限流"><a href="#什么是消费端的限流" class="headerlink" title="什么是消费端的限流?"></a>什么是消费端的限流?</h3><p>假设一个场景，首先，我们Rabbitmq服务器有上万条未处理的消息，我们随便打开一个消费者客户端，会出现下面情况:<br>巨量的消息瞬间全部推送过来，但是我们单个客户端无法同时处理这么多数据!</p><p>RabbitMQ提供了一种qos (服务质量保证)功能，即在非自动确认消息的前提下，如果一定数目的消息(通过基于consume或者channel设置Qos的值)未被确认前，不进行消费新的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BasicQos</span><span class="params">(uint prefetchSize, ushort prefetchCount, bool global)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>prefetchSize:0</li><li>prefetchCount:会告诉RabbitMQ不要同时给一个消费者推送多于N个消息，即一旦有N个消息还没有ack,则该consumer将block掉，直到有消息ack</li><li>global: true\false 是否将上面设置应用于channel,简单点说，就是上面限制是channel级别的还是consumer级别</li></ul><p>注：prefetchSize和global这两项，rabbitmq没有实现，暂且不研究prefetch count在no ask= false的情况下生效，即在自动应答的情况下这两个值是不生效的。并且千万不要使用AutoACK。一定要使用手动ack</p><hr><h3 id="消费端的手工ACK和NACK"><a href="#消费端的手工ACK和NACK" class="headerlink" title="消费端的手工ACK和NACK"></a>消费端的手工ACK和NACK</h3><p>消费端进行消费的时候，如果由于业务异常我们可以进行日志的记录，然后进行补偿!<br>如果由于服务器宕机等严重问题,那我们就需要手工进行ACK保障，消费端消费成功!</p><hr><h3 id="消费端的重回队列"><a href="#消费端的重回队列" class="headerlink" title="消费端的重回队列"></a>消费端的重回队列</h3><p>消费端重回队列是为了对没有处理成功的消息，把消息重新会递给Broker!<br>一般我们在实际应用中，都会关闭重回队列，也就是设置为False。</p><hr><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><ul><li>TTL是Time To Live的缩写，也就是生存时间</li><li>RabbitMQ 支持消息的过期时间，在消息发送时可以进行指定</li><li>RabbitMQ 支持队列的过期时间，从消息入队列开始计算，只要超过了队列的超时时间配置，那么消息会自动的清除</li></ul><hr><h3 id="死信队列-DLX-Dead-Letter-Exchange"><a href="#死信队列-DLX-Dead-Letter-Exchange" class="headerlink" title="死信队列 DLX, Dead-Letter-Exchange"></a>死信队列 <code>DLX, Dead-Letter-Exchange</code></h3><p>利用DLX,当消息在一个队列中变成死信(dead message)之后,它能被重新publish到另一个Exchange, 这个Exchange就是DLX</p><ul><li>DLX也是一个正常的Exchange,和一-般的Exchange没有区别，它能在任何的队列上被指定，实际上就是设置某个队列的属性。</li><li>当这个队列中有死信时，RabbitMQ就会 自动的将这个消息重新发布到设置的Exchange_上去，进而被路由到另一个队列。</li><li>可以监听这个队列中消息做相应的处理，这个特性可以弥补RabbitMQ3.0以前支持的immediate参数的功能。</li></ul><p>消息变成死信有以下几种情况：</p><ul><li>消息被拒绝(basic.reject/basic.nack) 并且requeue=false</li><li>消息TTL过期</li><li>队列达到最大长度</li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ生产端可靠性投递</title>
      <link href="/2019/08/16/RabbitMQ%E7%94%9F%E4%BA%A7%E7%AB%AF%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/"/>
      <url>/2019/08/16/RabbitMQ%E7%94%9F%E4%BA%A7%E7%AB%AF%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/</url>
      
        <content type="html"><![CDATA[<hr><p>对于消息的生产端的可靠投递，我们常见的解决方案有两种<br>1.消息落库，对消息状态进行打标<br>2.消息的延迟投递，做二次确认，回调检查</p><hr><h3 id="1、消息落库，对消息状态进行打标"><a href="#1、消息落库，对消息状态进行打标" class="headerlink" title="1、消息落库，对消息状态进行打标"></a>1、消息落库，对消息状态进行打标</h3><p><img src="/images/RabbitMQ生产端可靠性投递/28408B6A-9AC4-48A3-BE4A-F5F88ACF193D.png" alt="这里写图片描述"></p><p>上面图片为消息落库，对消息状态进行打标的常见步骤（状态0表示已发送，1表示已消费，2表示失败）</p><ol><li>首先将将要发送的数据持久化到BIZ数据库中，并且创建一个存储着消息状态的数据持久化到MSG数据库中。</li><li>将数据发送至MQ。</li><li>消费者接收到数据，对数据进行消费然后将MSG在数据库中的状态修改为1。</li><li>在此之外，我们还存在一个分布式定时任务线程，用于定时查看是否有超时失败任务，当发现MSG数据库中存在着状态为0的数据则对数据进行重发，当数据多次重发失败后则将消息状态修改为2。</li></ol><p>由于这个方式需要进行两个数据的数据落库容易产生数据库的性能瓶颈，所以我们更多的使用的是下一个可靠性投递的解决方式</p><hr><h3 id="消息的延迟投递，做二次确认，回调检查"><a href="#消息的延迟投递，做二次确认，回调检查" class="headerlink" title="消息的延迟投递，做二次确认，回调检查"></a>消息的延迟投递，做二次确认，回调检查</h3><p><img src="/images/RabbitMQ生产端可靠性投递/18156C70-C0B3-4AFB-AC6B-694A78779678.png" alt="这里写图片描述"></p><p>上面图片时延迟投递的流程（upstream上游服务，downstream下游服务（消费端））</p><ol><li>首先将需要发送的数据持久化到BIZ数据库。</li><li>将数据发送至MQ中。</li><li>消费者消费数据，并新建一个消费成功的消息进入MQ。</li><li>Callback服务获取到消费者消费成功的消息后将消息持久化到MSG数据库。</li><li>生产者将延迟投递消息发送至MQ。</li><li>Callback获取到延迟投递消息后进入MSG数据库查询是否投递成功，如果投递失败则进行失败补偿，这是向上游服务发送消息，让上游服务的查询BIZ数据库然后进行消息重发。</li></ol>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（转载）如何保证消息的可靠性传输</title>
      <link href="/2019/08/16/%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BC%A0%E8%BE%93/"/>
      <url>/2019/08/16/%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BC%A0%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<hr><p>原文链接：<a href="https://doocs.github.io/advanced-java/#/" target="_blank" rel="noopener">https://doocs.github.io/advanced-java/#/</a></p><hr><h3 id="为什么需要保证数据的可靠性传输？"><a href="#为什么需要保证数据的可靠性传输？" class="headerlink" title="为什么需要保证数据的可靠性传输？"></a>为什么需要保证数据的可靠性传输？</h3><p>如果用 MQ 来传递非常核心的消息，比如说计费、扣费的一些消息，那必须确保这个 MQ 传递过程中绝对不会把计费消息给弄丢。我们常见的数据的丢失问题，可能出现在生产者、MQ、消费者中，本文主要从RabbitMQ的角度进行分析。如果向看Kafka相关的总结，请进入原博文查找</p><p><img src="/images/（转载）如何保证消息的可靠性传输/5014C307-7863-4589-96F5-C3EC60337E58.png" alt="这里写图片描述"></p><hr><h3 id="生产者弄丢了数据"><a href="#生产者弄丢了数据" class="headerlink" title="生产者弄丢了数据"></a>生产者弄丢了数据</h3><p>生产者将数据发送到 RabbitMQ 的时候，可能数据就在半路给搞丢了，因为网络问题啥的，都有可能。此时可以选择用 RabbitMQ 提供的事务功能，就是生产者发送数据之前开启 RabbitMQ 事务channel.txSelect，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务channel.txRollback，然后重试发送消息；如果收到了消息，那么可以提交事务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">channel.txCommit。<span class="comment">// 开启事务</span></span><br><span class="line">channel.txSelect</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 这里发送消息</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    channel.txRollback</span><br><span class="line">    <span class="comment">// 这里再次重发这条消息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line">channel.txCommit</span><br></pre></td></tr></table></figure></p><p>但是问题是，RabbitMQ 事务机制（同步）一搞，基本上吞吐量会下来，因为太耗性能。<br>所以一般来说，如果你要确保说写 RabbitMQ 的消息别丢，可以开启 confirm 模式，在生产者那里设置开启 confirm 模式之后，你每次写的消息都会分配一个唯一的 id，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 ack 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 nack 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p><blockquote><p>事务机制和 confirm 机制最大的不同在于，事务机制是同步的，你提交一个事务之后会阻塞在那儿，但是 confirm 机制是异步的，你发送个消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会异步回调你的一个接口通知你这个消息接收到了。<br>所以一般在生产者这块避免数据丢失，都是用 confirm 机制的。</p></blockquote><hr><h3 id="RabbitMQ-弄丢了数据"><a href="#RabbitMQ-弄丢了数据" class="headerlink" title="RabbitMQ 弄丢了数据"></a>RabbitMQ 弄丢了数据</h3><blockquote><p>RabbitMQ 自己弄丢了数据，这个你必须开启 RabbitMQ 的持久化，就是消息写入之后会持久化到磁盘，哪怕是 RabbitMQ 自己挂了，恢复之后会自动读取之前存储的数据，一般数据不会丢。除非极其罕见的是，RabbitMQ 还没持久化，自己就挂了，可能导致少量数据丢失，但是这个概率较小。</p></blockquote><p>设置持久化有两个步骤：</p><ul><li>创建 queue 的时候将其设置为持久化,这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</li><li>第二个是发送消息的时候将消息的 deliveryMode 设置为 2，delivery_mode=2指明message为持久的就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</li></ul><p>必须要同时设置这两个持久化才行，RabbitMQ 哪怕是挂了，再次重启，也会从磁盘上重启恢复 queue，恢复这个 queue 里的数据。<br>注意，哪怕是你给 RabbitMQ 开启了持久化机制，也有一种可能，就是 <strong>这个消息写到了 RabbitMQ 中，但是还没来得及持久化到磁盘上，结果不巧，此时 RabbitMQ 挂了，就会导致内存里的一点点数据丢失。</strong><br>在正确存入RabbitMQ之后，还需要有一段时间（这个时间很短，但不可忽视）才能存入磁盘之中，RabbitMQ并不是为每条消息都做fsync的处理，可能仅仅保存到cache中而不是物理磁盘上，在这段时间内RabbitMQ broker发生crash, 消息保存到cache但是还没来得及落盘，那么这些消息将会丢失。那么这个怎么解决呢？</p><ul><li>首先可以引入RabbitMQ的mirrored-queue即镜像队列，这个相当于配置了副本，当master在此特殊时间内crash掉，可以自动切换到slave，这样有效的保障了HA, 除非整个集群都挂掉。</li><li>持久化可以跟生产者那边的 confirm 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 ack了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 ack，你也是可以自己重发的。</li></ul><hr><h3 id="消费端弄丢了数据"><a href="#消费端弄丢了数据" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h3><blockquote><p>主要是因为你消费的时候，刚消费到，还没处理，结果进程挂了，比如重启了，那么就尴尬了，RabbitMQ 认为你都消费了，这数据就丢了。<br>这个时候得用 RabbitMQ 提供的 ack 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 ack，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 ack 一把。这样的话，如果你还没处理完，不就没有 ack 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。</p></blockquote><p><img src="/images/（转载）如何保证消息的可靠性传输/21227003-A8DA-4F0D-9C12-72E7B8CA74E4.png" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何保证消息消费的幂等性</title>
      <link href="/2019/08/16/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E7%9A%84%E5%B9%82%E7%AD%89%E6%80%A7/"/>
      <url>/2019/08/16/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E7%9A%84%E5%B9%82%E7%AD%89%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<hr><hr><h3 id="幂等性概念及业界主流解决方案"><a href="#幂等性概念及业界主流解决方案" class="headerlink" title="幂等性概念及业界主流解决方案"></a>幂等性概念及业界主流解决方案</h3><p>幂等性：就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。举个最简单的例子，那就是支付，用户购买商品使用约支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额返发现多扣钱了，流水记录也变成了两条．．．</p><hr><p>业界主流的幂等性操作：</p><h4 id="唯一ID-指纹码机制，利用数据库主键去重"><a href="#唯一ID-指纹码机制，利用数据库主键去重" class="headerlink" title="唯一ID + 指纹码机制，利用数据库主键去重"></a>唯一ID + 指纹码机制，利用数据库主键去重</h4><p>SELECT COUNT(1) FROM T_ORDER WHERE ID = 唯一ID +指纹码<br>好处:实现简单<br>坏处:高并发下有数据库写入的性能瓶颈<br>解决方案:跟进ID进行分库分表进行算法路由</p><hr><h4 id="使用Redis的原子特性去重"><a href="#使用Redis的原子特性去重" class="headerlink" title="使用Redis的原子特性去重"></a>使用Redis的原子特性去重</h4><p>使用Redis进行幂等，需要考虑的问题<br>第一:我们是否要进行数据落库,如果落库的话，关键解决的问题是数据库和缓存如何做到原子性?<br>第二:如果不进行落库，那么都存储到缓存中，如何设置定时同步的策略?</p><hr><h3 id="常见解决思路"><a href="#常见解决思路" class="headerlink" title="常见解决思路"></a>常见解决思路</h3><ul><li>比如你拿个数据要写库，你先根据主键查一下，如果这数据都有了，你就别插入了，update 一下好吧。</li><li>比如你是写 Redis，那没问题了，反正每次都是 set，天然幂等性。</li><li>比如你不是上面两个场景，那做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加一个全局唯一的 id，类似订单 id 之类的东西，然后你这里消费到了之后，先根据这个 id 去比如 Redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 Redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</li><li>比如基于数据库的唯一键来保证重复数据不会重复插入多条。因为有唯一键约束了，重复数据插入只会报错，不会导致数据库中出现脏数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（转载）如何保证消息队列的高可用？</title>
      <link href="/2019/08/16/%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%EF%BC%9F/"/>
      <url>/2019/08/16/%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<hr><p>原文链接：<a href="https://doocs.github.io/advanced-java/#/" target="_blank" rel="noopener">https://doocs.github.io/advanced-java/#/</a></p><hr><h3 id="RabbitMQ-的高可用性"><a href="#RabbitMQ-的高可用性" class="headerlink" title="RabbitMQ 的高可用性"></a>RabbitMQ 的高可用性</h3><p>RabbitMQ 是比较有代表性的，因为是基于主从（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。</p><p>RabbitMQ 有三种模式：</p><ul><li>单机模式</li><li>普通集群模式</li><li>镜像集群模式</li></ul><hr><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><p>单机模式，就是 Demo 级别的，一般就是你本地启动了玩玩儿的😄，没人生产用单机模式。</p><hr><h3 id="普通集群模式（无高可用性）"><a href="#普通集群模式（无高可用性）" class="headerlink" title="普通集群模式（无高可用性）"></a>普通集群模式（无高可用性）</h3><p>普通集群模式，意思就是在多台机器上启动多个 RabbitMQ 实例，每个机器启动一个。你创建的 queue，只会放在一个 RabbitMQ 实例上，但是每个实例都同步 queue 的元数据（元数据可以认为是 queue 的一些配置信息，通过元数据，可以找到 queue 所在实例）。你消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从 queue 所在实例上拉取数据过来。</p><p><img src="/images/（转载）如何保证消息队列的高可用？/D8CDABD6-25FA-4123-822C-C5F20CE05191.png" alt="这里写图片描述"></p><p>这种方式确实很麻烦，也不怎么好，没做到所谓的分布式，就是个普通集群。因为这导致你要么消费者每次随机连接一个实例然后拉取数据，要么固定连接那个 queue 所在实例消费数据，前者有数据拉取的开销，后者导致单实例性能瓶颈。<br>而且如果那个放 queue 的实例宕机了，会导致接下来其他实例就无法从那个实例拉取，如果你开启了消息持久化，让 RabbitMQ 落地存储消息的话，消息不一定会丢，得等这个实例恢复了，然后才可以继续从这个 queue 拉取数据。<br>所以这个事儿就比较尴尬了，这就没有什么所谓的高可用性，这方案主要是提高吞吐量的，就是说让集群中多个节点来服务某个 queue 的读写操作。</p><hr><h3 id="镜像集群模式（高可用性）"><a href="#镜像集群模式（高可用性）" class="headerlink" title="镜像集群模式（高可用性）"></a>镜像集群模式（高可用性）</h3><p>这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会存在于多个实例上，就是说，每个 RabbitMQ 节点都有这个 queue 的一个完整镜像，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把消息同步到多个实例的 queue 上。</p><p><img src="/images/（转载）如何保证消息队列的高可用？/571B4332-8BA0-45D8-B5D1-D2C418D1E018.png" alt="这里写图片描述"></p><p>那么如何开启这个镜像集群模式呢？其实很简单，RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是镜像集群模式的策略，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。</p><p>这样的话，好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！第二，这么玩儿，不是分布式的，就没有扩展性可言了，如果某个 queue 负载很重，你加机器，新增的机器也包含了这个 queue 的所有数据，并没有办法线性扩展你的 queue。你想，如果这个 queue 的数据量很大，大到这个机器上的容量无法容纳了，此时该怎么办呢？</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（转载）为什么使用消息队列？</title>
      <link href="/2019/08/16/%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%9F/"/>
      <url>/2019/08/16/%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<hr><p>原链接：<a href="https://doocs.github.io/advanced-java/#/" target="_blank" rel="noopener">https://doocs.github.io/advanced-java/#/</a></p><hr><h3 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h3><p>当系统中出现“生产“和“消费“的速度或稳定性等因素不一致的时候，就需要消息队列，作为抽象层，弥合双方的差异。“ 消息 ”是在两台计算机间传送的数据单位。消息可以非常简单，例如只包含文本字符串；也可以更复杂，可能包含嵌入对象。消息被发送到队列中，“ 消息队列 ”是在消息的传输过程中保存消息的容器 。</p><ul><li>提高系统响应速度使用了消息队列，生产者一方，把消息往队列里一扔，就可以立马返回，响应用户了。无需等待处理结果。处理结果可以让用户稍后自己来取，如医院取化验单。也可以让生产者订阅（如：留下手机号码或让生产者实现listener接口、加入监听队列），有结果了通知。获得约定将结果放在某处，无需通知。</li><li>提高系统稳定性考虑电商系统下订单，发送数据给生产系统的情况。电商系统和生产系统之间的网络有可能掉线，生产系统可能会因维护等原因暂停服务。如果不使用消息队列，电商系统数据发布出去，顾客无法下单，影响业务开展。两个系统间不应该如此紧密耦合。应该通过消息队列解耦。同时让系统更健壮、稳定。</li><li>简而言之，主要是为了解决下面这个三个问题<ul><li>异步化</li><li>解耦</li><li>消除峰值</li></ul></li></ul><hr><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>看这么个场景。A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃……</p><p><img src="/images/（转载）为什么使用消息队列？/8B4A7A42-C337-4F93-81CC-B282D661F8A3.png" alt="这里写图片描述"></p><p>在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？头发都白了啊！</p><p>如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。</p><p><img src="/images/（转载）为什么使用消息队列？/F971F97E-ECE9-4447-A985-3A38BD33F6C9.png" alt="这里写图片描述"></p><p>总结：通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。</p><p>面试技巧：你需要去考虑一下你负责的系统中是否有类似的场景，就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用 MQ 给它异步化解耦，也是可以的，你就需要去考虑在你的项目里，是不是可以运用这个 MQ 去进行系统的解耦。在简历中体现出来这块东西，用 MQ 作解耦。</p><hr><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>再来看一个场景，A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。</p><p><img src="/images/（转载）为什么使用消息队列？/4424CC54-C410-4284-9FB7-1C09955234FF.png" alt="这里写图片描述"></p><p>一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。如果使用 MQ，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了，爽！网站做得真好，真快！</p><p><img src="/images/（转载）为什么使用消息队列？/482A6142-EE99-4CFA-831B-054EF53C5F87.png" alt="这里写图片描述"></p><hr><h3 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h3><p>每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。</p><p><img src="/images/（转载）为什么使用消息队列？/F6E805CC-884F-4FC6-B55D-A5A52601CEE8.png" alt="这里写图片描述"></p><p>如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。</p><p><img src="/images/（转载）为什么使用消息队列？/CB615E1B-7F7A-4389-9816-BC61CD0649ED.png" alt="这里写图片描述"></p><p>这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。</p><hr><h3 id="消息队列有什么优缺点"><a href="#消息队列有什么优缺点" class="headerlink" title="消息队列有什么优缺点"></a>消息队列有什么优缺点</h3><p>优点上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰。<br>缺点有以下几个：</p><ul><li>系统可用性降低：系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，人 ABCD 四个系统好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整，MQ 一挂，整套系统崩溃的，你不就完了？如何保证消息队列的高可用，可以点击这里查看。<br>-系统复杂度提高：硬生生加个 MQ 进来，你怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已。</li><li>一致性问题：A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</li></ul><p>所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。</p><hr><h3 id="Kafka、ActiveMQ、RabbitMQ、RocketMQ-有什么优缺点？"><a href="#Kafka、ActiveMQ、RabbitMQ、RocketMQ-有什么优缺点？" class="headerlink" title="Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？"></a>Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？</h3><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>万级，比 RocketMQ、Kafka 低一个数量级</td><td>同 ActiveMQ</td><td>10 万级，支撑高吞吐</td><td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td>topic 数量对吞吐量的影响</td><td></td><td></td><td>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td><td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td></tr><tr><td>时效性</td><td>ms 级</td><td>微秒级，这是 RabbitMQ 的一大特点，延迟最低</td><td>ms 级</td><td>延迟在 ms 级以内</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用</td><td>同 ActiveMQ</td><td>非常高，分布式架构</td><td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失数据</td><td>基本不丢</td><td>经过参数优化配置，可以做到 0 丢失</td><td>同 RocketMQ</td></tr><tr><td>功能支持</td><td>MQ 领域的功能极其完备</td><td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td><td>MQ 功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td></tr></tbody></table><p>综上，各种对比之后，有如下建议：<br>一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了；<br>后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；<br>不过现在确实越来越多的公司会去用 RocketMQ，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 Apache，但 GitHub 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。<br>所以中小型公司，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；大型公司，基础架构研发实力较强，用 RocketMQ 是很好的选择。<br>如果是大数据领域的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成MapStruct</title>
      <link href="/2019/08/11/Springboot%E9%9B%86%E6%88%90MapStruct/"/>
      <url>/2019/08/11/Springboot%E9%9B%86%E6%88%90MapStruct/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、什么是mapstruct"><a href="#一、什么是mapstruct" class="headerlink" title="一、什么是mapstruct"></a>一、什么是mapstruct</h3><p>MapStruct是一个代码生成器的工具类，简化了不同的Java Bean之间映射的处理，所以映射指的就是从一个实体变化成一个实体。在实际项目中，我们经常会将PO转DTO、DTO转PO等一些实体间的转换。在转换时大部分属性都是相同的，只有少部分的不同，这时我们可以通过mapStruct的一些注解来匹配不同属性，可以让不同实体之间的转换变的简单。<br>MapStruct官网地址： <a href="http://mapstruct.org/" target="_blank" rel="noopener">http://mapstruct.org/</a></p><hr><h3 id="二、添加依赖"><a href="#二、添加依赖" class="headerlink" title="二、添加依赖"></a>二、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MapStruct依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct-jdk8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-jdk8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct-processor --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="三、mapstruct实体间的转换"><a href="#三、mapstruct实体间的转换" class="headerlink" title="三、mapstruct实体间的转换"></a>三、mapstruct实体间的转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Info.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">    <span class="comment">//constructor, getters, setters etc.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InfoDto.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoDto</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer value;</span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="comment">//constructor, getters, setters etc.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//constructor, getters, setters etc.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="四、mapper接口"><a href="#四、mapper接口" class="headerlink" title="四、mapper接口"></a>四、mapper接口</h3><p>要生成一个PeopleDTO与PeopleEntity对象相互转换的映射器，我们需要定义一个mapper接口。像这两个实体类有些属性不一样时，我们可以通过@Mapping注解来进行转换. </p><ul><li>@Mapper注解标记这个接口作为一个映射接口，并且是编译时MapStruct处理器的入口。</li><li>@Mapping解决源对象和目标对象中，属性名字不同的情况。</li><li>Mappers.getMapper自动生成的接口的实现可以通过Mapper的class对象获取,从而让客户端可以访问Mapper接口的实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InfoMapper</span> </span>&#123;</span><br><span class="line">    PeopleMapper INSTANCE = Mappers.getMapper(InfoMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PO转DTO</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> info PO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"value"</span>, source = <span class="string">"score"</span>)</span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"user.userId"</span>, source = <span class="string">"userId"</span>)</span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"user.email"</span>, source = <span class="string">"email"</span>)</span><br><span class="line">    <span class="function">InfoDTO <span class="title">entityToDTO</span><span class="params">(Info info)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DTO转PO</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> infoDTO DTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity    PO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"score"</span>, source = <span class="string">"value"</span>)</span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"userId"</span>, source = <span class="string">"user.userId"</span>)</span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"email"</span>, source = <span class="string">"user.email"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateInfoFromDto</span><span class="params">(InfoDTO InfoDTO, @MappingTarget Info info)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当运行是将会自动编译我们的InfoMapper.java</p><p>下面是我在学习时写的Mapper文件以及编译后的一个文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span>(componentModel = <span class="string">"spring"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeamMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">TeamVo <span class="title">poToTeamVo</span><span class="params">(TeamPo teamPo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Team <span class="title">poToTeamDo</span><span class="params">(TeamPo teamPo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;TeamVo&gt; <span class="title">poListToVoList</span><span class="params">(List&lt;TeamPo&gt; teamPoList)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Generated</span>(</span><br><span class="line">    value = <span class="string">"org.mapstruct.ap.MappingProcessor"</span>,</span><br><span class="line">    date = <span class="string">"2019-08-08T13:30:54+0800"</span>,</span><br><span class="line">    comments = <span class="string">"version: 1.0.0.Final, compiler: javac, environment: Java 1.8.0_211 (Oracle Corporation)"</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamMapperImpl</span> <span class="keyword">implements</span> <span class="title">TeamMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TeamVo <span class="title">poToTeamVo</span><span class="params">(TeamPo teamPo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( teamPo == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TeamVo teamVo = <span class="keyword">new</span> TeamVo();</span><br><span class="line"></span><br><span class="line">        teamVo.setId( teamPo.getId() );</span><br><span class="line">        teamVo.setName( teamPo.getName() );</span><br><span class="line">        teamVo.setDepartmentId( teamPo.getDepartmentId() );</span><br><span class="line">        teamVo.setDepartmentName( teamPo.getDepartmentName() );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> teamVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Team <span class="title">poToTeamDo</span><span class="params">(TeamPo teamPo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( teamPo == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Team team = <span class="keyword">new</span> Team();</span><br><span class="line"></span><br><span class="line">        team.setId( teamPo.getId() );</span><br><span class="line">        team.setName( teamPo.getName() );</span><br><span class="line">        team.setDepartmentId( teamPo.getDepartmentId() );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> team;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TeamVo&gt; <span class="title">poListToVoList</span><span class="params">(List&lt;TeamPo&gt; teamPoList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( teamPoList == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;TeamVo&gt; list = <span class="keyword">new</span> ArrayList&lt;TeamVo&gt;();</span><br><span class="line">        <span class="keyword">for</span> ( TeamPo teamPo : teamPoList ) &#123;</span><br><span class="line">            list.add( poToTeamVo( teamPo ) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="五、注意"><a href="#五、注意" class="headerlink" title="五、注意"></a>五、注意</h3><p>1、 由于编译可能不及时的原因，所以一开始遇到了修改了po或者dto的一个类，但是mapper没有及时的重新编译，所以dto，po，vo有更改的话，建议先clean一下之后重新编译然后运行</p><p>2、 在使用mapstruct + lombok时要注意maven-comiler-plugin插件版本一定要在3.6.0以上，若版本低，则会报找不到属性的错误<br>下面是一个依赖模板<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.suiwo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gradingdog<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>gradingdog<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.mapstruct.version</span>&gt;</span>1.2.0.Beta2<span class="tag">&lt;/<span class="name">org.mapstruct.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.projectlombok.version</span>&gt;</span>1.16.14<span class="tag">&lt;/<span class="name">org.projectlombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MapStruct依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> <span class="comment">&lt;!-- use mapstruct-jdk8 for Java 8 or higher --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-jdk8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.projectlombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span> <span class="comment">&lt;!-- or higher, depending on your project --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span> <span class="comment">&lt;!-- or higher, depending on your project --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.projectlombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-Amapstruct.suppressGeneratorTimestamp=true<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-Amapstruct.defaultComponentModel=spring<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> MapStruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写Spring框架</title>
      <link href="/2019/08/09/%E6%89%8B%E5%86%99Spring%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/08/09/%E6%89%8B%E5%86%99Spring%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<hr><p>本文是对spring常见的如ioc等功能的手写实现</p><p>本文的代码的链接在下面<br>项目链接：<a href="https://github.com/ZhangJia97/Spring-demo" target="_blank" rel="noopener">https://github.com/ZhangJia97/Spring-demo</a></p><p>下面这个项目链接是对上面这个手写的spring框架的部分优化<br>项目链接：<a href="https://github.com/ZhangJia97/SpringMVC-demo" target="_blank" rel="noopener">https://github.com/ZhangJia97/SpringMVC-demo</a></p><hr><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">├── spring-demo.iml</span><br><span class="line">├── src</span><br><span class="line">   └── main</span><br><span class="line">       ├── java</span><br><span class="line">       │   └── xyz</span><br><span class="line">       │       └── suiwo</span><br><span class="line">       │           ├── action</span><br><span class="line">       │           │   ├── controller</span><br><span class="line">       │           │   │   └── DemoController.java</span><br><span class="line">       │           │   └── service</span><br><span class="line">       │           │       ├── DemoService.java</span><br><span class="line">       │           │       └── impl</span><br><span class="line">       │           │           └── DemoServiceImpl.java</span><br><span class="line">       │           └── framework</span><br><span class="line">       │               ├── annotation</span><br><span class="line">       │               │   ├── SWAutowried.java</span><br><span class="line">       │               │   ├── SWController.java</span><br><span class="line">       │               │   ├── SWRequestMapping.java</span><br><span class="line">       │               │   ├── SWRequestParam.java</span><br><span class="line">       │               │   └── SWService.java</span><br><span class="line">       │               └── servlet</span><br><span class="line">       │                   └── SWDispatcherServlet.java</span><br><span class="line">       ├── resources</span><br><span class="line">       │   └── application.properties</span><br><span class="line">       └── web</span><br><span class="line">           ├── WEB-INF</span><br><span class="line">           │   └── web.xml</span><br><span class="line">           └── index.jsp</span><br></pre></td></tr></table></figure><hr><h3 id="所用依赖"><a href="#所用依赖" class="headerlink" title="所用依赖"></a>所用依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet.api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="web-xml配置如下"><a href="#web-xml配置如下" class="headerlink" title="web.xml配置如下"></a>web.xml配置如下</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Suiwo Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>swmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>xyz.suiwo.framework.servlet.SWDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>application.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>swmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="application-properties配置如下"><a href="#application-properties配置如下" class="headerlink" title="application.properties配置如下"></a>application.properties配置如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scanPackage=xyz.suiwo.action</span><br></pre></td></tr></table></figure><hr><h3 id="下面是几个我们自定义的注解类"><a href="#下面是几个我们自定义的注解类" class="headerlink" title="下面是几个我们自定义的注解类"></a>下面是几个我们自定义的注解类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SWAutowried &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SWController &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SWRequestMapping &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SWRequestParam &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SWService &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="下面我们新建几个controller类和service类并使用我们自定义的注解"><a href="#下面我们新建几个controller类和service类并使用我们自定义的注解" class="headerlink" title="下面我们新建几个controller类和service类并使用我们自定义的注解"></a>下面我们新建几个controller类和service类并使用我们自定义的注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SWController</span></span><br><span class="line"><span class="meta">@SWRequestMapping</span>(<span class="string">"/get"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SWAutowried</span></span><br><span class="line">    DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SWRequestMapping</span>(<span class="string">"/method"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                    @SWRequestParam(<span class="string">"name"</span>)</span> String name)</span>&#123;</span><br><span class="line">        demoService.get();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.getWriter().write(<span class="string">"my name is "</span> + name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SWService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is method get"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="最后让我们看一下我们的Dispatcher类"><a href="#最后让我们看一下我们的Dispatcher类" class="headerlink" title="最后让我们看一下我们的Dispatcher类"></a>最后让我们看一下我们的Dispatcher类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SWDispatcherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; classNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; ioc = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Method&gt; handlerMapping = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doDispatch(req,resp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注：当使用父类的doGet以及doPost可能会导致405错误</span></span><br><span class="line"><span class="comment">//        super.doGet(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        doDispatch(req,resp);</span><br><span class="line"><span class="comment">//        doDispatch(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载配置文件</span></span><br><span class="line">        doLoadConfig(config.getInitParameter(<span class="string">"contextConfigLocation"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.扫描所有相关的类</span></span><br><span class="line">        doScanner(properties.getProperty(<span class="string">"scanPackage"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.初始化所有相关Class的实例，并且将其保存到IOC容器中</span></span><br><span class="line">        doInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.自动化的依赖注入</span></span><br><span class="line">        doAutowired();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.初始化handlerMapping</span></span><br><span class="line">        initHandlerMapping();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"初始化成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLoadConfig</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream inputStream =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(location);</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != inputStream) &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行扫描</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doScanner</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">this</span>.getClass().getClassLoader()</span><br><span class="line">                .getResource(<span class="string">"/"</span> + packageName.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>));</span><br><span class="line">        File classDir = <span class="keyword">new</span> File(Objects.requireNonNull(url).getFile());</span><br><span class="line">        <span class="keyword">for</span>(File file : Objects.requireNonNull(classDir.listFiles()))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//递归获取scan下所有的类，并将类名添加至classNames中用于之后实例化</span></span><br><span class="line">            <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">                doScanner(packageName + <span class="string">"."</span> + file.getName());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                String className = packageName + <span class="string">"."</span> + file.getName().replace(<span class="string">".class"</span>,<span class="string">""</span>).trim();</span><br><span class="line">                classNames.add(className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(classNames.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String className : classNames)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//进行实例化</span></span><br><span class="line">                <span class="comment">//判断不是所有的都需要实例化，只有添加了例如Controller或者Service的注解才初始化</span></span><br><span class="line">                <span class="keyword">if</span>(clazz.isAnnotationPresent(SWController.class))&#123;</span><br><span class="line">                    <span class="comment">//beanName beanId</span></span><br><span class="line">                    <span class="comment">//1.默认采用类名的首字母小写</span></span><br><span class="line">                    <span class="comment">//2.如果自定义了名字，默认使用自定义名字</span></span><br><span class="line">                    <span class="comment">//3.根据类型匹配，利用实现类的接口名作为Key</span></span><br><span class="line">                    String beanName = toLowStr(clazz.getSimpleName());</span><br><span class="line">                    ioc.put(beanName, clazz.newInstance());</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(clazz.isAnnotationPresent(SWService.class))&#123;</span><br><span class="line">                    SWService swService = clazz.getAnnotation(SWService.class);</span><br><span class="line">                    String beanName = swService.value();</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="string">""</span>.equals(beanName.trim()))&#123;</span><br><span class="line">                        ioc.put(beanName, clazz.newInstance());</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//获取对象所实现的所有接口</span></span><br><span class="line">                    Class&lt;?&gt;[] interfaces = clazz.getInterfaces();</span><br><span class="line">                    <span class="keyword">for</span>(Class&lt;?&gt; i : interfaces)&#123;</span><br><span class="line">                        ioc.put(i.getName(), clazz.newInstance());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAutowired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ioc.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : ioc.entrySet())&#123;</span><br><span class="line">            <span class="comment">//在spring中没有隐私</span></span><br><span class="line">            <span class="comment">//咱们只认 @Autowried，获取所有属性</span></span><br><span class="line">            Field[] fields = entry.getValue().getClass().getDeclaredFields();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!field.isAnnotationPresent(SWAutowried.class))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                SWAutowried swAutowried = field.getAnnotation(SWAutowried.class);</span><br><span class="line"></span><br><span class="line">                String beanName = swAutowried.value().trim();</span><br><span class="line">                <span class="comment">//如果为空说明使用默认名字，所以使用getName获取默认名字</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">""</span>.equals(beanName))&#123;</span><br><span class="line">                    beanName = field.getType().getName();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//向属性set进已经实例化的对象</span></span><br><span class="line">                    field.set(entry.getValue(), ioc.get(beanName));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!ioc.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; entry : ioc.entrySet())&#123;</span><br><span class="line">                Class&lt;?&gt; clazz = entry.getValue().getClass();</span><br><span class="line">                <span class="comment">//HandlerMapping只认识SWController</span></span><br><span class="line">                <span class="keyword">if</span>(!clazz.isAnnotationPresent(SWController.class))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String url = <span class="string">""</span>;</span><br><span class="line">                <span class="comment">//获取类上的RequestMapping地址</span></span><br><span class="line">                <span class="keyword">if</span>(clazz.isAnnotationPresent(SWRequestMapping.class))&#123;</span><br><span class="line">                    SWRequestMapping swRequestMapping = clazz.getAnnotation(SWRequestMapping.class);</span><br><span class="line">                    url = swRequestMapping.value();</span><br><span class="line">                &#125;</span><br><span class="line">                Method[] methods = clazz.getMethods();</span><br><span class="line">                <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!method.isAnnotationPresent(SWRequestMapping.class))&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//获取实际方法上的requestMapping</span></span><br><span class="line">                    SWRequestMapping swRequestMapping = method.getAnnotation(SWRequestMapping.class);</span><br><span class="line">                    String mUrl = url + swRequestMapping.value();</span><br><span class="line">                    handlerMapping.put(mUrl, method);</span><br><span class="line">                    System.out.println(<span class="string">"Mapping : "</span> + mUrl + <span class="string">" "</span> + method);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        String url = request.getRequestURI();</span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line">        url = url.replace(contextPath, <span class="string">""</span>).replaceAll(<span class="string">"/+"</span>, <span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!handlerMapping.containsKey(url))&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.getWriter().write(<span class="string">"404"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取当前路由对应的方法</span></span><br><span class="line">        Method method = handlerMapping.get(url);</span><br><span class="line">        System.out.println(<span class="string">"获得对应的方法"</span> + method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法列表</span></span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line"></span><br><span class="line">        Object[] paramValues = <span class="keyword">new</span> Object[parameterTypes.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++)&#123;</span><br><span class="line">            Class parameterType = parameterTypes[i];</span><br><span class="line">            <span class="keyword">if</span>(parameterType == HttpServletRequest.class)&#123;</span><br><span class="line">                paramValues[i] = request;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parameterType == HttpServletResponse.class)&#123;</span><br><span class="line">                paramValues[i] = response;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parameterType == String.class)&#123;</span><br><span class="line">                <span class="keyword">for</span>(Map.Entry&lt;String, String[]&gt; entry : parameterMap.entrySet())&#123;</span><br><span class="line">                    String value = Arrays.toString(entry.getValue()).replaceAll(<span class="string">"\\[|\\]"</span>,<span class="string">""</span>)</span><br><span class="line">                            .replaceAll(<span class="string">",\\s"</span>, <span class="string">","</span>);</span><br><span class="line">                    paramValues[i++] = value;</span><br><span class="line">                    <span class="keyword">if</span>(i == parameterTypes.length)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String beanName = toLowStr(method.getDeclaringClass().getSimpleName());</span><br><span class="line">            method.invoke(<span class="keyword">this</span>.ioc.get(beanName), paramValues);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">toLowStr</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] ch = str.toCharArray();</span><br><span class="line">        ch[<span class="number">0</span>] += <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时我们就可以在浏览器中访问对应的网页了，至此一个简易的Spring框架就完成了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成POI</title>
      <link href="/2019/08/08/Springboot%E9%9B%86%E6%88%90POI/"/>
      <url>/2019/08/08/Springboot%E9%9B%86%E6%88%90POI/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本文比较简单。。。希望想真正使用的同学。。去看别人整理的吧。。。我怕这次整理比较乱。。影响大家阅读</p></blockquote><hr><h3 id="什么是POI"><a href="#什么是POI" class="headerlink" title="什么是POI"></a>什么是POI</h3><p>Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。</p><hr><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>因为为了方便所以本代码。。。就是基本上没有修改的项目代码。。。所以又看不懂的话。。多担待  -_-!!!<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">exportExcel</span><span class="params">(List&lt;Object&gt; data, Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        File[] roots = File.listRoots();</span><br><span class="line">        String path = roots[<span class="number">0</span>].getPath();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field[] fields = data.getClass().getDeclaredFields();</span><br><span class="line">            <span class="comment">//实例化HSSFWorkbook</span></span><br><span class="line">            HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">            <span class="comment">//创建一个Excel表单，参数为sheet的名字</span></span><br><span class="line">            HSSFSheet sheet = workbook.createSheet(<span class="string">"sheet"</span>);</span><br><span class="line">            <span class="comment">//设置表头</span></span><br><span class="line">            setTitle(workbook, sheet, clazz);</span><br><span class="line">            <span class="comment">//设置单元格并赋值</span></span><br><span class="line">            setData(sheet, data, clazz);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.info(<span class="string">"ExcelUtil.exportExcel : 导出解析失败!"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(HSSFWorkbook workbook, HSSFSheet sheet, Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        ClassField classField = <span class="keyword">new</span> ClassField();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = classField.map.get(clazz);</span><br><span class="line">        logger.info(<span class="string">"ExcelUtil.setTitle : 这是map信息："</span> + classField.map);</span><br><span class="line">        logger.info(<span class="string">"ExcelUtil.setTitle : 这是头信息："</span> + list);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//设置列宽，setColumnWidth的第二个参数要乘以256，这个参数的单位是1/256个字符宽度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                sheet.setColumnWidth(i, <span class="number">15</span> * <span class="number">256</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置为居中加粗,格式化时间格式</span></span><br><span class="line">            HSSFCellStyle style = workbook.createCellStyle();</span><br><span class="line">            HSSFFont font = workbook.createFont();</span><br><span class="line">            font.setBold(<span class="keyword">true</span>);</span><br><span class="line">            style.setFont(font);</span><br><span class="line">            style.setDataFormat(HSSFDataFormat.getBuiltinFormat(<span class="string">"m/d/yy h:mm"</span>));</span><br><span class="line">            <span class="comment">//创建表头名称</span></span><br><span class="line">            HSSFCell cell;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; list.size(); j++) &#123;</span><br><span class="line">                cell = row.createCell(j);</span><br><span class="line">                cell.setCellValue(list.get(j));</span><br><span class="line">                cell.setCellStyle(style);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.info(<span class="string">"ExcelUtil.setTitle : 导出时设置表头失败！"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(HSSFSheet sheet, List&lt;Object&gt; data, Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> rowNum = <span class="number">1</span>;</span><br><span class="line">            Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size(); i++) &#123;</span><br><span class="line">                HSSFRow row = sheet.createRow(rowNum);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; fields.length; j++) &#123;</span><br><span class="line">                    <span class="comment">// 对于每个属性，获取属性名</span></span><br><span class="line">                    String varName = fields[j].getName();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取原来的访问控制权限</span></span><br><span class="line">                        <span class="keyword">boolean</span> accessFlag = fields[j].isAccessible();</span><br><span class="line">                        <span class="comment">// 修改访问控制权限</span></span><br><span class="line">                        fields[j].setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="comment">// 获取在对象f中属性fields[i]对应的对象中的变量</span></span><br><span class="line">                        Object o;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            o = fields[j].get(data.get(i));</span><br><span class="line">                            row.createCell(j).setCellValue(String.valueOf(o));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 恢复访问控制权限</span></span><br><span class="line">                        fields[i].setAccessible(accessFlag);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">                        ex.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                rowNum++;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"ExcelUtil.setTitle : 表格赋值成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.info(<span class="string">"ExcelUtil.setTitle : 表格赋值失败！"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>上面的代码中ClassField.java代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Class&lt;?&gt;, List&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; gradingLoglist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        gradingLoglist.add(<span class="string">"ID"</span>);</span><br><span class="line">        gradingLoglist.add(<span class="string">"问卷ID"</span>);</span><br><span class="line">        gradingLoglist.add(<span class="string">"问卷时间"</span>);</span><br><span class="line">        gradingLoglist.add(<span class="string">"问卷简介"</span>);</span><br><span class="line">        gradingLoglist.add(<span class="string">"被评人ID"</span>);</span><br><span class="line">        gradingLoglist.add(<span class="string">"被评人姓名"</span>);</span><br><span class="line">        gradingLoglist.add(<span class="string">"分数"</span>);</span><br><span class="line">        map.put(GradingLogPo.class, gradingLoglist);</span><br><span class="line">        List&lt;String&gt; submitInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        submitInfoList.add(<span class="string">"ID"</span>);</span><br><span class="line">        submitInfoList.add(<span class="string">"评分人ID"</span>);</span><br><span class="line">        submitInfoList.add(<span class="string">"评分人姓名"</span>);</span><br><span class="line">        submitInfoList.add(<span class="string">"被评人ID"</span>);</span><br><span class="line">        submitInfoList.add(<span class="string">"被评人姓名"</span>);</span><br><span class="line">        submitInfoList.add(<span class="string">"问卷ID"</span>);</span><br><span class="line">        submitInfoList.add(<span class="string">"问卷简介"</span>);</span><br><span class="line">        submitInfoList.add(<span class="string">"评分规则ID"</span>);</span><br><span class="line">        submitInfoList.add(<span class="string">"分数"</span>);</span><br><span class="line">        submitInfoList.add(<span class="string">"备注"</span>);</span><br><span class="line">        map.put(SubmitInformationPo.class, submitInfoList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java遍历一个类的所有属性和值</title>
      <link href="/2019/08/08/Java%E9%81%8D%E5%8E%86%E4%B8%80%E4%B8%AA%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E5%80%BC/"/>
      <url>/2019/08/08/Java%E9%81%8D%E5%8E%86%E4%B8%80%E4%B8%AA%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天在尝试使用Java反射来实现Java导出数据库数据到Excel中，然后在尝试获取类所有的属性的时候，由于对于反射的不熟练，然后找到了一篇博文，所以在此进行记录，以供未来参考，原博文地址:<br><a href="https://blog.csdn.net/ztx114/article/details/78274314" target="_blank" rel="noopener">https://blog.csdn.net/ztx114/article/details/78274314</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bianLi</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line"> Field[] fields = obj.getClass().getDeclaredFields();</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> , len = fields.length; i &lt; len; i++) &#123;</span><br><span class="line"> <span class="comment">// 对于每个属性，获取属性名</span></span><br><span class="line"> String varName = fields[i].getName();</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// 获取原来的访问控制权限</span></span><br><span class="line"> <span class="keyword">boolean</span> accessFlag = fields[i].isAccessible();</span><br><span class="line"> <span class="comment">// 修改访问控制权限</span></span><br><span class="line"> fields[i].setAccessible(<span class="keyword">true</span>);</span><br><span class="line"> <span class="comment">// 获取在对象f中属性fields[i]对应的对象中的变量</span></span><br><span class="line"> Object o;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">o = fields[i].get(obj);</span><br><span class="line">System.err.println(<span class="string">"传入的对象中包含一个如下的变量："</span> + varName + <span class="string">" = "</span> + o);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 恢复访问控制权限</span></span><br><span class="line"> fields[i].setAccessible(accessFlag);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line"> ex.printStackTrace();</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ事务,confirm机制以及return机制</title>
      <link href="/2019/08/07/RabbitMQ%E4%BA%8B%E5%8A%A1,confirm%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8Areturn%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/08/07/RabbitMQ%E4%BA%8B%E5%8A%A1,confirm%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8Areturn%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<hr><p>本文是参考下面这篇博客然后进行复现浓缩后的总结<br><a href="https://www.cnblogs.com/vipstone/p/9350075.html" target="_blank" rel="noopener">https://www.cnblogs.com/vipstone/p/9350075.html</a></p><blockquote><p>正常情况下，如果消息经过交换器进入队列就可以完成消息的持久化，但如果消息在没有到达broker之前出现意外，那就造成消息丢失，有没有办法可以解决这个问题？RabbitMQ有两种方式来解决这个问题：</p></blockquote><ul><li>通过AMQP提供的事务机制实现；</li><li>使用发送者确认模式实现；</li></ul><hr><h3 id="事务使用"><a href="#事务使用" class="headerlink" title="事务使用"></a>事务使用</h3><p>事物的实现主要是对于信道（Channel）的设置，其中主要的方法有三个：</p><ol><li>channel.txSelect()声明启动事务模式；</li><li>channel.txComment()提交事务；</li><li>channel.txRollback()回滚事务；</li></ol><h4 id="尝试代码实现："><a href="#尝试代码实现：" class="headerlink" title="尝试代码实现："></a>尝试代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">    ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">    factory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">    factory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">    factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">    factory.setPort(<span class="number">5672</span>);</span><br><span class="line">    Connection connection = factory.newConnection();</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    <span class="comment">// 队列名， 持久化， 是否排外， 非自动删除</span></span><br><span class="line">    channel.queueDeclare(<span class="string">"queueName"</span>,<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    String message = <span class="string">"这是一个测试消息"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        channel.txSelect();</span><br><span class="line">        <span class="comment">// String exchange, String routingKey, BasicProperties props, byte[] body</span></span><br><span class="line">        channel.basicPublish(<span class="string">"exchangeName"</span>, <span class="string">"queueName"</span>, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        channel.txCommit();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        channel.txRollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端与rabbitMQ的交互流程如下："><a href="#客户端与rabbitMQ的交互流程如下：" class="headerlink" title="客户端与rabbitMQ的交互流程如下："></a>客户端与rabbitMQ的交互流程如下：</h4><ol><li>客户端发送给服务器Tx.Select(开启事务模式)</li><li>服务器端返回Tx.Select-Ok（开启事务模式ok）</li><li>推送消息</li><li>客户端发送给事务提交Tx.Commit</li><li>服务器端返回Tx.Commit-Ok</li></ol><h4 id="消费者模式使用事务"><a href="#消费者模式使用事务" class="headerlink" title="消费者模式使用事务"></a>消费者模式使用事务</h4><p>假设消费者模式中使用了事务，并且在消息确认之后进行了事务回滚，那么RabbitMQ会产生什么样的变化？结果分为两种情况：</p><ul><li>autoAck=false手动确认的时候是支持事务的，也就是说即使你已经手动确认了消息，但客户端也会在确认事务返回消息之后，再做决定是确认消息还是重新放回队列，如果你手动确认之后，又回滚了事务，那么以事务回滚为主，此条消息会重新放回队列；</li><li>autoAck=true如果确认为true的情况是不支持事务的，也就是说你即使在收到消息之后在回滚事务也是于事无补的，队列已经把消息移除了；</li></ul><hr><h3 id="二、Confirm发送方确认模式"><a href="#二、Confirm发送方确认模式" class="headerlink" title="二、Confirm发送方确认模式"></a>二、Confirm发送方确认模式</h3><p>Confirm发送方确认模式使用和事务类似，也是通过设置Channel进行发送方确认的。Confirm的三种实现方式：<br>方式一：channel.waitForConfirms()普通发送方确认模式；<br>方式二：channel.waitForConfirmsOrDie()批量确认模式；<br>方式三：channel.addConfirmListener()异步监听发送方确认模式；</p><h4 id="1-普通发送方确认"><a href="#1-普通发送方确认" class="headerlink" title="1.普通发送方确认"></a>1.普通发送方确认</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">    ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">    factory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">    factory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">    factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">    factory.setPort(<span class="number">5672</span>);</span><br><span class="line">    Connection connection = factory.newConnection();</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    <span class="comment">// 队列名， 持久化， 是否排外， 非自动删除</span></span><br><span class="line">    channel.queueDeclare(<span class="string">"queueName"</span>,<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    String message = <span class="string">"这是一个测试消息"</span>;</span><br><span class="line">    <span class="comment">// String exchange, String routingKey, BasicProperties props, byte[] body</span></span><br><span class="line">    channel.basicPublish(<span class="string">"exchangeName"</span>, <span class="string">"queueName"</span>, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    <span class="keyword">if</span>(channel.waitForConfirms())&#123;</span><br><span class="line">        System.out.println(<span class="string">"消息发送成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-批量确认模式"><a href="#2-批量确认模式" class="headerlink" title="2.批量确认模式"></a>2.批量确认模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">    ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">    factory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">    factory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">    factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">    factory.setPort(<span class="number">5672</span>);</span><br><span class="line">    Connection connection = factory.newConnection();</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    <span class="comment">// 队列名， 持久化， 是否排外， 非自动删除</span></span><br><span class="line">    channel.queueDeclare(<span class="string">"queueName"</span>,<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    channel.confirmSelect();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        String message = <span class="string">"这是一个测试消息"</span> + i;</span><br><span class="line">        <span class="comment">// String exchange, String routingKey, BasicProperties props, byte[] body</span></span><br><span class="line">        channel.basicPublish(<span class="string">"exchangeName"</span>, <span class="string">"queueName"</span>, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    channel.waitForConfirmsOrDie();<span class="comment">//对所有消息进行等待，只要有一个未发送就会返回异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-异步监听发送方确认模式"><a href="#3-异步监听发送方确认模式" class="headerlink" title="3.异步监听发送方确认模式"></a>3.异步监听发送方确认模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">    ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">    factory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">    factory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">    factory.setHost(<span class="string">"localhost"</span>);</span><br><span class="line">    factory.setPort(<span class="number">5672</span>);</span><br><span class="line">    Connection connection = factory.newConnection();</span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    <span class="comment">// 队列名， 持久化， 是否排外， 非自动删除</span></span><br><span class="line">    channel.queueDeclare(<span class="string">"queueName"</span>,<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    channel.confirmSelect();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        String message = <span class="string">"这是一个测试消息"</span> + i;</span><br><span class="line">        <span class="comment">// String exchange, String routingKey, BasicProperties props, byte[] body</span></span><br><span class="line">        channel.basicPublish(<span class="string">"exchangeName"</span>, <span class="string">"queueName"</span>, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    channel.addConfirmListener(<span class="keyword">new</span> ConfirmListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAck</span><span class="params">(<span class="keyword">long</span> l, <span class="keyword">boolean</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"消息发送失败，标识："</span> + l);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNack</span><span class="params">(<span class="keyword">long</span> l, <span class="keyword">boolean</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"消息发送成功，标识：%d， 是否是多个同时确认：%b"</span>, l, b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看出，代码是异步执行的，消息确认有可能是批量确认的，是否批量确认在于返回的multiple的参数，此参数为bool值，如果true表示批量执行了deliveryTag这个值以前的所有消息，如果为false的话表示单条确认。</p></blockquote><hr><h3 id="二、Return消息机制"><a href="#二、Return消息机制" class="headerlink" title="二、Return消息机制"></a>二、Return消息机制</h3><p>Return Listener用于处理一些不可路由的消息!<br>我们的消息生产者，通过指定一个Exchange 和Routingkey,把消息送达到某一个队列中去，然后我们的消费者监听队列，进行消费处理操作!</p><p>在基础API中有一个关键的配置项:<br>Mandatory:如果为true，则监听器会接收到路由不可达的消息，然后进行后续处理，如果为false,那么broker端自动删除该消息!</p><p>使用方式是在channel中添加一个ReturnListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">channel.addReturnListener (<span class="keyword">new</span> ReturnListener () &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturn</span> <span class="params">(<span class="keyword">int</span> replyCode, string replyText, String exchange, String routingKey,</span></span></span><br><span class="line"><span class="function"><span class="params">        AMQP.BasicProperties properties,<span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 这里是业务代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>Confirm批量确定和Confirm异步模式性能相差不大，Confirm模式要比事务快10倍左右。</p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis与LRU</title>
      <link href="/2019/08/05/Redis%E4%B8%8ELRU/"/>
      <url>/2019/08/05/Redis%E4%B8%8ELRU/</url>
      
        <content type="html"><![CDATA[<hr><p>参考文章<br><a href="https://zhuanlan.zhihu.com/p/34133067" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34133067</a><br><a href="https://blog.csdn.net/azurelaker/article/details/85045245" target="_blank" rel="noopener">https://blog.csdn.net/azurelaker/article/details/85045245</a><br><a href="https://www.bilibili.com/video/av45625512" target="_blank" rel="noopener">https://www.bilibili.com/video/av45625512</a></p><blockquote><p>最近在使用redis，然后看到了redis与LRU相关的一些内容，再此对之前所看的一些博文进行总结</p></blockquote><hr><h3 id="一、什么是LRU"><a href="#一、什么是LRU" class="headerlink" title="一、什么是LRU"></a>一、什么是LRU</h3><p>LRU是<code>Least Recently Used</code>的缩写，即最近最少使用，是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰。该算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间t，当须淘汰一个页面时，选择现有页面中其t值最大的，即最近最少使用的页面予以淘汰。</p><hr><h3 id="二、如何实现LRU"><a href="#二、如何实现LRU" class="headerlink" title="二、如何实现LRU"></a>二、如何实现LRU</h3><p>如果按照访问时间进行了排序，会有大量的内存拷贝操作，所以性能肯定是不能接受的。那么如何设计一个LRU缓存，使得放入和移除都是O(1)的，我们需要把访问次序维护起来，但是不能通过内存中的真实排序来反应，有一种方案就是使用双向链表。</p><hr><h3 id="三、基于HashMap和双向链表实现LRU"><a href="#三、基于HashMap和双向链表实现LRU" class="headerlink" title="三、基于HashMap和双向链表实现LRU"></a>三、基于<code>HashMap</code>和<code>双向链表</code>实现LRU</h3><p>在这个双向链表中存在一个HashMap用于存储实现LRU的双向链表的节点，如图所示</p><p><img src="/images/Redis与LRU/8ED05C49-82D6-4E44-A964-4AF837995612.png" alt="这里写图片描述"></p><p>而双向链表则存在一个head和一个tail分别指代双向链表的头与尾。<br>假设我们预设一个大小为3的cache，当我们执行以下操作时，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">save(<span class="string">"key1"</span>, <span class="number">7</span>)</span><br><span class="line">save(<span class="string">"key2"</span>, <span class="number">0</span>)</span><br><span class="line">save(<span class="string">"key3"</span>, <span class="number">1</span>)</span><br><span class="line">save(<span class="string">"key4"</span>, <span class="number">2</span>)</span><br><span class="line">get(<span class="string">"key2"</span>)</span><br><span class="line">save(<span class="string">"key5"</span>, <span class="number">3</span>)</span><br><span class="line">get(<span class="string">"key2"</span>)</span><br><span class="line">save(<span class="string">"key6"</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>双向链表变化如图所示：</p><p><img src="/images/Redis与LRU/7F71982F-9482-4E12-BED9-AFFCE1469A00.png" alt="这里写图片描述"></p><hr><h3 id="四、LRU的Java实现"><a href="#四、LRU的Java实现" class="headerlink" title="四、LRU的Java实现"></a>四、LRU的Java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节点数据结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DLinkedNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    DLinkedNode pre;</span><br><span class="line">    DLinkedNode next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际操作代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUache</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, DLinkedNode&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目前双向链表中的节点数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//双向链表头尾节点</span></span><br><span class="line">    <span class="keyword">private</span> DLinkedNode head, tail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUache</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> DLinkedNode();</span><br><span class="line">        head.pre = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        tail = <span class="keyword">new</span> DLinkedNode();</span><br><span class="line">        tail.next = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将节点挪至头部</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(DLinkedNode node)</span></span>&#123;</span><br><span class="line">        <span class="comment">//清除当前节点，即将当前节点的pre节点和next节点相连</span></span><br><span class="line">        removeNode(node);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据LRU算法，将操作的节点放至首位置</span></span><br><span class="line">        addNode(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将该节点挪除</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(DLinkedNode node)</span></span>&#123;</span><br><span class="line">        DLinkedNode pre = node.pre;</span><br><span class="line">        DLinkedNode next = node.next;</span><br><span class="line">        pre.next = next;</span><br><span class="line">        next.pre = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在头部添加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(DLinkedNode node)</span></span>&#123;</span><br><span class="line">        node.pre = head;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next.pre = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除超出最大容量后的最后一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DLinkedNode <span class="title">popTail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DLinkedNode node = tail.pre;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取节点并更新LRU</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        DLinkedNode node = cache.get(key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        moveToHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压入新节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        DLinkedNode node = cache.get(key);</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            DLinkedNode newNode = <span class="keyword">new</span> DLinkedNode();</span><br><span class="line">            newNode.key = key;</span><br><span class="line">            newNode.value = value;</span><br><span class="line">            cache.put(key, value);</span><br><span class="line">            addNode(newNode);</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(count &gt; capacity)&#123;</span><br><span class="line">                DLinkedNode tail = popTail();</span><br><span class="line">                cache.remove(tail.key);</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            moveToHead(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="五、Redis的LRU实现"><a href="#五、Redis的LRU实现" class="headerlink" title="五、Redis的LRU实现"></a>五、Redis的LRU实现</h3><p>Redis系统中与LRU功能相关的配置参数有三个:</p><ul><li><code>maxmemory</code> :  该参数即为缓存数据占用的内存限制. 当缓存的数据消耗的内存超过这个数值限制时, 将触发数据淘汰. 该数据配置为0时,表示缓存的数据量没有限制, 即LRU功能不生效.</li><li><code>maxmemory_policy</code> :  淘汰策略. 定义参与淘汰的数据的类型和属性.</li><li><code>maxmemory_samples</code> :  随机采样的精度. 该数值配置越大, 越接近于真实的LRU算法,但是数值越大, 消耗的CPU计算时间越多,执行效率越低.</li></ul><p>我们知道在Redis缓存中可以有超时属性所以Redis在每个数据库结构中使用了两个不同的哈希表来管理缓存数据. 数据结构如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//redis.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span></span><br><span class="line">    dict *dict;                 <span class="comment">/* The keyspace for this DB */</span></span><br><span class="line">    dict *expires;              <span class="comment">/* Timeout of keys with a timeout set */</span></span><br><span class="line">    dict *blocking_keys;        <span class="comment">/* Keys with clients waiting for data (BLPOP) */</span></span><br><span class="line">    dict *ready_keys;           <span class="comment">/* Blocked keys that received a PUSH */</span></span><br><span class="line">    dict *watched_keys;         <span class="comment">/* WATCHED keys for MULTI/EXEC CAS */</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> avg_ttl;          <span class="comment">/* Average TTL, just for stats */</span></span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure></p><p>由助手可知 expires存储含有超时属性的数据，而dict则可以存储所有的数据。</p><p>Redis一共提供了六种淘汰策略,即参数<code>maxmemory_policy</code>有六种取值:</p><ul><li><code>noeviction</code>: 如果缓存数据超过了maxmemory限定值,并且客户端正在执行的命令会导致内存分配,则向客户端返回错误响应.</li><li><code>allkeys-lru</code>: 所有的缓存数据(包括没有超时属性的和具有超时属性的)都参与LRU算法淘汰.</li><li><code>volatile-lru</code>: 只有超时属性的缓存数据才参与LRU算法淘汰.</li><li><code>allkeys-random</code>: 所有的缓存数据(包括没有超时属性的和具有超时属性的)都参与淘汰, 但是采用随机淘汰,而不是用LRU算法进行淘汰.</li><li><code>volatile-random</code>: 只有超时属性的缓存数据才参与淘汰,但是采用随机淘汰,而不是用LRU算法进行淘汰.</li><li><code>volatile-ttl</code>: 只有超时属性的缓存数据才参与淘汰. 根据缓存数据的超时TTL进行淘汰,而不是用LRU算法进行淘汰.</li></ul><p>注: <code>volatile-lru</code>,<code>volatile-random</code>和<code>volatile-ttl</code>这三种淘汰策略不是使用的全量数据，所以可能会导致无法淘汰出足够的内存空间。而且当设置超时属性时属性会占用更大的内存，所以当内存压力比较大时要慎用超时属性。</p><h4 id="redis处理流程"><a href="#redis处理流程" class="headerlink" title="redis处理流程"></a>redis处理流程</h4><p>1.客户端向redis发送消息，redis对命令进行解析，为命令分配内存。<br>2.判断内存是否超出限定值，即<code>maxmemory</code>，如果超过，则按照所选定的淘汰算法，进行内存释放。<br>3.当指令为读指令时忽略淘汰算法，当为写指令，且超出限定值进行内存释放，若内存释放失败则向客户端返回错误响应，如释放成功则执行写指令。</p><h4 id="redis源码解析"><a href="#redis源码解析" class="headerlink" title="redis源码解析"></a>redis源码解析</h4><blockquote><p>Redis处理命令的入口函数<code>processCommand</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//redis.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">processCommand</span><span class="params">(redisClient *c)</span> </span>&#123;</span><br><span class="line">   <span class="comment">/* The QUIT command is handled separately. Normal command procs will</span></span><br><span class="line"><span class="comment">    * go through checking for replication and QUIT will cause trouble</span></span><br><span class="line"><span class="comment">    * when FORCE_REPLICATION is enabled and would be implemented in</span></span><br><span class="line"><span class="comment">    * a regular command proc. */</span></span><br><span class="line">   <span class="keyword">if</span> (!strcasecmp(c-&gt;argv[<span class="number">0</span>]-&gt;ptr,<span class="string">"quit"</span>)) &#123;</span><br><span class="line">       addReply(c,shared.ok);</span><br><span class="line">       c-&gt;flags |= REDIS_CLOSE_AFTER_REPLY;</span><br><span class="line">       <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* Now lookup the command and check ASAP about trivial error conditions</span></span><br><span class="line"><span class="comment">    * such as wrong arity, bad command name and so forth. */</span></span><br><span class="line">   c-&gt;cmd = c-&gt;lastcmd = lookupCommand(c-&gt;argv[<span class="number">0</span>]-&gt;ptr);</span><br><span class="line">   <span class="keyword">if</span> (!c-&gt;cmd) &#123;</span><br><span class="line">       flagTransaction(c);</span><br><span class="line">       addReplyErrorFormat(c,<span class="string">"unknown command '%s'"</span>,</span><br><span class="line">           (<span class="keyword">char</span>*)c-&gt;argv[<span class="number">0</span>]-&gt;ptr);</span><br><span class="line">       <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c-&gt;cmd-&gt;arity &gt; <span class="number">0</span> &amp;&amp; c-&gt;cmd-&gt;arity != c-&gt;argc) ||</span><br><span class="line">              (c-&gt;argc &lt; -c-&gt;cmd-&gt;arity)) &#123;</span><br><span class="line">       flagTransaction(c);</span><br><span class="line">       addReplyErrorFormat(c,<span class="string">"wrong number of arguments for '%s' command"</span>,</span><br><span class="line">           c-&gt;cmd-&gt;name);</span><br><span class="line">       <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Check if the user is authenticated */</span></span><br><span class="line">   <span class="keyword">if</span> (server.requirepass &amp;&amp; !c-&gt;authenticated &amp;&amp; c-&gt;cmd-&gt;proc != authCommand)</span><br><span class="line">   &#123;</span><br><span class="line">       flagTransaction(c);</span><br><span class="line">       addReply(c,shared.noautherr);</span><br><span class="line">       <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Handle the maxmemory directive.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * First we try to free some memory if possible (if there are volatile</span></span><br><span class="line"><span class="comment">    * keys in the dataset). If there are not the only thing we can do</span></span><br><span class="line"><span class="comment">    * is returning an error. */</span></span><br><span class="line">   <span class="keyword">if</span> (server.maxmemory) &#123;</span><br><span class="line">       <span class="keyword">int</span> retval = freeMemoryIfNeeded();</span><br><span class="line">       <span class="comment">/* freeMemoryIfNeeded may flush slave output buffers. This may result</span></span><br><span class="line"><span class="comment">        * into a slave, that may be the active client, to be freed. */</span></span><br><span class="line">       <span class="keyword">if</span> (server.current_client == <span class="literal">NULL</span>) <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* It was impossible to free enough memory, and the command the client</span></span><br><span class="line"><span class="comment">        * is trying to execute is denied during OOM conditions? Error. */</span></span><br><span class="line">       <span class="keyword">if</span> ((c-&gt;cmd-&gt;flags &amp; REDIS_CMD_DENYOOM) &amp;&amp; retval == REDIS_ERR) &#123;</span><br><span class="line">           flagTransaction(c);</span><br><span class="line">           addReply(c, shared.oomerr);</span><br><span class="line">           <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Don't accept write commands if there are problems persisting on disk</span></span><br><span class="line"><span class="comment">    * and if this is a master instance. */</span></span><br><span class="line">   <span class="keyword">if</span> (((server.stop_writes_on_bgsave_err &amp;&amp;</span><br><span class="line">         server.saveparamslen &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">         server.lastbgsave_status == REDIS_ERR) ||</span><br><span class="line">         server.aof_last_write_status == REDIS_ERR) &amp;&amp;</span><br><span class="line">       server.masterhost == <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">       (c-&gt;cmd-&gt;flags &amp; REDIS_CMD_WRITE ||</span><br><span class="line">        c-&gt;cmd-&gt;proc == pingCommand))</span><br><span class="line">   &#123;</span><br><span class="line">       flagTransaction(c);</span><br><span class="line">       <span class="keyword">if</span> (server.aof_last_write_status == REDIS_OK)</span><br><span class="line">           addReply(c, shared.bgsaveerr);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           addReplySds(c,</span><br><span class="line">               sdscatprintf(sdsempty(),</span><br><span class="line">               <span class="string">"-MISCONF Errors writing to the AOF file: %s\r\n"</span>,</span><br><span class="line">               strerror(server.aof_last_write_errno)));</span><br><span class="line">       <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Don't accept write commands if there are not enough good slaves and</span></span><br><span class="line"><span class="comment">    * user configured the min-slaves-to-write option. */</span></span><br><span class="line">   <span class="keyword">if</span> (server.masterhost == <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">       server.repl_min_slaves_to_write &amp;&amp;</span><br><span class="line">       server.repl_min_slaves_max_lag &amp;&amp;</span><br><span class="line">       c-&gt;cmd-&gt;flags &amp; REDIS_CMD_WRITE &amp;&amp;</span><br><span class="line">       server.repl_good_slaves_count &lt; server.repl_min_slaves_to_write)</span><br><span class="line">   &#123;</span><br><span class="line">       flagTransaction(c);</span><br><span class="line">       addReply(c, shared.noreplicaserr);</span><br><span class="line">       <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Don't accept write commands if this is a read only slave. But</span></span><br><span class="line"><span class="comment">    * accept write commands if this is our master. */</span></span><br><span class="line">   <span class="keyword">if</span> (server.masterhost &amp;&amp; server.repl_slave_ro &amp;&amp;</span><br><span class="line">       !(c-&gt;flags &amp; REDIS_MASTER) &amp;&amp;</span><br><span class="line">       c-&gt;cmd-&gt;flags &amp; REDIS_CMD_WRITE)</span><br><span class="line">   &#123;</span><br><span class="line">       addReply(c, shared.roslaveerr);</span><br><span class="line">       <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Only allow SUBSCRIBE and UNSUBSCRIBE in the context of Pub/Sub */</span></span><br><span class="line">   <span class="keyword">if</span> (c-&gt;flags &amp; REDIS_PUBSUB &amp;&amp;</span><br><span class="line">       c-&gt;cmd-&gt;proc != pingCommand &amp;&amp;</span><br><span class="line">       c-&gt;cmd-&gt;proc != subscribeCommand &amp;&amp;</span><br><span class="line">       c-&gt;cmd-&gt;proc != unsubscribeCommand &amp;&amp;</span><br><span class="line">       c-&gt;cmd-&gt;proc != psubscribeCommand &amp;&amp;</span><br><span class="line">       c-&gt;cmd-&gt;proc != punsubscribeCommand) &#123;</span><br><span class="line">       addReplyError(c,<span class="string">"only (P)SUBSCRIBE / (P)UNSUBSCRIBE / QUIT allowed in this context"</span>);</span><br><span class="line">       <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Only allow INFO and SLAVEOF when slave-serve-stale-data is no and</span></span><br><span class="line"><span class="comment">    * we are a slave with a broken link with master. */</span></span><br><span class="line">   <span class="keyword">if</span> (server.masterhost &amp;&amp; server.repl_state != REDIS_REPL_CONNECTED &amp;&amp;</span><br><span class="line">       server.repl_serve_stale_data == <span class="number">0</span> &amp;&amp;</span><br><span class="line">       !(c-&gt;cmd-&gt;flags &amp; REDIS_CMD_STALE))</span><br><span class="line">   &#123;</span><br><span class="line">       flagTransaction(c);</span><br><span class="line">       addReply(c, shared.masterdownerr);</span><br><span class="line">       <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Loading DB? Return an error if the command has not the</span></span><br><span class="line"><span class="comment">    * REDIS_CMD_LOADING flag. */</span></span><br><span class="line">   <span class="keyword">if</span> (server.loading &amp;&amp; !(c-&gt;cmd-&gt;flags &amp; REDIS_CMD_LOADING)) &#123;</span><br><span class="line">       addReply(c, shared.loadingerr);</span><br><span class="line">       <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Lua script too slow? Only allow a limited number of commands. */</span></span><br><span class="line">   <span class="keyword">if</span> (server.lua_timedout &amp;&amp;</span><br><span class="line">         c-&gt;cmd-&gt;proc != authCommand &amp;&amp;</span><br><span class="line">         c-&gt;cmd-&gt;proc != replconfCommand &amp;&amp;</span><br><span class="line">       !(c-&gt;cmd-&gt;proc == shutdownCommand &amp;&amp;</span><br><span class="line">         c-&gt;argc == <span class="number">2</span> &amp;&amp;</span><br><span class="line">         <span class="built_in">tolower</span>(((<span class="keyword">char</span>*)c-&gt;argv[<span class="number">1</span>]-&gt;ptr)[<span class="number">0</span>]) == <span class="string">'n'</span>) &amp;&amp;</span><br><span class="line">       !(c-&gt;cmd-&gt;proc == scriptCommand &amp;&amp;</span><br><span class="line">         c-&gt;argc == <span class="number">2</span> &amp;&amp;</span><br><span class="line">         <span class="built_in">tolower</span>(((<span class="keyword">char</span>*)c-&gt;argv[<span class="number">1</span>]-&gt;ptr)[<span class="number">0</span>]) == <span class="string">'k'</span>))</span><br><span class="line">   &#123;</span><br><span class="line">       flagTransaction(c);</span><br><span class="line">       addReply(c, shared.slowscripterr);</span><br><span class="line">       <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Exec the command */</span></span><br><span class="line">   <span class="keyword">if</span> (c-&gt;flags &amp; REDIS_MULTI &amp;&amp;</span><br><span class="line">       c-&gt;cmd-&gt;proc != execCommand &amp;&amp; c-&gt;cmd-&gt;proc != discardCommand &amp;&amp;</span><br><span class="line">       c-&gt;cmd-&gt;proc != multiCommand &amp;&amp; c-&gt;cmd-&gt;proc != watchCommand)</span><br><span class="line">   &#123;</span><br><span class="line">       queueMultiCommand(c);</span><br><span class="line">       addReply(c,shared.queued);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       call(c,REDIS_CALL_FULL);</span><br><span class="line">       <span class="keyword">if</span> (listLength(server.ready_keys))</span><br><span class="line">           handleClientsBlockedOnLists();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>当调用该函数时,Redis已经解析完命令以及参数,并分配了内存空间,客户端对象的argv字段指向这些分配的内存空间.</p><p><code>LINE 40 - 53</code>调用函数freeMemoryIfNeeded释放缓存的内存空间,如果freeMemoryIfNeeded返回失败,即无法释放足够的内存,并且客户端命令是导致内存增加的命令,则向客户端返回OOM错误消息响应.</p><p>函数<code>freeMemoryIfNeeded</code>淘汰缓存的数据,其实现为(<code>redis.c</code>):<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">freeMemoryIfNeeded</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> mem_used, mem_tofree, mem_freed;</span><br><span class="line">    <span class="keyword">int</span> slaves = listLength(server.slaves);</span><br><span class="line">    <span class="keyword">mstime_t</span> latency;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Remove the size of slaves output buffers and AOF buffer from the</span></span><br><span class="line"><span class="comment">     * count of used memory. */</span></span><br><span class="line">    mem_used = zmalloc_used_memory();</span><br><span class="line">    <span class="keyword">if</span> (slaves) &#123;</span><br><span class="line">        listIter li;</span><br><span class="line">        listNode *ln;</span><br><span class="line"></span><br><span class="line">        listRewind(server.slaves,&amp;li);</span><br><span class="line">        <span class="keyword">while</span>((ln = listNext(&amp;li))) &#123;</span><br><span class="line">            redisClient *slave = listNodeValue(ln);</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> obuf_bytes = getClientOutputBufferMemoryUsage(slave);</span><br><span class="line">            <span class="keyword">if</span> (obuf_bytes &gt; mem_used)</span><br><span class="line">                mem_used = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                mem_used -= obuf_bytes;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (server.aof_state != REDIS_AOF_OFF) &#123;</span><br><span class="line">        mem_used -= sdslen(server.aof_buf);</span><br><span class="line">        mem_used -= aofRewriteBufferSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if we are over the memory limit. */</span></span><br><span class="line">    <span class="keyword">if</span> (mem_used &lt;= server.maxmemory) <span class="keyword">return</span> REDIS_OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_NO_EVICTION)</span><br><span class="line">        <span class="keyword">return</span> REDIS_ERR; <span class="comment">/* We need to free memory, but policy forbids. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Compute how much memory we need to free. */</span></span><br><span class="line">    mem_tofree = mem_used - server.maxmemory;</span><br><span class="line">    mem_freed = <span class="number">0</span>;</span><br><span class="line">    latencyStartMonitor(latency);</span><br><span class="line">    <span class="keyword">while</span> (mem_freed &lt; mem_tofree) &#123;</span><br><span class="line">        <span class="keyword">int</span> j, k, keys_freed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class="line">            <span class="keyword">long</span> bestval = <span class="number">0</span>; <span class="comment">/* just to prevent warning */</span></span><br><span class="line">            sds bestkey = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">de</span>;</span></span><br><span class="line">            redisDb *db = server.db+j;</span><br><span class="line">            dict *dict;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_LRU ||</span><br><span class="line">                server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_RANDOM)</span><br><span class="line">            &#123;</span><br><span class="line">                dict = server.db[j].dict;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dict = server.db[j].expires;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dictSize(dict) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* volatile-random and allkeys-random policy */</span></span><br><span class="line">            <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_RANDOM ||</span><br><span class="line">                server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_RANDOM)</span><br><span class="line">            &#123;</span><br><span class="line">                de = dictGetRandomKey(dict);</span><br><span class="line">                bestkey = dictGetKey(de);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* volatile-lru and allkeys-lru policy */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_LRU ||</span><br><span class="line">                server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_LRU)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; server.maxmemory_samples; k++) &#123;</span><br><span class="line">                    sds thiskey;</span><br><span class="line">                    <span class="keyword">long</span> thisval;</span><br><span class="line">                    robj *o;</span><br><span class="line"></span><br><span class="line">                    de = dictGetRandomKey(dict);</span><br><span class="line">                    thiskey = dictGetKey(de);</span><br><span class="line">                    <span class="comment">/* When policy is volatile-lru we need an additional lookup</span></span><br><span class="line"><span class="comment">                     * to locate the real key, as dict is set to db-&gt;expires. */</span></span><br><span class="line">                    <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_LRU)</span><br><span class="line">                        de = dictFind(db-&gt;dict, thiskey);</span><br><span class="line">                    o = dictGetVal(de);</span><br><span class="line">                    thisval = estimateObjectIdleTime(o);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/* Higher idle time is better candidate for deletion */</span></span><br><span class="line">                    <span class="keyword">if</span> (bestkey == <span class="literal">NULL</span> || thisval &gt; bestval) &#123;</span><br><span class="line">                        bestkey = thiskey;</span><br><span class="line">                        bestval = thisval;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* volatile-ttl */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_TTL) &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; server.maxmemory_samples; k++) &#123;</span><br><span class="line">                    sds thiskey;</span><br><span class="line">                    <span class="keyword">long</span> thisval;</span><br><span class="line"></span><br><span class="line">                    de = dictGetRandomKey(dict);</span><br><span class="line">                    thiskey = dictGetKey(de);</span><br><span class="line">                    thisval = (<span class="keyword">long</span>) dictGetVal(de);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/* Expire sooner (minor expire unix timestamp) is better</span></span><br><span class="line"><span class="comment">                     * candidate for deletion */</span></span><br><span class="line">                    <span class="keyword">if</span> (bestkey == <span class="literal">NULL</span> || thisval &lt; bestval) &#123;</span><br><span class="line">                        bestkey = thiskey;</span><br><span class="line">                        bestval = thisval;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Finally remove the selected key. */</span></span><br><span class="line">            <span class="keyword">if</span> (bestkey) &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> delta;</span><br><span class="line"></span><br><span class="line">                robj *keyobj = createStringObject(bestkey,sdslen(bestkey));</span><br><span class="line">                propagateExpire(db,keyobj);</span><br><span class="line">                <span class="comment">/* We compute the amount of memory freed by dbDelete() alone.</span></span><br><span class="line"><span class="comment">                 * It is possible that actually the memory needed to propagate</span></span><br><span class="line"><span class="comment">                 * the DEL in AOF and replication link is greater than the one</span></span><br><span class="line"><span class="comment">                 * we are freeing removing the key, but we can't account for</span></span><br><span class="line"><span class="comment">                 * that otherwise we would never exit the loop.</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * AOF and Output buffer memory will be freed eventually so</span></span><br><span class="line"><span class="comment">                 * we only care about memory used by the key space. */</span></span><br><span class="line">                delta = (<span class="keyword">long</span> <span class="keyword">long</span>) zmalloc_used_memory();</span><br><span class="line">                dbDelete(db,keyobj);</span><br><span class="line">                delta -= (<span class="keyword">long</span> <span class="keyword">long</span>) zmalloc_used_memory();</span><br><span class="line">                mem_freed += delta;</span><br><span class="line">                server.stat_evictedkeys++;</span><br><span class="line">                notifyKeyspaceEvent(REDIS_NOTIFY_EVICTED, <span class="string">"evicted"</span>,</span><br><span class="line">                    keyobj, db-&gt;id);</span><br><span class="line">                decrRefCount(keyobj);</span><br><span class="line">                keys_freed++;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* When the memory to free starts to be big enough, we may</span></span><br><span class="line"><span class="comment">                 * start spending so much time here that is impossible to</span></span><br><span class="line"><span class="comment">                 * deliver data to the slaves fast enough, so we force the</span></span><br><span class="line"><span class="comment">                 * transmission here inside the loop. */</span></span><br><span class="line">                <span class="keyword">if</span> (slaves) flushSlavesOutputBuffers();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!keys_freed) &#123;</span><br><span class="line">            latencyEndMonitor(latency);</span><br><span class="line">            latencyAddSampleIfNeeded(<span class="string">"eviction-cycle"</span>,latency);</span><br><span class="line">            <span class="keyword">return</span> REDIS_ERR; <span class="comment">/* nothing to free... */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    latencyEndMonitor(latency);</span><br><span class="line">    latencyAddSampleIfNeeded(<span class="string">"eviction-cycle"</span>,latency);</span><br><span class="line">    <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行<code>if (mem_used &lt;= server.maxmemory) return REDIS_OK</code>;如果当前缓存数据占用的总的内存小于配置的<code>maxmemory</code>,则不用淘汰,直接返回.</p><p>如果当前缓存的数据使用的内存大于配置的<code>maxmemory</code>,并且淘汰策略不允许释放内存(noeviction),则该函数返回失败.</p><p>接下来,局部变量<code>mem_tofree</code>表示需要淘汰的内存,局部变量<code>mem_freed</code>表示已经淘汰的内存.循环执行<code>while (mem_freed &lt; mem_tofree)</code>淘汰缓存数据,该循环中的逻辑可以概括为:</p><ul><li>从全局的0号数据库开始(Redis默认有16个全局的数据库),根据淘汰策略,选择该数据库中的哈希表.如果该哈希表为空, 选择下一个全局数据库.</li><li>根据淘汰策略,在相应哈希表中找到一个待淘汰的key, 从该数据库对象中删除该key所对应的缓存数据.</li><li>如果没有找到待淘汰的key,即无法淘汰所需的缓存数据大小 函数直接返回错误.</li><li>如果当前访问的是最后一个全局数据库, 并且已经淘汰了所需的缓存数据,则该函数成功返回.如果没有淘汰所需的缓存数据,则返回步骤1,并且从0号数据库重新淘汰.如果当前访问的不是最后一个全局数据库, 则返回步骤1, 从当前数据库的下一个数据库继续淘汰缓存数据. </li></ul><p>如果淘汰策略是<code>allkeys-random</code>或者<code>volatile-random</code>,则从相应数据库中随机选择一个key进行淘汰.</p><p>如果淘汰策略是<code>allkeys-lru</code>或者<code>volatile-lru</code>, 则根据配置的采样值<code>maxmemory_samples</code>,随机从数据库中选择<code>maxmemory_samples</code>个key, 淘汰其中热度最低的key对应的缓存数据.</p><p>如果淘汰策略是<code>volatile-ttl</code>,则根据配置的采样值<code>maxmemory_samples</code>,随机从数据库中选择<code>maxmemory_samples</code>个key,淘汰其中最先要超时的key对应的缓存数据.</p><p>所以采样参数<code>maxmemory_samples</code>配置的数值越大, 就越能精确的查找到待淘汰的缓存数据,但是也消耗更多的CPU计算,执行效率降低.</p><p>从数据库的哈希表结构中随机返回一个key的执行函数为dictGetRandomKey, 其实现为(<code>dict.c</code>):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Return a random entry from the hash table. Useful to</span></span><br><span class="line"><span class="comment"> * implement randomized algorithms */</span></span><br><span class="line"><span class="function">dictEntry *<span class="title">dictGetRandomKey</span><span class="params">(dict *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dictEntry *he, *orighe;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">int</span> listlen, listele;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dictSize(d) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (dictIsRehashing(d)) _dictRehashStep(d);</span><br><span class="line">    <span class="keyword">if</span> (dictIsRehashing(d)) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            h = random() % (d-&gt;ht[<span class="number">0</span>].size+d-&gt;ht[<span class="number">1</span>].size);</span><br><span class="line">            he = (h &gt;= d-&gt;ht[<span class="number">0</span>].size) ? d-&gt;ht[<span class="number">1</span>].table[h - d-&gt;ht[<span class="number">0</span>].size] :</span><br><span class="line">                                      d-&gt;ht[<span class="number">0</span>].table[h];</span><br><span class="line">        &#125; <span class="keyword">while</span>(he == <span class="literal">NULL</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            h = random() &amp; d-&gt;ht[<span class="number">0</span>].sizemask;</span><br><span class="line">            he = d-&gt;ht[<span class="number">0</span>].table[h];</span><br><span class="line">        &#125; <span class="keyword">while</span>(he == <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Now we found a non empty bucket, but it is a linked</span></span><br><span class="line"><span class="comment">     * list and we need to get a random element from the list.</span></span><br><span class="line"><span class="comment">     * The only sane way to do so is counting the elements and</span></span><br><span class="line"><span class="comment">     * select a random index. */</span></span><br><span class="line">    listlen = <span class="number">0</span>;</span><br><span class="line">    orighe = he;</span><br><span class="line">    <span class="keyword">while</span>(he) &#123;</span><br><span class="line">        he = he-&gt;next;</span><br><span class="line">        listlen++;</span><br><span class="line">    &#125;</span><br><span class="line">    listele = random() % listlen;</span><br><span class="line">    he = orighe;</span><br><span class="line">    <span class="keyword">while</span>(listele--) he = he-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> he;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码主要执行了两件事情:</p><ol><li>首先在哈希表中随机选择一个非空的桶(bucket).</li><li>在该桶的冲突链表中随机选择一个节点.</li></ol><p>根据LRU淘汰算法的属性,如果缓存的数据被频繁访问, 其热度就高,反之,热度低. 下面说明缓存数据的热度相关的细节.<br>Redis中的对象结构定义为(<code>redis.h</code>):<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> lru:REDIS_LRU_BITS; <span class="comment">/* lru time (relative to server.lruclock) */</span></span><br><span class="line">    <span class="keyword">int</span> refcount;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure></p><p>即对象结构中存在一个lru字段, 且使用了unsigned的低24位(REDIS_LRU_BITS定义的值).</p><p>Redis命令访问缓存的数据时,均会调用函数lookupKey, 其实现为(<code>db.c</code>):<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">robj *<span class="title">lookupKey</span><span class="params">(redisDb *db, robj *key)</span> </span>&#123;</span><br><span class="line">    dictEntry *de = dictFind(db-&gt;dict,key-&gt;ptr);</span><br><span class="line">    <span class="keyword">if</span> (de) &#123;</span><br><span class="line">        robj *val = dictGetVal(de);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Update the access time for the ageing algorithm.</span></span><br><span class="line"><span class="comment">         * Don't do it if we have a saving child, as this will trigger</span></span><br><span class="line"><span class="comment">         * a copy on write madness. */</span></span><br><span class="line">        <span class="keyword">if</span> (server.rdb_child_pid == <span class="number">-1</span> &amp;&amp; server.aof_child_pid == <span class="number">-1</span>)</span><br><span class="line">            val-&gt;lru = server.lruclock;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该函数会更新对象的lru值, 设置为全局的server.lruclock值.当然,在对象创建的时候也会将该lru字段设置为全局的server.lruclock.</p><p>全局的server.lruclock是在函数serverCron中调用函数updateLRUClock更新的(<code>redis.c</code>):<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateLRUClock</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    server.lruclock = (server.unixtime/REDIS_LRU_CLOCK_RESOLUTION) &amp;</span><br><span class="line">                                                REDIS_LRU_CLOCK_MAX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而全局的<code>server.unixtime</code>是在函数<code>serverCron</code>中调用函数<code>updateCachedTime</code>更新的(<code>redis.c</code>):<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We take a cached value of the unix time in the global state because with</span></span><br><span class="line"><span class="comment"> * virtual memory and aging there is to store the current time in objects at</span></span><br><span class="line"><span class="comment"> * every object access, and accuracy is not needed. To access a global var is</span></span><br><span class="line"><span class="comment"> * a lot faster than calling time(NULL) */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateCachedTime</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    server.unixtime = time(<span class="literal">NULL</span>);</span><br><span class="line">    server.mstime = mstime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>函数<code>serverCron</code>是定时器执行函数, 会周期性执行.Redis系统中全局变量<code>server.hz</code>设置为10, 则s<code>erverCron</code>的调度周期为100毫秒.也就是说,全局变量server.lruclock会每隔100毫秒得到更新,该字段也和对象结构的lru字段一样,也是使用了unsigned的低24位.</p><p>所以函数<code>lookupKey</code>中更新缓存数据的lru热度值时,不是调用的系统函数获得的当前时间戳,而是该值的一个近似值<code>server.lruclock</code>, 这样不用每次调用系统函数,可以提高执行效率.</p><p>函数<code>estimateObjectIdleTime</code>评估指定对象的lru热度,其实现为(<code>object.c</code>):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Given an object returns the min number of seconds the object was never</span></span><br><span class="line"><span class="comment"> * requested, using an approximated LRU algorithm. */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">estimateObjectIdleTime</span><span class="params">(robj *o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (server.lruclock &gt;= o-&gt;lru) &#123;</span><br><span class="line">        <span class="keyword">return</span> (server.lruclock - o-&gt;lru) * REDIS_LRU_CLOCK_RESOLUTION;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((REDIS_LRU_CLOCK_MAX - o-&gt;lru) + server.lruclock) *</span><br><span class="line">                    REDIS_LRU_CLOCK_RESOLUTION;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其思想就是对象的lru热度值和全局的<code>server.lruclock</code>的差值越大, 该对象热度越低.但是,因为全局的<code>server.lruclock</code>数值有可能发生溢出(超过<code>REDIS_LRU_CLOCK_MAX</code>则溢出), 所以对象的lru数值可能大于<code>server.lruclock</code>数值. 所以计算二者的差值时,需考虑二者间的大小关系.</p><p>Redis系统没有使用一个全局的链表将所有的缓存数据管理起来,而是使用一种近似的算法来模拟LRU淘汰的效果:</p><ul><li>首先可以节省内存占用.如果用全局的双向链表管理所有的缓存数据,则每个节点的两个指针字段将增加16字节(64位系统上).</li><li>Redis系统中不同对象实现的可能是不同的结构,有的是比较复杂的复合结构. 如果再引入一个全局的链表,将增加代码复杂性,可读性也变差.</li></ul><hr><h3 id="六、常见缓存算法总结"><a href="#六、常见缓存算法总结" class="headerlink" title="六、常见缓存算法总结"></a>六、常见缓存算法总结</h3><h4 id="1-LRU"><a href="#1-LRU" class="headerlink" title="1.LRU"></a>1.LRU</h4><p>LRU全称是Least Recently Used，即最近最久未使用的意思。如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小。也就是说，当限定的空间已存满数据时，应当把最久没有被访问到的数据淘汰。而用什么数据结构来实现LRU算法呢？<br>可能大多数人都会想到：用一个数组来存储数据，给每一个数据项标记一个访问时间戳，每次插入新数据项的时候，先把数组中存在的数据项的时间戳自增，并将新数据项的时间戳置为0并插入到数组中。每次访问数组中的数据项的时候，将被访问的数据项的时间戳置为0。当数组空间已满时，将时间戳最大的数据项淘汰。这种实现思路很简单，但是有什么缺陷呢？需要不停地维护数据项的访问时间戳，另外，在插入数据、删除数据以及访问数据时，时间复杂度都是O(n)。<br>那么有没有更好的实现办法呢？<br>那就是利用链表移动访问时间的数据顺序和hashmap查询是否是新数据项。当需要插入新的数据项的时候，如果新数据项在链表中存在（一般称为命中），则把该节点移到链表头部，如果不存在，则新建一个节点，放到链表头部，若缓存满了，则把链表最后一个节点删除即可。在访问数据的时候，如果数据项在链表中存在，则把该节点移到链表头部，否则返回-1。这样一来在链表尾部的节点就是最近最久未访问的数据项。</p><h4 id="2-LFU"><a href="#2-LFU" class="headerlink" title="2.LFU"></a>2.LFU</h4><p>LFU（Least Frequently Used）最近最少使用算法。它是基于“如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小”的思路。<br>注意LFU和LRU算法的不同之处，LRU的淘汰规则是基于访问时间，而LFU是基于访问次数的。举个简单的例子：<br>假设缓存大小为3，数据访问序列为set(2,2),set(1,1),get(2),get(1),get(2),set(3,3),set(4,4)，<br>则在set(4,4)时对于LFU算法应该淘汰(3,3)，而LRU应该淘汰(1,1)。<br>为了能够淘汰最少使用的数据，因此LFU算法最简单的一种设计思路就是 利用一个数组存储 数据项，用hashmap存储每个数据项在数组中对应的位置，然后为每个数据项设计一个访问频次，当数据项被命中时，访问频次自增，在淘汰的时候淘汰访问频次最少的数据。这样一来的话，在插入数据和访问数据的时候都能达到O(1)的时间复杂度，在淘汰数据的时候，通过选择算法得到应该淘汰的数据项在数组中的索引，并将该索引位置的内容替换为新来的数据内容即可，这样的话，淘汰数据的操作时间复杂度为O(n)。</p><h4 id="3-FIFO"><a href="#3-FIFO" class="headerlink" title="3.FIFO"></a>3.FIFO</h4><p>FIFO（First in First out），先进先出。其实在操作系统的设计理念中很多地方都利用到了先进先出的思想，比如作业调度（先来先服务），为什么这个原则在很多地方都会用到呢？因为这个原则简单、且符合人们的惯性思维，具备公平性，并且实现起来简单，直接使用数据结构中的队列即可实现。在FIFO Cache设计中，核心原则就是：如果一个数据最先进入缓存中，则应该最早淘汰掉。<br>那么利用什么数据结构来实现呢？<br>下面提供一种实现思路：利用一个双向链表保存数据，当来了新的数据之后便添加到链表末尾，如果Cache存满数据，则把链表头部数据删除，然后把新的数据添加到链表末尾。在访问数据的时候，如果在Cache中存在该数据的话，则返回对应的value值；否则返回-1。如果想提高访问效率，可以利用hashmap来保存每个key在链表中对应的位置。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> LRU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成RabbitMQ</title>
      <link href="/2019/08/03/Springboot%E9%9B%86%E6%88%90RabbitMQ/"/>
      <url>/2019/08/03/Springboot%E9%9B%86%E6%88%90RabbitMQ/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、什么是RabbitMQ"><a href="#一、什么是RabbitMQ" class="headerlink" title="一、什么是RabbitMQ"></a>一、什么是RabbitMQ</h3><p>RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。RabbitMQ服务器是用Erlang语言编写的，而集群和故障转移是构建在开放电信平台框架上的。所有主要的编程语言均有与代理接口通讯的客户端库。</p><hr><h3 id="二、添加依赖"><a href="#二、添加依赖" class="headerlink" title="二、添加依赖"></a>二、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="三、添加配置文件创建消息队列"><a href="#三、添加配置文件创建消息队列" class="headerlink" title="三、添加配置文件创建消息队列"></a>三、添加配置文件创建消息队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String EMAIL_QUEUE_NAME = <span class="string">"emailQueue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//队列名，是否持久化</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(EMAIL_QUEUE_NAME, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="四、创建消息队列发送者"><a href="#四、创建消息队列发送者" class="headerlink" title="四、创建消息队列发送者"></a>四、创建消息队列发送者</h3><blockquote><p>下面的生产者与消费者是我用来一步发送邮件的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTopicEmail</span><span class="params">(Email emailEntity)</span> </span>&#123;</span><br><span class="line">        String email = ConvertUtil.beanToString(emailEntity);</span><br><span class="line">        logger.debug(<span class="string">" [RabbitMQ] MessageSender.sendTopicEmail 向 &#123;&#125; 队列发送邮件消息 -&gt;  : &#123;&#125;"</span>, EMAIL_QUEUE_NAME, emailEntity);</span><br><span class="line">        amqpTemplate.convertAndSend(EMAIL_QUEUE_NAME, email);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="五、创建消队列息监听者"><a href="#五、创建消队列息监听者" class="headerlink" title="五、创建消队列息监听者"></a>五、创建消队列息监听者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmailService emailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = MessageConfig.EMAIL_QUEUE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveEmail1</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        Email email = ConvertUtil.stringToBean(message, Email.class);</span><br><span class="line">        logger.debug(<span class="string">" [RabbitMQ] MessageReceiver.receiveEmail 获取 &#123;&#125; 队列的邮件消息 -&gt;  : &#123;&#125;"</span>, MessageConfig.EMAIL_QUEUE_NAME, email);</span><br><span class="line">        emailService.sendEmail(email);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> Springboot </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成Log4j2</title>
      <link href="/2019/07/31/Springboot%E9%9B%86%E6%88%90Log4j2/"/>
      <url>/2019/07/31/Springboot%E9%9B%86%E6%88%90Log4j2/</url>
      
        <content type="html"><![CDATA[<hr><p>前言：关于Log4j2，SLF4J，LogBack以及其他的一些日志框架的区别，建议大家可以先了解一下</p><hr><h2 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot默认日志框架为LogBack所以我们需要将LogBack依赖移除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span><span class="comment">&lt;!-- 去掉默认配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、application-properties中添加配置"><a href="#二、application-properties中添加配置" class="headerlink" title="二、application.properties中添加配置"></a>二、application.properties中添加配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># log4j2 配置文件地址，而且log4j2-spring.xml作为默认的配置文件名，在resources目录下是就算不配置也会默认读</span><br><span class="line">logging.config=classpath:log4j2-spring.xml</span><br></pre></td></tr></table></figure><hr><h2 id="三、创建相关配置文件"><a href="#三、创建相关配置文件" class="headerlink" title="三、创建相关配置文件"></a>三、创建相关配置文件</h2><blockquote><p>配置文件应该放在resources目录下，关于配置方面的详细内容，可以参考下面几篇博文以及项目demo</p><ul><li><a href="https://www.jianshu.com/p/087a20d4aba8" target="_blank" rel="noopener">https://www.jianshu.com/p/087a20d4aba8</a></li><li><a href="https://www.jianshu.com/p/5dcf4ece0de3" target="_blank" rel="noopener">https://www.jianshu.com/p/5dcf4ece0de3</a></li><li><a href="https://www.jianshu.com/p/19628db2e7ef" target="_blank" rel="noopener">https://www.jianshu.com/p/19628db2e7ef</a></li><li><a href="https://github.com/bycuimiao/springboot2-log4j2-demo" target="_blank" rel="noopener">https://github.com/bycuimiao/springboot2-log4j2-demo</a></li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!--设置log4j2的自身log级别为warn--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，</span></span><br><span class="line"><span class="comment">    当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"info"</span> <span class="attr">monitorInterval</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个输出控制台的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--输出日志的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileDebug"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/debug.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/$$&#123;date:yyyy-MM&#125;/debug-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，</span></span><br><span class="line"><span class="comment">        则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileInfo"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/info.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileWarn"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/warn.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileError"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/error.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--过滤掉spring和hibernate的一些无用的debug信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileDebug"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileInfo"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileWarn"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileError"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="使用Log4j2进行日志记录"><a href="#使用Log4j2进行日志记录" class="headerlink" title="使用Log4j2进行日志记录"></a>使用Log4j2进行日志记录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestResult <span class="title">login</span><span class="params">(@RequestBody User loginUser)</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"/users/login [Post] -&gt; loginUser : &#123;&#125;"</span>, loginUser);</span><br><span class="line">        <span class="keyword">return</span> userService.login(loginUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：在使用Log4j2后我个人感觉，他的优势和劣势都是使用xml进行配置的方便，为什么说这也是劣势呢，因为我看了好多才搞懂各个xml的参数含义等等，当然了，我觉得这不是Log4j2的劣势，是我的劣势 -_- 。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> Log4j2 </tag>
            
            <tag> SLF4J </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成Redis</title>
      <link href="/2019/07/25/Springboot%E9%9B%86%E6%88%90Redis/"/>
      <url>/2019/07/25/Springboot%E9%9B%86%E6%88%90Redis/</url>
      
        <content type="html"><![CDATA[<hr><p>由于之前在项目中集成了身份验证以及权限功能，所以在请求操作时会有大量数据库读操作来获取用户的角色以及所拥有的权限，这对于数据库来说是一个巨大的性能开支，所以我打算尝试使用redis来减少数据库读写，而是使用缓存读写，<code>本文是在看完集成Redis入门后所做的总结，所以对很多地方还有疑问，请大家酌情参考</code></p><hr><h2 id="一、添加Redis依赖"><a href="#一、添加Redis依赖" class="headerlink" title="一、添加Redis依赖"></a>一、添加Redis依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、application-properties中添加配置参数"><a href="#二、application-properties中添加配置参数" class="headerlink" title="二、application.properties中添加配置参数"></a>二、application.properties中添加配置参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Redis相关</span><br><span class="line">spring.redis.database=0</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.jedis.pool.max-active=8</span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.jedis.pool.max-wait=-1</span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.jedis.pool.max-idle=8</span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.jedis.pool.min-idle=0</span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=0</span><br></pre></td></tr></table></figure><hr><h2 id="三、书写Redis工具类"><a href="#三、书写Redis工具类" class="headerlink" title="三、书写Redis工具类"></a>三、书写Redis工具类</h2><blockquote><p>本部分是很久之前参考的他人的代码，由于时间久远，原博文链接找不到了，所以在此无法放上原文章链接，对原博主表示歉意，如果有知道原链接的，请发给我谢谢<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisUtil</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递增因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递减因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束  0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引  index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h2 id="四、使用redis缓存"><a href="#四、使用redis缓存" class="headerlink" title="四、使用redis缓存"></a>四、使用redis缓存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroServiceImpl</span> <span class="keyword">implements</span> <span class="title">ShiroService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PermissionDao permissionDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RoleDao roleDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">listUserPerms</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; permsSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        String key = <span class="string">"Shiro:Perms:"</span> + userId;</span><br><span class="line">        <span class="keyword">if</span>(redisUtil.hasKey(key))&#123;</span><br><span class="line">            permsSet = (Set&lt;String&gt;) redisUtil.get(key);</span><br><span class="line">            logger.info(<span class="string">"ShiroServiceImpl.listUserPerms : 从缓存中获取了用户 &#123;&#125; 的权限 &gt;&gt; &#123;&#125; "</span>, userId, permsSet);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;String&gt; permsList = permissionDao.listUserPerms(userId);</span><br><span class="line">            <span class="keyword">for</span> (String perms : permsList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (perms == <span class="keyword">null</span> || perms.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                permsSet.addAll(Arrays.asList(perms.trim().split(<span class="string">","</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            redisUtil.set(key, permsSet);</span><br><span class="line">            logger.info(<span class="string">"ShiroServiceImpl.listUserPerms : 向缓存中插入了用户 &#123;&#125; 的权限 &gt;&gt; &#123;&#125; "</span>, userId, permsSet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permsSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">listUserRoles</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; userRolesSet;</span><br><span class="line">        String key = <span class="string">"Shiro:Roles:"</span> + userId;</span><br><span class="line">        <span class="keyword">if</span>(redisUtil.hasKey(key))&#123;</span><br><span class="line">            userRolesSet = (Set&lt;String&gt;) redisUtil.get(key);</span><br><span class="line">            logger.info(<span class="string">"ShiroServiceImpl.listUserRoles : 从缓存中获取了用户 &#123;&#125; 的角色 &gt;&gt; &#123;&#125; "</span>, userId, userRolesSet);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            userRolesSet = roleDao.listUserRoles(userId);</span><br><span class="line">            redisUtil.set(key, userRolesSet);</span><br><span class="line">            logger.info(<span class="string">"ShiroServiceImpl.listUserRoles : 向缓存中插入了用户 &#123;&#125; 的角色 &gt;&gt; &#123;&#125; "</span>, userId, userRolesSet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roleDao.listUserRoles(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：由于我此次参考资料不多，所以感觉这个总结中还是有很多欠缺，后期会重新对SpringBoot集成Redis进行新的总结</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成定时任务功能</title>
      <link href="/2019/07/24/Springboot%E9%9B%86%E6%88%90%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/07/24/Springboot%E9%9B%86%E6%88%90%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<hr><p>参考文章：<a href="http://www.ityouknow.com/springboot/2016/12/02/spring-boot-scheduler.html" target="_blank" rel="noopener">http://www.ityouknow.com/springboot/2016/12/02/spring-boot-scheduler.html</a></p><hr><h3 id="1-集成pom包依赖"><a href="#1-集成pom包依赖" class="headerlink" title="1.集成pom包依赖"></a>1.集成pom包依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-在启动类中添加注释"><a href="#2-在启动类中添加注释" class="headerlink" title="2.在启动类中添加注释"></a>2.在启动类中添加注释</h3><blockquote><p>在启动类中添加<code>@EnableScheduling</code>即可开启定时<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="3-创建任意的一个定时线程实现类"><a href="#3-创建任意的一个定时线程实现类" class="headerlink" title="3.创建任意的一个定时线程实现类"></a>3.创建任意的一个定时线程实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0,30 * * * *"</span>)  <span class="comment">//cron接受cron表达式，根据cron表达式确定定时规则</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedulerTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// todo 业务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cron表达式可以参考这篇博文：<a href="https://www.jianshu.com/p/e9ce1a7e1ed1" target="_blank" rel="noopener">https://www.jianshu.com/p/e9ce1a7e1ed1</a></p><hr><h3 id="4-fixedRate-参数说明"><a href="#4-fixedRate-参数说明" class="headerlink" title="4.fixedRate 参数说明"></a>4.fixedRate 参数说明</h3><p><code>@Scheduled(fixedRate = 6000)</code> ：上一次开始执行时间点之后6秒再执行<br><code>@Scheduled(fixedDelay = 6000)</code> ：上一次执行完毕时间点之后6秒再执行<br><code>@Scheduled(initialDelay=1000, fixedRate=6000)</code> ：第一次延迟1秒后执行，之后按 fixedRate 的规则每6秒执行一次</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> SchedulerTask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成多线程功能</title>
      <link href="/2019/07/22/Springboot%E9%9B%86%E6%88%90%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/07/22/Springboot%E9%9B%86%E6%88%90%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<hr><p>参考文章<br><a href="https://segmentfault.com/a/1190000015766938" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015766938</a><br><a href="https://blog.csdn.net/qq_34545192/article/details/80484780" target="_blank" rel="noopener">https://blog.csdn.net/qq_34545192/article/details/80484780</a></p><blockquote><p>在平时我们写多线程可能更多是使用new Thread() 或者创建线程池来实现的，但是在阿里的java开发规范中要求不要自己直接创建新线程，而是通过线程池来实现的，恰好spring boot支持多线程的开发，所以我尝试通过多线程的方式来暂时解决原来同步发送邮件是的请求时间过长的问题。当然多线程并不能彻底解决实现异步，还是需要通过消息中间件来实现功能的解耦，实现真正的异步</p></blockquote><hr><h3 id="1-在springboot的启动类添加-EnableAsync注解"><a href="#1-在springboot的启动类添加-EnableAsync注解" class="headerlink" title="1.在springboot的启动类添加@EnableAsync注解"></a>1.在springboot的启动类添加@EnableAsync注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-添加ThreadConfig的配置类"><a href="#2-添加ThreadConfig的配置类" class="headerlink" title="2.添加ThreadConfig的配置类"></a>2.添加ThreadConfig的配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">15</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">25</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-下面我们编写多线程部分的业务实现"><a href="#3-下面我们编写多线程部分的业务实现" class="headerlink" title="3.下面我们编写多线程部分的业务实现"></a>3.下面我们编写多线程部分的业务实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailTool</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.mail.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sendFrom; <span class="comment">//读取配置文件中的参数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmailAsync</span><span class="params">(EmailEntity emailEntity, CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">        sendEmail(emailEntity);</span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(EmailEntity emailEntity)</span> </span>&#123;</span><br><span class="line">        MimeMessage message = javaMailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper helper;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);<span class="comment">//这里可以自定义发信名称</span></span><br><span class="line">            helper.setFrom(sendFrom);</span><br><span class="line">            helper.setTo(emailEntity.getSendTo());</span><br><span class="line">            helper.setSubject(emailEntity.getSubject());</span><br><span class="line">            helper.setText(emailEntity.getMessage(),</span><br><span class="line">                    <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过上述步骤就可以实现sendEmailAsync函数的异步功能了,但是在使用这个方法的时候我们要注意的问题就是</p></blockquote><hr><h3 id="Async无效的问题"><a href="#Async无效的问题" class="headerlink" title="@Async无效的问题"></a>@Async无效的问题</h3><p>异步方法和调用方法一定要 <strong>写在不同的类中</strong> ,如果写在一个类中,是没有效果的</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> SchedulerTask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成Shiro</title>
      <link href="/2019/07/20/Springboot%E9%9B%86%E6%88%90Shiro/"/>
      <url>/2019/07/20/Springboot%E9%9B%86%E6%88%90Shiro/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h5 id="Apache-Shiro是一个强大且易用的Java安全框架-执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API-您可以快速、轻松地获得任何应用程序-从最小的移动应用程序到最大的网络和企业应用程序。本文是使用Shiro-JWT-Json-Web-Token-实现的，对于jwt部分有疑问的可以参考之前jwt相关文章，本博文中的一部分函数使用的是JWT那一篇文章文章所写的函数。"><a href="#Apache-Shiro是一个强大且易用的Java安全框架-执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API-您可以快速、轻松地获得任何应用程序-从最小的移动应用程序到最大的网络和企业应用程序。本文是使用Shiro-JWT-Json-Web-Token-实现的，对于jwt部分有疑问的可以参考之前jwt相关文章，本博文中的一部分函数使用的是JWT那一篇文章文章所写的函数。" class="headerlink" title="Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。本文是使用Shiro + JWT(Json Web Token)实现的，对于jwt部分有疑问的可以参考之前jwt相关文章，本博文中的一部分函数使用的是JWT那一篇文章文章所写的函数。"></a>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。本文是使用Shiro + JWT(Json Web Token)实现的，对于jwt部分有疑问的可以参考之前jwt相关文章，本博文中的一部分函数使用的是JWT那一篇文章文章所写的函数。</h5><blockquote><p>参考博文 <a href="https://blog.csdn.net/w_stronger/article/details/73109248" target="_blank" rel="noopener">https://blog.csdn.net/w_stronger/article/details/73109248</a> </p></blockquote><hr><h2 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h2><h4 id="使用idea创建空项目并添加以下依赖"><a href="#使用idea创建空项目并添加以下依赖" class="headerlink" title="使用idea创建空项目并添加以下依赖"></a>使用idea创建空项目并添加以下依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h2 id="三、创建自定义Realm"><a href="#三、创建自定义Realm" class="headerlink" title="三、创建自定义Realm"></a>三、创建自定义Realm</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyRealm.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户相关</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shiro数据相关</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShiroService shiroService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大坑！，必须重写此方法，不然Shiro会报错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token <span class="keyword">instanceof</span> JWTToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有当需要检测用户权限的时候才会调用此方法，例如checkRole,checkPermission之类的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取用户token</span></span><br><span class="line">        String token = (String) principals.getPrimaryPrincipal();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过token获取用户信息</span></span><br><span class="line">        String username = JWTUtil.getUsername(token);</span><br><span class="line">        User user = userDao.getUserAllInfoByTel(username);</span><br><span class="line">        <span class="keyword">int</span> userId = user.getId();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取用户拥有操作</span></span><br><span class="line">        Set&lt;String&gt; permsSet = shiroService.listUserPerms(userId);</span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        info.addStringPermissions(permsSet);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取用户拥有角色</span></span><br><span class="line">        Set&lt;String&gt; rolesSet = shiroService.listUserRoles(userId);</span><br><span class="line">        info.setRoles(rolesSet);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认使用此方法进行用户名正确与否验证，错误抛出异常即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken auth)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String token = (String) auth.getCredentials();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解密获得username，用于和数据库进行对比，此部分的身份验证请参考我的JWT相关博文</span></span><br><span class="line">        String username = JWTUtil.getUsername(token);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"Username or password error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        User user = userDao.getUserAllInfoByTel(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"Username or password error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证信息</span></span><br><span class="line">        <span class="keyword">if</span> (!JWTUtil.verify(token, username, user.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"Username or password error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(token, token, <span class="string">"myRealm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="四、自定义JWT拦截器"><a href="#四、自定义JWT拦截器" class="headerlink" title="四、自定义JWT拦截器"></a>四、自定义JWT拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JWTFilter.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTFilter</span> <span class="keyword">extends</span> <span class="title">BasicHttpAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里我们详细说明下为什么最终返回的都是true，即允许访问</span></span><br><span class="line"><span class="comment">     * 例如我们提供一个地址 GET /article</span></span><br><span class="line"><span class="comment">     * 登入用户和游客看到的内容是不同的</span></span><br><span class="line"><span class="comment">     * 如果在这里返回了false，请求会被直接拦截，用户看不到任何东西</span></span><br><span class="line"><span class="comment">     * 所以我们在这里返回true，Controller中可以通过 subject.isAuthenticated() 来判断用户是否登入</span></span><br><span class="line"><span class="comment">     * 如果有些资源只有登入用户才能访问，我们只需要在方法上面加上 <span class="doctag">@RequiresAuthentication</span> 注解即可</span></span><br><span class="line"><span class="comment">     * 但是这样做有一个缺点，就是不能够对GET,POST等请求进行分别过滤鉴权(因为我们重写了官方的方法)，但实际上对应用影响不大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查看当前Header中是否携带Authorization属性(Token)，有的话就进行登录认证授权</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isLoginAttempt(request, response)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 进行Shiro的登录UserRealm</span></span><br><span class="line">                <span class="keyword">this</span>.executeLogin(request, response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 认证出现异常，传递错误信息msg</span></span><br><span class="line">                String msg = e.getMessage();</span><br><span class="line">                <span class="comment">// 获取应用异常(该Cause是导致抛出此throwable(异常)的throwable(异常))</span></span><br><span class="line">                Throwable throwable = e.getCause();</span><br><span class="line">                <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> SignatureVerificationException) &#123;</span><br><span class="line">                    <span class="comment">// 该异常为JWT的AccessToken认证失败(Token或者密钥不正确)</span></span><br><span class="line">                    msg = <span class="string">"Token或者密钥不正确("</span> + throwable.getMessage() + <span class="string">")"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> TokenExpiredException) &#123;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 应用异常不为空</span></span><br><span class="line">                    <span class="keyword">if</span> (throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 获取应用异常msg</span></span><br><span class="line">                        msg = throwable.getMessage();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  错误两种处理方式</span></span><br><span class="line"><span class="comment">                  1. 将非法请求转发到/401的Controller处理，抛出自定义无权访问异常被全局捕捉再返回Response信息</span></span><br><span class="line"><span class="comment">                  2. 无需转发，直接返回Response信息</span></span><br><span class="line"><span class="comment">                  一般使用第二种(更方便)</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有携带Token</span></span><br><span class="line">            HttpServletRequest httpServletRequest = WebUtils.toHttp(request);</span><br><span class="line">            <span class="comment">// 获取当前请求类型</span></span><br><span class="line">            String httpMethod = httpServletRequest.getMethod();</span><br><span class="line">            <span class="comment">// 获取当前请求URI</span></span><br><span class="line">            String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">            logger.info(<span class="string">"当前请求 &#123;&#125; Authorization属性(Token)为空 请求类型 &#123;&#125;"</span>, requestURI, httpMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断用户是否想要登入。</span></span><br><span class="line"><span class="comment">     * 检测header里面是否包含Authorization字段即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isLoginAttempt</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        String authorization = req.getHeader(<span class="string">"AuthKey"</span>);</span><br><span class="line">        <span class="keyword">return</span> authorization != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行AccessToken登录认证授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">executeLogin</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        String authorization = httpServletRequest.getHeader(<span class="string">"AuthKey"</span>);</span><br><span class="line">        JWTToken token = <span class="keyword">new</span> JWTToken(authorization);</span><br><span class="line">        <span class="comment">// 提交给realm进行登入，如果错误他会抛出异常并被捕获</span></span><br><span class="line">        getSubject(request, response).login(token);</span><br><span class="line">        <span class="comment">// 如果没有抛出异常则代表登入成功，返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对跨域提供支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-control-Allow-Origin"</span>, httpServletRequest.getHeader(<span class="string">"Origin"</span>));</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET,POST,OPTIONS,PUT,DELETE"</span>);</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, httpServletRequest.getHeader(<span class="string">"Access-Control-Request-Headers"</span>));</span><br><span class="line">        <span class="comment">// 跨域时会首先发送一个option请求，这里我们给option请求直接返回正常状态</span></span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.OK.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将非法请求跳转到 /401</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">response401</span><span class="params">(ServletRequest req, ServletResponse resp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpServletResponse httpServletResponse = (HttpServletResponse) resp;</span><br><span class="line">            httpServletResponse.sendRedirect(<span class="string">"/401"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="五、添加配置文件"><a href="#五、添加配置文件" class="headerlink" title="五、添加配置文件"></a>五、添加配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ShiroConfig.java</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getManager</span><span class="params">(MyRealm realm)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用自定义realm</span></span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 关闭shiro自带的session，详情见文档</span></span><br><span class="line"><span class="comment">         * http://shiro.apache.org/session-management.html#SessionManagement-StatelessApplications%28Sessionless%29</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DefaultSubjectDAO subjectDAO = <span class="keyword">new</span> DefaultSubjectDAO();</span><br><span class="line">        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator = <span class="keyword">new</span> DefaultSessionStorageEvaluator();</span><br><span class="line">        defaultSessionStorageEvaluator.setSessionStorageEnabled(<span class="keyword">false</span>);</span><br><span class="line">        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);</span><br><span class="line">        manager.setSubjectDAO(subjectDAO);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"shiroFilter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">factory</span><span class="params">(DefaultWebSecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean factoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加自己的过滤器并且取名为jwt</span></span><br><span class="line">        Map&lt;String, Filter&gt; filterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">"jwt"</span>, <span class="keyword">new</span> JWTFilter());</span><br><span class="line">        factoryBean.setFilters(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 自定义url规则</span></span><br><span class="line"><span class="comment">         * http://shiro.apache.org/web.html#urls-</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, String&gt; filterRuleMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 所有请求通过我们自己的JWT Filter</span></span><br><span class="line">        filterRuleMap.put(<span class="string">"/users/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">"/users"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">"/users/*"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(filterRuleMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面的代码是添加注解支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@DependsOn</span>(<span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        <span class="comment">// 强制使用cglib，防止重复代理和可能引起代理出错的问题</span></span><br><span class="line">        <span class="comment">// https://zhuanlan.zhihu.com/p/29161098</span></span><br><span class="line">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(DefaultWebSecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor advisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        advisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：一定要将所有需要判断拦截的请求使用自定义的拦截器进行拦截</p></blockquote><hr><hr><h2 id="6、使用注解对接口进行权限判断以及身份验证"><a href="#6、使用注解对接口进行权限判断以及身份验证" class="headerlink" title="6、使用注解对接口进行权限判断以及身份验证"></a>6、使用注解对接口进行权限判断以及身份验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个函数的意思是需要请求这个接口的用户角色需要时admin，</span></span><br><span class="line"><span class="comment"> * 同时具有sys:user:save的权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"admin"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(value = <span class="string">"sys:user:save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RestResult <span class="title">addUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    logger.debug(<span class="string">"/users [Post] -&gt; user : &#123;&#125;"</span>, user);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.insertUser(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> RestResultFactory.restResult(<span class="number">402</span>, <span class="string">"用户创建失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="7、对于常见注解的介绍"><a href="#7、对于常见注解的介绍" class="headerlink" title="7、对于常见注解的介绍"></a>7、对于常见注解的介绍</h2><h3 id="Shiro共有5个注解，接下来我们就详细说说吧"><a href="#Shiro共有5个注解，接下来我们就详细说说吧" class="headerlink" title="Shiro共有5个注解，接下来我们就详细说说吧"></a>Shiro共有5个注解，接下来我们就详细说说吧</h3><hr><h4 id="1-RequiresAuthentication"><a href="#1-RequiresAuthentication" class="headerlink" title="1.RequiresAuthentication:"></a>1.RequiresAuthentication:</h4><ul><li>使用该注解标注的类，实例，方法在访问或调用时，当前<code>Subject</code>必须在当前session中已经过认证。</li></ul><hr><h4 id="2-RequiresGuest"><a href="#2-RequiresGuest" class="headerlink" title="2.RequiresGuest:"></a>2.RequiresGuest:</h4><ul><li>使用该注解标注的类，实例，方法在访问或调用时，当前<code>Subject</code>可以是“gust”身份，不需要经过认证或者在原先的session中存在记录。</li></ul><hr><h4 id="3-RequiresPermissions"><a href="#3-RequiresPermissions" class="headerlink" title="3.RequiresPermissions:"></a>3.RequiresPermissions:</h4><ul><li>当前<code>Subject</code>需要拥有某些特定的权限时，才能执行被该注解标注的方法。如果当前<code>Subject</code>不具有这样的权限，则方法不会被执行。</li></ul><hr><h4 id="4-RequiresRoles"><a href="#4-RequiresRoles" class="headerlink" title="4.RequiresRoles:"></a>4.RequiresRoles:</h4><ul><li>当前<code>Subject</code>必须拥有所有指定的角色时，才能访问被该注解标注的方法。如果当前<code>Subject</code>不同时拥有所有指定角色，则方法不会执行还会抛出<code>AuthorizationException</code>异常。</li></ul><hr><h4 id="5-RequiresUser"><a href="#5-RequiresUser" class="headerlink" title="5.RequiresUser"></a>5.RequiresUser</h4><ul><li>当前<code>Subject</code>必须是应用的用户，才能访问或调用被该注解标注的类，实例，方法。</li></ul><hr><p>使用方法：</p><blockquote><p>Shiro的认证注解处理是有内定的处理顺序的，如果有个多个注解的话，前面的通过了会继续检查后面的，若不通过则直接返回，处理顺序依次为（与实际声明顺序无关）：</p><ol><li>RequiresRoles </li><li>RequiresPermissions </li><li>RequiresAuthentication </li><li>RequiresUser </li><li>RequiresGuest<br>例如：你同时声明了RequiresRoles和RequiresPermissions，那就要求拥有此角色的同时还得拥有相应的权限。</li></ol></blockquote><hr><p>1) RequiresRoles</p><blockquote><p>可以用在Controller或者方法上。可以多个roles，多个roles时默认逻辑为 AND也就是所有具备所有role才能访问。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequiresRoles &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">    <span class="function">Logical <span class="title">logical</span><span class="params">()</span> <span class="keyword">default</span> Logical.AND</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><p>示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属于user角色</span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"user"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须同时属于user和admin角色</span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(&#123;<span class="string">"user"</span>,<span class="string">"admin"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//属于user或者admin之一;修改logical为OR 即可</span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(value=&#123;<span class="string">"user"</span>,<span class="string">"admin"</span>&#125;,logical=Logical.OR)</span><br></pre></td></tr></table></figure></p><hr><p>2) RequiresPermissions<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequiresPermissions &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">    <span class="function">Logical <span class="title">logical</span><span class="params">()</span> <span class="keyword">default</span> Logical.AND</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//符合index:hello权限要求</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"index:hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须同时复核index:hello和index:world权限要求</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(&#123;<span class="string">"index:hello"</span>,<span class="string">"index:world"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//符合index:hello或index:world权限要求即可</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(value=&#123;<span class="string">"index:hello"</span>,<span class="string">"index:world"</span>&#125;,logical=Logical.OR)</span><br></pre></td></tr></table></figure></p><p>1) RequiresAuthentication，RequiresUser，RequiresGuest</p><blockquote><p>这三个的使用方法一样</p><ul><li>@RequiresAuthentication</li><li>@RequiresUser</li><li>@RequiresGusst</li></ul></blockquote><blockquote><p>总结：总体来说，shiro的存在大大的降低了关于权限部分的开发时间，使我们有更多精力关注业务开发，也让我们能快速的开发出一个完善的权限系统，避免自己开发权限时出现的权限考虑不周到的情况</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用JWT</title>
      <link href="/2019/07/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8JWT/"/>
      <url>/2019/07/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8JWT/</url>
      
        <content type="html"><![CDATA[<hr><p>参考博文：<a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">https://www.jianshu.com/p/576dbf44b2ae</a></p><hr><hr><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><blockquote><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p></blockquote><hr><hr><h2 id="二、JWT样式格式"><a href="#二、JWT样式格式" class="headerlink" title="二、JWT样式格式"></a>二、JWT样式格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br><span class="line"></span><br><span class="line">//第一部分我们称它为头部（header)</span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br><span class="line"></span><br><span class="line">//第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)</span><br><span class="line">yJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</span><br><span class="line"></span><br><span class="line">//第三部分是签证（signature)</span><br><span class="line">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><hr><hr><h2 id="三、如何使用JWT"><a href="#三、如何使用JWT" class="headerlink" title="三、如何使用JWT"></a>三、如何使用JWT</h2><blockquote><p>关于JWT在此我就不做过多的介绍，下面直接看，如何通过代码实现JWT</p></blockquote><hr><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-创建Token实体类"><a href="#2-创建Token实体类" class="headerlink" title="2.创建Token实体类"></a>2.创建Token实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JWTToken</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTToken</span> <span class="keyword">implements</span> <span class="title">AuthenticationToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JWTToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-书写工具类（包括加密解密）"><a href="#3-书写工具类（包括加密解密）" class="headerlink" title="3.书写工具类（包括加密解密）"></a>3.书写工具类（包括加密解密）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JWTUtil.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE_TIME = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secret   密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String username, String secret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date date = <span class="keyword">new</span> Date(System.currentTimeMillis() + EXPIRE_TIME);</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">            <span class="keyword">return</span> JWT.create().withClaim(<span class="string">"username"</span>, username)</span><br><span class="line">                    .withExpiresAt(date)<span class="comment">//添加超时时间</span></span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中的用户名，无需secret解密，也可以类似的获取token中其他在payload中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUsername</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DecodedJWT jwt = JWT.decode(token);</span><br><span class="line">            <span class="keyword">return</span> jwt.getClaim(<span class="string">"username"</span>).asString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token是否正确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token    密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secret   密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String token, String username, String secret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">            JWTVerifier verifier = JWT.require(algorithm)</span><br><span class="line">                    .withClaim(<span class="string">"username"</span>, username)</span><br><span class="line">                    .build();</span><br><span class="line">            DecodedJWT jwt = verifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结: JWT只是一个单独的工具，要和其他的框架或者自行实现一些其他功能才能真的将JWT应用在后台开发中，后面我将总结如何使用Shiro + JWT实现一个简单的权限认证功能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于MySQL日期相关语句</title>
      <link href="/2019/07/12/%E5%85%B3%E4%BA%8EMySQL%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/07/12/%E5%85%B3%E4%BA%8EMySQL%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="1-MySQL按照时间范围进行查询的SQL语句"><a href="#1-MySQL按照时间范围进行查询的SQL语句" class="headerlink" title="1.MySQL按照时间范围进行查询的SQL语句"></a>1.MySQL按照时间范围进行查询的SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># DATE_FORMAT(字段名, 格式化规则) startDate endDate指代查询范围</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_name <span class="keyword">where</span> <span class="keyword">DATE_FORMAT</span>(c_date, <span class="string">'%Y%m%d%H%i'</span>) <span class="keyword">between</span> startDate <span class="keyword">and</span> endDate;</span><br></pre></td></tr></table></figure><hr><h4 id="2-MySQL中的时间的加减-以加法为例"><a href="#2-MySQL中的时间的加减-以加法为例" class="headerlink" title="2.MySQL中的时间的加减(以加法为例)"></a>2.MySQL中的时间的加减(以加法为例)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="string">'2018-06-26 23:59:59'</span>,<span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">hour</span>);</span><br></pre></td></tr></table></figure><p>输出结果为</p><blockquote><p>‘2018-06-27 0:59:59’</p></blockquote><hr><h4 id="3-较为复杂的MySQL语句，用来查询当前时间一个小时后的时间"><a href="#3-较为复杂的MySQL语句，用来查询当前时间一个小时后的时间" class="headerlink" title="3.较为复杂的MySQL语句，用来查询当前时间一个小时后的时间"></a>3.较为复杂的MySQL语句，用来查询当前时间一个小时后的时间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 数据格式：201907121251（2019年07月12日12时51分）</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">DATE_ADD</span>(<span class="keyword">DATE_FORMAT</span>(<span class="keyword">now</span>(), <span class="string">'%Y-%m-%d %H:%i'</span>), <span class="built_in">interval</span> <span class="string">'1'</span> <span class="keyword">hour</span>),<span class="string">'%Y%m%d%H%i'</span>);</span><br></pre></td></tr></table></figure><hr><p>更多相关可以参考下面两篇文章<br><a href="https://yq.aliyun.com/articles/526458" target="_blank" rel="noopener">https://yq.aliyun.com/articles/526458</a><br><a href="https://www.cnblogs.com/zhongchi/archive/2010/05/04/1727096.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhongchi/archive/2010/05/04/1727096.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于编程方式实现条件装配</title>
      <link href="/2019/06/14/%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%9D%A1%E4%BB%B6%E8%A3%85%E9%85%8D/"/>
      <url>/2019/06/14/%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%9D%A1%E4%BB%B6%E8%A3%85%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲通过编程方式来实现条件装配 —— <code>@Condition</code></p></blockquote><hr><h4 id="首先我们添加判断类"><a href="#首先我们添加判断类" class="headerlink" title="首先我们添加判断类"></a>首先我们添加判断类</h4><p><code>OnSystemPropertyCondition.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: OnSystemPropertyCondition</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 15:04</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 系统属性条件判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnSystemPropertyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; attributes = metadata.getAnnotationAttributes(ConditionalOnSystemProperty.class.getName());</span><br><span class="line">        String  propertyName = String.valueOf(attributes.get(<span class="string">"name"</span>));</span><br><span class="line">        String  propertyValue = String.valueOf(attributes.get(<span class="string">"value"</span>));</span><br><span class="line">        String  javaPropertyValue = System.getProperty(propertyName);</span><br><span class="line">        System.out.println(javaPropertyValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> propertyValue.equals(javaPropertyValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="然后添加注解类"><a href="#然后添加注解类" class="headerlink" title="然后添加注解类"></a>然后添加注解类</h4><p><code>ConditionalOnSystemProperty.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: ConditionalOnSystemProperty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 15:02</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Java系统属性条件判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(OnSystemPropertyCondition.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnSystemProperty &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java系统属性名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java系统属性值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="最后我们添加引导启动类"><a href="#最后我们添加引导启动类" class="headerlink" title="最后我们添加引导启动类"></a>最后我们添加引导启动类</h4><p><code>ConditionalSystemPropertyBootstrap.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.bootstrap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.WebApplicationType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> xyz.suiwo.diveinspringboot.condition.ConditionalOnSystemProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: ConditionalSystemPropertyBootstrap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 15:10</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 系统属性条件引导类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionalSystemPropertyBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnSystemProperty</span>(name = <span class="string">"user.name"</span>,value = <span class="string">"zhangsan"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">"Hello world zhangsan"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnSystemProperty</span>(name = <span class="string">"user.name"</span>,value = <span class="string">"suiwo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloW</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world suiwo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> SpringApplicationBuilder(ConditionalSystemPropertyBootstrap.class)</span><br><span class="line">                        .web(WebApplicationType.NONE)</span><br><span class="line">                        .run(args);</span><br><span class="line">        System.out.println(context.getBean(<span class="string">"helloW"</span>,String.class));</span><br><span class="line">        System.out.println(context.getBean(<span class="string">"helloWorld"</span>,String.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭上下文</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="当我们运行后会发现终端运行结果"><a href="#当我们运行后会发现终端运行结果" class="headerlink" title="当我们运行后会发现终端运行结果"></a>当我们运行后会发现终端运行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.1.5.RELEASE)</span><br><span class="line"></span><br><span class="line">2019-06-14 11:28:50.783  INFO 30704 --- [           main] s.d.b.ConditionalSystemPropertyBootstrap : Starting ConditionalSystemPropertyBootstrap on suiwoMBP with PID 30704 (/Users/dive-in-spring-boot/target/classes started by suiwo in /Users/dive-in-spring-boot)</span><br><span class="line">2019-06-14 11:28:50.790  INFO 30704 --- [           main] s.d.b.ConditionalSystemPropertyBootstrap : No active profile set, falling back to default profiles: default</span><br><span class="line">suiwo</span><br><span class="line">suiwo</span><br><span class="line">2019-06-14 11:28:51.251  INFO 30704 --- [           main] s.d.b.ConditionalSystemPropertyBootstrap : Started ConditionalSystemPropertyBootstrap in 1.218 seconds (JVM running for 1.945)</span><br><span class="line">Hello world suiwo</span><br><span class="line">Exception in thread &quot;main&quot; org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &apos;helloWorld&apos; available</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:769)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1221)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:294)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1111)</span><br><span class="line">at xyz.suiwo.diveinspringboot.bootstrap.ConditionalSystemPropertyBootstrap.main(ConditionalSystemPropertyBootstrap.java:36)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><h4 id="由此可见当不满足条件时，此时bean无法装配"><a href="#由此可见当不满足条件时，此时bean无法装配" class="headerlink" title="由此可见当不满足条件时，此时bean无法装配"></a>由此可见当不满足条件时，此时bean无法装配</h4>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于配置方式实现自定义条件装配</title>
      <link href="/2019/06/14/%E5%9F%BA%E4%BA%8E%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%A1%E4%BB%B6%E8%A3%85%E9%85%8D/"/>
      <url>/2019/06/14/%E5%9F%BA%E4%BA%8E%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%A1%E4%BB%B6%E8%A3%85%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲通过配置方式来实现自定义条件装配 —— <code>@Profile</code></p></blockquote><h3 id="我们尝试使用Profile实现两个计算服务，分别是Java7的for循环以及Java8的lambda表达式"><a href="#我们尝试使用Profile实现两个计算服务，分别是Java7的for循环以及Java8的lambda表达式" class="headerlink" title="我们尝试使用Profile实现两个计算服务，分别是Java7的for循环以及Java8的lambda表达式"></a>我们尝试使用Profile实现两个计算服务，分别是Java7的for循环以及Java8的lambda表达式</h3><hr><h4 id="首先我们先新建一个计算服务接口"><a href="#首先我们先新建一个计算服务接口" class="headerlink" title="首先我们先新建一个计算服务接口"></a>首先我们先新建一个计算服务接口</h4><p><code>CalculateService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: CalculateService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 13:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CalculateService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sum求和</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 多个整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">sum</span><span class="params">(Integer... values)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="添加两种方式的实现类"><a href="#添加两种方式的实现类" class="headerlink" title="添加两种方式的实现类"></a>添加两种方式的实现类</h4><p><code>Java7CalculateService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: Java7CalculateService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 13:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"Java7"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java7CalculateService</span> <span class="keyword">implements</span> <span class="title">CalculateService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Java7实现"</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : values)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CalculateService calculateService = <span class="keyword">new</span> Java7CalculateService();</span><br><span class="line">        System.out.println(calculateService.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Java8CalculateService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: Java8CalculateService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 13:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"Java8"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8CalculateService</span> <span class="keyword">implements</span> <span class="title">CalculateService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Java8实现"</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = Stream.of(values).reduce(<span class="number">0</span>,Integer::sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CalculateService calculateService = <span class="keyword">new</span> Java7CalculateService();</span><br><span class="line">        System.out.println(calculateService.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="下面我们来添加启动类"><a href="#下面我们来添加启动类" class="headerlink" title="下面我们来添加启动类"></a>下面我们来添加启动类</h4><p><code>CalculateServiceBootstrap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.diveinspringboot.bootstrap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.WebApplicationType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> xyz.suiwo.diveinspringboot.service.CalculateService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: CalculateServiceBootstrap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-06 14:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = <span class="string">"xyz.suiwo.diveinspringboot.service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculateServiceBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> SpringApplicationBuilder(CalculateServiceBootstrap.class)</span><br><span class="line">                        .web(WebApplicationType.NONE)</span><br><span class="line">                        .profiles(<span class="string">"Java8"</span>)</span><br><span class="line">                        .run(args);</span><br><span class="line"></span><br><span class="line">        CalculateService calculateService = context</span><br><span class="line">                .getBean(CalculateService.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sum:"</span> + calculateService.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭上下文</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时终端打印结果如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.1.5.RELEASE)</span><br><span class="line"></span><br><span class="line">2019-06-14 11:09:17.221  INFO 30420 --- [           main] x.s.d.b.CalculateServiceBootstrap        : Starting CalculateServiceBootstrap on XXX with PID 30434 (/Users/dive-in-spring-boot/target/classes started by XXX in /Users/dive-in-spring-boot)</span><br><span class="line">2019-06-14 11:09:17.228  INFO 30420 --- [           main] x.s.d.b.CalculateServiceBootstrap        : The following profiles are active: Java8</span><br><span class="line">2019-06-14 11:09:20.062  INFO 30420 --- [           main] x.s.d.b.CalculateServiceBootstrap        : Started CalculateServiceBootstrap in 3.416 seconds (JVM running for 4.569)</span><br><span class="line">Java8实现</span><br><span class="line">sum:55</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><blockquote><p>若将<code>profile</code>改成<code>Java7</code>，则终端结果为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.1.5.RELEASE)</span><br><span class="line"></span><br><span class="line">2019-06-14 11:10:17.847  INFO 30434 --- [           main] x.s.d.b.CalculateServiceBootstrap        : Starting CalculateServiceBootstrap on XXX with PID 30434 (/Users/dive-in-spring-boot/target/classes started by XXX in /Users/dive-in-spring-boot)</span><br><span class="line">2019-06-14 11:10:17.851  INFO 30434 --- [           main] x.s.d.b.CalculateServiceBootstrap        : The following profiles are active: Java7</span><br><span class="line">2019-06-14 11:10:20.149  INFO 30434 --- [           main] x.s.d.b.CalculateServiceBootstrap        : Started CalculateServiceBootstrap in 2.822 seconds (JVM running for 3.95)</span><br><span class="line">Java7实现</span><br><span class="line">sum:55</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java通过RMI实现手写RPC框架</title>
      <link href="/2019/04/24/Java%E9%80%9A%E8%BF%87RMI%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/04/24/Java%E9%80%9A%E8%BF%87RMI%E5%AE%9E%E7%8E%B0%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>参考视频：<a href="https://www.bilibili.com/video/av30168877/?p=3" target="_blank" rel="noopener">https://www.bilibili.com/video/av30168877/?p=3</a><br>参考文章：<a href="https://blog.csdn.net/shan9liang/article/details/8995023" target="_blank" rel="noopener">https://blog.csdn.net/shan9liang/article/details/8995023</a></p><h3 id="1-RPC与RMI"><a href="#1-RPC与RMI" class="headerlink" title="1.RPC与RMI"></a>1.RPC与RMI</h3><ul><li>RMI(remote method invocation，面向对象的远程方法调用)</li><li>RPC（remote procedure call，远程过程调用）</li></ul><p>RPC是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。在RPC中，当一个请求到达RPC服务器时，这个请求就包含了一个参数集和一个文本值，通常形成“classname.methodname”的形式。这就向RPC服务器表明，被请求的方法在为 “classname”的类中，名叫“methodname”。然后RPC服务器就去搜索与之相匹配的类和方法，并把它作为那种方法参数类型的输入。这里的参数类型是与RPC请求中的类型是匹配的。一旦匹配成功，这个方法就被调用了，其结果被编码后返回客户方。</p><p>Java RMI 指的是远程方法调用 (Remote Method Invocation)。它是一种机制，能够让在某个 Java 虚拟机上的对象调用另一个 Java 虚拟机中的对象上的方法。可以用此方法调用的任何对象必须实现该远程接口。</p><p>RPC与RMI区别于联系</p><ul><li>RPC 跨语言，而 RMI只支持Java。</li><li>RMI 调用远程对象方法，允许方法返回 Java 对象以及基本数据类型，而RPC 不支持对象的概念，传送到 RPC 服务的消息由外部数据表示 (External Data Representation, XDR) 语言表示，这种语言抽象了字节序类和数据类型结构之间的差异。只有由 XDR 定义的数据类型才能被传递， 可以说 RMI 是面向对象方式的 Java RPC 。</li><li>在方法调用上，RMI中，远程接口使每个远程方法都具有方法签名。如果一个方法在服务器上执行，但是没有相匹配的签名被添加到这个远程接口上，那么这个新方法就不能被RMI客户方所调用。</li></ul><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>1.Server端方法接口与实现类<br>HelloService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHi</span><span class="params">(String name)</span></span>;<span class="comment">//hi name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hi "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.远程调用的函数注册中心接口及其实现<br>RegisterServerCenter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegisterServerCenter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//服务启动</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务终止</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务注册</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(Class service, Class serviceImpl)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RegisterServerCenterImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServerCenterImpl</span> <span class="keyword">implements</span> <span class="title">RegisterServerCenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以哈希表的形式存储注册的远程调用函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Class&gt; serviceRegister = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//远程调用端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个定长线程池，可控制线程最大并发数</span></span><br><span class="line">    <span class="comment">//java.lang.Runtime.availableProcessors() 方法返回到Java虚拟机的可用的处理器数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//程序启动和关闭的标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isRunning = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterServerCenterImpl</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//与ServerSocket与指定端口号绑定</span></span><br><span class="line">            serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        isRunning = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"---- start server ----"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//等待请求</span></span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//启动线程完成请求</span></span><br><span class="line">                executorService.execute(<span class="keyword">new</span> ServiceTask(socket));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isRunning = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Class service, Class serviceImpl)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将可远程调用注册到map中</span></span><br><span class="line">        serviceRegister.put(service.getName(), serviceImpl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        ServiceTask(Socket socket) &#123;</span><br><span class="line">            <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ObjectOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//接收到请求</span></span><br><span class="line">                inputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取类名、方法名、参数类型、参数值</span></span><br><span class="line">                String serviceName = inputStream.readUTF();</span><br><span class="line">                String methodName = inputStream.readUTF();</span><br><span class="line">                Class[] paramType = (Class[]) inputStream.readObject();</span><br><span class="line">                Object[] args = (Object[]) inputStream.readObject();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//通过服务注册表，获取类、获取方法，执行方法获取结果</span></span><br><span class="line">                Class serviceClass = serviceRegister.get(serviceName);</span><br><span class="line">                Method method = serviceClass.getMethod(methodName, paramType);</span><br><span class="line">                Object result = method.invoke(serviceClass.newInstance(), args);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//返回结果</span></span><br><span class="line">                outputStream = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">                outputStream.writeObject(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        inputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        socket.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.Client端代码<br>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * a:类加载器 ：  需要代理哪个类（例如HelloService接口），</span></span><br><span class="line"><span class="comment">     * 就需要将HelloService的类加载器 传入第一个参数</span></span><br><span class="line"><span class="comment">     * b:需要代理的对象，具备哪些方法  --接口</span></span><br><span class="line"><span class="comment">     * 单继承，多实现  A implements B接口,c接口</span></span><br><span class="line"><span class="comment">     * String str = new String();</span></span><br><span class="line"><span class="comment">     * String[] str = new String[]&#123;"aaa","bb","cc"&#125; ;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getRemoteProxyObj</span><span class="params">(Class service, InetSocketAddress inetSocketAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[]&#123;service&#125;, <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket socket = <span class="keyword">new</span> Socket();</span><br><span class="line">                ObjectOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">                ObjectInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//与端口建立连接</span></span><br><span class="line">                    socket.connect(inetSocketAddress);</span><br><span class="line">                    outputStream = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//按顺序将参数传给server端</span></span><br><span class="line">                    outputStream.writeUTF(service.getName());</span><br><span class="line">                    outputStream.writeUTF(method.getName());</span><br><span class="line">                    outputStream.writeObject(method.getParameterTypes());</span><br><span class="line">                    outputStream.writeObject(args);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//获取返回的结果</span></span><br><span class="line">                    inputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">                    <span class="keyword">return</span> inputStream.readObject();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    Objects.requireNonNull(inputStream).close();</span><br><span class="line">                    Objects.requireNonNull(outputStream).close();</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.服务端启动类<br>RPCServerTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> server.HelloService;</span><br><span class="line"><span class="keyword">import</span> server.HelloServiceImpl;</span><br><span class="line"><span class="keyword">import</span> server.RegisterServerCenter;</span><br><span class="line"><span class="keyword">import</span> server.RegisterServerCenterImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RPCServerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启一个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//服务中心</span></span><br><span class="line">                RegisterServerCenter server = <span class="keyword">new</span> RegisterServerCenterImpl(<span class="number">9999</span>);</span><br><span class="line">                <span class="comment">//将HelloService接口及实现类 注册到 服务中心</span></span><br><span class="line">                server.register(HelloService.class, HelloServiceImpl.class);</span><br><span class="line">                server.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();<span class="comment">//start()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.客户端启动类<br>ClientRPCTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> client.Client;</span><br><span class="line"><span class="keyword">import</span> server.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientRPCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//通过类反射机制类参数</span></span><br><span class="line">        HelloService service = Client.getRemoteProxyObj(Class.forName(<span class="string">"server.HelloService"</span>), <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>));</span><br><span class="line">        System.out.println((service.sayHi(<span class="string">"zhangsan"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时启动两个启动类便可实现RPC远程方法调用</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RPC </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 动态代理 </tag>
            
            <tag> RMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized及其优化</title>
      <link href="/2019/04/21/synchronized%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
      <url>/2019/04/21/synchronized%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>参考博文：<br><a href="http://www.cnblogs.com/wade-luffy/p/5969418.html" target="_blank" rel="noopener">http://www.cnblogs.com/wade-luffy/p/5969418.html</a><br><a href="http://www.cnblogs.com/kniught-ice/p/5189997.html" target="_blank" rel="noopener">http://www.cnblogs.com/kniught-ice/p/5189997.html</a><br><a href="https://www.zhihu.com/question/270564693" target="_blank" rel="noopener">https://www.zhihu.com/question/270564693</a></p><hr><hr><h3 id="一、锁是什么？"><a href="#一、锁是什么？" class="headerlink" title="一、锁是什么？"></a>一、锁是什么？</h3><blockquote><p>在java中对象都可以作为锁。<br>普通同步方法：锁是当前实例对象。<br>静态同步方法：锁是当前的<code>class对象</code>。<br>同步方法块：锁是<code>sychonized</code>括号中的对象。</p></blockquote><hr><h4 id="1、根据获取的锁的分类-获取对象锁和获取类锁"><a href="#1、根据获取的锁的分类-获取对象锁和获取类锁" class="headerlink" title="1、根据获取的锁的分类:获取对象锁和获取类锁"></a>1、根据获取的锁的分类:获取对象锁和获取类锁</h4><h5 id="获取对象锁的两种用法"><a href="#获取对象锁的两种用法" class="headerlink" title="获取对象锁的两种用法"></a>获取对象锁的两种用法</h5><ol><li>同步代码块<code>synchronized (this)</code> , <code>synchronized (类实例对象)</code>,锁是小括号()中的实例对象。</li><li>同步非静态方法 <code>synchronized method</code> , 锁是当前对象的实例对象。</li></ol><h5 id="获取类锁的两种用法"><a href="#获取类锁的两种用法" class="headerlink" title="获取类锁的两种用法"></a>获取类锁的两种用法</h5><ol><li>同步代码块<code>synchronized (类.class)</code>, 锁是小括号()中的类对象(Class对象)。</li><li>同步静态方法 <code>synchronized static method</code>, 锁是当前对象的类对象(Class对象)。</li></ol><hr><h4 id="2、对象锁和类锁的总结"><a href="#2、对象锁和类锁的总结" class="headerlink" title="2、对象锁和类锁的总结"></a>2、对象锁和类锁的总结</h4><ul><li>有线程访问对象的同步代码块时 ,另外的线程可以访问该对象的非同步代码块;</li><li>若锁住的是同一个对象,一个线程在访问对象的同步代码块时,另一个访问对象的同步代码块的线程会被阻塞;</li><li>若锁住的是同一个对象,一个线程在访问对象的同步方法时,另一个访问对象同步方法的线程会被阻塞;</li><li>若锁住的是同一个对象,一个线程在访问对象的同步代码块时,另一个访问对象同步方法的线程会被阻塞,反之亦然;</li><li>同一个类的不同对象的对象锁互不干扰;</li><li>类锁由于也是一种特殊的对象锁,因此表现和上述1,2,3,4一致，而由于一个类只有一把对象锁,所以同一个类的不同对象使用类锁将会是同步的;</li><li>类锁和对象锁互不干扰。</li></ul><hr><h4 id="3、其他锁相关知识点："><a href="#3、其他锁相关知识点：" class="headerlink" title="3、其他锁相关知识点："></a>3、其他锁相关知识点：</h4><ul><li>jvm是基于进入和退出<code>monitor</code>对象来实现方法的同步和代码块的同步。</li><li><code>synchronized</code>锁的不是代码，锁的是对象。</li><li>Java提供了<code>synchronized</code>关键字来支持内在锁。<code>Synchronized</code>关键字可以放在方法的前面、对象的前面、类的前面。</li><li>Java虚拟机中的同步<code>(Synchronization)</code>基于进入和退出管程<code>(Monitor)</code>对象实现，无论是显式同步(有明确的<code>monitorenter</code>和<code>monitorexit</code>指令,即同步代码块)还是隐式同步都是如此。</li></ul><hr><hr><h3 id="二、synchronized底层实现"><a href="#二、synchronized底层实现" class="headerlink" title="二、synchronized底层实现"></a>二、synchronized底层实现</h3><hr><h4 id="1、synchronized底层语义原理"><a href="#1、synchronized底层语义原理" class="headerlink" title="1、synchronized底层语义原理"></a>1、synchronized底层语义原理</h4><blockquote><p>在JVM的规范中，有这么一些话:“在JVM中,每个对象和类在逻辑上都是和一个监视器相关联的，为了实现监视器的排他性监视能力，JVM为每一个对象和类都关联一个锁，锁住了一个对象，就是获得对象相关联的监视器”</p></blockquote><p>在Java中，每个对象都会有一个<code>monitor</code>对象监视器。</p><ul><li>Java虚拟机中的一个线程在它到达监视区域开始处的时候请求一个锁。JAVA程序中每一个监视区域都和一个对象引用相关联。某一线程占有这个对象的时候，先<code>monitor</code>的计数器是不是0，如果是0还没有线程占有，这个时候线程占有这个对象，并且对这个对象的<code>monitor+1</code>;如果不为0，表示这个线程已经被其他线程占有，这个线程等待。当线程释放占有权的时候，<code>monitor-1</code>;</li><li>同一线程可以对同一对象进行多次加锁，+1, +1，重入性,而一个锁就像一种任何时候只允许一个线程拥有的特权.一个线程可以允许多次对同一对象上锁.对于每一个对象来说,java虚拟机维护一个计数器,记录对象被加了多少次锁,没被锁的对象的计数器是0,线程每加锁一次，计数器就加1,每释放一次,计数器就减1.当计数器跳到0的时候,锁就被完全释放了.</li><li>在Java语言中，同步用的最多的地方可能是被<code>synchronized</code>修饰的同步方法。同步方法并不是由<code>monitorenter</code>和<code>monitorexit</code>指令来实现同步的，而是由方法调用指令读取运行时常量池中方法的<code>ACC_ SYNCHRONIZED</code>标志来隐式实现的。下面先来了解一个概念Java对象头，这对深入理解<code>synchronized</code>实现原理非常关键。</li></ul><hr><h4 id="2、下面我们通过代码进行理解"><a href="#2、下面我们通过代码进行理解" class="headerlink" title="2、下面我们通过代码进行理解"></a>2、下面我们通过代码进行理解</h4><h5 id="当使用synchronized关键字对方法加上同步锁"><a href="#当使用synchronized关键字对方法加上同步锁" class="headerlink" title="当使用synchronized关键字对方法加上同步锁"></a>当使用synchronized关键字对方法加上同步锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">synchronizedFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2</span>);</span><br><span class="line">            m++;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们对字节码文件使用<code>javap -v</code>时，我们会发现反编译的文件中对方法添加<code>synchronized</code>关键字，会在该方法头的<code>flags</code>中存在一个<code>ACC_SYNCHRONIZED</code>（隐式同步）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedFun</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">0</span></span><br><span class="line">         0: ldc2_w        #2                  // long 2l</span><br><span class="line">         3: invokestatic  #4                  // Method java/lang/Thread.sleep:(J)V</span><br><span class="line">         6: getstatic     #5                  // Field m:I</span><br><span class="line">         <span class="number">9</span>: iconst_1</span><br><span class="line">        <span class="number">10</span>: iadd</span><br><span class="line">        11: putstatic     #5                  // Field m:I</span><br><span class="line">        <span class="number">14</span>: goto          <span class="number">22</span></span><br><span class="line">        <span class="number">17</span>: astore_0</span><br><span class="line">        <span class="number">18</span>: aload_0</span><br><span class="line">        19: invokevirtual #7                  // Method java/lang/InterruptedException.printStackTrace:()V</span><br><span class="line">        <span class="number">22</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">0</span>    <span class="number">14</span>    <span class="number">17</span>   Class java/lang/InterruptedException</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">14</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">17</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">18</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">22</span></span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">81</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ class java/lang/InterruptedException ]</span><br><span class="line">        frame_type = <span class="number">4</span> <span class="comment">/* same */</span></span><br></pre></td></tr></table></figure><h5 id="当使用synchronized关键字对代码块加上同步锁"><a href="#当使用synchronized关键字对代码块加上同步锁" class="headerlink" title="当使用synchronized关键字对代码块加上同步锁"></a>当使用synchronized关键字对代码块加上同步锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">synchronizedFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">        TimeUnit.MINUTES.sleep(<span class="number">2</span>);</span><br><span class="line">            m++;</span><br><span class="line">        &#125;    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们对字节码文件使用<code>javap -v</code>时，我们会发现反编译的文件中发现第3行出现了<code>monitorexit</code>，第19行和第25行出现了<code>monitorexit</code>，对于为什么只有一个<code>enter</code>却有两个<code>exit</code>是因为，同步锁是原子性的，所以有一个为当失败时进行回滚的<code>exit</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synchronizedFun</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: dup</span><br><span class="line">         <span class="number">2</span>: astore_1</span><br><span class="line">         <span class="number">3</span>: monitorenter</span><br><span class="line">         4: ldc2_w        #2                  // long 2l</span><br><span class="line">         7: invokestatic  #4                  // Method java/lang/Thread.sleep:(J)V</span><br><span class="line">        10: getstatic     #5                  // Field m:I</span><br><span class="line">        <span class="number">13</span>: iconst_1</span><br><span class="line">        <span class="number">14</span>: iadd</span><br><span class="line">        15: putstatic     #5                  // Field m:I</span><br><span class="line">        <span class="number">18</span>: aload_1</span><br><span class="line">        <span class="number">19</span>: monitorexit</span><br><span class="line">        <span class="number">20</span>: goto          <span class="number">28</span></span><br><span class="line">        <span class="number">23</span>: astore_2</span><br><span class="line">        <span class="number">24</span>: aload_1</span><br><span class="line">        <span class="number">25</span>: monitorexit</span><br><span class="line">        <span class="number">26</span>: aload_2</span><br><span class="line">        <span class="number">27</span>: athrow</span><br><span class="line">        <span class="number">28</span>: goto          <span class="number">36</span></span><br><span class="line">        <span class="number">31</span>: astore_1</span><br><span class="line">        <span class="number">32</span>: aload_1</span><br><span class="line">        33: invokevirtual #7                  // Method java/lang/InterruptedException.printStackTrace:()V</span><br><span class="line">        <span class="number">36</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">4</span>    <span class="number">20</span>    <span class="number">23</span>   any</span><br><span class="line">            <span class="number">23</span>    <span class="number">26</span>    <span class="number">23</span>   any</span><br><span class="line">             <span class="number">0</span>    <span class="number">28</span>    <span class="number">31</span>   Class java/lang/InterruptedException</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">18</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">28</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">31</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">32</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">36</span></span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">4</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">23</span></span><br><span class="line">          locals = [ class SynchronizedDemo, class java/lang/Object ]</span><br><span class="line">          stack = [ class java/lang/Throwable ]</span><br><span class="line">        frame_type = <span class="number">250</span> <span class="comment">/* chop */</span></span><br><span class="line">          offset_delta = <span class="number">4</span></span><br><span class="line">        frame_type = <span class="number">66</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ class java/lang/InterruptedException ]</span><br><span class="line">        frame_type = <span class="number">4</span> <span class="comment">/* same */</span></span><br></pre></td></tr></table></figure><hr><hr><h3 id="三、理解Java对象头与Monitor"><a href="#三、理解Java对象头与Monitor" class="headerlink" title="三、理解Java对象头与Monitor"></a>三、理解Java对象头与Monitor</h3><p>在JVM中，对象在内存中的布局分为三块区域:对象头、实例数据和对齐填充。</p><ul><li>实例变量:存放类的属性数据信息，包括父类的属性信息，如果是数组的实例部分还包括数组的长度，这部分内存按4字节对齐。</li><li>填充数据:由于虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐，这点了解即可。</li><li>Java头对象，它实现<code>synchronized</code>的锁对象的基础，这点我们重点分析它，一般而言，<code>synchronized</code>使用的锁对象是存储在Java对象头里的，jvm中采用2个字来存储对象头(如果对象是数组则会分配3个字，多出来的1个字记录的是数组长度)，其主要结构是由<code>Mark Word</code>和<code>Class Metadata Address</code>组成，其结构说明如下表:</li></ul><table><thead><tr><th>长度</th><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>32/64bit</td><td>Mark Word</td><td>存储对象的hashCode或锁信息等</td></tr><tr><td>32/64bit</td><td>Class Metadata Address</td><td>存储到对象类型数据的指针</td></tr><tr><td>32/64bit</td><td>Array length</td><td>数组的长度(如果当前对象是数组)</td></tr></tbody></table><hr><h4 id="1、对象头的Mark-Word默认存储的对象的hashCode，分代年龄和锁标志位"><a href="#1、对象头的Mark-Word默认存储的对象的hashCode，分代年龄和锁标志位" class="headerlink" title="1、对象头的Mark Word默认存储的对象的hashCode，分代年龄和锁标志位"></a>1、对象头的Mark Word默认存储的对象的hashCode，分代年龄和锁标志位</h4><table><thead><tr><th>锁状态</th><th>25bit</th><th>4bit</th><th>1bit是否是偏向锁</th><th>2bit锁标志位</th></tr></thead><tbody><tr><td>无锁状态</td><td>对象的hashCode</td><td>对象分代年龄</td><td>0</td><td>01</td></tr></tbody></table><h4 id="2、-Mark-Word的状态变化"><a href="#2、-Mark-Word的状态变化" class="headerlink" title="2、 Mark Word的状态变化"></a>2、 Mark Word的状态变化</h4><p><img src="/images/synchronized及其优化/20190421003216865.png" alt="在这里插入图片描述"></p><hr><hr><h3 id="四、synchronized的优化-偏向锁、轻量级锁、重量级锁"><a href="#四、synchronized的优化-偏向锁、轻量级锁、重量级锁" class="headerlink" title="四、synchronized的优化-偏向锁、轻量级锁、重量级锁"></a>四、synchronized的优化-偏向锁、轻量级锁、重量级锁</h3><blockquote><ul><li>synchronized是java多线程编程的元老级人物，也被称为重量级锁</li><li>偏向锁和轻量级锁之所以会在性能上比重量级锁好是因为本质上偏向锁和轻量级锁仅仅使用了CAS</li></ul></blockquote><hr><h4 id="1、偏向锁：仅适用于锁没有竞争的情况，假设共享变量只有一个线程访问。如果有其他线程竞争锁，锁则会膨胀为轻量级锁。"><a href="#1、偏向锁：仅适用于锁没有竞争的情况，假设共享变量只有一个线程访问。如果有其他线程竞争锁，锁则会膨胀为轻量级锁。" class="headerlink" title="1、偏向锁：仅适用于锁没有竞争的情况，假设共享变量只有一个线程访问。如果有其他线程竞争锁，锁则会膨胀为轻量级锁。"></a>1、偏向锁：仅适用于锁没有竞争的情况，假设共享变量只有一个线程访问。如果有其他线程竞争锁，锁则会膨胀为轻量级锁。</h4><h5 id="加锁方式："><a href="#加锁方式：" class="headerlink" title="加锁方式："></a>加锁方式：</h5><ol><li>初始时对象处于<code>biasable</code>状态，并且ThreadID为0即<code>biasable&amp;unbiased</code>状态。</li><li>当一个线程视图锁住处于<code>biasable&amp;unbiased</code>状态的对象时，通过一个CAS锁将自己的ThreadID放置到<code>Mark Word</code>中的相应位置，如果CAS操作成功则进入第三步，否则进入第四步。</li><li>当进入此步则表示所没有竞争，Object继续保持biasable状态，但是这是的ThreadID字段设置成了偏向锁所有者的ID，然后执行同步代码块。</li><li>当线程执行CAS获取偏向锁失败，表示在该锁对象上存在竞争并且这个时候另一个线程获得偏向锁的所有权。当到达全局安全点是获取偏向锁的线程被挂起，并将Object设置为<code>LightWeight Lock（轻量级锁）</code>状态并且Mark Word中的<code>Lock Record</code>指向刚才持有偏向锁线程的<code>Monitor record（监视器记录）</code>，最后被阻塞在安全点的线程被释放，进入到轻量级锁的执行路径中，同时被撤销偏向锁的线程继续往下执行同步代码。</li></ol><h6 id="解锁过程："><a href="#解锁过程：" class="headerlink" title="解锁过程："></a>解锁过程：</h6><ul><li>偏向锁解锁过程很简单，只需要测试下是否Object上的偏向锁模式是否还存在，如果存在则解锁成功不需要任何其他额外的操作。</li></ul><hr><h4 id="2、轻量级锁：适用于锁有多个竞争，但是在一个同步方法块周期中锁不存在竞争，如果在同步周期内有其他线程竞争锁，锁会膨胀为重量级锁。"><a href="#2、轻量级锁：适用于锁有多个竞争，但是在一个同步方法块周期中锁不存在竞争，如果在同步周期内有其他线程竞争锁，锁会膨胀为重量级锁。" class="headerlink" title="2、轻量级锁：适用于锁有多个竞争，但是在一个同步方法块周期中锁不存在竞争，如果在同步周期内有其他线程竞争锁，锁会膨胀为重量级锁。"></a>2、轻量级锁：适用于锁有多个竞争，但是在一个同步方法块周期中锁不存在竞争，如果在同步周期内有其他线程竞争锁，锁会膨胀为重量级锁。</h4><h6 id="加锁过程："><a href="#加锁过程：" class="headerlink" title="加锁过程："></a>加锁过程：</h6><ul><li>线程在执行同步块之前，JVM会现在当前线程的栈帧中创建用于存储锁记录的空间，并将对象头中的<code>Mark Word</code>复制到锁记录中，官方称为<code>Displaced Mark Word</code>，然后线程尝试使用CAS将对象头中的<code>Mark Word</code>替换为指向锁记录的指针。如果成功，当前线程获取锁，如果失败，则进行自旋获取锁，当自选获取锁仍然失败是，表示当前线程存在两条或两条以上线程竞争同一个锁，则轻量级锁膨胀成重量级锁。</li></ul><h6 id="解锁过程：-1"><a href="#解锁过程：-1" class="headerlink" title="解锁过程："></a>解锁过程：</h6><ul><li>轻量级解锁时，会使用原子的CAS操作来将<code>Displaced Mark Word</code>替换回到对象头，如果成功，则表示同步过程已完成。如果失败则表示有其他线程尝试过获取锁，则要将释放锁的同时唤醒被挂起的线程。</li></ul><hr><h4 id="3-重量级锁：竞争激烈的情况下使用重量级锁。"><a href="#3-重量级锁：竞争激烈的情况下使用重量级锁。" class="headerlink" title="3.重量级锁：竞争激烈的情况下使用重量级锁。"></a>3.重量级锁：竞争激烈的情况下使用重量级锁。</h4><ul><li>重量锁在JVM中又叫<code>对象监视器（Monitor）</code>，它很像C中的Mutex，除了具备Mutex(0|1)互斥的功能，它还负责实现了<code>Semaphore(信号量)</code>的功能，也就是说它至少包含一个竞争锁的队列，和一个<code>信号阻塞队列（wait队列）</code>，前者负责做互斥，后一个用于做线程同步。</li></ul><hr><h4 id="4、通过JVM参数来修改锁状态"><a href="#4、通过JVM参数来修改锁状态" class="headerlink" title="4、通过JVM参数来修改锁状态"></a>4、通过JVM参数来修改锁状态</h4><ul><li>偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟<code>-XX：BiasedLockingStartupDelay = 0</code>。如果你确定自己应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁<code>-XX:-UseBiasedLocking=false</code>，那么默认会进入轻量级锁状态。</li></ul><p>-</p><h4 id="5、自旋锁"><a href="#5、自旋锁" class="headerlink" title="5、自旋锁"></a>5、自旋锁</h4><ul><li><p>线程的阻塞和唤醒需要CPU从用户态转为核心态，频繁的阻塞和唤醒对CPU来说是一件负担很重的工作。同时我们可以发现，很多对象锁的锁定状态只会持续很短的一段时间，例如整数的自加操作，在很短的时间内阻塞并唤醒线程显然不值得，为此引入了自旋锁。</p></li><li><p>所谓“自旋”，就是让线程去执行一个无意义的循环，循环结束后再去重新竞争锁，如果竞争不到继续循环，循环过程中线程会一直处于running状态，但是基于JVM的线程调度，会出让时间片，所以其他线程依旧有申请锁和释放锁的机会。</p></li><li><p>自旋锁省去了阻塞锁的时间空间（队列的维护等）开销，但是长时间自旋就变成了“忙式等待”，忙式等待显然还不如阻塞锁。所以自旋的次数一般控制在一个范围内，例如10,100等，在超出这个范围后，自旋锁会升级为阻塞锁。</p></li></ul><hr><h4 id="6、自旋锁和轻量级锁的关系"><a href="#6、自旋锁和轻量级锁的关系" class="headerlink" title="6、自旋锁和轻量级锁的关系"></a>6、自旋锁和轻量级锁的关系</h4><ul><li>轻量级锁是一种状态，而自旋锁是一种获取锁的方式。线程首先会通过CAS获取锁，失败后通过自旋锁来尝试获取锁，再失败锁就膨胀为重量级锁。所以轻量级锁状态下可能会有自旋锁的参与（cas将对象头的标记指向锁记录指针失败的时候）</li></ul><hr><hr><h3 id="五、偏向锁，轻量级锁，重量级锁对比"><a href="#五、偏向锁，轻量级锁，重量级锁对比" class="headerlink" title="五、偏向锁，轻量级锁，重量级锁对比"></a>五、偏向锁，轻量级锁，重量级锁对比</h3><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗</td><td>适用于只有一个线程访问同步块场景</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度</td><td>如果始终得不到锁竞争的线程使用自旋会消耗CPU</td><td>追求响应时间,锁占用时间很短</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗CPU</td><td>线程阻塞，响应时间缓慢</td><td>追求吞吐量,锁占用时间较长</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java多线程 </tag>
            
            <tag> 锁 </tag>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized,lock和volatile的区别</title>
      <link href="/2019/04/20/synchronized,lock%E5%92%8Cvolatile%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/04/20/synchronized,lock%E5%92%8Cvolatile%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>参考文章：<a href="https://www.jianshu.com/p/2344a3e68ca9" target="_blank" rel="noopener">https://www.jianshu.com/p/2344a3e68ca9</a><br><a href="https://cloud.tencent.com/developer/article/1369358" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1369358</a></p><hr><h3 id="1、synchronized"><a href="#1、synchronized" class="headerlink" title="1、synchronized"></a>1、synchronized</h3><p>Java语言的关键字，可用来给对象和方法或者代码块加锁，当它锁定一个方法或者一个代码块的时候，同一时刻最多只有一个线程执行这段代码。当两个并发线程访问同一个对象object中的这个加锁同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。然而，当一个线程访问object的一个加锁代码块时，另一个线程仍然可以访问该object中的非加锁代码块。</p><hr><h3 id="2、Lock"><a href="#2、Lock" class="headerlink" title="2、Lock"></a>2、Lock</h3><p><code>synchronized</code>是Java语言的关键字，是内置特性，而<code>ReentrantLock</code>是一个类(实现<code>Lock</code>接口的类)，通过该类可以实现线程的同步。<br>关于Lock的具体解析可以点击<a href="https://suiwo.xyz/2019/04/20/Java%E4%B8%ADLock%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/">传送门</a></p><hr><h3 id="3、volatile"><a href="#3、volatile" class="headerlink" title="3、volatile"></a>3、volatile</h3><p><code>volatile</code>是一个类型修饰符（type specifier）。它是被设计用来修饰被不同线程访问和修改的变量。确保本条指令不会因编译器的优化而省略，且要求每次直接读值。</p><hr><h3 id="4、synchronized-lock和volatile区别（可见性、原子性、有序性）"><a href="#4、synchronized-lock和volatile区别（可见性、原子性、有序性）" class="headerlink" title="4、synchronized, lock和volatile区别（可见性、原子性、有序性）"></a>4、synchronized, lock和volatile区别（可见性、原子性、有序性）</h3><table><thead><tr><th>属性</th><th>Synchronized</th><th>lock</th><th>volatile</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td>可见性</td><td>√</td><td>√</td><td>√</td><td style="text-align:left">变量被操作之后，能够快速写入内存，并提醒其他线程重读，加锁是通过一个一个执行保证了可见性。</td></tr><tr><td>原子性</td><td>√</td><td>√</td><td>×</td><td style="text-align:left">做的过程中，不要有相关的来打扰，不相关的我们也不关心，加锁是通过一个一个执行保证了流程不会被相关的打扰。</td></tr><tr><td>有序性</td><td>√</td><td>√</td><td>√</td><td style="text-align:left">在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</td></tr></tbody></table><hr><h3 id="5、synchronized与lock区别"><a href="#5、synchronized与lock区别" class="headerlink" title="5、synchronized与lock区别"></a>5、synchronized与lock区别</h3><table><thead><tr><th>类别</th><th>synchronized</th><th>Lock</th></tr></thead><tbody><tr><td>存在层次</td><td>Java的关键字，在jvm层面上</td><td>是一个类</td></tr><tr><td>锁的释放</td><td>1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</td><td>在finally中必须释放锁，不然容易造成线程死锁</td></tr><tr><td>锁的获取</td><td>假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td><td>分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待</td></tr><tr><td>锁状态</td><td>无法判断</td><td>可以判断</td></tr><tr><td>锁类型</td><td>可重入 不可中断 非公平</td><td>可重入 可判断 可公平（两者皆可）</td></tr><tr><td>性能</td><td>少量同步</td><td>大量同步</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java多线程 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中Lock接口解析</title>
      <link href="/2019/04/20/Java%E4%B8%ADLock%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/04/20/Java%E4%B8%ADLock%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>本文非原创，为转载文章，原文链接：<a href="https://www.jianshu.com/p/2344a3e68ca9" target="_blank" rel="noopener">https://www.jianshu.com/p/2344a3e68ca9</a></p><hr><hr><h3 id="一、Lock"><a href="#一、Lock" class="headerlink" title="一、Lock"></a>一、Lock</h3><blockquote><p>synchronized是Java语言的关键字，是内置特性，而ReentrantLock是一个类(实现Lock接口的类)，通过该类可以实现线程的同步。Lock是一个接口，源码很简单，主要是声明了四个方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> var1, TimeUnit var3)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-Lock一般的使用如下："><a href="#1-Lock一般的使用如下：" class="headerlink" title="1.Lock一般的使用如下："></a>1.Lock一般的使用如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lock lock= ...;<span class="comment">//获取锁</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//处理任务</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lock()</code>、<code>tryLock()</code>、<code>tryLock(long time, TimeUnit unit)</code>和<code>lockInterruptibly()</code>是用来获取锁的，<code>unLock()</code>方法是用来释放锁的，其放在finally块里执行，可以保证锁一定被释放，<code>newCondition</code>方法下面会做介绍（通过该方法可以生成一个Condition对象，而Condition是一个多线程间协调通信的工具类）。</p><hr><h4 id="2-Lock接口的主要方法介绍："><a href="#2-Lock接口的主要方法介绍：" class="headerlink" title="2.Lock接口的主要方法介绍："></a>2.Lock接口的主要方法介绍：</h4><ul><li><code>lock()</code>：获取不到锁就不罢休，否则线程一直处于<code>block</code>状态。</li><li><code>tryLock()</code>：尝试性地获取锁，不管有没有获取到都马上返回，拿到锁就返回<code>true</code>，不然就返回<code>false</code> 。</li><li><code>tryLock(long time, TimeUnit unit)</code>：如果获取不到锁，就等待一段时间，超时返回false。</li><li><code>lockInterruptibly()</code>：该方法稍微难理解一些，在说该方法之前，先说说线程的中断机制，每个线程都有一个中断标志，不过这里要分两种情况说明：<ol><li>线程在<code>sleep</code>、<code>wait</code>或者<code>join</code>， 这个时候如果有别的线程调用该线程的 <code>interrupt（）</code>方法，此线程会被唤醒并被要求处理<code>InterruptedException</code>。</li><li>如果线程处在运行状态， 则在调用该线程的<code>interrupt（）</code>方法时，不会响应该中断。<br><code>lockInterruptibly()</code>和上面的第一种情况是一样的， 线程在获取锁被阻塞时，如果调用<code>lockInterruptibly()</code>方法，该线程会被唤醒并被要求处理<code>InterruptedException</code>。下面给出一个响应中断的简单例子：</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">MyRunnable myRunnable = <span class="keyword">new</span> Test().new MyRunnable();</span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">"thread1"</span>);</span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">"thread2"</span>);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br><span class="line">thread2.interrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Lock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">lock.lockInterruptibly();</span><br><span class="line">System.out.println(Thread.currentThread().getName() +<span class="string">"获取了锁"</span>);</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(Thread.currentThread().getName() +<span class="string">"响应中断"</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">System.out.println(Thread.currentThread().getName() +<span class="string">"释放了锁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thread1获取了锁</span><br><span class="line">thread1释放了锁</span><br><span class="line">thread2响应中断</span><br></pre></td></tr></table></figure><p>thread2在响应中断后，在<code>finally</code>块里执行<code>unlock</code>方法时，会抛出<code>java.lang.IllegalMonitorStateException</code>异常（因为thread2并没有获取到锁，只是在等待获取锁的时候响应了中断，这时再释放锁就会抛出异常）。</p><hr><h4 id="3-newCondition-方法"><a href="#3-newCondition-方法" class="headerlink" title="3.newCondition()方法"></a>3.newCondition()方法</h4><p>上面简单介绍了ReentrantLock的使用，下面具体介绍使用ReentrantLock的中的newCondition方法实现一个生产者消费者的例子。<br>生产者、消费者<br>例子：两个线程A、B，A生产牙刷并将其放到一个缓冲队列中，B从缓冲队列中购买（消费）牙刷（说明：缓冲队列的大小是有限制的），这样就会出现如下两种情况。</p><ol><li>当缓冲队列已满时，A并不能再生产牙刷，只能等B从缓冲队列购买牙刷；</li><li>当缓冲队列为空时，B不能再从缓冲队列中购买牙刷，只能等A生产牙刷放到缓冲队列后才能购买。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToothBrushDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ToothBrushBusiness toothBrushBusiness =</span><br><span class="line">                <span class="keyword">new</span> ToothBrushDemo().new ToothBrushBusiness();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                executeRunnable(toothBrushBusiness, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"牙刷生产者1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                executeRunnable(toothBrushBusiness, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"牙刷消费者1"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环执行50次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executeRunnable</span><span class="params">(ToothBrushBusiness toothBrushBusiness,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">boolean</span> isProducer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isProducer) &#123;</span><br><span class="line">                toothBrushBusiness.produceToothBrush();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                toothBrushBusiness.consumeToothBrush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToothBrushBusiness</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个大小为10的牙刷缓冲队列</span></span><br><span class="line">        <span class="keyword">private</span> GoodQueue&lt;ToothBrush&gt; toothBrushQueue = <span class="keyword">new</span> GoodQueue&lt;ToothBrush&gt;(<span class="keyword">new</span> ToothBrush[<span class="number">10</span>]);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = lock.newCondition();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = lock.newCondition();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ToothBrushBusiness</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//生产牙刷</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceToothBrush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//牙刷缓冲队列已满,则生产牙刷线程等待</span></span><br><span class="line">                <span class="keyword">while</span> (toothBrushQueue.isFull()) &#123;</span><br><span class="line">                    notFull.await();</span><br><span class="line">                &#125;</span><br><span class="line">                ToothBrush toothBrush = <span class="keyword">new</span> ToothBrush(number);</span><br><span class="line">                toothBrushQueue.enQueue(toothBrush);</span><br><span class="line">                System.out.println(<span class="string">"生产: "</span> + toothBrush.toString());</span><br><span class="line">                number++;</span><br><span class="line">                <span class="comment">//牙刷缓冲队列加入牙刷后,唤醒消费牙刷线程</span></span><br><span class="line">                notEmpty.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (GoodQueueException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费牙刷</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeToothBrush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//牙刷缓冲队列为空,则消费牙刷线程等待</span></span><br><span class="line">                <span class="keyword">while</span> (toothBrushQueue.isEmpty()) &#123;</span><br><span class="line">                    notEmpty.await();</span><br><span class="line">                &#125;</span><br><span class="line">                ToothBrush toothBrush = toothBrushQueue.deQueue();</span><br><span class="line">                System.out.println(<span class="string">"消费: "</span> + toothBrush.toString());</span><br><span class="line">                <span class="comment">//从牙刷缓冲队列取出牙刷后,唤醒生产牙刷线程</span></span><br><span class="line">                notFull.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (GoodQueueException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToothBrush</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ToothBrush</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"牙刷编号&#123;"</span> +</span><br><span class="line">                    <span class="string">"number="</span> + number +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里缓冲队列的大小设成了10，定义了一个可重入锁lock，两个状态标记对象notEmpty，notFull，分别用来标记缓冲队列是否为空，是否已满。</p><ol><li>当缓冲队列已满时，调用notFull.await方法用来阻塞生产牙刷线程。</li><li>当缓冲队列为空时，调用notEmpty.await方法用来阻塞购买牙刷线程。</li><li>notEmpty.signal用来唤醒消费牙刷线程，notFull.signal用来唤醒生产牙刷线程。</li></ol><hr><h4 id="4-Object和Conditon对应关系如下："><a href="#4-Object和Conditon对应关系如下：" class="headerlink" title="4.Object和Conditon对应关系如下："></a>4.Object和Conditon对应关系如下：</h4><table><thead><tr><th></th><th>Object</th><th>Condition</th></tr></thead><tbody><tr><td>休眠</td><td>wait</td><td>await</td></tr><tr><td>唤醒特定线程</td><td>notify</td><td>signal</td></tr><tr><td>唤醒所有线程</td><td>notifyAll</td><td>signalAll</td></tr></tbody></table><p>对于同一个锁，我们可以创建多个Condition，就是多个监视器的意思。在不同的情况下使用不同的Condition，Condition是被绑定到Lock上的，要创建一个Lock的Condition必须用newCondition()方法。</p><hr><hr><h3 id="二、ReadWriteLock"><a href="#二、ReadWriteLock" class="headerlink" title="二、ReadWriteLock"></a>二、ReadWriteLock</h3><p>ReentrantLock（可重入锁）是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。</p><blockquote><p>synchronized和ReentrantLock都是可重入锁，可重入性举个简单的例子，当一个线程执行到某个synchronized方法时，比如说method1，而在method1中会调用另外一个synchronized方法method2，此时线程不必重新去申请锁，而是可以直接执行方法method2。</p></blockquote><hr><h4 id="ReentrantReadWriteLock简介"><a href="#ReentrantReadWriteLock简介" class="headerlink" title="ReentrantReadWriteLock简介"></a>ReentrantReadWriteLock简介</h4><p>上面的响应中断的例子已经地使用到了ReentrantLock，下面来介绍另外一种锁，可重入读写锁ReentrantReadWriteLock，该类实现了ReadWriteLock接口，该接口的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</span><br><span class="line"><span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ReentrantReadWriteLock会使用两把锁来解决问题，一个读锁，一个写锁。</p></blockquote><ul><li><h5 id="线程进入读锁的前提条件："><a href="#线程进入读锁的前提条件：" class="headerlink" title="线程进入读锁的前提条件："></a>线程进入读锁的前提条件：</h5><ol><li>没有其他线程的写锁</li><li>没有写请求，或者有写请求但调用线程和持有锁的线程是同一个线程</li></ol></li><li><h5 id="进入写锁的前提条件："><a href="#进入写锁的前提条件：" class="headerlink" title="进入写锁的前提条件："></a>进入写锁的前提条件：</h5><ol><li>没有其他线程的读锁</li><li>没有其他线程的写锁</li></ol></li><li><h5 id="需要提前了解的概念："><a href="#需要提前了解的概念：" class="headerlink" title="需要提前了解的概念："></a>需要提前了解的概念：</h5><ul><li>锁降级：从写锁变成读锁；</li><li>锁升级：从读锁变成写锁。</li></ul></li></ul><blockquote><p>读锁是可以被多线程共享的，写锁是单线程独占的。也就是说写锁的并发限制比读锁高，这可能就是升级/降级名称的来源。</p></blockquote><p>ReadWriteLock接口只有获取读锁和写锁的方法，而ReentrantReadWriteLock是实现了ReadWriteLock接口，接着对其应用场景做简单介绍。</p><hr><h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><p>假设一个共享的文件，其属性是可读，如果某个时间有100个线程在同时读取该文件，如果通过synchronized或者Lock来实现线程的同步访问，那么有个问题来了，当这100个线程的某个线程获取到了锁后，其它的线程都要等该线程释放了锁才能进行读操作，这样就会造成系统资源和时间极大的浪费，而ReentrantReadWriteLock正好解决了这个问题。下面给一个简单的例子，并根据代码以及输出结果做简要说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRunnable myRunnable = newTest().new MyRunnable();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(myRunnable, <span class="string">"thread1"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(myRunnable, <span class="string">"thread2"</span>);</span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(myRunnable, <span class="string">"thread3"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ReadLock lock = <span class="keyword">new</span> ReentrantReadWriteLock().readLock();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"正在进行读操作"</span>);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"读操作完毕"</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1正在进行读操作</span><br><span class="line">thread1读操作完毕</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3正在进行读操作</span><br><span class="line">thread3读操作完毕</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2正在进行读操作</span><br><span class="line">thread2读操作完毕</span><br></pre></td></tr></table></figure><p>从输出结果可以看出，三个线程并没有交替输出，这是因为这里只是读取了5次，但将读取次数i的值改成一个较大的数值如100000时，输出结果就会交替的出现。</p><hr><blockquote><p>看了好多人的博文，在我看来，这个Lock的用处就是可以细化加锁和解锁的操作，使锁操作更加直观，可控</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java多线程 </tag>
            
            <tag> 锁 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天我也要当一个玄学boy</title>
      <link href="/2019/04/19/%E4%BB%8A%E5%A4%A9%E6%88%91%E4%B9%9F%E8%A6%81%E5%BD%93%E4%B8%80%E4%B8%AA%E7%8E%84%E5%AD%A6boy/"/>
      <url>/2019/04/19/%E4%BB%8A%E5%A4%A9%E6%88%91%E4%B9%9F%E8%A6%81%E5%BD%93%E4%B8%80%E4%B8%AA%E7%8E%84%E5%AD%A6boy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天在github上看到了一个优秀Java进阶知识点项目，顺带竟然还发现了一个优秀的歌曲《我的offer在哪里》，最近各种投递简历、笔试、面试，搞得头晕脑胀，身心俱疲，看来我也要玄学一下，顺便我博客的歌曲也正好换成这个，毕竟玄学就是第一生产力(ಡωಡ)。传送门一并送上~</p></blockquote><ul><li><a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener">互联网 Java 工程师进阶知识完全扫盲</a></li><li><a href="https://doocs.github.io/advanced-java/#/" target="_blank" rel="noopener">滚过来学习</a></li><li><a href="https://doocs.github.io/advanced-java/#/offer" target="_blank" rel="noopener">劳(quan)逸(kao)结(xuan)合(xue)</a></li></ul><p>网易云插件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1321616516&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><p>下面是歌词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">每天起床第一句 先给自己打个气</span><br><span class="line">每次刷新查成绩 都要说声保佑me</span><br><span class="line">魔镜魔镜告诉我 我的offer在哪里</span><br><span class="line">努力 我要努力 我要变成收割机</span><br><span class="line">offer offer</span><br><span class="line">我要变成收割机</span><br><span class="line">offer offer</span><br><span class="line"></span><br><span class="line">为了拿下BAT 天天提着一口气</span><br><span class="line">大厂小厂投简历 刷光面经笔试题</span><br><span class="line">天生我才难自弃 可惜面试都悲剧</span><br><span class="line">努力 我要努力 我要变成收割机</span><br><span class="line">Wow</span><br><span class="line"></span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">我的offer在哪里</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">拜拜 二次元 综艺直播动作片 言情玄幻宫斗剧</span><br><span class="line">拿走拿走别客气</span><br><span class="line"></span><br><span class="line">拜拜 铂金一 戒掉农药戒吃鸡 通宵开黑玩游戏</span><br><span class="line">别再熬夜伤身体</span><br><span class="line"></span><br><span class="line">来来 沉住气 专业课本重拾起 牛客网上刷真题</span><br><span class="line">保温杯里泡枸杞</span><br><span class="line"></span><br><span class="line">来来 深呼吸 对照镜子做练习</span><br><span class="line">单面群面全模拟 不拿offer不放弃</span><br><span class="line"></span><br><span class="line">为了拿下BAT 天天提着一口气</span><br><span class="line">大厂小厂投简历 刷光面经笔试题</span><br><span class="line">天生我才难自弃 可惜面试都悲剧</span><br><span class="line">努力 我要努力 我要变成收割机</span><br><span class="line">Wow</span><br><span class="line"></span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">在哪里在哪里在哪</span><br><span class="line">我的offer在哪里</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">拜拜 二次元 综艺直播动作片 言情玄幻宫斗剧</span><br><span class="line">拿走拿走别客气</span><br><span class="line"></span><br><span class="line">拜拜 铂金一 戒掉农药戒吃鸡 通宵开黑玩游戏</span><br><span class="line">别再熬夜伤身体</span><br><span class="line"></span><br><span class="line">来来 沉住气 专业课本重拾起 牛客网上刷真题</span><br><span class="line">保温杯里泡枸杞</span><br><span class="line"></span><br><span class="line">来来 深呼吸 对照镜子做练习</span><br><span class="line">单面群面全模拟 不拿offer不放弃</span><br><span class="line"></span><br><span class="line">奇了怪了 小的时候明明是妈妈说</span><br><span class="line">考上大学就好惹 没烦恼</span><br><span class="line">直到熟悉的大学的寝室都住不上了 原来毕了业</span><br><span class="line">没人要 才烦恼</span><br><span class="line">希望 offer</span><br><span class="line">钱是多哒</span><br><span class="line">HR</span><br><span class="line">超nice哒</span><br><span class="line">不如跟着节奏没在怕的 努努力</span><br><span class="line">别让校招季卡住你 卡住你</span><br><span class="line">不拿offer不放弃</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">拜拜 二次元 综艺直播动作片 言情玄幻宫斗剧</span><br><span class="line">拿走拿走别客气</span><br><span class="line"></span><br><span class="line">拜拜 铂金一 戒掉农药戒吃鸡 通宵开黑玩游戏</span><br><span class="line">别再熬夜伤身体</span><br><span class="line"></span><br><span class="line">来来 沉住气 专业课本重拾起 牛客网上刷真题</span><br><span class="line">保温杯里泡枸杞</span><br><span class="line"></span><br><span class="line">来来 深呼吸 对照镜子做练习</span><br><span class="line">单面群面全模拟 不拿offer不放弃</span><br><span class="line">不放弃</span><br><span class="line">燃烧我的卡路里</span><br><span class="line">不放弃</span><br><span class="line">燃烧我的卡路里</span><br><span class="line"></span><br><span class="line">我要变成收割机</span><br></pre></td></tr></table></figure></p><blockquote><p>文章刚写完就收到了七牛的笔试通知。。。。。看来玄学有望啊，哈哈哈哈哈哈，加油++，未来可期。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 企图玄学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 企图玄学 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见面试题的基础总结（JVM篇）</title>
      <link href="/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88JVM%E7%AF%87%EF%BC%89/"/>
      <url>/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88JVM%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、为什么Java一次编译，到处可运行"><a href="#1、为什么Java一次编译，到处可运行" class="headerlink" title="1、为什么Java一次编译，到处可运行"></a>1、为什么Java一次编译，到处可运行</h3><ul><li>因为只需要将java文件编译成字节码文件，在运行平台只要有JVM虚拟机就可以运行。这样Java在不同的平台也不需要重新编译，只需要虚拟机把字节码文件转换成具体平台的机器指令。</li></ul><hr><h3 id="2、JVM是如何加载文件的"><a href="#2、JVM是如何加载文件的" class="headerlink" title="2、JVM是如何加载文件的"></a>2、JVM是如何加载文件的</h3><ul><li>首先对于字节码文件，使用Class Loader将class文件记载到内存中。然后使用Exction Engine对命令进行解析。对于使用了不同开发文件的原生库我们可以使用Native interface来为Java所用。</li></ul><hr><h3 id="3、Java反射机制"><a href="#3、Java反射机制" class="headerlink" title="3、Java反射机制"></a>3、Java反射机制</h3><ul><li>对于任何一个类，我们都可以知道这个类的所有属性和方法，对弈任何一个对象我们都能调用他的任意方法和属性。这种动态获取信息以及动态调用对象的方法就是成为Java语言的反射机制。</li></ul><hr><h3 id="4、Class-Loader"><a href="#4、Class-Loader" class="headerlink" title="4、Class Loader"></a>4、Class Loader</h3><ul><li>Class Loader在Java中有着非常重要的作用，它主要工作在Class装载的加载过程，主要作用是从系统外获取Class的二进制数据流。所有的class都是由他来加载很系统，然后交给虚拟机进行连接初始化等操作。过程为<code>加载-链接（校验-准备-解析）-初始化</code></li></ul><hr><h3 id="5、loadClass和forName区别"><a href="#5、loadClass和forName区别" class="headerlink" title="5、loadClass和forName区别"></a>5、loadClass和forName区别</h3><ul><li>对于loadClass没有链接，而forName获取的是已经初始化的。优点就是没有链接初始化可以减少资源浪费，需要的时候再进行初始化。</li></ul><hr><h3 id="6、JVM内存模型"><a href="#6、JVM内存模型" class="headerlink" title="6、JVM内存模型"></a>6、JVM内存模型</h3><blockquote><p>主要分为程序计数器，虚拟机栈，本地方法栈  这几个是线程私有的。<br>而堆（包含常量池，数组和类对象）以及MetaSpace（类加载信息）是线程共享的。</p></blockquote><ul><li><p>程序计数器：记录当前线程执行的字节码行号的指示器，通过改变这个值来选取下一条需要执行的字节码指令。和线程是一对一的关系即“线程私有”的，对于Native方法计数为Undefine</p></li><li><p>Java虚拟机栈：包含Java方法执行的内存模型，包含多个栈帧。每个栈帧都含有局部变量表，操作栈还有动态连接，返回地址等数据</p></li></ul><p><img src="/images/常见面试题的基础总结（JVM篇）/4DDBB319-AF7D-441C-A222-DEC72ECEE2DA.png" alt="这里写图片描述"></p><ul><li><p>本地方法栈：与虚拟机栈相似，主要作用是标注了native方法</p></li><li><p>局部变量存储的是方法执行过程中的所有变量。<br>操作数栈：入栈、出栈、复制、交换、产生消费变量</p></li></ul><hr><h3 id="7、递归为什么会引发StackOverFlowError异常"><a href="#7、递归为什么会引发StackOverFlowError异常" class="headerlink" title="7、递归为什么会引发StackOverFlowError异常"></a>7、递归为什么会引发StackOverFlowError异常</h3><ul><li>多次递归一直入栈超出虚拟栈深度</li></ul><hr><h3 id="8、JVM三大性能调优参数"><a href="#8、JVM三大性能调优参数" class="headerlink" title="8、JVM三大性能调优参数"></a>8、JVM三大性能调优参数</h3><ul><li><code>-Xss</code>规定虚拟栈大大小</li><li><code>-Xms</code>堆的初始值</li><li><code>-Xmx</code>堆能达到的最大值</li></ul><hr><h3 id="9、Java内存模型中的堆和栈的区别-内存分配策略"><a href="#9、Java内存模型中的堆和栈的区别-内存分配策略" class="headerlink" title="9、Java内存模型中的堆和栈的区别-内存分配策略"></a>9、Java内存模型中的堆和栈的区别-内存分配策略</h3><ul><li>静态存储：编译时确定每个数据目标在运行时的存储空间需求</li><li>栈式存储：数据区需求在编译时未知，运行时模块入口确定</li><li>堆式存储：编译时或者运行时入口都无法确认，动态分配</li></ul><hr><h3 id="10、堆和栈的关系与区别"><a href="#10、堆和栈的关系与区别" class="headerlink" title="10、堆和栈的关系与区别"></a>10、堆和栈的关系与区别</h3><ul><li>联系:<ul><li>引用对象或者数组时，栈中变量保存的是堆中目标的首地址</li></ul></li><li>区别:<ul><li>管理方式:栈自动释放，堆需要GC</li><li>空间大小:栈比堆小</li><li>碎片相关:栈产生的随便远小于堆</li><li>分配方式:栈支持动态和静态分配，而堆仅支持动态分配</li><li>效率:因为底层数据结构不同所以栈效率高于堆</li></ul></li></ul><hr><h3 id="11、元空间、堆、栈、线程独占部分的联系——————内存角度"><a href="#11、元空间、堆、栈、线程独占部分的联系——————内存角度" class="headerlink" title="11、元空间、堆、栈、线程独占部分的联系——————内存角度"></a>11、元空间、堆、栈、线程独占部分的联系——————内存角度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span> + name);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        HelloWorld hw = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">        hw.setName(<span class="string">"test"</span>);</span><br><span class="line">        hw.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用参数<br>本地变量<br>局部变量</p><p><img src="/images/常见面试题的基础总结（JVM篇）/98DF0A18-E236-4284-84E8-4C06EB932965.png" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见面试题的基础总结（Java多线程篇）</title>
      <link href="/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87%EF%BC%89/"/>
      <url>/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、进程和线程的区别"><a href="#1、进程和线程的区别" class="headerlink" title="1、进程和线程的区别"></a>1、进程和线程的区别</h3><ul><li>运行一个程序会产生一个进程，进程包括至少一个线程</li><li>每个进程对应一个JVM实例，多个线程则是共享JVM的堆</li><li>Java采用单线程编程模型，程序会自动创建主线程</li><li>主线程可以创建子线程，原则上要后于子线程完成执行</li></ul><h3 id="2、Thead和Runnable什么关系"><a href="#2、Thead和Runnable什么关系" class="headerlink" title="2、Thead和Runnable什么关系"></a>2、Thead和Runnable什么关系</h3><p>Thread是实现了Runnable接口的类，使得run支持多线程<br>应为类的单一继承原则，所以推荐多使用Runnable接口</p><h3 id="3、如何给run（）传参"><a href="#3、如何给run（）传参" class="headerlink" title="3、如何给run（）传参"></a>3、如何给run（）传参</h3><ul><li>构造函数传参</li><li>成员变量传参 比如常见的set方法</li><li>回调函数传参<br>参考：<a href="https://blog.csdn.net/saycheesenn/article/details/52956331" target="_blank" rel="noopener">https://blog.csdn.net/saycheesenn/article/details/52956331</a></li></ul><h3 id="4、如何实现处理线程的返回值"><a href="#4、如何实现处理线程的返回值" class="headerlink" title="4、如何实现处理线程的返回值"></a>4、如何实现处理线程的返回值</h3><ul><li>主线程等待法  主线程等待子线程执行完毕</li><li>使用join（）阻塞当前线程等待执行完毕</li><li>通过Callable接口实现：通过FutureTask或者线程池获取</li></ul><p>如果使用FutureTask可以使用<code>isDone</code>方法可以判断是否执行完成</p><p><img src="/images/常见面试题的基础总结（Java多线程篇）/050B0CED-D039-4035-8797-81F8E8EE7C9E.png" alt="这里写图片描述"></p><p>对于线程池</p><p><img src="/images/常见面试题的基础总结（Java多线程篇）/627EF93D-E74D-4B44-ABAC-B280E924CAC6.png" alt="这里写图片描述"></p><h3 id="5、线程的状态："><a href="#5、线程的状态：" class="headerlink" title="5、线程的状态："></a>5、线程的状态：</h3><ul><li>新建：创建后还未启动的线程</li><li>运行：包含Runnable和Ready状态</li><li>无限期等待：需要显式唤醒 例如没有设置Timeout参数的<code>Object.wait()</code> 和 <code>Thread.join()</code></li><li>期限等待：在一定时间后会由系统自动唤醒  例如<code>Thread.sleep()</code>，设置了参数的<code>Object.wait()</code>和 <code>Thread.join()</code></li><li>阻塞状态：等待获取排它锁</li><li>结束：已终止线程的状态，线程已经结束执行</li></ul><h3 id="6、sleep和wait区别"><a href="#6、sleep和wait区别" class="headerlink" title="6、sleep和wait区别"></a>6、sleep和wait区别</h3><ul><li>sleep是Thread类的方法，wait是Object类的方法</li><li>sleep可以在任何地方使用</li><li>wait只能在<code>synchronized</code>方法或者<code>synchronized</code>块中使用</li><li>wait是通知当前线程等待然后释放对象锁，notify也是，所以如果没有获取对象锁就是没有意义的了</li></ul><h3 id="7、notify和notifyAll的区别"><a href="#7、notify和notifyAll的区别" class="headerlink" title="7、notify和notifyAll的区别"></a>7、notify和notifyAll的区别</h3><p>首先建立两个概念：</p><blockquote><p>锁池：假设对象A已经拥有了某个对象的锁，而其他线程想要调用这个对象的synchronize方法，所以其他线程会进入阻塞状态进入锁池等待锁的释放</p></blockquote><blockquote><p>等待池：假设线程A调用了某个对象的wait方法，线程A就会释放当前的锁然后进入等待池，进入等待池的线程不会去竞争锁</p></blockquote><ul><li>notifyAll会让所有处于等待池的线程全部进入锁池去竞争获取锁的机会</li><li>notify只会随机选取一个处于等待池中的线程进入锁池去竞争获取锁得机会</li></ul><h3 id="8、Yield"><a href="#8、Yield" class="headerlink" title="8、Yield"></a>8、Yield</h3><ul><li>当调用Thread.yield方法函数时，会给线程调度器一个当前线程愿意让出CPU使用的暗示，但是线程调度器可能会忽略这个暗示</li></ul><h3 id="9、如何中断线程"><a href="#9、如何中断线程" class="headerlink" title="9、如何中断线程"></a>9、如何中断线程</h3><ul><li>通过调用<code>stop（）</code>方法停止线程，通过<code>suspend</code>和<code>resume</code>方法（已经弃用）</li><li>调用<code>interrupt()</code>，通知线程应该中断了<ul><li>如果线程处于被阻塞状态，那么线程将立即退出被阻塞状态，并抛出一个<code>InterruptedException</code>异常</li><li>如果线程处于正常活动状态，那么该线程的中断标志位将设置为true，被设置的中断标志位的线程将继续正常运行不受影响。</li></ul></li><li>正常运行的任务是，经常检查本线程的中断标志位，如果被设置了中断标志就自行停止线程</li><li>如果线程处于活动状态，那么僵该线程的中断标志位设置为true，将设置中断标志的线程将继续正常运行，不受影响。</li></ul><h3 id="10、线程状态间的转换"><a href="#10、线程状态间的转换" class="headerlink" title="10、线程状态间的转换"></a>10、线程状态间的转换</h3><p><img src="/images/常见面试题的基础总结（Java多线程篇）/C55F6694-EB22-47DE-AE3B-0C5A53383AEE.png" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见面试题的基础总结（JavaGC篇）</title>
      <link href="/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88JavaGC%E7%AF%87%EF%BC%89/"/>
      <url>/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88JavaGC%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、Java的垃圾回收判断对象是否为垃圾有两种算法。"><a href="#1、Java的垃圾回收判断对象是否为垃圾有两种算法。" class="headerlink" title="1、Java的垃圾回收判断对象是否为垃圾有两种算法。"></a>1、Java的垃圾回收判断对象是否为垃圾有两种算法。</h3><ul><li>引用计数算法，本算法就是通过引用计数器来统计，当被引用+1，完成引用-1.任何对象实例引用为0时就可以当做垃圾收集，优点是执行效率高，问题是循环引用会出现问题。</li><li>可达性分析算法，通过判断对象的引用链来决定对象是否可达。如果不可达便被回收。可作为GC ROOT的对象有虚拟机栈中引用的对象、方法区中的常量引用的对象，方法区中的类静态属性引用的对象还有Native方法引用的对象，以及活跃线程的引用对象。</li></ul><hr><h3 id="2、常见的垃圾回收算法"><a href="#2、常见的垃圾回收算法" class="headerlink" title="2、常见的垃圾回收算法"></a>2、常见的垃圾回收算法</h3><p><img src="/images/常见面试题的基础总结（JavaGC篇）/87EED0DF-D176-4236-A8FF-7C19199A26BD.png" alt="这里写图片描述"></p><ul><li><p>标签-清除算法<br>对存活对象进行标记，清除是从头到尾进行线性遍历，回收不可达的对象内存。问题时容易碎片化。</p></li><li><p>复制算法<br>分为对象面和空闲面。存活的对象从对象面复制到空闲面，同时将对象面的清空。优点是解决了碎片化的问题，顺序分配内存简单高效，适用于对象存活率低的场景。年轻代因为存活较少，所以适合于用复制算法</p></li><li><p>标记-整理算法<br>标记就是从GC ROOT进行扫描对存活对象进行标记，然后移动所有存活的对象，且按照内存地址依次有序排列，然后将末端的内存地址以后的内存都进行回收。有点是避免了内存的不连续行，且不用进行两块内存互换，适用于存活率高德场景。</p></li><li><p>分代收集算法<br>分代收集算法就是多种算法的集合，其中年轻代使用复制算法，老年代使用标记整理算法。JDK7之前有新生代，老年代和永久代。JDK7之后只有新生代和老年代没有了新生代。</p><ul><li>年轻代分为eden区和两个servivor区，当进行垃圾回收时，存活的对象计数会加一，同时复制到servivor中的from区，然后将eden区清空，当第二次进行GC时eden区同理，但是servivor区仍然会计数加1然后复制到另一个servivor中。直到某个存活对象的技术超过某个值然后该对象进入老年代。</li><li>老年代常用的是标记-清除和标记整理算法,其中新生代老年代一半了比例为1:2</li></ul></li></ul><hr><h3 id="3、对于新生代如何晋升老年代有三种情况："><a href="#3、对于新生代如何晋升老年代有三种情况：" class="headerlink" title="3、对于新生代如何晋升老年代有三种情况："></a>3、对于新生代如何晋升老年代有三种情况：</h3><ul><li>经历了多次MinorGC后仍然存活</li><li>survivor区中存放不下大对象</li><li>新生成的大对象</li></ul><hr><h3 id="4、常见得到调优参数"><a href="#4、常见得到调优参数" class="headerlink" title="4、常见得到调优参数"></a>4、常见得到调优参数</h3><ul><li><code>-XX:SurvivorRatio</code> : Eden和Survivor的比值,默认8 : 1</li><li><code>-XX:NewRatio</code>: 老年代和年轻代内存大小的比例</li><li><code>-XX:MaxTenuringThreshold</code>:对象从年轻代晋升到老生代经过GC次数的最大阈值</li></ul><hr><h3 id="5、触发GC的条件为"><a href="#5、触发GC的条件为" class="headerlink" title="5、触发GC的条件为"></a>5、触发GC的条件为</h3><p>老年代的FULL GC还有MajorGC比年轻代的MinorGC慢，但是执行频率低。</p><ul><li>老年代空间不足</li><li>CMS GC后老年代不足</li><li>年轻代晋升老年代的空间大于剩余空间</li><li>调用了<code>System.gs()</code></li></ul><hr><h3 id="6、常见垃圾收集器"><a href="#6、常见垃圾收集器" class="headerlink" title="6、常见垃圾收集器"></a>6、常见垃圾收集器</h3><ul><li>ParNew收集器( -XX:+UseParNewGC ,复制算法)</li></ul><ol><li>多线程收集,其余的行为、特点和Serial收集器一样</li><li>单核执行效率不如Serial ,在多核下执行才有优势</li></ol><ul><li><p>CMS收集器(标记清除算法)</p><blockquote><p>垃圾回收线程几乎可以与用户线程同时工作，对停顿比较敏感，并且可以提供更强的硬件，如果JVM中存在较多存在时间较长的对象，更适合使用CMS。其中初始标记和重新标记是需要s-t-w</p><ol><li>初始标记：进入s-t-w</li><li>并发标记：并发追溯标记程序不会停顿</li><li>并发预清理：查找并发标记阶段新生代晋升老年代的对象</li><li>重新标记：暂停虚拟机扫描CMS堆中的剩余对象</li><li>并发清理，清理对象，程序不会停顿</li><li>并发重置：重置CMS收集器的数据结构</li></ol></blockquote></li><li><p>G1收集器 Garbage First收集器(复制+标记整理算法)</p><blockquote><p>本收集器是将整个Java堆内存划分为多个大小相等的region，然后新生代和老年代不进行了物理隔离。</p></blockquote></li><li>特点：<ol><li>并发和并行</li><li>分带收集</li><li>空间整合</li><li>可预测的停顿</li></ol></li></ul><hr><h3 id="7、强引用，软引用，弱引用，虚引用"><a href="#7、强引用，软引用，弱引用，虚引用" class="headerlink" title="7、强引用，软引用，弱引用，虚引用"></a>7、强引用，软引用，弱引用，虚引用</h3><p><img src="/images/常见面试题的基础总结（JavaGC篇）/6095F9F4-8194-436E-85BD-526F77C76259.png" alt="这里写图片描述"></p><ul><li><p>强引用是最常见的引用如： Object object = new Object（）；<br>即使内存不足也不会被回收，但是我们可以通过将对象设置为null来弱化引用，使其被回收。</p></li><li><p>软引用是对象处在有用但是非必须的状态，只有内存不足时才会被回收<br>可以实现高速缓存，使用方法如下：<br>SoftReference <string> softStr = new SoftReference(str);</string></p></li><li><p>弱引用比软引用更弱一下，然后GC时会被回收，适用于偶尔使用但是不影响垃圾收集的对象。</p></li></ul><hr><h3 id="8、其他的常见概念"><a href="#8、其他的常见概念" class="headerlink" title="8、其他的常见概念"></a>8、其他的常见概念</h3><h5 id="Stop-the-world"><a href="#Stop-the-world" class="headerlink" title="Stop-the-world"></a>Stop-the-world</h5><ul><li>在GC过程中会有Stop-the-world也就是执行GC时虚拟机会停止应用程序的执行，而且是在所有GC算法中都会发生，多数的GC通过减少s-t-w发生时间来提高程序性能</li></ul><h5 id="SafePoint"><a href="#SafePoint" class="headerlink" title="SafePoint"></a>SafePoint</h5><ul><li>分析过程中对象引用关系不会改变的点，常见的点有方法调用，循环跳转，异常跳转。安全点数量应该适中，过多过少都不好。</li></ul><h5 id="JVM有两种运行模式Server和Client"><a href="#JVM有两种运行模式Server和Client" class="headerlink" title="JVM有两种运行模式Server和Client"></a>JVM有两种运行模式Server和Client</h5><ul><li>常见两个模式server启动慢但是启动后性能更好，因为server底层是一个更大的虚拟机,可以使用<code>java -version</code>来查询是哪一种模式下的</li></ul><h5 id="Object的finalize方法"><a href="#Object的finalize方法" class="headerlink" title="Object的finalize方法"></a>Object的finalize方法</h5><ul><li>Object的finalize方法是不确定的，不一定会执行。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见面试题的基础总结（数据库篇）</title>
      <link href="/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87%EF%BC%89/"/>
      <url>/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、为什么要使用索引"><a href="#1、为什么要使用索引" class="headerlink" title="1、为什么要使用索引"></a>1、为什么要使用索引</h3><ul><li>为了快速查询数据</li></ul><hr><h3 id="2、如何创建索引"><a href="#2、如何创建索引" class="headerlink" title="2、如何创建索引"></a>2、如何创建索引</h3><ul><li><p>唯一索引<br><code>CREATE UNIQUE INDEX 索引名称 ON 表名称 (列名称)</code></p></li><li><p>简单索引<br><code>CREATE INDEX 索引名称 ON 表名称 (列名称)</code></p></li></ul><hr><h3 id="3、普通索引，唯一索引，主键索引，全文索引，组合索引"><a href="#3、普通索引，唯一索引，主键索引，全文索引，组合索引" class="headerlink" title="3、普通索引，唯一索引，主键索引，全文索引，组合索引"></a>3、普通索引，唯一索引，主键索引，全文索引，组合索引</h3><ul><li>一个表只能有一个主键索引，可以有多个唯一索引；</li><li>主键索引一定是唯一索引， 唯一索引不是主键索引；。</li><li>普通索引：最基本的索引，没有任何限制</li><li>唯一索引：与”普通索引”类似，不同的就是：索引列的值必须唯一，但允许有空值。</li><li>主键索引：它是一种特殊的唯一索引，不允许有空值。 </li><li>全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时好空间。</li><li>组合索引：为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。</li></ul><hr><h3 id="4、密集索引，稀疏索引"><a href="#4、密集索引，稀疏索引" class="headerlink" title="4、密集索引，稀疏索引"></a>4、密集索引，稀疏索引</h3><ul><li>密集索引：每个搜索码值都对应一个索引值</li><li>稀疏索引：只为某些值建立索引</li></ul><hr><h3 id="5、什么是最左前缀原则"><a href="#5、什么是最左前缀原则" class="headerlink" title="5、什么是最左前缀原则"></a>5、什么是最左前缀原则</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user2`</span> (</span><br><span class="line">  <span class="string">`userid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`usertype`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`userid`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`a_b_c_index`</span> (<span class="string">`username`</span>,<span class="string">`password`</span>,<span class="string">`usertype`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>上表中有一个联合索引，下面开始验证最左匹配原则。</p><ul><li>当存在username时会使用索引查询：<br><code>explain select * from user2 where username = &#39;1&#39; and password = &#39;1&#39;;</code></li><li>当没有username时，不会使用索引查询：<br><code>explain select * from user2 where password = &#39;1&#39;;</code></li><li>当有username，但顺序乱序时也可以使用索引：<br><code>explain select * from user2 where password = &#39;1&#39; and username = &#39;1&#39;;</code></li></ul><p>在最左匹配原则中，有如下说明：</p><ul><li>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如<code>a = 1 and b = 2 and c &gt; 3 and d = 4</code> 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</li><li>=和in可以乱序，比如<code>a = 1 and b = 2 and c = 3</code> 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</li><li>最左前缀的成因也不难理解：就是生成索引是先按照第一个索引，再按照第二个索引。如果只有第二个条件，此时第二个条件的索引是无序的。</li></ul><hr><h3 id="6、索引失效的几种情况"><a href="#6、索引失效的几种情况" class="headerlink" title="6、索引失效的几种情况"></a>6、索引失效的几种情况</h3><ul><li>如果条件中有or，即使其中有条件带索引也不会使用(这也是为什么尽量少用or的原因)要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引</li><li>对于多列索引，不是使用的第一部分，则不会使用索引</li><li>like查询以%开头</li><li>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引</li><li>如果mysql估计使用全表扫描要比使用索引快,则不使用索引</li></ul><hr><h3 id="7、主键，复合主键，联合主键"><a href="#7、主键，复合主键，联合主键" class="headerlink" title="7、主键，复合主键，联合主键"></a>7、主键，复合主键，联合主键</h3><ul><li>主键是能唯一表示一条数据的字段</li><li>复合主键是多个字段的组合</li><li>联合主键是多个表之间的通过给的数据表主键然后创建的联合主键</li></ul><hr><h3 id="8、常见索引的数据结构"><a href="#8、常见索引的数据结构" class="headerlink" title="8、常见索引的数据结构"></a>8、常见索引的数据结构</h3><p>二叉搜索树</p><p>B-tree<br><img src="/images/常见面试题的基础总结（数据库篇）/FB9AF3CC-91EE-45A0-84B8-252F43013CE8.png" alt="这里写图片描述"><br>b+-tree<br><img src="/images/常见面试题的基础总结（数据库篇）/4D1E71C6-E9E1-4818-82F2-E0B5B36647EE.png" alt="这里写图片描述"></p><p>Hash</p><hr><h3 id="9、b-树和Hash优缺点"><a href="#9、b-树和Hash优缺点" class="headerlink" title="9、b+树和Hash优缺点"></a>9、b+树和Hash优缺点</h3><ul><li>B+树的磁盘读写代价更低</li><li>B +树的查询效率更加稳定</li><li>B+树更有利于对数据库的扫描</li><li>Hash仅仅能满足“=”, “IN”,</li><li>Hash不能使用范围查询</li><li>Hash无法被用来避免数据的排序操作</li><li>Hash不能利用部分索引键查询</li><li>Hash不能避免表扫描</li><li>Hash遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高</li></ul><hr><h3 id="10、b数和b-数区别"><a href="#10、b数和b-数区别" class="headerlink" title="10、b数和b+数区别"></a>10、b数和b+数区别</h3><ul><li>b数每个节点都存储key和data，叶子节点的指针为null</li><li>b+数只有叶子节点存储data，叶子节点包含了这个数的所有键值，叶子节点不存值</li></ul><hr><h3 id="11、如何定位慢查询"><a href="#11、如何定位慢查询" class="headerlink" title="11、如何定位慢查询"></a>11、如何定位慢查询</h3><ul><li>根据慢日志查询SQL语句 使用 show variables like ‘%query%’ 可以将slow_query_log选项开启，同时可以查看慢日志的路径</li><li>使用Explain关键字，即在普通SQL语句前加上Explain，可通过查看extra项和type项看是否使用到了索引</li><li>最左匹配原则</li></ul><hr><h3 id="12、索引是建立的越多越好吗"><a href="#12、索引是建立的越多越好吗" class="headerlink" title="12、索引是建立的越多越好吗"></a>12、索引是建立的越多越好吗</h3><ul><li>数据量小不需要索引</li><li>经常变更同时也需要维护索引，意味着更多的维护成本</li><li>更多索引以为这更多的空间</li></ul><hr><h3 id="13、InnoDB和MyISAM区别以及各自适合场景"><a href="#13、InnoDB和MyISAM区别以及各自适合场景" class="headerlink" title="13、InnoDB和MyISAM区别以及各自适合场景"></a>13、InnoDB和MyISAM区别以及各自适合场景</h3><ul><li>InnoDb数据索引在一个文件中。MyISAM数据与索引为两个文件</li><li>MyISAM默认用的是表级锁,不支持行级锁</li><li>InnoDB默认用的是行级锁,也支持表级锁</li><li>MyISAM适合于频繁执行全表count语句，同时对增删改频率不高，查询频繁，没有事务</li><li>InnoDB适合于增删改查都相当频繁，同时可靠性要求比较高，要求支持事务</li></ul><hr><h3 id="14、数据库不同隔离级别下遇到的问题"><a href="#14、数据库不同隔离级别下遇到的问题" class="headerlink" title="14、数据库不同隔离级别下遇到的问题"></a>14、数据库不同隔离级别下遇到的问题</h3><p>本问题可参考本博客之前的文章：<a href="https://suiwo.xyz/2019/02/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6/">传送门</a></p><p><img src="/images/常见面试题的基础总结（数据库篇）/A86B95F0-68CE-4201-90B5-8AFA5D50005E.png" alt="这里写图片描述"></p><hr><h3 id="15、事务的ACID"><a href="#15、事务的ACID" class="headerlink" title="15、事务的ACID"></a>15、事务的ACID</h3><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><hr><h3 id="16、数据库的优化"><a href="#16、数据库的优化" class="headerlink" title="16、数据库的优化"></a>16、数据库的优化</h3><h5 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h5><ul><li>读写分离从字面意思就可以理解，就是把对数据库的读操作和写操作分离开。读写分离在网站发展初期可以一定程度上缓解读写并发时产生锁的问题，将读写压力分担到多台服务器上，通常用于读远大于写的场景。</li><li>读写分离的基本原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。单表的数据量限制，当单表数据量到一定条数之后数据库性能会显著下降。数据多了之后，对数据库的读、写就会很多。分库减少单台数据库的压力。</li></ul><h5 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h5><ul><li>主从复制，是用来建立一个和主数据库完全一样的数据库环境，称为从数据库；</li><li>主数据库一般是实时的业务数据库，从数据库的作用和使用场合一般有几个：<ul><li>一是作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作；</li><li>二是可在从数据库作备份、数据统计等工作，这样不影响主数据库的性能；</li></ul></li></ul><hr><h3 id="17、InnoDB如何手动设置共享锁和排它锁"><a href="#17、InnoDB如何手动设置共享锁和排它锁" class="headerlink" title="17、InnoDB如何手动设置共享锁和排它锁"></a>17、InnoDB如何手动设置共享锁和排它锁</h3><ul><li>共享锁也叫读锁，简称S锁，原理：一个事务获取了一个数据行的共享锁，其他事务能获得该行对应的共享锁，但不能获得排他锁，即一个事务在读取一个数据行的时候，其他事务也可以读，但不能对该数据行进行增删改。</li><li>排他锁也叫写锁，简称x锁，原理：一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁（排他锁或者共享锁），即一个事务在读取一个数据行的时候，其他事务不能对该数据行进行增删改查。<h5 id="如何设置共享锁和排他锁？"><a href="#如何设置共享锁和排他锁？" class="headerlink" title="如何设置共享锁和排他锁？"></a>如何设置共享锁和排他锁？</h5></li><li>设置共享锁：<code>SELECT ... LOCK IN SHARE MODE;</code></li><li>设置排他锁：<code>SELECT ... FOR UPDATE;</code></li></ul><hr><h3 id="18、redis基础数据结构"><a href="#18、redis基础数据结构" class="headerlink" title="18、redis基础数据结构"></a>18、redis基础数据结构</h3><blockquote><p>redis相关问题可参考之前的一些文章：</p><ul><li><a href="https://suiwo.xyz/2019/02/14/redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97/">redis如何实现异步队列</a></li><li><a href="https://suiwo.xyz/2019/02/13/redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/">redis如何实现分布式锁</a></li></ul></blockquote><ul><li><p>string：是一个可变的字节数组</p><ul><li><code>set name zhangsan</code>（增加）</li><li><code>get name</code>（删除）</li><li><code>strlen name</code>（获取长度）</li><li><code>getrange name 1 10</code>（获取1-10的字符）</li><li><code>append name ishahaha</code>（追加字符，此时name 为 zhangsanis）</li><li><code>decrby name 100</code>（name的值减100）</li><li><code>Incrby name 100</code>（name的值加100）</li></ul></li><li><p>List：是一个列表数据结构，且是双向链表<br>常见操作：<code>rpop</code>，<code>rpush</code>，<code>lpop</code>，<code>lpush</code>，<code>llen（长度）</code>，<code>lrange</code>，<code>lset name 1 lisi（将list的第二个元素修改成lisi）</code>，<code>lrem（删除）</code></p></li><li><p>Hash：等价于HashMap<br>常见操作：<code>hset（添加一个元素）</code>，<code>hmset（添加多个元素）</code>，<code>hget（获取一个元素）</code>，<code>hmget（获取多个元素）</code>，<code>hkeys（获取所有键）</code>，<code>hvals（获取所有值）</code>，<code>hdel（删除元素）</code></p></li><li><p>Set：类似于HashSet，所以value指向同一个键。<br>常见操作：<code>sadd（添加）</code>，<code>smembers（获取所有value）</code>，<code>scard（获取长度）</code>，<code>srandmember（获取随机元素）</code>，<code>srem（删除元素）</code>，<code>spop（随机删除元素）</code>，<code>sismember（判断元素是否存在）</code></p></li><li><p>Sortset：类似于优先队列set中每一个元素有一个score<br>常见操作：<code>zadd（添加）</code>，<code>zcard（获取长度）</code>，<code>zrem（删除元素）</code>，<code>zremrangebyrank（根据排名删除）</code>，<code>zremrangebyscore（根据成绩删除）</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见面试题的基础总结（计网篇）</title>
      <link href="/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E8%AE%A1%E7%BD%91%E7%AF%87%EF%BC%89/"/>
      <url>/2019/04/13/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E8%AE%A1%E7%BD%91%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于这些内容都是比较早之前进行的整理的，所以有的部分是参考了他人的博文，但是由于是之前找的，所以具体的博文链接找不到了，如果原博主看到这个文章或者有人知道其中部分内容的原博文，请与我联系，我将加上原链接，谢谢</p></blockquote><hr><h3 id="1、OSI七层协议模型-TCP-IP四层体系结构"><a href="#1、OSI七层协议模型-TCP-IP四层体系结构" class="headerlink" title="1、OSI七层协议模型    TCP/IP四层体系结构"></a>1、OSI七层协议模型    TCP/IP四层体系结构</h3><table><thead><tr><th>OSI七层协议模型</th><th>TCP/IP四层体系结构</th><th>对应网络协议</th></tr></thead><tbody><tr><td>应用层</td><td>应用层（对应OSI应用层、表示层、会话层）</td><td>HTTP、TFTP、NFS、WAIS、SMTP</td></tr><tr><td>表示层</td><td></td><td>Telnet、Rlogin、SNMP、Gopher</td></tr><tr><td>会话层</td><td></td><td>SMTP、DNS</td></tr><tr><td>传输层</td><td>传输层</td><td>TCP、UDP</td></tr><tr><td>网络层</td><td></td><td>IP、ICMP、ARP、RARP、AKP、UUCP</td></tr><tr><td>数据链路层</td><td>网络接口层（对应OSI数据链路层、物理层）</td><td>FDDI、Ethernet、Arpanet、PDN、SLIP、PPP</td></tr><tr><td>物理层</td><td></td><td>IEEE 802.1A、IEEE 802.2到IEEE 802.11</td></tr></tbody></table><hr><h3 id="2、TCP三次握手"><a href="#2、TCP三次握手" class="headerlink" title="2、TCP三次握手:"></a>2、TCP三次握手:</h3><ul><li><p>C端:客户端; S服务端</p></li><li><p>第一次握手: C端向S端发送SYN数据包〈SYN=1，序列号=x)。A迸入SYN_ SENT状志，等待服务端确认。</p></li><li>第二次握手: S端收到SYN数据包并进行确认(SYN=1, ACK number=x+1, ACK=1,序列号=y)，再发送SYN+ACK数据包给C端，S端迸入SYN_ RCVD状志。</li><li>第三次握手: C端收到SYN+ACK数据包，如果ACK number=x+1,将ACK number设置为y+1, ACK=1，向S端发送ACK数据包，C端和S端都进入ESTABLISHED (已连接)状志。</li><li>简述:我连你，你同意，我再连你（成功）。</li></ul><p><img src="/images/常见面试题的基础总结（计网篇）/00B30835-5B39-4B03-994C-8480EBFCD6B6.png" alt="这里写图片描述"></p><h5 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手?"></a>为什么要三次握手?</h5><p>为了防止已失效的连接请求报文段突然又传到了服务端，产生错误。同时保证发送双方的消息发送与接收功能都可用。</p><blockquote><ul><li>解释:报文段已发送，在某个网络节点发生滞留，导致连接释放,释放后报文才到达另一端。</li><li>例如: C端发送SYN报文给S端，连接被释放后，S端才收到报文并误认为这是C端的新连接，给C端发送SYN+ACK报文，这是无法得到C端回应的，因为连接已无效。</li></ul></blockquote><hr><h3 id="3、TCP四次挥手"><a href="#3、TCP四次挥手" class="headerlink" title="3、TCP四次挥手"></a>3、TCP四次挥手</h3><ul><li>第一次挥手: A给B发送FIN报文(序列号=x)，A进入FIN_WAIT_1状态，表示A没有数据给B了。</li><li>第二次挥手: B收到FIN报文后，给A发送ACK报文(ACK=x+1)，A进入FIN_WAIT_2状态,B同意A关闭请求。</li><li>第三次挥手: B向A发送FIN报文(序列号=y)，请求关闭连接，B进入LAST_ACK状态。</li><li>第四次挥手: A收到FIN报文,向B发送ACK报文(ACK=y+1) , A进入TIME_WAIT状态，B收到ACK报文后关闭连接，A在2MSL后依然没收到回复，证明B端己关闭，A就可以关闭连接了。</li><li>简述:我要关闭，你同意，你要关闭，我同意你先关闭我再关闭。</li></ul><p><img src="/images/常见面试题的基础总结（计网篇）/41B7433B-AC8B-4F56-94B7-7A0F773F8362.png" alt="这里写图片描述"></p><h5 id="为什么TCP要四次挥手"><a href="#为什么TCP要四次挥手" class="headerlink" title="为什么TCP要四次挥手?"></a>为什么TCP要四次挥手?</h5><ul><li>TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。</li><li>TCP是全双工模式，主机1请求关闭连接，不再发送数据了，但是可以接收主机2的数据，主机2不再发送数据了，才算关闭，这样减小了丢失数据的风险。</li></ul><hr><h3 id="4、TIME-WAIT和CLOSE-TIME原因"><a href="#4、TIME-WAIT和CLOSE-TIME原因" class="headerlink" title="4、TIME-WAIT和CLOSE-TIME原因"></a>4、TIME-WAIT和CLOSE-TIME原因</h3><p>TCP要保证在所有可能的情况下使得所有的数据都能够被正确送达。当你关闭一个socket时，主动关闭一端的socket将进入TIME_WAIT状态，而被动关闭一方则转入CLOSED状态，这的确能够保证所有的数据都被传输。当一个socket关闭的时候，是通过两端四次握手完成的，当一端调用close()时，就说明本端没有数据要发送了。这好似看来在握手完成以后，socket就都可以处于初始的CLOSED状态了，其实不然。原因是这样安排状态有两个问题， 首先，我们没有任何机制保证最后的一个ACK能够正常传输，第二，网络上仍然有可能有残余的数据包(wandering duplicates)，我们也必须能够正常处理。</p><hr><h3 id="5、HTTP常见请求"><a href="#5、HTTP常见请求" class="headerlink" title="5、HTTP常见请求"></a>5、HTTP常见请求</h3><ul><li>Get 请求指定页面</li><li>Head 获取报头</li><li>Post 请求可能会导致资源建立</li><li>Put 修改资源</li><li>Delete 删除资源</li><li>Options 获取服务器性能</li></ul><hr><h3 id="6、HTTP常见状态码"><a href="#6、HTTP常见状态码" class="headerlink" title="6、HTTP常见状态码"></a>6、HTTP常见状态码</h3><ul><li>1xx    信息，服务器收到请求，需要请求者继续执行操作</li><li>2xx    成功，操作被成功接收并处理</li><li>3xx    重定向，需要进一步的操作以完成请求</li><li>4xx    客户端错误，请求包含语法错误或无法完成请求</li><li>5xx    服务器错误，服务器在处理请求的过程中发生了错误</li></ul><hr><h3 id="7、HTTP与HTTPS"><a href="#7、HTTP与HTTPS" class="headerlink" title="7、HTTP与HTTPS"></a>7、HTTP与HTTPS</h3><p>HTTP使用80端口，HTTPS使用443端口，其中HTTPS是由SSL+HTTP协议构建的可进行加密传输，身份认证的网络协议。SSL是安全套接层在传输层</p><hr><h3 id="8、HTTP-keep-alive"><a href="#8、HTTP-keep-alive" class="headerlink" title="8、HTTP keep-alive"></a>8、HTTP keep-alive</h3><p>参考：<a href="https://segmentfault.com/a/1190000012894416" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012894416</a><br>我们知道HTTP协议采用“请求-应答”模式，当使用普通模式，即非KeepAlive模式时，每个请求/应答客户和服务器都要新建一个连接，完成 之后立即断开连接（HTTP协议为无连接的协议）；当使用Keep-Alive模式（又称持久连接、连接重用）时，Keep-Alive功能使客户端到服 务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p><hr><h3 id="9、TCP-keepalive"><a href="#9、TCP-keepalive" class="headerlink" title="9、TCP keepalive"></a>9、TCP keepalive</h3><p> 概念:</p><ul><li>在使用TCP长连接（复用已建立TCP连接）的场景下，需要对TCP连接进行保活，避免被网关干掉连接。<br>在应用层，可以通过定时发送心跳包的方式实现。而Linux已提供的TCP KEEPALIVE，在应用层可不关心心跳包何时发送、发送什么内容，由OS管理：OS会在该TCP连接上定时发送探测包，探测包既起到连接保活的作用，也能自动检测连接的有效性，并自动关闭无效连接。</li></ul><p>原理:</p><ul><li>建立TCP连接时，就有定时器与之绑定，其中的一些定时器就用于处理keepalive过程。当keepalive定时器到0的时候，便会给对端发送一个不包含数据部分的keepalive探测包（probe packet），如果收到了keepalive探测包的回复消息，那就可以断定连接依然是OK的。如果我们没有收到对端keepalive探测包的回复消息，我们便可以断定连接已经不可用，进而采取一些措施。但Keepalive会额外产生一些网络数据包外，这些包将加大网络流量，对路由器和防火墙造成一定的负担。</li></ul><hr><h3 id="10、TCP滑动窗口"><a href="#10、TCP滑动窗口" class="headerlink" title="10、TCP滑动窗口"></a>10、TCP滑动窗口</h3><p>TCP滑动窗口具有拥塞控制和保证可靠性的功能</p><ul><li>对于拥塞控制，滑动窗口是可变大小的，如果滑动窗口发生拥塞控制则将窗口大小置为1，然后对长度进行2的指数增长，直到窗口大小可满足数据传输或者大小到达阈值。</li><li>对于可靠性，接收双方具有同样大小的窗口，然后对数据进行编号，如果接收端没有收到某部分信息就会发送请求给发送方然后重新发送未接收到的部分。</li></ul><hr><h3 id="11、TCP-UDP比较"><a href="#11、TCP-UDP比较" class="headerlink" title="11、TCP/UDP比较"></a>11、TCP/UDP比较</h3><table><thead><tr><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>TCP面向连接</td><td>UDP无连接</td></tr><tr><td>TCP是无界的</td><td>UDP是有界的</td></tr><tr><td>TCP可靠</td><td>UDP不可靠</td></tr><tr><td>TCP具有拥塞控制</td><td>UDP没有</td></tr><tr><td>TCP效率低</td><td>UDP效率高</td></tr><tr><td>TCP适合一对一连接</td><td>UDP适合广播、多播</td></tr><tr><td>TCP结构复杂</td><td>UDP结构简单</td></tr><tr><td>TCP能保证发送顺序</td><td>UDP无法保证</td></tr><tr><td>TCP使用字节流</td><td>UDP面向数据报</td></tr></tbody></table><ul><li>为什么TCP是无界的：例如TCP可能将一个连续数据分成多块发送，此时无法确认数据大小。</li><li>为什么UDP不可靠：因为TCP是面向连接的具有重传等机制，而UDP不会重传。</li><li>数据报：封装数据，目的地址，源地址，端口号</li></ul><hr><h3 id="12、Cookie、Session"><a href="#12、Cookie、Session" class="headerlink" title="12、Cookie、Session"></a>12、Cookie、Session</h3><ul><li>Cookie是由服务器端生成，发送给User-Agent（一般是浏览器），浏览器会将Cookie的key/value保存到某个目录下的文本文件内，下次请求同一网站时就发送该Cookie给服务器（前提是浏览器设置为启用cookie）。</li><li>Cookie名称和值可以由服务器端开发自己定义，这样服务器可以知道该用户是否合法用户以及是否需要重新登录等，服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。</li></ul><h5 id="Cookie和Session的区别与关系"><a href="#Cookie和Session的区别与关系" class="headerlink" title="Cookie和Session的区别与关系"></a>Cookie和Session的区别与关系</h5><ul><li>session 在服务器端，cookie 在客户端（浏览器）</li><li>session 默认被存在在服务器的一个文件里（不是内存）</li><li>session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）</li><li>session 可以放在 文件、数据库、或内存中都可以。</li><li>用户验证这种场合一般会用 session</li><li>由于http协议是无状态的，服务器需要记录用户的状态，所以cookie和session都是用来保持状态的方案，session又依赖cookie。</li></ul><hr><h3 id="13、Token"><a href="#13、Token" class="headerlink" title="13、Token"></a>13、Token</h3><h5 id="（1）Session和Token的区别"><a href="#（1）Session和Token的区别" class="headerlink" title="（1）Session和Token的区别"></a>（1）Session和Token的区别</h5><ul><li>session一般在cookie中传递而token一般放在header中</li></ul><h5 id="（2）Token的使用-Json-Web-Token"><a href="#（2）Token的使用-Json-Web-Token" class="headerlink" title="（2）Token的使用 Json Web Token"></a>（2）Token的使用 Json Web Token</h5><ul><li>jwt的token包括三个部分，分别是header，payload，还有signature，header就是放的类型还有加密方式，然后payload主要就是放签发信息，签发时间还有身份权限等自定义的信息，最后一个签名就是对前两部分进行加密，防止被人篡改，将用户的非私密信息传给前端。</li></ul><hr><h3 id="14、当打开一个浏览器输入url到请求道页面的整个过程"><a href="#14、当打开一个浏览器输入url到请求道页面的整个过程" class="headerlink" title="14、当打开一个浏览器输入url到请求道页面的整个过程"></a>14、当打开一个浏览器输入url到请求道页面的整个过程</h3><ol><li>DNS解析 将域名转化为IP地址</li><li>TCP连接 与服务器建立连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><hr><h3 id="15、restful常见请求方法"><a href="#15、restful常见请求方法" class="headerlink" title="15、restful常见请求方法"></a>15、restful常见请求方法</h3><blockquote><p>restfual分别有GET \ POST \ PUT \ DELETE \ TRACE \ HEAD \ OPTIONS \  PATCH \ 等几种请求方法</p></blockquote><ul><li>POST : POST请求通常用来创建一个实体，也就是一个没有ID的资源。</li><li>GET：从服务器取回数据（只是取回数据，而不会产生其他的影响）。这是一个幂等的方法（译者注：使用相同的参数重复执行，应该能够获取到相同的结果）。</li><li>PUT  ：PUT请求和POST请求类似，但是一般用来更新一个已有的实体。通过把已经存在的资源的ID和新的实体用PUT请求上传的服务器，来更新资源。</li><li>DELETE ： DELETE方法用来从服务器上删除资源。和PUT类似，你需要把要删除的资源的ID上传给服务器。</li></ul><hr><h3 id="16、其他问题"><a href="#16、其他问题" class="headerlink" title="16、其他问题"></a>16、其他问题</h3><ul><li><p>有没有网络编程，有，怎么看连接状态？netstat，有哪些？ESTABLISHED，LISTEN等等，有异常情况吗？TIME_WAIT很多，为什么？大量短链接</p></li><li><p>奖品秒杀模型设计</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温Java网络编程（实现简易TCP，UDP应用）</title>
      <link href="/2019/04/07/%E9%87%8D%E6%B8%A9Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93TCP%EF%BC%8CUDP%E5%BA%94%E7%94%A8%EF%BC%89/"/>
      <url>/2019/04/07/%E9%87%8D%E6%B8%A9Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93TCP%EF%BC%8CUDP%E5%BA%94%E7%94%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于TCP以及UDP的相关知识，在此就不做相关总结，如有需要可以参考<a href="https://blog.csdn.net/li_ning_/article/details/52117463" target="_blank" rel="noopener">https://blog.csdn.net/li_ning_/article/details/52117463</a></p></blockquote><hr><hr><h3 id="一、使用TCP实现一个简易登录功能"><a href="#一、使用TCP实现一个简易登录功能" class="headerlink" title="一、使用TCP实现一个简易登录功能"></a>一、使用TCP实现一个简易登录功能</h3><h4 id="1-创建一个实体类-User-java"><a href="#1-创建一个实体类-User-java" class="headerlink" title="1.创建一个实体类 User.java"></a>1.创建一个实体类 User.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-服务器端代码-LoginServer-java"><a href="#2-服务器端代码-LoginServer-java" class="headerlink" title="2.服务器端代码 LoginServer.java"></a>2.服务器端代码 LoginServer.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个ServerSocket，指定监听的端口</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//使用ServerSocket监听用户请求</span></span><br><span class="line">            Socket socket = serverSocket.accept();<span class="comment">//如果没有请求则阻塞</span></span><br><span class="line">            <span class="comment">//启动一个登录线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> LoginThread(socket)).start();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"你是访问该服务器的第"</span> + ++i + <span class="string">"个用户,你的ip地址为"</span></span><br><span class="line">                    + socket.getInetAddress().getHostAddress());</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-登录线程代码-LoginThread-java"><a href="#3-登录线程代码-LoginThread-java" class="headerlink" title="3.登录线程代码 LoginThread.java"></a>3.登录线程代码 LoginThread.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    LoginThread(Socket socket) &#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理用户请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//接收来自客户端的数据并输出</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">            User user = (User) objectInputStream.readObject();</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送反馈</span></span><br><span class="line">            DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"zhangsan"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"1234"</span>.equals(user.getPassword())) &#123;</span><br><span class="line">                dataOutputStream.writeUTF(<span class="string">"登录成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dataOutputStream.writeUTF(<span class="string">"登录失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            dataOutputStream.close();</span><br><span class="line">            objectInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-客户端代码-LoginClient-java"><a href="#4-客户端代码-LoginClient-java" class="headerlink" title="4.客户端代码 LoginClient.java"></a>4.客户端代码 LoginClient.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.multithreadingTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Socket，指定服务器端的ip与端口</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入用户名:"</span>);</span><br><span class="line">        String username = sc.nextLine();</span><br><span class="line">        System.out.print(<span class="string">"请输入密码:"</span>);</span><br><span class="line">        String password = sc.nextLine();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送登录信息</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(outputStream);</span><br><span class="line">        objectOutputStream.writeObject(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(inputStream);</span><br><span class="line">        String res = dataInputStream.readUTF();</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        dataInputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(客户端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入用户名:zhangsan</span><br><span class="line">请输入密码:1234</span><br><span class="line">登录成功</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(服务端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&apos;zhangsan&apos;, password=&apos;1234&apos;&#125;</span><br><span class="line">你是访问该服务器的第1个用户,你的ip地址为xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><hr><hr><h3 id="二、使用UDP实现一个简易聊天室功能"><a href="#二、使用UDP实现一个简易聊天室功能" class="headerlink" title="二、使用UDP实现一个简易聊天室功能"></a>二、使用UDP实现一个简易聊天室功能</h3><blockquote><p>UDP相较于TCP实现简单一些，所以代码量也稍微的少一些</p></blockquote><h4 id="1-服务端代码"><a href="#1-服务端代码" class="headerlink" title="1.服务端代码"></a>1.服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.udp.moreThanOneUdp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能:在线客服.</span></span><br><span class="line"><span class="comment"> * 技能:使用UDP网络编程完成</span></span><br><span class="line"><span class="comment"> * 注意</span></span><br><span class="line"><span class="comment"> * 1. UDP编程中客户端和服务器端区分不明显,双方代码差别不大</span></span><br><span class="line"><span class="comment"> * 2.主动发起请求的一段是客户端，接收请求的是服务器端;一旦通信开始，客户端和服务器端无差别</span></span><br><span class="line"><span class="comment"> * 3.不涉及IO流</span></span><br><span class="line"><span class="comment"> * 4.主要API</span></span><br><span class="line"><span class="comment"> * - DatagramSocket:socket,作用是发送和接收DatagramPacket</span></span><br><span class="line"><span class="comment"> * - DatagramPacket:数据报（封装数据，目的地址，源地址，端口号）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AskServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个DatagramSocket,用来发送和接收数据</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);<span class="comment">//服务器端接收数据的端口</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//使用DatagramSocket接收一个DatagramPacket</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket datagramPacket1 = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">            socket.receive(datagramPacket1);</span><br><span class="line">            System.out.println(<span class="string">"对方说:"</span> + <span class="keyword">new</span> String(datagramPacket1.getData(), <span class="number">0</span>, datagramPacket1.getLength()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用DatagramSocket发送一个DatagramPacket</span></span><br><span class="line">            System.out.print(<span class="string">"请您输入:"</span>);</span><br><span class="line">            String info = sc.nextLine();</span><br><span class="line">            InetAddress inetAddress = datagramPacket1.getAddress();</span><br><span class="line">            <span class="keyword">int</span> port = datagramPacket1.getPort();</span><br><span class="line">            DatagramPacket datagramPacket2 = <span class="keyword">new</span> DatagramPacket(info.getBytes(), info.getBytes().length, inetAddress, port);</span><br><span class="line">            socket.send(datagramPacket2);</span><br><span class="line">            <span class="keyword">if</span> (info.equals(<span class="string">"bye"</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"聊天结束"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-客户端代码"><a href="#2-客户端代码" class="headerlink" title="2.客户端代码"></a>2.客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.udp.moreThanOneUdp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AskClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个DatagramSocket,用来发送和接收数据</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8889</span>);<span class="comment">//客户端接收数据的端口,可以省略，会自动分配</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//使用DatagramSocket发送一个DatagramPacket</span></span><br><span class="line">            System.out.print(<span class="string">"请您输入:"</span>);</span><br><span class="line">            String info = sc.nextLine();</span><br><span class="line">            InetAddress inetAddress = InetAddress.getLocalHost();</span><br><span class="line">            DatagramPacket datagramPacket1 = <span class="keyword">new</span> DatagramPacket(info.getBytes(), info.getBytes().length, inetAddress, <span class="number">8888</span>);</span><br><span class="line">            socket.send(datagramPacket1);</span><br><span class="line">            <span class="keyword">if</span> (info.equals(<span class="string">"bye"</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用DatagramSocket接收一个DatagramPacket</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1000</span>];</span><br><span class="line">            DatagramPacket datagramPacket2 = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">            socket.receive(datagramPacket2);</span><br><span class="line">            System.out.println(<span class="string">"对方说:"</span> + <span class="keyword">new</span> String(buf, <span class="number">0</span>, datagramPacket2.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"聊天结束"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(客户端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请您输入:你好呀</span><br><span class="line">对方说:你是谁</span><br><span class="line">请您输入:我是张三，你呢</span><br><span class="line">对方说:我是李四</span><br><span class="line">请您输入:好的，我要忙了</span><br><span class="line">对方说:bye</span><br><span class="line">请您输入:bye</span><br><span class="line">聊天结束</span><br></pre></td></tr></table></figure><blockquote><p>运行结果:(服务端)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对方说:你好呀</span><br><span class="line">请您输入:你是谁</span><br><span class="line">对方说:我是张三，你呢</span><br><span class="line">请您输入:我是李四</span><br><span class="line">对方说:好的，我要忙了</span><br><span class="line">请您输入:bye</span><br><span class="line">聊天结束</span><br></pre></td></tr></table></figure><hr><hr><h3 id="三、使用TCP实现文件上传以及文件下载功能"><a href="#三、使用TCP实现文件上传以及文件下载功能" class="headerlink" title="三、使用TCP实现文件上传以及文件下载功能"></a>三、使用TCP实现文件上传以及文件下载功能</h3><blockquote><ul><li>文件上传的本质:文件从客户端到服务器端的复制</li><li>文件下载的本质:文件从服务器端到客户端的复制</li><li>文件的上传和下载都是两次文件复制</li></ul></blockquote><hr><h4 id="1-文件上传功能服务端代码"><a href="#1-文件上传功能服务端代码" class="headerlink" title="1.文件上传功能服务端代码"></a>1.文件上传功能服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.uploadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/test1.txt"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用输入流和输出流完成文件复制</span></span><br><span class="line">        <span class="comment">//中转站</span></span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取末尾的一个字节的内容赋给n</span></span><br><span class="line">        n = bufferedInputStream.read();</span><br><span class="line">        <span class="keyword">while</span> (n != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//写一个字节</span></span><br><span class="line">            bufferedOutputStream.write(n);</span><br><span class="line">            System.out.println(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//读一个字节</span></span><br><span class="line">            n = bufferedInputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-文件上传功能客户端代码"><a href="#2-文件上传功能客户端代码" class="headerlink" title="2.文件上传功能客户端代码"></a>2.文件上传功能客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.uploadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(),<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"/test.txt"</span>)));</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-文件下载功能服务端代码"><a href="#1-文件下载功能服务端代码" class="headerlink" title="1.文件下载功能服务端代码"></a>1.文件下载功能服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.downloadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/test.txt"</span>)));</span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用输入流和输出流完成文件复制</span></span><br><span class="line">        <span class="comment">//中转站</span></span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取末尾的一个字节的内容赋给n</span></span><br><span class="line">        n = bufferedInputStream.read();</span><br><span class="line">        <span class="keyword">while</span> (n != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//写一个字节</span></span><br><span class="line">            bufferedOutputStream.write(n);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读一个字节</span></span><br><span class="line">            n = bufferedInputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-文件下载功能客户端代码"><a href="#2-文件下载功能客户端代码" class="headerlink" title="2.文件下载功能客户端代码"></a>2.文件下载功能客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcp.downloadTcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(),<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个输入流和一个输出流</span></span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/test1.txt"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bufferedInputStream.close();</span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实上传功能和下载功能的逻辑是相同的，只不过一个是文件c =&gt; s,一个是文件s =&gt; c</p></blockquote><hr><hr><blockquote><p>参考视频：<a href="https://www.bilibili.com/video/av31123719/" target="_blank" rel="noopener">https://www.bilibili.com/video/av31123719/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程基础 </tag>
            
            <tag> Socket编程 </tag>
            
            <tag> TCP/UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温Java反射机制</title>
      <link href="/2019/04/01/%E9%87%8D%E6%B8%A9Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/04/01/%E9%87%8D%E6%B8%A9Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要是为了实战Java反射，简单工厂只是一个背景，故对简单工厂模式不做解释了。</p></blockquote><hr><p>1、首先先做个一个使用了简单工厂模式的demo。<br>Fruit是一个接口，里面含有一个get()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Apple与Banana为两个实现了Fruit的接口，其中Apple类中方法较多用于实现Java反射中的各种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"name"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//无参无返回值情况</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">aha</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple, but you can't see this word."</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参无返回值情况</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ahaString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple, but you can't see this word."</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参有返回值情况</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">ahaReturn</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is apple, but you can't see this word."</span> + str);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"yes"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、FruitFactory为简单工厂模式创建类（为了后期再Main函数中体现Java反射机制，正确的应该像注释中那样，直接返回类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title">getFruit</span><span class="params">(String typeName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//通过字符串获取相关的类并返回</span></span><br><span class="line">            <span class="keyword">return</span> Class.forName(typeName);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//package SimpleFactory;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//public class FruitFactory &#123;</span></span><br><span class="line"><span class="comment">//    public static Fruit getFruit(String typeName)&#123;</span></span><br><span class="line"><span class="comment">//        Class fruitClass = null;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            fruitClass = Class.forName(typeName);</span></span><br><span class="line"><span class="comment">//            return (Fruit) fruitClass.newInstance();</span></span><br><span class="line"><span class="comment">//        &#125; catch (ClassNotFoundException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (IllegalAccessException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (InstantiationException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return null;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>4、下面是执行一下常见的反射操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SimpleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainSimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//反射机制</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取Apple的Class</span></span><br><span class="line">            Class appleClass = FruitFactory.getFruit(<span class="string">"SimpleFactory.Apple"</span>);</span><br><span class="line">            <span class="comment">//创建实例</span></span><br><span class="line">            Fruit apple = (Fruit) appleClass.newInstance();</span><br><span class="line">            <span class="comment">//执行实例的public方法</span></span><br><span class="line">            apple.get();</span><br><span class="line">            <span class="comment">//获取private方法</span></span><br><span class="line">            Method getAha = appleClass.getDeclaredMethod(<span class="string">"aha"</span>);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            getAha.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//执行该无参无返回值的方法</span></span><br><span class="line">            getAha.invoke(apple);</span><br><span class="line">            <span class="comment">//获取private属性</span></span><br><span class="line">            Field name = appleClass.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//修改该name的值</span></span><br><span class="line">            name.set(apple, <span class="string">"newName"</span>);</span><br><span class="line">            <span class="comment">//修改后再一次执行getAha方法</span></span><br><span class="line">            getAha.invoke(apple);</span><br><span class="line">            <span class="comment">//获取private方法</span></span><br><span class="line">            Method getAhaString = appleClass.getDeclaredMethod(<span class="string">"ahaString"</span>,String.class);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            getAhaString.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//执行该有参无返回值的方法</span></span><br><span class="line">            getAhaString.invoke(apple, <span class="string">"false"</span>);</span><br><span class="line">            <span class="comment">//获取private方法</span></span><br><span class="line">            Method getAhaReturn = appleClass.getDeclaredMethod(<span class="string">"ahaReturn"</span>,String.class);</span><br><span class="line">            <span class="comment">//设置Accessible否则无法执行</span></span><br><span class="line">            getAhaReturn.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//执行该有参有返回值的方法</span></span><br><span class="line">            String res = (String) getAhaReturn.invoke(apple, <span class="string">"true"</span>);</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//与上面相同，只不过是使用简单工厂创建了Banana类的对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class appleClass = FruitFactory.getFruit(<span class="string">"SimpleFactory.Banana"</span>);</span><br><span class="line">            Fruit banana = (Fruit) appleClass.newInstance();</span><br><span class="line">            banana.get();</span><br><span class="line">            Method getAha = appleClass.getDeclaredMethod(<span class="string">"ahaa"</span>);</span><br><span class="line">            getAha.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            getAha.invoke(banana);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">This is apple</span><br><span class="line">This is apple, but you can&apos;t see this word.name</span><br><span class="line">This is apple, but you can&apos;t see this word.newName</span><br><span class="line">This is apple, but you can&apos;t see this word.false</span><br><span class="line">This is apple, but you can&apos;t see this word.true</span><br><span class="line">yes</span><br><span class="line">This is Banana</span><br><span class="line">This is banana, but you can&apos;t see this word.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程基础 </tag>
            
            <tag> Java反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见排序算法</title>
      <link href="/2019/03/12/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/03/12/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="今天实在不想刷笔试题就把常见的排序手敲了一遍"><a href="#今天实在不想刷笔试题就把常见的排序手敲了一遍" class="headerlink" title="今天实在不想刷笔试题就把常见的排序手敲了一遍"></a>今天实在不想刷笔试题就把常见的排序手敲了一遍</h5><hr><h3 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1.选择排序"></a>1.选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoiceSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChoiceSort&lt;Integer&gt; choiceSort = <span class="keyword">new</span> ChoiceSort&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        choiceSort.sort(arr);</span><br><span class="line">        choiceSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(less(arr[j] , arr[min]))&#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(arr, i ,min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2.插入排序"></a>2.插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InsertSort&lt;Integer&gt; insertSort = <span class="keyword">new</span> InsertSort&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        insertSort.sort(arr);</span><br><span class="line">        insertSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(arr[j], arr[j-<span class="number">1</span>]) ; j--)&#123;</span><br><span class="line">                exch(arr, j, j -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3.冒泡排序"></a>3.冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        BubbleSort&lt;Integer&gt; bubbleSort = <span class="keyword">new</span> BubbleSort&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">88</span>,-<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!bubbleSort.less(arr[j], arr[j+<span class="number">1</span>]))&#123;</span><br><span class="line">                    bubbleSort.exch(arr, j, j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bubbleSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-归并排序"><a href="#4-归并排序" class="headerlink" title="4.归并排序"></a>4.归并排序</h3><h5 id="自顶向下的排序"><a href="#自顶向下的排序" class="headerlink" title="自顶向下的排序"></a>自顶向下的排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSortStartByTop</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T[] tmpArr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MergeSortStartByTop&lt;Integer&gt; mergeSort = <span class="keyword">new</span> MergeSortStartByTop&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        mergeSort.sort(arr);</span><br><span class="line">        mergeSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        tmpArr = (T[]) <span class="keyword">new</span> Comparable[arr.length];</span><br><span class="line">        sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + (r - l)/<span class="number">2</span>;</span><br><span class="line">        sort(arr, l, mid);</span><br><span class="line">        sort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        merge(arr, mid, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(T[] arr, <span class="keyword">int</span> mid, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;</span><br><span class="line">        <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = l; k &lt;= r; k++)&#123;</span><br><span class="line">            tmpArr[k] = arr[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = l; k &lt;= r; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; mid)&#123;</span><br><span class="line">                arr[k] = tmpArr[j++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j &gt; r)&#123;</span><br><span class="line">                arr[k] = tmpArr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(less(tmpArr[i], tmpArr[j]))&#123;</span><br><span class="line">                arr[k] = tmpArr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                arr[k] = tmpArr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自底向上的排序"><a href="#自底向上的排序" class="headerlink" title="自底向上的排序"></a>自底向上的排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSortStartByButton</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T[] tmpArr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MergeSortStartByButton&lt;Integer&gt; mergeSort = <span class="keyword">new</span> MergeSortStartByButton&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        mergeSort.sort(arr);</span><br><span class="line">        mergeSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        tmpArr = (T[]) <span class="keyword">new</span> Comparable[arr.length];</span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外循环为每次归并排序,每组数据的宽度,每组数据的宽度之后进行2倍递增</span></span><br><span class="line">        <span class="keyword">for</span> (width = <span class="number">1</span>; width &lt; arr.length; width = width * <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//内循环为基于每组数据宽度,进行多组数据的归并排序</span></span><br><span class="line">            <span class="comment">//index += 2 * width 因为一次归并排序都是使用2组数据进行排序,所以每次</span></span><br><span class="line">            <span class="comment">//  递增2组数据的偏移量</span></span><br><span class="line">            <span class="comment">//index &lt; (size - width) 这里表示如果排序的索引位置连1组数据个数都不够了</span></span><br><span class="line">            <span class="comment">//  那就没必要处理了,因为排序至少需要1组多的数据.</span></span><br><span class="line">            <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; (arr.length - width); index += <span class="number">2</span> * width )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l = index;</span><br><span class="line">                <span class="keyword">int</span> r = index + (<span class="number">2</span> * width - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">int</span> mid = index + (r - l) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                merge(arr, mid, l, r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(T[] arr, <span class="keyword">int</span> mid, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;</span><br><span class="line">        <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = l; k &lt;= r; k++)&#123;</span><br><span class="line">            tmpArr[k] = arr[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = l; k &lt;= r; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; mid)&#123;</span><br><span class="line">                arr[k] = tmpArr[j++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j &gt; r)&#123;</span><br><span class="line">                arr[k] = tmpArr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(less(tmpArr[i], tmpArr[j]))&#123;</span><br><span class="line">                arr[k] = tmpArr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                arr[k] = tmpArr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5.快速排序"></a>5.快速排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        QuickSort&lt;Integer&gt; quickSort = <span class="keyword">new</span> QuickSort&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">88</span>,-<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        quickSort.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">"-----"</span>);</span><br><span class="line">        quickSort.show(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        sort(arr,<span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = partation1(arr, l, r);</span><br><span class="line">        sort(arr, l, i - <span class="number">1</span>);</span><br><span class="line">        sort(arr, i + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基准值为右边的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partation</span><span class="params">(T[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = r;</span><br><span class="line">        T t = arr[r];</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(less(arr[++i], t))&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == r)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (less(t, arr[--j]))&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == l)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= j)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(arr, i , j);</span><br><span class="line">        &#125;</span><br><span class="line">        exch(arr, r, i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基准值为左边的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partation1</span><span class="params">(T[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;</span><br><span class="line">        <span class="keyword">int</span> j = r + <span class="number">1</span>;</span><br><span class="line">        T t = arr[l];</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(less(arr[++i], t))&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == r)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (less(t, arr[--j]))&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == l)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= j)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(arr, i , j);</span><br><span class="line">        &#125;</span><br><span class="line">        exch(arr, l, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T t1, T t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.compareTo(t2) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        T tmp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(T t : arr)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis如何实现异步队列</title>
      <link href="/2019/02/14/Redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97/"/>
      <url>/2019/02/14/Redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="一-如何使用Redis做异步队列"><a href="#一-如何使用Redis做异步队列" class="headerlink" title="一.如何使用Redis做异步队列"></a>一.如何使用Redis做异步队列</h2><h3 id="1-使用List作为队列-RPUSH生产消息-LPOP消费消息"><a href="#1-使用List作为队列-RPUSH生产消息-LPOP消费消息" class="headerlink" title="1.使用List作为队列, RPUSH生产消息, LPOP消费消息"></a>1.使用List作为队列, RPUSH生产消息, LPOP消费消息</h3><p>➢缺点:没有等待队列里有值就直接消费<br>➢弥补:可以通过在应用层引入Sleep机制去调用LPOP重试</p><h3 id="2-BLPOP-key-key-timeout-阻塞直到队列有消息或者超时"><a href="#2-BLPOP-key-key-timeout-阻塞直到队列有消息或者超时" class="headerlink" title="2. BLPOP key [key .. timeout :阻塞直到队列有消息或者超时"></a>2. <code>BLPOP key [key .. timeout</code> :阻塞直到队列有消息或者超时</h3><p>➢缺点:只能供-一个消费者消费</p><h2 id="二-如何使用Redis做异步队列"><a href="#二-如何使用Redis做异步队列" class="headerlink" title="二.如何使用Redis做异步队列"></a>二.如何使用Redis做异步队列</h2><h3 id="pub-sub-主题订阅者模式"><a href="#pub-sub-主题订阅者模式" class="headerlink" title="pub/sub :主题订阅者模式"></a>pub/sub :主题订阅者模式</h3><ul><li>发送者(pub)发送消息,订阅者(sub)接收消息</li><li>订阅者可以订阅任意数量的频道<br>hex</li></ul><p><img src="/images/redis如何实现异步队列/4599D9D7-8657-4473-BFAF-9AAE44487A04.png" alt="这里写图片描述"></p><h5 id="下面我们就演示一下，首先我们打开三个终端，两个作为接收者，一个作为发送者，由下图可见当我们发送消息时只有指定的订阅者可以获取到消息"><a href="#下面我们就演示一下，首先我们打开三个终端，两个作为接收者，一个作为发送者，由下图可见当我们发送消息时只有指定的订阅者可以获取到消息" class="headerlink" title="下面我们就演示一下，首先我们打开三个终端，两个作为接收者，一个作为发送者，由下图可见当我们发送消息时只有指定的订阅者可以获取到消息"></a>下面我们就演示一下，首先我们打开三个终端，两个作为接收者，一个作为发送者，由下图可见当我们发送消息时只有指定的订阅者可以获取到消息</h5><p><img src="/images/redis如何实现异步队列/83848910-41A0-46B3-B876-A2CB6E8E5B07.png" alt="这里写图片描述"></p><h2 id="三-pub-sub的缺点"><a href="#三-pub-sub的缺点" class="headerlink" title="三.pub/sub的缺点"></a>三.pub/sub的缺点</h2><h5 id="消息的发布是无状态的-无法保证可达，若订阅者在发送者发布消息期间下线，之后我们再上线将无法接受到刚才发送的消息，解决办法就是使用消息队列"><a href="#消息的发布是无状态的-无法保证可达，若订阅者在发送者发布消息期间下线，之后我们再上线将无法接受到刚才发送的消息，解决办法就是使用消息队列" class="headerlink" title="消息的发布是无状态的,无法保证可达，若订阅者在发送者发布消息期间下线，之后我们再上线将无法接受到刚才发送的消息，解决办法就是使用消息队列"></a>消息的发布是无状态的,无法保证可达，若订阅者在发送者发布消息期间下线，之后我们再上线将无法接受到刚才发送的消息，解决办法就是使用消息队列</h5>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 异步队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis如何实现分布式锁</title>
      <link href="/2019/02/13/Redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2019/02/13/Redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="1-分布式锁需要解决的问题"><a href="#1-分布式锁需要解决的问题" class="headerlink" title="1.分布式锁需要解决的问题"></a>1.分布式锁需要解决的问题</h3><ul><li>互斥性：任意时刻只能有一个客户端拥有锁，不能同时多个客户端获取</li><li>安全性：锁只能被持有该锁的用户删除，而不能被其他用户删除</li><li>死锁：获取锁的客户端因为某些原因而宕机，而未能释放锁，其他客户端无法获取此锁，需要有机制来避免该类问题的发生</li><li>容错：当部分节点宕机，客户端仍能获取锁或者释放锁</li></ul><hr><h3 id="2-如何通过Redis实现分布式锁-非完善方法"><a href="#2-如何通过Redis实现分布式锁-非完善方法" class="headerlink" title="2.如何通过Redis实现分布式锁:(非完善方法)"></a>2.如何通过Redis实现分布式锁:(非完善方法)</h3><h5 id="SETNX-key-value-如果key不存在-则创建并赋值"><a href="#SETNX-key-value-如果key不存在-则创建并赋值" class="headerlink" title="SETNX key value :如果key不存在,则创建并赋值"></a><code>SETNX key value</code> :如果key不存在,则创建并赋值</h5><ul><li>时间复杂度: 0(1)</li><li>返回值:设置成功,返回1;设置失败,返回0。</li></ul><blockquote><p>但是此时我们获取的key是长期有效的，所以我们应该如何解决长期有效的问题呢？</p></blockquote><h4 id="如何解决SETNX长期有效的问题"><a href="#如何解决SETNX长期有效的问题" class="headerlink" title="如何解决SETNX长期有效的问题"></a>如何解决SETNX长期有效的问题</h4><h5 id="EXPIRE-key-seconds"><a href="#EXPIRE-key-seconds" class="headerlink" title="EXPIRE key seconds"></a><code>EXPIRE key seconds</code></h5><ul><li>设置key的生存时间,当key过期时(生存时间为0) ,会被自动删除</li><li>缺点：原子性得不到满足<h5 id="下面是伪代码"><a href="#下面是伪代码" class="headerlink" title="下面是伪代码"></a>下面是伪代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该程序存在危险，如果执行到第二行就崩溃了，则此时key会被一直占用而无法被释放</span></span><br><span class="line">RedisService redisService = SpringUtils.getBean(Redi sService.class); </span><br><span class="line"><span class="keyword">long</span> status = redisService.setnx(key, <span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">if</span>(status == <span class="number">1</span>) &#123;</span><br><span class="line">redisService.expire(key, expire);</span><br><span class="line"><span class="comment">//执行独占资源逻辑</span></span><br><span class="line">doOcuppiedWork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="3-如何通过Redis实现分布式锁-正确方式"><a href="#3-如何通过Redis实现分布式锁-正确方式" class="headerlink" title="3.如何通过Redis实现分布式锁:(正确方式)"></a>3.如何通过Redis实现分布式锁:(正确方式)</h3><h5 id="SET-key-value-EX-seconds-PX-milliseconds-NX-XX"><a href="#SET-key-value-EX-seconds-PX-milliseconds-NX-XX" class="headerlink" title="SET key value [EX seconds] [PX milliseconds] [NX|XX]"></a><code>SET key value [EX seconds] [PX milliseconds] [NX|XX]</code></h5><ul><li>EX second :设置键的过期时间为second秒</li><li>PX millisecond :设置键的过期时间为millisecond毫秒</li><li>NX :只在键不存在时,才对键进行设置操作</li><li>XX:只在键已经存在时,才对键进行设置操作</li><li>SET操作成功完成时,返回OK ,否则返回nil<h5 id="下面是伪代码-1"><a href="#下面是伪代码-1" class="headerlink" title="下面是伪代码"></a>下面是伪代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RedisService redisService = SpringUtils.getBean(RedisService.class); .</span><br><span class="line">String result = redisService.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"OK"</span>.equals(result)) &#123;</span><br><span class="line"><span class="comment">//执行独占资源逻辑</span></span><br><span class="line">doOcuppiedWork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-大量的key同时过期的注意事项"><a href="#4-大量的key同时过期的注意事项" class="headerlink" title="4.大量的key同时过期的注意事项"></a>4.大量的key同时过期的注意事项</h3><ul><li>集中过期,由于清除大量的key很耗时,会出现短暂的卡顿现象</li><li>解放方案:在设置key的过期时间的时候,给每个key加上随机值</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当前读与快照读</title>
      <link href="/2019/02/13/%E5%BD%93%E5%89%8D%E8%AF%BB%E4%B8%8E%E5%BF%AB%E7%85%A7%E8%AF%BB/"/>
      <url>/2019/02/13/%E5%BD%93%E5%89%8D%E8%AF%BB%E4%B8%8E%E5%BF%AB%E7%85%A7%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>本文是根据慕课相关课程学习后，并总结了以下几篇博文后做的总结<br><a href="https://blog.csdn.net/silyvin/article/details/79280934" target="_blank" rel="noopener">https://blog.csdn.net/silyvin/article/details/79280934</a><br><a href="https://www.cnblogs.com/cat-and-water/p/6427612.html" target="_blank" rel="noopener">https://www.cnblogs.com/cat-and-water/p/6427612.html</a></p><p>innodb的默认事务隔离级别是rr（可重复读）。它的实现技术是mvcc。基于版本的控制协议。该技术不仅可以保证innodb的可重复读，而且可以防止幻读。但是它防止的是快照读，也就是读取的数据虽然是一致的，但是数据是历史数据。如何做到保证数据是一致的（也就是一个事务，其内部读取对应某一个数据的时候，数据都是一样的），同时读取的数据是最新的数据。innodb提供了一个间隙锁的技术。也就是结合GAP锁与行锁，达到最终目的。当使用索引进行插入的时候，innodb会将当前的节点和上一个节点加锁。这样当进行select的时候，就不允许加x锁。那么在进行该事务的时候，读取的就是最新的数据。</p><ul><li><p>快照读(snapshot read)</p><ul><li>不加锁的非阻塞读</li></ul><ul><li>当前读(current read)<ul><li>select … lock in share mode - select … lock in share mode<ul><li>select … for update</li><li>insert</li><li>update</li><li>delete</li></ul></li></ul></li></ul></li></ul><hr><p>RC、RR级别下的InnoDB的非阻塞读如何实现</p><ul><li>数据行里的DB_TRX_ ID（事务ID）、DB_ ROLL_PTR（回滚指针）、DB_ROW_ ID（行号）字段</li><li>undo日志<ul><li>进行变更操作会产生undo日志，存储老版本数据</li><li>分为insert undo log（存储insert日志，只在事务回滚时需要，事务提交后即可删除）和update undo log（存储delete和update日志，不仅回滚需要，快照读也需要，不可随便删除）</li></ul></li></ul><p>下面我们看一下演示</p><p><img src="/images/当前读与快照读/E37DE40E-8196-44DB-BF4D-551FEDD630A8.png" alt="这里写图片描述"></p><p>上图为将field2字段由12改为32。此时我们将原数据存出来undo log，我们将回滚指针指向undo log的原数据，同时DB_TRX_ ID加1。如果我们之后进行回滚，则从undo log中获取数据，进行回滚。</p><p>同样下图为两个undo log日志</p><p><img src="/images/当前读与快照读/E944F1A3-D3FF-4C5C-81CB-9630DB68FA3F.png" alt="这里写图片描述"></p><hr><p>InnoDB可重复读隔离级别下如何避免幻读</p><ul><li>表象:快照读(非阻塞读) –伪MVCC</li><li>内在: next-key锁(行锁+GAP锁)</li></ul><hr><p>对主键索引或者唯一索引会用Gap锁吗？？</p><ul><li>如果where条件全部命中,则不会用Gap锁,只会加记录锁</li><li>如果where条件部分命中或者全不命中,则会加Gap锁</li></ul><p>如数据库中存在id为1，3，5的值，如果我们查询where id in (1,3); 此时我们会发现只有行锁，我们update id= 2;是成功的，但是如果我们查询where id in (1,4);  此时我们会发现有Gap锁，我们update id= 2;是无法成功的，只有等查询事务结束后才能update</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 锁 </tag>
            
            <tag> 事务 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库事务并发访问中的问题及隔离机制</title>
      <link href="/2019/02/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/02/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E9%9A%94%E7%A6%BB%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="我们直接从隔离级别从低到高进行介绍"><a href="#我们直接从隔离级别从低到高进行介绍" class="headerlink" title="我们直接从隔离级别从低到高进行介绍"></a>我们直接从隔离级别从低到高进行介绍</h4><hr><h3 id="1-更新丢失"><a href="#1-更新丢失" class="headerlink" title="1.更新丢失"></a>1.更新丢失</h3><h4 id="目前主流数据库都会自动进行枷锁来避免，所以不好从数据库层面进行模拟，举个例子："><a href="#目前主流数据库都会自动进行枷锁来避免，所以不好从数据库层面进行模拟，举个例子：" class="headerlink" title="目前主流数据库都会自动进行枷锁来避免，所以不好从数据库层面进行模拟，举个例子："></a>目前主流数据库都会自动进行枷锁来避免，所以不好从数据库层面进行模拟，举个例子：</h4><table><thead><tr><th style="text-align:center">取款事务</th><th style="text-align:center">存款事务</th></tr></thead><tbody><tr><td style="text-align:center">开始事务</td><td style="text-align:center">开始事务</td></tr><tr><td style="text-align:center">查询转账余额为100元</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">查询转账余额为100元</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">存入20元,余额变为120元</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">提交事务</td></tr><tr><td style="text-align:center">取出10元,余额改为90元</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">回滚事务,余额恢复为100元</td><td style="text-align:center">更新丢失</td></tr></tbody></table><h4 id="从上表我们可以看出最终更新被覆盖导致了更新丢失"><a href="#从上表我们可以看出最终更新被覆盖导致了更新丢失" class="headerlink" title="从上表我们可以看出最终更新被覆盖导致了更新丢失"></a>从上表我们可以看出最终更新被覆盖导致了更新丢失</h4><hr><h3 id="2-脏读"><a href="#2-脏读" class="headerlink" title="2.脏读"></a>2.脏读</h3><h4 id="是指一个事务读取到了另一个事务未提交的数据"><a href="#是指一个事务读取到了另一个事务未提交的数据" class="headerlink" title="是指一个事务读取到了另一个事务未提交的数据"></a>是指一个事务读取到了另一个事务未提交的数据</h4><blockquote><p>如何解决：READ-COMMITTED事务隔离级别以上可避免</p></blockquote><h4 id="下面我们进行验证"><a href="#下面我们进行验证" class="headerlink" title="下面我们进行验证"></a>下面我们进行验证</h4><p>首先我们先使用下面的语句获取当前的事务隔离级别可知数据库的默认级别<code>REPEATABLE-READ</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation;#查询隔离级别</span><br></pre></td></tr></table></figure><p>下面我们使用下面的语句将当前事务的隔离级别设置为可读未提交<br><code>READ-UNCOMMITTED</code>(最低的事务隔离级别)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level read uncommitted;#修改隔离界别为 可读未提交</span><br></pre></td></tr></table></figure><h4 id="下面我们模拟脏读"><a href="#下面我们模拟脏读" class="headerlink" title="下面我们模拟脏读"></a>下面我们模拟脏读</h4><h4 id="我们在数据库中先添加一个数据"><a href="#我们在数据库中先添加一个数据" class="headerlink" title="我们在数据库中先添加一个数据"></a>我们在数据库中先添加一个数据</h4><p><img src="/images/数据库事务并发访问中的问题及隔离机制/A7BC620F-9A19-4713-862D-B329006D7A2F.png" alt="这里写图片描述"></p><table><thead><tr><th style="text-align:left">模拟步骤</th></tr></thead><tbody><tr><td style="text-align:left">1. 首先我们新建两个控制台来模仿两个不同的事务并在两个控制台都执行下面的语句，并将事务隔离级别都改为<code>READ_UNCOMMITTED</code></td></tr><tr><td style="text-align:left">2. 我们在控制台1中使用<code>start transaction;</code>来开始我们的事务</td></tr><tr><td style="text-align:left">3. 我们使用<code>select * from learn_sql.learn_sql where id = 1;</code>此时我们查询到的money为初值300.</td></tr><tr><td style="text-align:left">4. 此时我们使用<code>update learn_sql.learn_sql set money = 400 where id = 1;</code>执行过此命令之后我们再执行<code>select * from learn_sql.learn_sql where id = 1;</code>会发现此时的money已经改成了400.</td></tr><tr><td style="text-align:left">5. 我们使用控制台2使用<code>select * from learn_sql.learn_sql where id = 1;</code>查询可知此时的money已经变成了还未提交的400元。</td></tr><tr><td style="text-align:left">6.若此时控制台1未使用<code>commit</code>进行提交，而是<code>rollback</code>进行事务回滚，则此时就是发生了控制台2读取了未成功提交的数据。</td></tr></tbody></table><blockquote><p>解决办法：使用下面的sql语句将事务隔离级别改为<code>READ_COMMITTED</code>，此时如果我们执行步骤4则会发现，控制台2获取的并不是400而是300。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level read committed;#修改隔离界别为 只可读提交</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="3-不可重复读"><a href="#3-不可重复读" class="headerlink" title="3.不可重复读"></a>3.不可重复读</h3><h4 id="指事务1多次读取同一个数据，事务2在事务1多次读取过程中进行的修改提交，导致事务1多次读取的数据不同。"><a href="#指事务1多次读取同一个数据，事务2在事务1多次读取过程中进行的修改提交，导致事务1多次读取的数据不同。" class="headerlink" title="指事务1多次读取同一个数据，事务2在事务1多次读取过程中进行的修改提交，导致事务1多次读取的数据不同。"></a>指事务1多次读取同一个数据，事务2在事务1多次读取过程中进行的修改提交，导致事务1多次读取的数据不同。</h4><blockquote><p>如何解决：REPEATABLE-READ事务隔离级别以上可避免</p></blockquote><h4 id="下面我们开始模拟，首先我们先保证事务隔离级别为READ-COMMITTED"><a href="#下面我们开始模拟，首先我们先保证事务隔离级别为READ-COMMITTED" class="headerlink" title="下面我们开始模拟，首先我们先保证事务隔离级别为READ_COMMITTED"></a>下面我们开始模拟，首先我们先保证事务隔离级别为<code>READ_COMMITTED</code></h4><table><thead><tr><th style="text-align:left">模拟步骤</th></tr></thead><tbody><tr><td style="text-align:left">1.首先我们在控制台1中使用<code>start transaction;</code>开始事务，此时我们使用<code>select * from learn_sql.learn_sql where id = 1;</code>可知money为300，然后我们使用<code>update learn_sql.learn_sql set money = money + 100 where id = 1;</code></td></tr><tr><td style="text-align:left">2.此时我们使用控制台2中先使用<code>start transaction;</code>开始事务，再使用<code>select * from learn_sql.learn_sql where id = 1;</code>发现money为300。</td></tr><tr><td style="text-align:left">3.接着我们在控制台1使用<code>commit;</code>提交修改。这是我们控制台2中使用<code>select * from learn_sql.learn_sql where id = 1;</code>我们突然发现原来的300，突然变成了400.这就是发生了不可重复读的问题了，即多次查询结果不一致</td></tr></tbody></table><blockquote><p>解决办法：我们使用下面的sql语句将食物隔离级别修改为<code>REPEATABLE-READ</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这时我们在步骤3中获取的money仍然为300，但是如果我们使用<code>update learn_sql.learn_sql set money = money + 100 where id = 1;</code>后再查询会发现money不是我们最后一步查询的300+100=400元，而是我们控制台1提交之后的400+100=500元，这就防止了在一次事务中多次读不一致，同时可以保证该食物提交结果正确。</p></blockquote><hr><h3 id="4-幻读"><a href="#4-幻读" class="headerlink" title="4.幻读"></a>4.幻读</h3><h4 id="指事务1读取与搜索条件相匹配的若干行，事务2以插入或删除行的方式来修改事务1的结果集。"><a href="#指事务1读取与搜索条件相匹配的若干行，事务2以插入或删除行的方式来修改事务1的结果集。" class="headerlink" title="指事务1读取与搜索条件相匹配的若干行，事务2以插入或删除行的方式来修改事务1的结果集。"></a>指事务1读取与搜索条件相匹配的若干行，事务2以插入或删除行的方式来修改事务1的结果集。</h4><blockquote><p>如何解决：SERIALIZABLE事务隔离级别可避免</p></blockquote><h4 id="下面我们开始模拟，首先我们先保证事务隔离级别为READ-COMMITTED由于mysql在技术层面上避免了REPEATABLE-READ隔离级别下发生，但是理论上并不可避免"><a href="#下面我们开始模拟，首先我们先保证事务隔离级别为READ-COMMITTED由于mysql在技术层面上避免了REPEATABLE-READ隔离级别下发生，但是理论上并不可避免" class="headerlink" title="下面我们开始模拟，首先我们先保证事务隔离级别为READ_COMMITTED由于mysql在技术层面上避免了REPEATABLE-READ隔离级别下发生，但是理论上并不可避免"></a>下面我们开始模拟，首先我们先保证事务隔离级别为<code>READ_COMMITTED</code>由于mysql在技术层面上避免了<code>REPEATABLE-READ</code>隔离级别下发生，但是理论上并不可避免</h4><table><thead><tr><th style="text-align:left">模拟步骤</th></tr></thead><tbody><tr><td style="text-align:left">1.首先我们在控制台1中使用<code>start transaction;</code>开始事务，此时我们使用<code>select * from learn_sql.learn_sql;</code>可得到一条数据。</td></tr><tr><td style="text-align:left">2.此时我们使用控制台2中先使用<code>start transaction;</code>开始事务，再使用<code>insert into learn_sql.learn_sql (id,money);</code>接着我们在控制台2使用<code>commit;</code>提交修改。</td></tr><tr><td style="text-align:left">3.接着我们在控制台1使用<code>update learn_sql.learn_sql set money = 1000;</code>我们会发现这个时候我们修改的语句条数为两句，这与我们之前查询的一条不同，这就是幻读。</td></tr></tbody></table><blockquote><p>解决办法：把事务隔离级别修改为<code>SERIALIZABLE</code><br>之后我们会发现在执行第二步是会被lock住无法操作，从而避免了幻读。</p></blockquote><hr><h3 id="5-总结："><a href="#5-总结：" class="headerlink" title="5.总结："></a>5.总结：</h3><table><thead><tr><th>事务隔离级别</th><th>更新丢失</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读</td><td>避免</td><td>发生</td><td>发生</td><td>发生</td></tr><tr><td>已提交读</td><td>避免</td><td>避免</td><td>发生</td><td>发生</td></tr><tr><td>可重复读</td><td>避免</td><td>避免</td><td>避免</td><td>发生</td></tr><tr><td>串行化</td><td>避免</td><td>避免</td><td>避免</td><td>避免</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 锁 </tag>
            
            <tag> 事务 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络相关知识总结之HTTP</title>
      <link href="/2019/02/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E4%B9%8BHTTP/"/>
      <url>/2019/02/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E4%B9%8BHTTP/</url>
      
        <content type="html"><![CDATA[<h4 id="1-HTTP简介"><a href="#1-HTTP简介" class="headerlink" title="1.HTTP简介"></a>1.HTTP简介</h4><h6 id="HTTP协议（HyperText-Transfer-Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。HTTP是一个基于TCP-IP通信协议来传递数据（HTML-文件-图片文件-查询结果等）。"><a href="#HTTP协议（HyperText-Transfer-Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。HTTP是一个基于TCP-IP通信协议来传递数据（HTML-文件-图片文件-查询结果等）。" class="headerlink" title="HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。"></a>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</h6><h6 id="HTTP三点注意事项："><a href="#HTTP三点注意事项：" class="headerlink" title="HTTP三点注意事项："></a>HTTP三点注意事项：</h6><blockquote><p>1.HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>2.HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。<br>3.HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p></blockquote><hr><h4 id="2-HTTP消息结构"><a href="#2-HTTP消息结构" class="headerlink" title="2.HTTP消息结构"></a>2.HTTP消息结构</h4><h6 id="客户端请求消息：客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request-line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。"><a href="#客户端请求消息：客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request-line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。" class="headerlink" title="客户端请求消息：客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。"></a>客户端请求消息：客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。</h6><p><img src="/images/计算机网络相关知识总结之HTTP/2012072810301161.png" alt="这里写图片描述"><br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/hello.txt</span> HTTP/1.1</span><br><span class="line"><span class="attribute">User-Agent</span>: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3</span><br><span class="line"><span class="attribute">Host</span>: www.example.com</span><br><span class="line"><span class="attribute">Accept-Language</span>: en, mi</span><br></pre></td></tr></table></figure></p><h5 id="服务器响应消息：HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。"><a href="#服务器响应消息：HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。" class="headerlink" title="服务器响应消息：HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。"></a>服务器响应消息：HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</h5><p><img src="/images/计算机网络相关知识总结之HTTP/httpmessage.jpg" alt="这里写图片描述"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span>: Mon, 27 Jul 2009 12:28:53 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache</span><br><span class="line"><span class="attribute">Last-Modified</span>: Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class="line"><span class="attribute">ETag</span>: "34aa387-d-1568eb00"</span><br><span class="line"><span class="attribute">Accept-Ranges</span>: bytes</span><br><span class="line"><span class="attribute">Content-Length</span>: 51</span><br><span class="line"><span class="attribute">Vary</span>: Accept-Encoding</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br></pre></td></tr></table></figure><hr><h4 id="3-HTTP请求方法"><a href="#3-HTTP请求方法" class="headerlink" title="3.HTTP请求方法"></a>3.HTTP请求方法</h4><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>2</td><td>HEAD</td><td>类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>6</td><td>CONNECT</td><td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr></tbody></table><hr><h4 id="4-HTTP常见状态码"><a href="#4-HTTP常见状态码" class="headerlink" title="4.HTTP常见状态码"></a>4.HTTP常见状态码</h4><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>描述</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>正常返回信息</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求有语法错误，不能被服务器所理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求未经授权，这个状态代码必须和WWW-Authenticate报头域- - 起使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器收到请求，但是拒绝提供服务</td></tr><tr><td>404</td><td>Not Found</td><td>请求资源不存在，eg, 输入了错误的URL</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器发生不可预期的错误</td></tr><tr><td>503</td><td>Server Unavailable</td><td>服务器当前不能处理客户端的请求，一段时间后可能恢复正常</td></tr></tbody></table><hr><h4 id="5-HTTP中POST与GET的区别"><a href="#5-HTTP中POST与GET的区别" class="headerlink" title="5.HTTP中POST与GET的区别"></a>5.HTTP中POST与GET的区别</h4><p>从三个层面来解答：</p><blockquote><p>1.从Http报文层面: GET将请求信息放在URL , POST放在报文体中<br>2.数据库层面: CET符合幂等性和安全性, POST不符合<br>3.其他层面: GET可以被缓存、被存储,而POST不行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端通过Json传数据，并将Json转化成实体类</title>
      <link href="/2019/01/23/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%BF%87Json%E4%BC%A0%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E5%B0%86Json%E8%BD%AC%E5%8C%96%E6%88%90%E5%AE%9E%E4%BD%93%E7%B1%BB/"/>
      <url>/2019/01/23/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%BF%87Json%E4%BC%A0%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E5%B0%86Json%E8%BD%AC%E5%8C%96%E6%88%90%E5%AE%9E%E4%BD%93%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>今天尝试着用thymeleaf写马上就要使用的计算机基础知识大赛的比赛系统，然后卡在如何将多个对象通过form表单发送给后端，最后没有找到比较好的办法，只能使用js将需要发送的数据转化成Json然后使用ajax发送请求。然后在后台在将数据转化成实体类</p></blockquote><h6 id="首先我们的实体类如下"><a href="#首先我们的实体类如下" class="headerlink" title="首先我们的实体类如下:"></a>首先我们的实体类如下:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njupt.sacc.cbkc.problem.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProblemResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(Integer pid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ProblemResult&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", uid="</span> + uid +</span><br><span class="line">                <span class="string">", pid="</span> + pid +</span><br><span class="line">                <span class="string">", result='"</span> + result + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="然后我们的目标就是前端向后端发送多个ProblemResult对象，然后在进行处理，首先我们看前端的实现方案（此时后端向前端发送的是一个List）："><a href="#然后我们的目标就是前端向后端发送多个ProblemResult对象，然后在进行处理，首先我们看前端的实现方案（此时后端向前端发送的是一个List）：" class="headerlink" title="然后我们的目标就是前端向后端发送多个ProblemResult对象，然后在进行处理，首先我们看前端的实现方案（此时后端向前端发送的是一个List）："></a>然后我们的目标就是前端向后端发送多个ProblemResult对象，然后在进行处理，首先我们看前端的实现方案（此时后端向前端发送的是一个List<problem>）：</problem></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span> xmlns:th=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="http:/</span><span class="regexp">/apps.bdimg.com/</span>libs/jquery/<span class="number">2.1</span><span class="number">.4</span>/jquery.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;div th:each="</span>problem : $&#123;problems&#125;<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;span th:text="</span>$&#123;problem.id&#125;<span class="string">"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;form th:object="</span>$&#123;problem&#125;<span class="string">" th:if="</span>$&#123;problem.isSingle == <span class="number">1</span>&#125;<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>radio<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.aOption&#125;<span class="string">" value="</span>a<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>radio<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.bOption&#125;<span class="string">" value="</span>b<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>radio<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.cOption&#125;<span class="string">" value="</span>c<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>radio<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.dOption&#125;<span class="string">" value="</span>d<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;form th:object="</span>$&#123;problem&#125;<span class="string">" th:if="</span>$&#123;problem.isSingle == <span class="number">0</span>&#125;<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>checkbox<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.aOption&#125;<span class="string">" value="</span>a<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>checkbox<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.bOption&#125;<span class="string">" value="</span>b<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>checkbox<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.cOption&#125;<span class="string">" value="</span>c<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>checkbox<span class="string">" th:name="</span>$&#123;problem.id&#125;<span class="string">" th:text="</span>$&#123;problem.dOption&#125;<span class="string">" value="</span>d<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;button name="</span>save<span class="string">" onclick="</span>loadXMLDoc(name)<span class="string">"&gt;保存&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;button name="</span>push<span class="string">" onclick="</span>loadXMLDoc(name)<span class="string">"&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    //将答案转化成Json格式</span></span><br><span class="line"><span class="string">    //name用来判断是保存操作还是提交操作</span></span><br><span class="line"><span class="string">    function f(name) &#123;</span></span><br><span class="line"><span class="string">        var json = [];</span></span><br><span class="line"><span class="string">        //[[$[count]]]为thymeleaf中js获取值的方法</span></span><br><span class="line"><span class="string">        var count = [[$&#123;count&#125;]];</span></span><br><span class="line"><span class="string">        for (var i = 1; i &lt;= count; i++) &#123;</span></span><br><span class="line"><span class="string">            var type = document.getElementsByName(i).item(0).getAttribute("</span>type<span class="string">");</span></span><br><span class="line"><span class="string">            //js获取单选框的值</span></span><br><span class="line"><span class="string">            if (type == "</span>radio<span class="string">") &#123;</span></span><br><span class="line"><span class="string">                var radio = document.getElementsByName(i);</span></span><br><span class="line"><span class="string">                var result = "</span><span class="string">";</span></span><br><span class="line"><span class="string">                for (var j = 0; j &lt; radio.length; j++) &#123;</span></span><br><span class="line"><span class="string">                    if (radio[j].checked) &#123;</span></span><br><span class="line"><span class="string">                        result = radio[j].value;</span></span><br><span class="line"><span class="string">                        break;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125; else &#123;//js获取多选框的值</span></span><br><span class="line"><span class="string">                var checkbox = document.getElementsByName(i);</span></span><br><span class="line"><span class="string">                var result = "</span><span class="string">";</span></span><br><span class="line"><span class="string">                for (var j = 0; j &lt; checkbox.length; j++) &#123;</span></span><br><span class="line"><span class="string">                    if (checkbox[j].checked)</span></span><br><span class="line"><span class="string">                        result = result + checkbox[j].value;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            var row = &#123;"</span>pid<span class="string">": i, "</span>result<span class="string">": result&#125;;</span></span><br><span class="line"><span class="string">            json.push(row);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return &#123;"</span>type<span class="string">":name,"</span>data<span class="string">":json&#125;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    //发送ajax请求</span></span><br><span class="line"><span class="string">    function loadXMLDoc(name) &#123;</span></span><br><span class="line"><span class="string">        var xmlhttp;</span></span><br><span class="line"><span class="string">        if (window.XMLHttpRequest) &#123;</span></span><br><span class="line"><span class="string">            //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line"><span class="string">            xmlhttp = new XMLHttpRequest();</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            // IE6, IE5 浏览器执行代码</span></span><br><span class="line"><span class="string">            xmlhttp = new ActiveXObject("</span>Microsoft.XMLHTTP<span class="string">");</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        xmlhttp.onreadystatechange = function () &#123;</span></span><br><span class="line"><span class="string">            if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) &#123;</span></span><br><span class="line"><span class="string">                console.log("</span>successful<span class="string">");</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        xmlhttp.open("</span>POST<span class="string">", "</span>/test<span class="string">", true);</span></span><br><span class="line"><span class="string">        xmlhttp.setRequestHeader("</span>Content-Type<span class="string">", "</span>application/json<span class="string">");</span></span><br><span class="line"><span class="string">        var data = f(name);</span></span><br><span class="line"><span class="string">        xmlhttp.send(JSON.stringify(data));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h6 id="传送的数据示例大致如下"><a href="#传送的数据示例大致如下" class="headerlink" title="传送的数据示例大致如下:"></a>传送的数据示例大致如下:</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"submit"</span>:[</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">1</span>,<span class="attr">"result"</span>:<span class="string">"a"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">2</span>,<span class="attr">"result"</span>:<span class="string">"ab"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">3</span>,<span class="attr">"result"</span>:<span class="string">""</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">4</span>,<span class="attr">"result"</span>:<span class="string">"abcd"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">5</span>,<span class="attr">"result"</span>:<span class="string">"a"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">6</span>,<span class="attr">"result"</span>:<span class="string">"d"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">7</span>,<span class="attr">"result"</span>:<span class="string">"b"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"pid"</span>:<span class="number">8</span>,<span class="attr">"result"</span>:<span class="string">"c"</span>&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"type"</span>:<span class="string">"save"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="之后我们看后端如何获取数据并将数据转化成实体类："><a href="#之后我们看后端如何获取数据并将数据转化成实体类：" class="headerlink" title="之后我们看后端如何获取数据并将数据转化成实体类："></a>之后我们看后端如何获取数据并将数据转化成实体类：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">submit</span><span class="params">(@RequestBody JSONObject jsonObject)</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过key获取前端发送的json的数组</span></span><br><span class="line">    JSONArray problemResults = jsonObject.getJSONArray(<span class="string">"data"</span>);</span><br><span class="line">    <span class="comment">//通过key获取前端发送的json中的type字段</span></span><br><span class="line">    String submitType = String.valueOf(jsonObject.get(<span class="string">"type"</span>));</span><br><span class="line">    List&lt;ProblemResult&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//通过遍历将json数据中的数据转化成实体类</span></span><br><span class="line">    <span class="keyword">for</span> (Object problemResult : problemResults) &#123;</span><br><span class="line">        <span class="comment">//会用JSONObject包中的函数将字符串转化成实体类</span></span><br><span class="line">        ProblemResult result = (ProblemResult) JSONObject.toJavaObject((JSONObject) problemResult, ProblemResult.class);</span><br><span class="line">        list.add(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经过上面的操作，我们就成功的完成了前端向后端发送多个对象，整体思想大概就是先把需要传的所有对象看成一个数组，然后传到后端之后再对json数据进行解析，然后获取数据中的json字符串，然后通过json库中的函数将json字符串转化成实体类，全部完成</p></blockquote><h5 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h5><blockquote><p>阿里巴巴的JSONObject对象转换 <a href="https://blog.csdn.net/a990914093/article/details/81217581" target="_blank" rel="noopener">https://blog.csdn.net/a990914093/article/details/81217581</a><br>JSONObject如何转换成实体类型<br><a href="https://blog.csdn.net/m0_38129335/article/details/80047034" target="_blank" rel="noopener">https://blog.csdn.net/m0_38129335/article/details/80047034</a><br>json数据与实体类之间的相互转换<br><a href="https://blog.csdn.net/nandao158/article/details/71122851" target="_blank" rel="noopener">https://blog.csdn.net/nandao158/article/details/71122851</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成MyBatis</title>
      <link href="/2018/11/27/Springboot%E9%9B%86%E6%88%90MyBatis/"/>
      <url>/2018/11/27/Springboot%E9%9B%86%E6%88%90MyBatis/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><blockquote><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p></blockquote><hr><h3 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h3><h5 id="使用idea创建空项目并记得选择web，mysql，mybaties这几个依赖即可，在此就不赘述了，创建后包依赖大致如下："><a href="#使用idea创建空项目并记得选择web，mysql，mybaties这几个依赖即可，在此就不赘述了，创建后包依赖大致如下：" class="headerlink" title="使用idea创建空项目并记得选择web，mysql，mybaties这几个依赖即可，在此就不赘述了，创建后包依赖大致如下："></a>使用idea创建空项目并记得选择web，mysql，mybaties这几个依赖即可，在此就不赘述了，创建后包依赖大致如下：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="三、在yml配置中添加相关配置"><a href="#三、在yml配置中添加相关配置" class="headerlink" title="三、在yml配置中添加相关配置"></a>三、在yml配置中添加相关配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后的填写mybatis的mapper书写路径</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><hr><h3 id="四、创建一个实体类"><a href="#四、创建一个实体类" class="headerlink" title="四、创建一个实体类"></a>四、创建一个实体类</h3><p>SysUserEntity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gausscode.calo.user.entity;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String loginName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tel;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String picUrl;</span><br><span class="line">    <span class="keyword">private</span> String siteId;</span><br><span class="line">    <span class="keyword">private</span> Date createDate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> createBy;</span><br><span class="line">    <span class="keyword">private</span> Date updateDate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> updateId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> delFlag;</span><br><span class="line">    <span class="keyword">private</span> String remarks;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoginName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginName</span><span class="params">(String loginName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loginName = loginName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTel</span><span class="params">(<span class="keyword">int</span> tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPicUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> picUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPicUrl</span><span class="params">(String picUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.picUrl = picUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSiteId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siteId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSiteId</span><span class="params">(String siteId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.siteId = siteId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateDate</span><span class="params">(Date createDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createDate = createDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCreateBy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateBy</span><span class="params">(<span class="keyword">int</span> createBy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createBy = createBy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateDate</span><span class="params">(Date updateDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateDate = updateDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUpdateId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateId</span><span class="params">(<span class="keyword">int</span> updateId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateId = updateId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDelFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDelFlag</span><span class="params">(<span class="keyword">int</span> delFlag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delFlag = delFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRemarks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remarks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRemarks</span><span class="params">(String remarks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.remarks = remarks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SysUserEntity&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", loginName='"</span> + loginName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", tel="</span> + tel +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", picUrl='"</span> + picUrl + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", siteId='"</span> + siteId + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", createDate="</span> + createDate +</span><br><span class="line">                <span class="string">", createBy="</span> + createBy +</span><br><span class="line">                <span class="string">", updateDate="</span> + updateDate +</span><br><span class="line">                <span class="string">", updateId="</span> + updateId +</span><br><span class="line">                <span class="string">", delFlag="</span> + delFlag +</span><br><span class="line">                <span class="string">", remarks='"</span> + remarks + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="五、创建一个dao层，service层以及controller层"><a href="#五、创建一个dao层，service层以及controller层" class="headerlink" title="五、创建一个dao层，service层以及controller层"></a>五、创建一个dao层，service层以及controller层</h3><p>SysUserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gausscode.calo.user.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.gausscode.calo.user.entity.SysUserEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">SysUserEntity <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(SysUserEntity sysUserEntity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(SysUserEntity sysUserEntity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SysUserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gausscode.calo.user.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.gausscode.calo.user.service.SysUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SysUserService sysUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.insert().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sysUserService.delete();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"successful delete"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SysUserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gausscode.calo.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.gausscode.calo.user.dao.SysUserDao;</span><br><span class="line"><span class="keyword">import</span> cn.gausscode.calo.user.entity.SysUserEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SysUserDao sysUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserDao.get(id).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUserEntity <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SysUserEntity sysUserEntity = <span class="keyword">new</span> SysUserEntity();</span><br><span class="line">        sysUserEntity.setName(<span class="string">"name"</span>);</span><br><span class="line">        sysUserEntity.setLoginName(<span class="string">"loginName"</span>);</span><br><span class="line">        sysUserEntity.setEmail(<span class="string">"email"</span>);</span><br><span class="line">        sysUserEntity.setTel(<span class="number">123</span>);</span><br><span class="line">        sysUserEntity.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        sysUserEntity.setPicUrl(<span class="string">"pic_url"</span>);</span><br><span class="line">        sysUserEntity.setSiteId(<span class="string">"site_id"</span>);</span><br><span class="line">        SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        sysUserEntity.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">        sysUserEntity.setCreateBy(<span class="number">1</span>);</span><br><span class="line">        sysUserEntity.setDelFlag(<span class="number">1</span>);</span><br><span class="line">        sysUserEntity.setRemarks(<span class="string">"remarks"</span>);</span><br><span class="line">        sysUserDao.insert(sysUserEntity);</span><br><span class="line">        <span class="keyword">return</span> sysUserEntity;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sysUserDao.delete(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SysUserEntity sysUserEntity = <span class="keyword">new</span> SysUserEntity();</span><br><span class="line">        sysUserEntity.setId(<span class="number">1</span>);</span><br><span class="line">        sysUserEntity.setName(<span class="string">"name1"</span>);</span><br><span class="line">        sysUserEntity.setLoginName(<span class="string">"loginName1"</span>);</span><br><span class="line">        sysUserEntity.setEmail(<span class="string">"email1"</span>);</span><br><span class="line">        sysUserEntity.setTel(<span class="number">1231</span>);</span><br><span class="line">        sysUserEntity.setPassword(<span class="string">"password1"</span>);</span><br><span class="line">        sysUserEntity.setPicUrl(<span class="string">"pic_url1"</span>);</span><br><span class="line">        sysUserEntity.setSiteId(<span class="string">"site_id1"</span>);</span><br><span class="line">        SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss1"</span>);</span><br><span class="line">        sysUserEntity.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">        sysUserEntity.setCreateBy(<span class="number">11</span>);</span><br><span class="line">        sysUserEntity.setDelFlag(<span class="number">11</span>);</span><br><span class="line">        sysUserEntity.setRemarks(<span class="string">"remarks1"</span>);</span><br><span class="line">        sysUserDao.update(sysUserEntity);</span><br><span class="line">        <span class="keyword">return</span> sysUserDao.get(<span class="number">1</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="六、书写mybatis的mapper"><a href="#六、书写mybatis的mapper" class="headerlink" title="六、书写mybatis的mapper"></a>六、书写mybatis的mapper</h3><p>SysUserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.gausscode.calo.user.dao.SysUserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"get"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"cn.gausscode.calo.user.entity.SysUserEntity"</span>&gt;</span></span><br><span class="line">        select * from sys_user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"cn.gausscode.calo.user.entity.SysUserEntity"</span>&gt;</span></span><br><span class="line">        insert into sys_user (name,login_name,email,tel,password,pic_url,site_id,create_date,create_by,update_date,update_by,del_flag,remarks)</span><br><span class="line">                values (#&#123;name&#125;,#&#123;loginName&#125;,#&#123;email&#125;,#&#123;tel&#125;,#&#123;password&#125;,#&#123;picUrl&#125;,#&#123;siteId&#125;,#&#123;createDate&#125;,#&#123;createBy&#125;,#&#123;updateDate&#125;,#&#123;updateId&#125;,#&#123;delFlag&#125;,#&#123;remarks&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        update sys_user set del_flag = 0 where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.gausscode.calo.user.entity.SysUserEntity"</span>&gt;</span></span><br><span class="line">        update sys_user set</span><br><span class="line">            name = #&#123;name&#125;,</span><br><span class="line">            login_name = #&#123;loginName&#125;,</span><br><span class="line">            email = #&#123;email&#125;,</span><br><span class="line">            tel = #&#123;tel&#125;,</span><br><span class="line">            password = #&#123;password&#125;,</span><br><span class="line">            pic_url = #&#123;picUrl&#125;,</span><br><span class="line">            site_id = #&#123;siteId&#125;,</span><br><span class="line">            create_date = #&#123;createDate&#125;,</span><br><span class="line">            create_by = #&#123;createBy&#125;,</span><br><span class="line">            update_date = #&#123;updateDate&#125;,</span><br><span class="line">            update_by = #&#123;updateId&#125;,</span><br><span class="line">            del_flag = #&#123;delFlag&#125;,</span><br><span class="line">            remarks = #&#123;remarks&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="至此增删改查功能就完成了"><a href="#至此增删改查功能就完成了" class="headerlink" title="至此增删改查功能就完成了"></a>至此增删改查功能就完成了</h5><hr><h3 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h3><p>下面这个是整个项目的结构图</p><p><img src="/images/springboot集成MyBatis/ADDA67C5-4421-4F7C-826B-766735DF3EF2.png" alt="这里写图片描述"></p><blockquote><p>整体来说，mybatis可以大量减少了在sql代码部分的心思，特别是动态sql部分，简直太棒了，不过还没有完全学完，只是今天写了一个demo，之后会慢慢地把整个mybatis系统的学习总结一下</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger报错:java.lang.NumberFormatException: For input string: &quot;&quot;</title>
      <link href="/2018/11/15/Swagger%E6%8A%A5%E9%94%99-java-lang-NumberFormatException-For-input-string/"/>
      <url>/2018/11/15/Swagger%E6%8A%A5%E9%94%99-java-lang-NumberFormatException-For-input-string/</url>
      
        <content type="html"><![CDATA[<h5 id="使用Swagger和Springfox，我们编写了REST-API，我们编写了更多可访问的API。当您运行该应用程序时，您可能会遇到一个奇怪的异常，如下所示："><a href="#使用Swagger和Springfox，我们编写了REST-API，我们编写了更多可访问的API。当您运行该应用程序时，您可能会遇到一个奇怪的异常，如下所示：" class="headerlink" title="使用Swagger和Springfox，我们编写了REST API，我们编写了更多可访问的API。当您运行该应用程序时，您可能会遇到一个奇怪的异常，如下所示："></a>使用Swagger和Springfox，我们编写了REST API，我们编写了更多可访问的API。当您运行该应用程序时，您可能会遇到一个奇怪的异常，如下所示：</h5><p><code>java.lang.NumberFormatException: For input string: &quot;&quot;</code></p><h5 id="这似乎是一个错误，所以你可以忽略那个。如果它让您烦恼，您可以随时更改该文件的日志记录级别，就像他们在该问题中提出的那样。您也可以在application-properties或application-yml中执行此操作："><a href="#这似乎是一个错误，所以你可以忽略那个。如果它让您烦恼，您可以随时更改该文件的日志记录级别，就像他们在该问题中提出的那样。您也可以在application-properties或application-yml中执行此操作：" class="headerlink" title="这似乎是一个错误，所以你可以忽略那个。如果它让您烦恼，您可以随时更改该文件的日志记录级别，就像他们在该问题中提出的那样。您也可以在application.properties或application.yml中执行此操作："></a>这似乎是一个错误，所以你可以忽略那个。如果它让您烦恼，您可以随时更改该文件的日志记录级别，就像他们在该问题中提出的那样。您也可以在<code>application.properties</code>或<code>application.yml</code>中执行此操作：</h5><blockquote><p>application.properties<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">logging.level.io.swagger.models.parameters.AbstractSerializableParameter=error</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>application.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">io.swagger.models.parameters.AbstractSerializableParameter:</span> <span class="string">error</span></span><br></pre></td></tr></table></figure><hr><p>参考文章：<a href="https://g00glen00b.be/documenting-rest-api-swagger-springfox/" target="_blank" rel="noopener">https://g00glen00b.be/documenting-rest-api-swagger-springfox/</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成Swagger2</title>
      <link href="/2018/11/14/Springboot%E9%9B%86%E6%88%90Swagger2/"/>
      <url>/2018/11/14/Springboot%E9%9B%86%E6%88%90Swagger2/</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot集成Swagger2"><a href="#Springboot集成Swagger2" class="headerlink" title="Springboot集成Swagger2"></a>Springboot集成Swagger2</h2><hr><h4 id="一、介绍："><a href="#一、介绍：" class="headerlink" title="一、介绍："></a>一、介绍：</h4><blockquote><p>Swagger是一个功能强大且易于使用的API开发人员工具套件，适用于团队和个人，支持从整个API生命周期（从设计和文档到测试和部署）的开发。<br>Swagger由开源，免费和商用工具组成，允许任何人，从技术工程师到街头智能产品经理，构建每个人都喜欢的令人惊叹的API。<br>Swagger最初是作为2010年设计RESTful API的简单开源规范而开发的。开源工具如Swagger UI，Swagger Editor和Swagger Codegen也被开发用于更好地实现和可视化规范中定义的API。Swagger项目由规范和开源工具组成，非常受欢迎，创建了一个由社区驱动的工具组成的庞大生态系统。<br>2015年，Swagger项目被SmartBear Software收购。Swagger规范被捐赠给Linux基金会并重命名为OpenAPI规范以正式标准化REST API的描述方式。建立OpenAPI倡议是为了以公开和透明的方式指导美洲国家组织的发展。<br>从那以后，Swagger成为最受欢迎的工具套件，可以在API生命周期中充分利用OAS的强大功能。</p></blockquote><hr><h4 id="二、Springboot添加Swagger2依赖"><a href="#二、Springboot添加Swagger2依赖" class="headerlink" title="二、Springboot添加Swagger2依赖"></a>二、Springboot添加Swagger2依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="三、添加Swagger2配置文件"><a href="#三、添加Swagger2配置文件" class="headerlink" title="三、添加Swagger2配置文件"></a>三、添加Swagger2配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringFoxConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">apiDocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors</span><br><span class="line">                .basePackage(<span class="string">"你的controller包，如com.example.controller"</span>)).paths(PathSelectors.any())</span><br><span class="line">                .build().apiInfo(getApiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">getApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">"TITLE"</span>,</span><br><span class="line">                <span class="string">"DESCIPRION"</span>,</span><br><span class="line">                <span class="string">"VERSION"</span>,</span><br><span class="line">                <span class="string">"TEAMS OF SERVICE URL"</span>,</span><br><span class="line">                <span class="keyword">new</span> Contact(<span class="string">"NAME"</span>,<span class="string">"URL"</span>,<span class="string">"EMAIL"</span>),</span><br><span class="line">                <span class="string">"LICENSE"</span>,</span><br><span class="line">                <span class="string">"LICENSE URL"</span>,</span><br><span class="line">                Collections.emptyList()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="WebConfig用于访问静态资源"><a href="#WebConfig用于访问静态资源" class="headerlink" title="WebConfig用于访问静态资源"></a>WebConfig用于访问静态资源</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.CacheControl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line">nfiguration</span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS).cachePublic());</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS).cachePublic());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="四、添加注解"><a href="#四、添加注解" class="headerlink" title="四、添加注解"></a>四、添加注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForumController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * by zhangjia</span></span><br><span class="line"><span class="comment">     * 获取板块分页后页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"获取板块分页后页数"</span>,notes = <span class="string">"板块页数"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/pnum/&#123;fid&#125;/&#123;isDigest&#125;"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">pageNum</span><span class="params">(@CookieValue(defaultValue = <span class="string">"0"</span>)</span> <span class="keyword">int</span> uid,</span></span><br><span class="line"><span class="function">                            @<span class="title">CookieValue</span><span class="params">(defaultValue = <span class="string">""</span>)</span> String sid,</span></span><br><span class="line"><span class="function">                            @ApiParam @PathVariable <span class="keyword">int</span> fid,</span></span><br><span class="line"><span class="function">                            @ApiParam @PathVariable <span class="keyword">int</span> isDigest,</span></span><br><span class="line"><span class="function">                            @Autowired HttpServletRequest request) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> forumService.getPageNum(fid, isDigest);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="通过访问：http-localhost-8080-v2-api-docs-，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger-UI来生成一个可读性良好的api页面。"><a href="#通过访问：http-localhost-8080-v2-api-docs-，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger-UI来生成一个可读性良好的api页面。" class="headerlink" title="通过访问：http://localhost:8080/v2/api-docs ，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger UI来生成一个可读性良好的api页面。"></a>通过访问：<a href="http://localhost:8080/v2/api-docs" target="_blank" rel="noopener">http://localhost:8080/v2/api-docs</a> ，能测试生成的api是否可用。此时返回的是一个json形式的页面，可读性不好。可以通过Swagger UI来生成一个可读性良好的api页面。</h5><h5 id="访问：http-localhost-8080-your-app-root-swagger-ui-html-就可以看到可读性较好的api文档页面。"><a href="#访问：http-localhost-8080-your-app-root-swagger-ui-html-就可以看到可读性较好的api文档页面。" class="headerlink" title="访问：http://localhost:8080/your-app-root/swagger-ui.html 就可以看到可读性较好的api文档页面。"></a>访问：<a href="http://localhost:8080/your-app-root/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/your-app-root/swagger-ui.html</a> 就可以看到可读性较好的api文档页面。</h5><p><img src="/images/Springboot集成Swagger2/20181114204922957.jpeg" alt="这里写图片描述"></p><hr><h4 id="五、常见注解介绍"><a href="#五、常见注解介绍" class="headerlink" title="五、常见注解介绍"></a>五、常见注解介绍</h4><p>Swagger通过注解表明该接口会生成文档，包括接口名、请求方法、参数、返回信息的等等。</p><blockquote><p>@Api：修饰整个类，描述Controller的作用<br>@ApiOperation：描述一个类的一个方法，或者说一个接口<br>@ApiParam：单个参数描述<br>@ApiModel：用对象来接收参数<br>@ApiProperty：用对象接收参数时，描述对象的一个字段<br>@ApiResponse：HTTP响应其中1个描述<br>@ApiResponses：HTTP响应整体描述<br>@ApiIgnore：使用该注解忽略这个API<br>@ApiError ：发生错误返回的信息<br>@ApiImplicitParam：一个请求参数<br>@ApiImplicitParams：多个请求参数</p></blockquote><hr><p>参考文章：<br><a href="https://blog.csdn.net/fansunion/article/details/51923720" target="_blank" rel="noopener">https://blog.csdn.net/fansunion/article/details/51923720</a><br><a href="https://blog.csdn.net/saytime/article/details/74937664" target="_blank" rel="noopener">https://blog.csdn.net/saytime/article/details/74937664</a><br><a href="https://blog.csdn.net/Phone_1070333541/article/details/80949040" target="_blank" rel="noopener">https://blog.csdn.net/Phone_1070333541/article/details/80949040</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> Swagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构设计周作业——大整数运算器</title>
      <link href="/2018/11/13/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%91%A8%E4%BD%9C%E4%B8%9A%E2%80%94%E2%80%94%E5%A4%A7%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%E5%99%A8/"/>
      <url>/2018/11/13/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%91%A8%E4%BD%9C%E4%B8%9A%E2%80%94%E2%80%94%E5%A4%A7%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="这次的算法与数据结构设计周作业题目比较简单，一个是求众数与重数，另一个题目则为大整数运算器，由于图形化界面不是硬性要求，所以项目不使用GUI，而是直接在命令行运行，具体题目如下："><a href="#这次的算法与数据结构设计周作业题目比较简单，一个是求众数与重数，另一个题目则为大整数运算器，由于图形化界面不是硬性要求，所以项目不使用GUI，而是直接在命令行运行，具体题目如下：" class="headerlink" title="这次的算法与数据结构设计周作业题目比较简单，一个是求众数与重数，另一个题目则为大整数运算器，由于图形化界面不是硬性要求，所以项目不使用GUI，而是直接在命令行运行，具体题目如下："></a>这次的算法与数据结构设计周作业题目比较简单，一个是求众数与重数，另一个题目则为大整数运算器，由于图形化界面不是硬性要求，所以项目不使用GUI，而是直接在命令行运行，具体题目如下：</h3><hr><ol><li>众数问题<blockquote><p>给定含有n个元素的多重集合S，每个元素在S中出现的次数称为该元素的重数，S中重数最大的元素称为众数。<br>例如，S＝{1, 2 ,2 ,2 ,3 ,5}，S的众数是2，该众数的重数为3。<br>要求对于给定的由n个自然数组成的多重集合S，计算S的众数及其重数。</p></blockquote></li></ol><p>实现该问题并不难，使用Java的HashMap创建键值对，将数字最为key，出现的次数作为value，遍历一次数组即可确定众数以及重数，代码如下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Unity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">13</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        Map&lt;String, Integer&gt; map = unity(list);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title">unity</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = list.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> maxNum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(a)) &#123;</span><br><span class="line">                map.put(a, map.get(a) + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (maxNum &lt; map.get(a)) &#123;</span><br><span class="line">                    maxNum = map.get(a);</span><br><span class="line">                    max = a;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(a, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Integer&gt; maxMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        maxMap.put(<span class="string">"众数"</span>, max);</span><br><span class="line">        maxMap.put(<span class="string">"重数"</span>, maxNum);</span><br><span class="line">        <span class="keyword">return</span> maxMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><ol><li>大整数运算器<blockquote><p>（一）课题内容<br>实现一个简单的大整数算术运算程序。主要功能计算两个大整数（20位）的加减法等算术运算，按指定的格式输出结果。通过此课题，熟练掌握字符串、格式输出、文件的各种操作，以及基本的计算算法思想的应用。<br>（二）课题要求</p><ol><li>基本要求<br>(1) 输入功能：能实现从键盘或文本文件输入代表大整数的字符串并用合适的结构存储，能实现输入整个表达式（含大整数和相应的运算符）。<br>(2) 输出功能：将算式及计算结果按照一定格式批量输出到屏幕及另一个文本文件中。<br>(3) 判断功能：能够对输入的表达式判断其正确与否，如果表达式不正确则无法进行运算；表达式正确的情况下执行运算功能。<br>(4) 运算功能：可以实现大整数的加法、减法、乘法和除法运算。 </li><li>扩展要求<br>(1) 实现一些常用的数学函数对大整数进行运算，如：大整数的平方根运算sqrt(x)、大整数的幂运算pow(x,y)等。<br>【其他要求】<br>（1）变量、函数命名符合规范。<br>（2）注释详细：每个变量都要求有注释说明用途；函数有注释说明功能，对参数、返回值也要以注释的形式说明用途；关键的语句段要求有注释解释。<br>（3）程序的层次清晰，可读性强。<br>（4）界面美观，交互方便。</li></ol></blockquote></li></ol><p>实现该问题的难度主要是在除法，加减乘皆可将大整数转化为字符串，然后进行相应的运算，除法我是用的是之前在LeetCode刷题时遇到的一个题目，<code>20.两数相除</code>这个题目的启发，<a href="http://suiwo.xyz/2018/10/23/LeetCode%EF%BC%9A29-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4%EF%BC%88Java%EF%BC%89/">点击传送门</a> 可以看看我之前总结的在不使用除法以及取余的情况下如何进行除法运算。关于扩展要求我目前还未添加，添加之后我会重新修改这篇博文的！，实现的代码格式。(代码比较长，可以点击<a href="https://github.com/ZhangJia97/calculationTas" target="_blank" rel="noopener">传送门</a>进GitHub直接下载整个作业源码)<br>运行界面比较简单，示例如下：</p><blockquote><p>手动输入<br><img src="/images/算法与数据结构设计周作业——大整数运算器/20181031142500647.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p>从文件中读取<br><img src="/images/算法与数据结构设计周作业——大整数运算器/20181031142547134.png" alt="在这里插入图片描述"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigNum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">"--------------------\n请选择方式:"</span>);</span><br><span class="line">            System.out.println(<span class="string">"1.手动输入\n2.从文件读取\n0.退出系统\n--------------------"</span>);</span><br><span class="line">            String choice = sc.nextLine();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                    arithmetic();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                    arithmeticByFile();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"0"</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"非法输入，请重试！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (choice.equals(<span class="string">"0"</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动输入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arithmetic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"\n\n--------------------\n请选择要执行的运算："</span>);</span><br><span class="line">            System.out.println(<span class="string">"1.加法"</span>);</span><br><span class="line">            System.out.println(<span class="string">"2.减法"</span>);</span><br><span class="line">            System.out.println(<span class="string">"3.乘法"</span>);</span><br><span class="line">            System.out.println(<span class="string">"4.除法"</span>);</span><br><span class="line">            System.out.println(<span class="string">"0.退出\n--------------------"</span>);</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            String choice = sc.nextLine();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                    Scanner sc1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                    System.out.print(<span class="string">"\n\n请输入被加数："</span>);</span><br><span class="line">                    String a1 = sc1.nextLine();</span><br><span class="line">                    System.out.print(<span class="string">"请输入加数："</span>);</span><br><span class="line">                    String b1 = sc1.nextLine();</span><br><span class="line">                    <span class="keyword">if</span> (checkNum(a1) &amp;&amp; checkNum(b1)) &#123;</span><br><span class="line">                        String num1 = add(a1, b1);</span><br><span class="line">                        System.out.println(mergeStr(a1, b1, choice, num1));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"数字格式有误，请检查"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                    Scanner sc2 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                    System.out.print(<span class="string">"\n\n请输入被减数："</span>);</span><br><span class="line">                    String a2 = sc2.nextLine();</span><br><span class="line">                    System.out.print(<span class="string">"请输入减数："</span>);</span><br><span class="line">                    String b2 = sc2.nextLine();</span><br><span class="line">                    <span class="keyword">if</span> (checkNum(a2) &amp;&amp; checkNum(b2)) &#123;</span><br><span class="line">                        String num2 = subtract(a2, b2);</span><br><span class="line">                        System.out.println(mergeStr(a2, b2, choice, num2));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"数字格式有误，请检查"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">                    Scanner sc3 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                    System.out.print(<span class="string">"\n\n请输入被乘数："</span>);</span><br><span class="line">                    String a3 = sc3.nextLine();</span><br><span class="line">                    System.out.print(<span class="string">"请输入乘数："</span>);</span><br><span class="line">                    String b3 = sc3.nextLine();</span><br><span class="line">                    <span class="keyword">if</span> (checkNum(a3) &amp;&amp; checkNum(b3)) &#123;</span><br><span class="line">                        String num3 = mul(a3, b3);</span><br><span class="line">                        System.out.println(mergeStr(a3, b3, choice, num3));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"数字格式有误，请检查"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">                    Scanner sc4 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                    System.out.print(<span class="string">"\n\n请输入被除数："</span>);</span><br><span class="line">                    String a4 = sc4.nextLine();</span><br><span class="line">                    System.out.print(<span class="string">"请输入除数："</span>);</span><br><span class="line">                    String b4 = sc4.nextLine();</span><br><span class="line">                    <span class="keyword">if</span> (checkNum(a4) &amp;&amp; checkNum(b4)) &#123;</span><br><span class="line">                        String num4 = division(a4, b4);</span><br><span class="line">                        System.out.println(mergeStr(a4, b4, choice, num4));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"数字格式有误，请检查"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"0"</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"非法输入，请重试！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (choice.equals(<span class="string">"0"</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以文件的形式来计算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arithmeticByFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            str = readFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; list = checkFileStr(str);</span><br><span class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"字符串匹配时有误，请检查"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String num = <span class="string">""</span>;</span><br><span class="line">            String num1 = list.get(<span class="number">0</span>);</span><br><span class="line">            String sign = list.get(<span class="number">1</span>);</span><br><span class="line">            String num2 = list.get(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (!checkNum(num1) || !checkNum(num2)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"数字格式有误，请检查"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (sign) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                    num = add(num1, num2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                    num = subtract(num1, num2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                    num = mul(num1, num2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                    num = division(num1, num2);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"运算符有误，请检查"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writeFile(str + <span class="string">" = "</span> + num);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查文件中字符串是否合法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 需要检查的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">checkFileStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        String pattern = <span class="string">"\\((-?[\\d+])\\)(\\W)\\((-?[\\d+])\\)"</span>;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 Pattern 对象</span></span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 现在创建 matcher 对象</span></span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line">        <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">            list.add(m.group(<span class="number">1</span>));</span><br><span class="line">            list.add(m.group(<span class="number">2</span>));</span><br><span class="line">            list.add(m.group(<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查输入的数字是否合法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 需要检查的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否合法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkNum</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        String pattern = <span class="string">"^-?\\d+$"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 Pattern 对象</span></span><br><span class="line">        Pattern r = Pattern.compile(pattern);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 现在创建 matcher 对象</span></span><br><span class="line">        Matcher m = r.matcher(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> m.find() &amp;&amp; m.group(<span class="number">0</span>).equals(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 若文件不存在则返回空，正常则返回文件中字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"file/arithmetic.txt"</span>);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(fileInputStream, <span class="string">"UTF-8"</span>);</span><br><span class="line">            BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">            String line = bufferedReader.readLine();</span><br><span class="line">            bufferedReader.close();</span><br><span class="line">            inputStreamReader.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">            System.out.println(<span class="string">"\n\n获取到的算式为: "</span> + line);</span><br><span class="line">            <span class="keyword">return</span> line;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 计算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String result)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"file/result.txt"</span>);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(fileOutputStream, <span class="string">"UTF-8"</span>);</span><br><span class="line">            BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(outputStreamWriter);</span><br><span class="line">            bufferedWriter.write(result);</span><br><span class="line">            bufferedWriter.close();</span><br><span class="line">            outputStreamWriter.close();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">            System.out.println(<span class="string">"计算结果为: "</span> + result + <span class="string">"\n\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1 数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2 数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sign 运算符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num  结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 合并后的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">mergeStr</span><span class="params">(String num1, String num2, String sign, String num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (sign) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                sign = <span class="string">"+"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                sign = <span class="string">"-"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">                sign = <span class="string">"*"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">                sign = <span class="string">"/"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"\n答案为:"</span> + num1 + <span class="string">" "</span> + sign + <span class="string">" "</span> + num2 + <span class="string">" = "</span> + num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大整数的加法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">add</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> plus = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (a.charAt(<span class="number">0</span>) == <span class="string">'-'</span> &amp;&amp; b.charAt(<span class="number">0</span>) != <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> subtract(b, a.replace(<span class="string">"-"</span>, <span class="string">""</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.charAt(<span class="number">0</span>) != <span class="string">'-'</span> &amp;&amp; b.charAt(<span class="number">0</span>) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> subtract(a, b.replace(<span class="string">"-"</span>, <span class="string">""</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.charAt(<span class="number">0</span>) == <span class="string">'-'</span> &amp;&amp; b.charAt(<span class="number">0</span>) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            plus = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        b = b.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (a.length() &lt; b.length()) &#123;</span><br><span class="line">            String tmp = a;</span><br><span class="line">            a = b;</span><br><span class="line">            b = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] aList = a.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] bList = b.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> aLen = aList.length;</span><br><span class="line">        <span class="keyword">int</span> bLen = bList.length;</span><br><span class="line">        StringBuilder num = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否进位</span></span><br><span class="line">        <span class="keyword">boolean</span> carry = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (aLen &gt; <span class="number">0</span> &amp;&amp; bLen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> addNum = Integer.parseInt(String.valueOf(aList[aLen - <span class="number">1</span>])) + Integer.parseInt(String.valueOf(bList[bLen - <span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">if</span> (carry) &#123;</span><br><span class="line">                addNum += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (addNum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                addNum %= <span class="number">10</span>;</span><br><span class="line">                carry = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                carry = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num.insert(<span class="number">0</span>, String.valueOf(addNum));</span><br><span class="line">            aLen--;</span><br><span class="line">            bLen--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (aLen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> addNum = Integer.parseInt(String.valueOf(aList[aLen - <span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">if</span> (carry) &#123;</span><br><span class="line">                addNum += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (addNum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                    addNum %= <span class="number">10</span>;</span><br><span class="line">                    carry = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    carry = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num.insert(<span class="number">0</span>, addNum);</span><br><span class="line">            aLen--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry) &#123;</span><br><span class="line">            num.insert(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!plus) &#123;</span><br><span class="line">            num.insert(<span class="number">0</span>, <span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大整数减法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">subtract</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isPlus = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (a.charAt(<span class="number">0</span>) != <span class="string">'-'</span> &amp;&amp; b.charAt(<span class="number">0</span>) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(a, b.replace(<span class="string">"-"</span>, <span class="string">""</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.charAt(<span class="number">0</span>) == <span class="string">'-'</span> &amp;&amp; b.charAt(<span class="number">0</span>) != <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> add(a, b.replace(<span class="string">"-"</span>, <span class="string">""</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.charAt(<span class="number">0</span>) == <span class="string">'-'</span> &amp;&amp; b.charAt(<span class="number">0</span>) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            String tmp = a.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">            a = b.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">            b = tmp;</span><br><span class="line">            isPlus = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        b = b.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (a.length() &lt; b.length()) &#123;</span><br><span class="line">            String tmp = a;</span><br><span class="line">            a = b;</span><br><span class="line">            b = tmp;</span><br><span class="line">            isPlus = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] aList = a.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] bList = b.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> aLen = aList.length;</span><br><span class="line">        <span class="keyword">int</span> bLen = bList.length;</span><br><span class="line">        <span class="keyword">if</span> (aLen == bLen) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = aLen; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Integer.parseInt(String.valueOf(aList[i - <span class="number">1</span>])) &lt; Integer.parseInt(String.valueOf(bList[i - <span class="number">1</span>]))) &#123;</span><br><span class="line">                    isPlus = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">char</span>[] tmpList = aList;</span><br><span class="line">                    aList = bList;</span><br><span class="line">                    bList = tmpList;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder num = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否借位</span></span><br><span class="line">        <span class="keyword">boolean</span> borrow = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (aLen &gt; <span class="number">0</span> &amp;&amp; bLen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> subtractNum;</span><br><span class="line">            <span class="keyword">int</span> m = Integer.parseInt(String.valueOf(aList[aLen - <span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">int</span> n = Integer.parseInt(String.valueOf(bList[bLen - <span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">if</span> (borrow) &#123;</span><br><span class="line">                <span class="keyword">if</span> (m - <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                    subtractNum = m - <span class="number">1</span> + <span class="number">10</span> - n;</span><br><span class="line">                    borrow = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    subtractNum = m - <span class="number">1</span> - n;</span><br><span class="line">                    borrow = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (m &lt; n) &#123;</span><br><span class="line">                    subtractNum = m + <span class="number">10</span> - n;</span><br><span class="line">                    borrow = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    subtractNum = m - n;</span><br><span class="line">                    borrow = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num.insert(<span class="number">0</span>, String.valueOf(subtractNum));</span><br><span class="line">            aLen--;</span><br><span class="line">            bLen--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (aLen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> subtractNum = Integer.parseInt(String.valueOf(aList[aLen - <span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">if</span> (borrow) &#123;</span><br><span class="line">                subtractNum -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (subtractNum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    subtractNum = -subtractNum;</span><br><span class="line">                    borrow = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    borrow = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num.insert(<span class="number">0</span>, subtractNum);</span><br><span class="line">            aLen--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isPlus) &#123;</span><br><span class="line">            num.insert(<span class="number">0</span>, <span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(Integer.parseInt(num.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大整数乘法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">mul</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isPlus = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (a.charAt(<span class="number">0</span>) == <span class="string">'-'</span> &amp;&amp; b.charAt(<span class="number">0</span>) != <span class="string">'-'</span>) &#123;</span><br><span class="line">            isPlus = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.charAt(<span class="number">0</span>) != <span class="string">'-'</span> &amp;&amp; b.charAt(<span class="number">0</span>) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            isPlus = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Integer.parseInt(a) == <span class="number">0</span> || Integer.parseInt(b) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a = a.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        b = b.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (a.length() &lt; b.length()) &#123;</span><br><span class="line">            String tmp = a;</span><br><span class="line">            a = b;</span><br><span class="line">            b = tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] aList = a.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] bList = b.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> bLen = bList.length;</span><br><span class="line">        String num = <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (bLen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> aLen = aList.length;</span><br><span class="line">            StringBuilder mulNum = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (aLen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> sigleMulNum = Integer.parseInt(String.valueOf(bList[bLen - <span class="number">1</span>])) * Integer.parseInt(String.valueOf(aList[aLen - <span class="number">1</span>])) + carry;</span><br><span class="line">                carry = sigleMulNum / <span class="number">10</span>;</span><br><span class="line">                sigleMulNum %= <span class="number">10</span>;</span><br><span class="line">                mulNum.insert(<span class="number">0</span>, sigleMulNum);</span><br><span class="line">                aLen--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">                mulNum.insert(<span class="number">0</span>, carry);</span><br><span class="line">            &#125;</span><br><span class="line">            num = String.valueOf(Integer.parseInt(num) + Integer.parseInt(mulNum.toString()) * Integer.parseInt(String.valueOf((<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, bList.length - bLen))));</span><br><span class="line">            bLen--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isPlus) &#123;</span><br><span class="line">            num = <span class="string">"-"</span> + num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大整数除法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商，只保留整数位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">division</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isPlus = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> aSign = a.charAt(<span class="number">0</span>) == <span class="string">'-'</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> bSign = b.charAt(<span class="number">0</span>) == <span class="string">'-'</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (aSign * bSign &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            isPlus = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        b = b.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (subtract(a, b).charAt(<span class="number">0</span>) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String num = <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (subtract(a, b).charAt(<span class="number">0</span>) != <span class="string">'-'</span>) &#123;</span><br><span class="line">            String numTimes = <span class="string">"1"</span>;</span><br><span class="line">            String m = b;</span><br><span class="line">            <span class="keyword">while</span> (subtract(a, mul(m, <span class="string">"2"</span>)).charAt(<span class="number">0</span>) != <span class="string">'-'</span>) &#123;</span><br><span class="line">                numTimes = mul(numTimes, <span class="string">"2"</span>);</span><br><span class="line">                m = mul(m, <span class="string">"2"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            num = add(num, numTimes);</span><br><span class="line">            a = subtract(a, m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isPlus) &#123;</span><br><span class="line">            num = <span class="string">"-"</span> + num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode：29. 两数相除（Java）</title>
      <link href="/2018/10/23/LeetCode%EF%BC%9A29-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4%EF%BC%88Java%EF%BC%89/"/>
      <url>/2018/10/23/LeetCode%EF%BC%9A29-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4%EF%BC%88Java%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="29-两数相除（Java）"><a href="#29-两数相除（Java）" class="headerlink" title="29. 两数相除（Java）"></a>29. 两数相除（Java）</h2><hr><h5 id="参考文章：https-blog-csdn-net-qq-31442743-article-details-81181554"><a href="#参考文章：https-blog-csdn-net-qq-31442743-article-details-81181554" class="headerlink" title="参考文章：https://blog.csdn.net/qq_31442743/article/details/81181554"></a>参考文章：<a href="https://blog.csdn.net/qq_31442743/article/details/81181554" target="_blank" rel="noopener">https://blog.csdn.net/qq_31442743/article/details/81181554</a></h5><h5 id="给定两个整数，被除数-dividend和除数-divisor。将两数相除，要求不使用乘法、除法和-mod-运算符。返回被除数-dividend除以除数-divisor得到的商。"><a href="#给定两个整数，被除数-dividend和除数-divisor。将两数相除，要求不使用乘法、除法和-mod-运算符。返回被除数-dividend除以除数-divisor得到的商。" class="headerlink" title="给定两个整数，被除数 dividend和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。返回被除数 dividend除以除数 divisor得到的商。"></a>给定两个整数，被除数 <code>dividend</code>和除数 <code>divisor</code>。将两数相除，要求不使用乘法、除法和 mod 运算符。返回被除数 <code>dividend</code>除以除数 <code>divisor</code>得到的商。</h5><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: dividend = 10, divisor = 3</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: dividend = 7, divisor = -3</span><br><span class="line">输出: -2</span><br></pre></td></tr></table></figure></p><p>说明:</p><ul><li>被除数和除数均为 32 位有符号整数。    </li><li>除数不为 0。</li><li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。</li></ul><hr><p>二进制相关的形式来实现。”&lt;&lt;”和”&gt;&gt;”分别为将数的整体左移和右移，例如a&lt;&lt;1表示将a向左移动一位，即变为原来的二倍。</p><p>思路:当被除数大于等于除数时(否则的话就为0了)，我们设置两个变量t和p，并分别初始化为除数和1(最小的情况)，当被除数大于等于t的二倍时，将t和p同时扩大二倍(左移)，并将返回值加上p，除数减去t。和二进制类似，例如29除以8，8扩大二倍，16小于29，再扩大二倍，超过29，于是29减去之前的16，返回值加上2。第二次循环时因为此时的13小于8的二倍，故加上1，整个循环结束，最终结果为2+1=3，很明显符合。此外注意判断结果正负号的正负号时亦或的作用。 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(divisor == <span class="number">0</span> || (dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="number">1</span>))&#123;<span class="comment">//考虑特殊情况</span></span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sign = ((dividend &lt; <span class="number">0</span>) ^ (divisor &lt; <span class="number">0</span>)) ? -<span class="number">1</span> : <span class="number">1</span>;<span class="comment">//异或运算</span></span><br><span class="line">        <span class="keyword">long</span> ms = (<span class="keyword">long</span>)dividend;</span><br><span class="line">        <span class="keyword">long</span> ns = (<span class="keyword">long</span>)divisor;</span><br><span class="line">        ms = Math.abs(ms);</span><br><span class="line">        ns = Math.abs(ns);</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ms &gt;= ns)&#123;</span><br><span class="line">            <span class="keyword">long</span> m = ns;</span><br><span class="line">            <span class="keyword">long</span> n = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(ms &gt;= (m &lt;&lt; <span class="number">1</span>))&#123;</span><br><span class="line">                m &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num += n;</span><br><span class="line">            ms -= m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num * sign;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成WebSocket功能</title>
      <link href="/2018/10/13/Springboot%E9%9B%86%E6%88%90WebSocket%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/10/13/Springboot%E9%9B%86%E6%88%90WebSocket%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot集成WebSocket功能"><a href="#Springboot集成WebSocket功能" class="headerlink" title="Springboot集成WebSocket功能"></a>Springboot集成WebSocket功能</h2><hr><p> 由于MT管理器论坛需要添加聊天功能，在网上搜了很多，最后发现了websocket可以用于实时通信和聊天室功能，然后看了慕课上的一个网课，跟着他做出来了一个demo，下面就来看一下什么是websocket吧</p><hr><p>在<a href="http://www.runoob.com/html/html5-websocket.html" target="_blank" rel="noopener">菜鸟教程</a>中的解释是这样的</p><blockquote><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。<br>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。<br>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。<br>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。<br>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。<br>浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。<br>当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。<br>以下 API 用于创建 WebSocket 对象。</p></blockquote><p>简单来说就是一个可以不用使用轮训就可以实现后端主动向前端发送消息的一个协议。现在我们来看一下如何在springboot中实现这个</p><hr><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webjars-locator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sockjs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stomp-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="2-写配置文件"><a href="#2-写配置文件" class="headerlink" title="2.写配置文件"></a>2.写配置文件</h4><p><code>WebSocketConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.websocketdemo.Config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册端点，发布或者订阅消息的时候需要连接此端点</span></span><br><span class="line"><span class="comment">     * setAllowedOrigins 非必须，*表示允许其他域进行连接</span></span><br><span class="line"><span class="comment">     * withSockJS  表示开始sockejs支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addEndpoint(<span class="string">"/endpoint-websocket"</span>).setAllowedOrigins(<span class="string">"*"</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置消息代理(中介)</span></span><br><span class="line"><span class="comment">     * enableSimpleBroker 服务端推送给客户端的路径前缀</span></span><br><span class="line"><span class="comment">     * setApplicationDestinationPrefixes  客户端发送数据给服务器端的一个前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.enableSimpleBroker(<span class="string">"/getMessage"</span>);</span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">"/sendMessage"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-消息的实体类"><a href="#3-消息的实体类" class="headerlink" title="3.消息的实体类"></a>3.消息的实体类</h4><p>这是我们需要新建一个model用来表示发送的消息类<br><code>Message.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.websocketdemo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String fromUser;</span><br><span class="line">    <span class="keyword">private</span> String toUser;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFromUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fromUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFromUser</span><span class="params">(String fromUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fromUser = fromUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToUser</span><span class="params">(String toUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.toUser = toUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Message&#123;"</span> +</span><br><span class="line">                <span class="string">"fromUser='"</span> + fromUser + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", toUser='"</span> + toUser + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", message='"</span> + message + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>4.controller方法<br>我们一共需要书写两个controller一个是用来将消息主动推送给前端（被发送方的），还有一个是将消息以treemap的方式发送给前端让前端（当前用户的）展示。<br><code>ChatController.java</code>(用于将消息直接展示给前端显示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.websocketdemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/chatMessage"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeMap&lt;String, String&gt; <span class="title">add</span><span class="params">(@Autowired HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        TreeMap&lt;String, String&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;String, String&gt;();</span><br><span class="line">        treeMap.put(<span class="string">"toUser"</span>, request.getParameter(<span class="string">"toUser"</span>));</span><br><span class="line">        treeMap.put(<span class="string">"fromUser"</span>, request.getParameter(<span class="string">"fromUser"</span>));</span><br><span class="line">        treeMap.put(<span class="string">"message"</span>, request.getParameter(<span class="string">"message"</span>));</span><br><span class="line">        <span class="keyword">return</span> treeMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WebSocketController.java</code>（用于将消息主动推送给被发送方）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.suiwo.websocketdemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> xyz.suiwo.websocketdemo.Service.WebSocketService;</span><br><span class="line"><span class="keyword">import</span> xyz.suiwo.websocketdemo.model.Message;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WebSocketService webSocketService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebSocketController</span><span class="params">(WebSocketService webSocketService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.webSocketService = webSocketService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping</span>(value = <span class="string">"/single/chat"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        webSocketService.sendMessageTo(message.getFromUser(), message.getToUser(), message.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-前端展示"><a href="#4-前端展示" class="headerlink" title="4.前端展示"></a>4.前端展示</h4><p>前端的接收我们需要用的socket.js，具体使用方式。。。我也没有仔细看，只是直接把网站提供的前端源码copy过来了，需要的同学可以参考一下<br><code>app.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stompClient = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setConnected</span>(<span class="params">connected</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#connect"</span>).prop(<span class="string">"disabled"</span>, connected);</span><br><span class="line">    $(<span class="string">"#disconnect"</span>).prop(<span class="string">"disabled"</span>, !connected);</span><br><span class="line">    <span class="keyword">if</span> (connected) &#123;</span><br><span class="line">        $(<span class="string">"#conversation"</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"#conversation"</span>).hide();</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">"#notice"</span>).html(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">from</span> = $(<span class="string">"#from"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> to = $(<span class="string">"#to"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(<span class="string">'/endpoint-websocket'</span>);</span><br><span class="line">    stompClient = Stomp.over(socket);</span><br><span class="line">    stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">frame</span>) </span>&#123;</span><br><span class="line">        setConnected(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Connected: '</span> + frame);</span><br><span class="line">        stompClient.subscribe(<span class="string">'/getMessage/single/'</span> + <span class="keyword">from</span> + to, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            showContent(result.body);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disconnect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stompClient !== <span class="literal">null</span>) &#123;</span><br><span class="line">        stompClient.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">    setConnected(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Disconnected"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> toUser = <span class="built_in">document</span>.getElementById(<span class="string">"to"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> fromUser = <span class="built_in">document</span>.getElementById(<span class="string">"from"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>).value;</span><br><span class="line">    stompClient.send(<span class="string">"/sendMessage/single/chat"</span>, &#123;&#125;, <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        <span class="string">'message'</span>: $(<span class="string">"#content"</span>).val(),</span><br><span class="line">        <span class="string">'toUser'</span>: $(<span class="string">"#to"</span>).val(),</span><br><span class="line">        <span class="string">'fromUser'</span>: $(<span class="string">"#from"</span>).val()</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">        xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">        xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    xmlhttp.open(<span class="string">"POST"</span>, <span class="string">"/chatMessage"</span>, <span class="literal">false</span>);</span><br><span class="line">    xmlhttp.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    <span class="comment">//正式发送请求</span></span><br><span class="line">    xmlhttp.send(<span class="string">'toUser='</span> + toUser + <span class="string">'&amp;fromUser='</span> + fromUser + <span class="string">'&amp;message='</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showContent</span>(<span class="params">body</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#notice"</span>).append(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + body + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"form"</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#connect"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        connect();</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#disconnect"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        disconnect();</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#send"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        sendName();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个代码我已经放在了GitHub上有需要的同学可以参考一下 <a href="https://github.com/ZhangJia97/springboot-websocket" target="_blank" rel="noopener">传送门</a></p><p>视频教程 <a href="http://edu.51cto.com/center/course/lesson/index?id=258985" target="_blank" rel="noopener">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode：10 正则表达式匹配（Java）</title>
      <link href="/2018/10/05/LeetCode%EF%BC%9A10-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%EF%BC%88Java%EF%BC%89/"/>
      <url>/2018/10/05/LeetCode%EF%BC%9A10-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%EF%BC%88Java%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode：10-正则表达式匹配"><a href="#LeetCode：10-正则表达式匹配" class="headerlink" title="LeetCode：10 正则表达式匹配"></a>LeetCode：10 正则表达式匹配</h2><hr><h5 id="给定一个字符串-s-和一个字符模式-p-。实现支持-‘-’-和-‘-’-的正则表达式匹配。"><a href="#给定一个字符串-s-和一个字符模式-p-。实现支持-‘-’-和-‘-’-的正则表达式匹配。" class="headerlink" title="给定一个字符串 (s) 和一个字符模式 (p)。实现支持 ‘.’ 和 ‘*’ 的正则表达式匹配。"></a>给定一个字符串 (s) 和一个字符模式 (p)。实现支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;.&apos; 匹配任意单个字符。</span><br><span class="line">&apos;*&apos; 匹配零个或多个前面的元素。</span><br></pre></td></tr></table></figure><h6 id="匹配应该覆盖整个字符串-s-，而不是部分字符串。"><a href="#匹配应该覆盖整个字符串-s-，而不是部分字符串。" class="headerlink" title="匹配应该覆盖整个字符串 (s) ，而不是部分字符串。"></a>匹配应该覆盖整个字符串 (s) ，而不是部分字符串。</h6><h5 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s 可能为空，且只包含从 a-z 的小写字母。</span><br><span class="line">p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。</span><br></pre></td></tr></table></figure><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br></pre></td></tr></table></figure><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a*&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &apos;*&apos; 代表可匹配零个或多个前面的元素, 即可以匹配 &apos;a&apos; 。因此, 重复 &apos;a&apos; 一次, 字符串可变为 &quot;aa&quot;。</span><br></pre></td></tr></table></figure><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;ab&quot;</span><br><span class="line">p = &quot;.*&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &quot;.*&quot; 表示可匹配零个或多个(&apos;*&apos;)任意字符(&apos;.&apos;)。</span><br></pre></td></tr></table></figure><h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4:"></a>示例 4:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aab&quot;</span><br><span class="line">p = &quot;c*a*b&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &apos;c&apos; 可以不被重复, &apos;a&apos; 可以被重复一次。因此可以匹配字符串 &quot;aab&quot;。</span><br></pre></td></tr></table></figure><h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5:"></a>示例 5:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;mississippi&quot;</span><br><span class="line">p = &quot;mis*is*p*.&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果都为空则匹配成功</span></span><br><span class="line">        <span class="keyword">if</span> (pattern.isEmpty()) <span class="keyword">return</span> text.isEmpty();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第一个是否匹配上</span></span><br><span class="line">        <span class="keyword">boolean</span> first_match = (!text.isEmpty() &amp;&amp; (pattern.charAt(<span class="number">0</span>) == text.charAt(<span class="number">0</span>) || pattern.charAt(<span class="number">0</span>) == <span class="string">'.'</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pattern.length() &gt;= <span class="number">2</span> &amp;&amp; pattern.charAt(<span class="number">1</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">            <span class="comment">//看有没有可能,剩下的pattern匹配上全部的text</span></span><br><span class="line">            <span class="comment">//看有没有可能,剩下的text匹配整个pattern</span></span><br><span class="line">            <span class="comment">//isMatch(text, pattern.substring(2)) 指当p第二个为*时，前面的字符不影响匹配所以可以忽略，所以将*以及*之前的一个字符删除后匹配之后的字符，这就是为什么用pattern.substring(2)</span></span><br><span class="line">            <span class="comment">//如果第一个已经匹配成功，并且第二个字符为*时，这是我们就要判断之后的需要匹配的字符串是否是多个前面的元素（*的功能），这就是first_match &amp;&amp; isMatch(text.substring(1), pattern))的意义</span></span><br><span class="line">            <span class="keyword">return</span> (isMatch(text, pattern.substring(<span class="number">2</span>)) ||</span><br><span class="line">                (first_match &amp;&amp; isMatch(text.substring(<span class="number">1</span>), pattern)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//没有星星的情况:第一个字符相等,而且剩下的text,匹配上剩下的pattern，没有星星且第一个匹配成功，那么s和p同时向右移动一位看是否仍然能匹配成功</span></span><br><span class="line">            <span class="keyword">return</span> first_match &amp;&amp; isMatch(text.substring(<span class="number">1</span>), pattern.substring(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="本文代码参考：https-blog-csdn-net-hit1110310422-article-details-80791446"><a href="#本文代码参考：https-blog-csdn-net-hit1110310422-article-details-80791446" class="headerlink" title="本文代码参考：https://blog.csdn.net/hit1110310422/article/details/80791446"></a>本文代码参考：<a href="https://blog.csdn.net/hit1110310422/article/details/80791446" target="_blank" rel="noopener">https://blog.csdn.net/hit1110310422/article/details/80791446</a></h5>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java的接口和抽象类</title>
      <link href="/2018/09/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
      <url>/2018/09/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="一-抽象类"><a href="#一-抽象类" class="headerlink" title="一.抽象类"></a>一.抽象类</h3><p>　　在了解抽象类之前，先来了解一下抽象方法。抽象方法是一种特殊的方法：它只有声明，而没有具体的实现。抽象方法的声明格式为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>　　抽象方法必须用abstract关键字进行修饰。如果一个类含有抽象方法，则称这个类为抽象类，抽象类必须在类前用abstract关键字修饰。因为抽象类中含有无具体实现的方法，所以不能用抽象类创建对象。</p><p>　　下面要注意一个问题：在《JAVA编程思想》一书中，将抽象类定义为“包含抽象方法的类”，但是后面发现如果一个类不包含抽象方法，只是用abstract修饰的话也是抽象类。也就是说抽象类不一定必须含有抽象方法。个人觉得这个属于钻牛角尖的问题吧，因为如果一个抽象类不包含任何抽象方法，为何还要设计为抽象类？所以暂且记住这个概念吧，不必去深究为什么。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　从这里可以看出，抽象类就是为了继承而存在的，如果你定义了一个抽象类，却不去继承它，那么等于白白创建了这个抽象类，因为你不能用它来做任何事情。对于一个父类，如果它的某个方法在父类中实现出来没有任何意义，必须根据子类的实际需求来进行不同的实现，那么就可以将这个方法声明为abstract方法，此时这个类也就成为abstract类了。</p><p>　　包含抽象方法的类称为抽象类，但并不意味着抽象类中只能有抽象方法，它和普通类一样，同样可以拥有成员变量和普通的成员方法。注意，抽象类和普通类的主要有三点区别：</p><ul><li><p>抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。</p></li><li><p>抽象类不能用来创建对象；</p></li><li><p>如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。</p></li></ul><p>在其他方面，抽象类和普通的类并没有区别。</p><h3 id="二-接口"><a href="#二-接口" class="headerlink" title="二.接口"></a>二.接口</h3><p>　　接口，英文称作interface，在软件工程中，接口泛指供别人调用的方法或者函数。从这里，我们可以体会到Java语言设计者的初衷，它是对行为的抽象。在Java中，定一个接口的形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">public</span>] <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceName</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　接口中可以含有 变量和方法。但是要注意，接口中的变量会被隐式地指定为public static final变量（并且只能是public static final变量，用private修饰会报编译错误），而方法会被隐式地指定为public abstract方法且只能是public abstract方法（用其他关键字，比如private、protected、static、 final等修饰会报编译错误），并且接口中所有的方法不能有具体的实现，也就是说，接口中的方法必须都是抽象方法。从这里可以隐约看出接口和抽象类的区别，接口是一种极度抽象的类型，它比抽象类更加“抽象”，并且一般情况下不在接口中定义变量。</p><p>　　要让一个类遵循某组特地的接口需要使用implements关键字，具体格式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class ClassName implements Interface1,Interface2,[....]</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　可以看出，允许一个类遵循多个特定的接口。如果一个非抽象类遵循了某个接口，就必须实现该接口中的所有方法。对于遵循某个接口的抽象类，可以不实现该接口中的抽象方法。</p><h3 id="抽象类与接口的区别："><a href="#抽象类与接口的区别：" class="headerlink" title="抽象类与接口的区别："></a>抽象类与接口的区别：</h3><blockquote><p>1、概念不一样。接口是对动作的抽象，抽象类是对本质的抽象。<br>抽象类表示的是，这个对象是什么。接口表示的是，这个对象能做什么。比如，男人，女人，这两个类（如果是类的话……），他们的抽象类是人。说明，他们都是人。人可以吃东西，狗也可以吃东西，你可以把“吃东西”定义成一个接口，然后让这些类去实现它。<br>所以，在高级语言上，一个类只能继承一个类（抽象类）(正如人不可能同时是生物和非生物)，但是可以实现多个接口(吃饭接口、走路接口)。</p></blockquote><blockquote><p>2、使用不一样：</p><ul><li>a.抽象类 和 接口 都是用来抽象具体对象的. 但是接口的抽象级别最高</li><li>b.抽象类可以有具体的方法 和属性,  接口只能有抽象方法和不可变常- 量</li><li>c.抽象类主要用来抽象类别,接口主要用来抽象功能.</li><li>d.抽象类中，且不包含任何实现，派生类必须覆盖它们。接口中所有方法都必须是未实现的。</li><li>e.接口是设计的结果 ，抽象类是重构的结果</li></ul></blockquote><blockquote><p>3、使用方向：当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。<br>注意：抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度的。</p></blockquote><p>下面看一个网上流传最广泛的例子：门和警报的例子：门都有open( )和close( )两个动作，此时我们可以定义通过抽象类和接口来定义这个抽象概念：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　或者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Door</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　但是现在如果我们需要门具有报警alarm( )的功能，那么该如何实现？下面提供两种思路：</p><p>　　1）将这三个功能都放在抽象类里面，但是这样一来所有继承于这个抽象类的子类都具备了报警功能，但是有的门并不一定具备报警功能；</p><p>　　2）将这三个功能都放在接口里面，需要用到报警功能的类就需要实现这个接口中的open( )和close( )，也许这个类根本就不具备open( )和close( )这两个功能，比如火灾报警器。</p><p>　　从这里可以看出， Door的open() 、close()和alarm()根本就属于两个不同范畴内的行为，open()和close()属于门本身固有的行为特性，而alarm()属于延伸的附加行为。因此最好的解决办法是单独将报警设计为一个接口，包含alarm()行为,Door设计为单独的一个抽象类，包含open和close两种行为。再设计一个报警门继承Door类和实现Alarm接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Alram</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlarmDoor</span> <span class="keyword">extends</span> <span class="title">Door</span> <span class="keyword">implements</span> <span class="title">Alarm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">oepn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：<br><a href="https://blog.csdn.net/u012092924/article/details/78342193" target="_blank" rel="noopener">https://blog.csdn.net/u012092924/article/details/78342193</a><br><a href="https://www.cnblogs.com/dolphin0520/p/3811437.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3811437.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java异常处理 Exception,error,运行时异常和一般异常有何异同</title>
      <link href="/2018/08/19/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-Exception-error-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%80%E8%88%AC%E5%BC%82%E5%B8%B8%E6%9C%89%E4%BD%95%E5%BC%82%E5%90%8C/"/>
      <url>/2018/08/19/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-Exception-error-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%80%E8%88%AC%E5%BC%82%E5%B8%B8%E6%9C%89%E4%BD%95%E5%BC%82%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="在java中，异常对象都是派生于Throwable类的一个实例。如果java内置的异常类不能够满足需求，用户还可以创建自己的异常类。"><a href="#在java中，异常对象都是派生于Throwable类的一个实例。如果java内置的异常类不能够满足需求，用户还可以创建自己的异常类。" class="headerlink" title="在java中，异常对象都是派生于Throwable类的一个实例。如果java内置的异常类不能够满足需求，用户还可以创建自己的异常类。"></a>在java中，异常对象都是派生于Throwable类的一个实例。如果java内置的异常类不能够满足需求，用户还可以创建自己的异常类。</h3><p><img src="/images/java异常处理-Exception-error-运行时异常和一般异常有何异同/8abb70109b89583dcbefca4783addd96.png" alt="这里写图片描述"></p><blockquote><p>Exception 和 Error 都是继承了 Throwable 类，在 Java 中只有 Throwable 类型的实例才可以被抛出（throw）或者捕获（catch），它是异常处理机制的基本组成类型。<br>Exception 和 Error 体现了 Java 平台设计者对不同异常情况的分类。Exception 是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应处理。</p></blockquote><blockquote><ul><li>Error 是指在正常情况下，不大可能出现的情况，绝大部分的 Error 都会导致程序（比如 JVM 自身）处于非正常的、不可恢复状态。既然是非正常情况，所以不便于也不需要捕获，常见的比如 OutOfMemoryError 之类，都是 Error 的子类。</li></ul></blockquote><blockquote><ul><li>Exception 又分为可检查（checked）异常和不检查（unchecked）异常</li><li><ul><li>unchecked exception（非检查异常）：包括运行时异常（RuntimeException）和派生于Error类的异常。对于运行时异常，java编译器不要求必须进行异常捕获处理或者抛出声明，由程序员自行决定。 </li></ul></li><li><ul><li>checked exception（检查异常，编译异常，必须要处理的异常）<br>也：称非运行时异常（运行时异常以外的异常就是非运行时异常），java编译器强制程序员必须进行捕获处理，比如常见的IOExeption和SQLException。对于非运行时异常如果不进行捕获或者抛出声明处理，编译都不会通过。</li></ul></li></ul></blockquote><p>常见的RuntimeException（运行时异常）:</p><blockquote><ul><li>IndexOutOfBoundsException(下标越界异常) </li><li>NullPointerException(空指针异常) </li><li>NumberFormatException （String转换为指定的数字类型异常） </li><li>ArithmeticException -（算术运算异常 如除数为0） </li><li>ArrayStoreException - （向数组中存放与声明类型不兼容对象- - 异常） </li><li>SecurityException -（安全异常） </li><li>IOException（其他异常） </li><li>FileNotFoundException（文件未找到异常。） </li><li>IOException（操作输入流和输出流时可能出现的异常。） </li><li>EOFException （文件已结束异常）</li></ul></blockquote><p>参考文章：<br><a href="https://blog.csdn.net/qq_28849965/article/details/80310153" target="_blank" rel="noopener">https://blog.csdn.net/qq_28849965/article/details/80310153</a><br><a href="https://blog.csdn.net/m0_37531231/article/details/79502778" target="_blank" rel="noopener">https://blog.csdn.net/m0_37531231/article/details/79502778</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final,finally,finalize的区别</title>
      <link href="/2018/08/19/final-finally-finalize%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/08/19/final-finally-finalize%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="final-finally-finalize的区别"><a href="#final-finally-finalize的区别" class="headerlink" title="final,finally,finalize的区别"></a>final,finally,finalize的区别</h2><h3 id="1-简单区别："><a href="#1-简单区别：" class="headerlink" title="1.简单区别："></a>1.简单区别：</h3><blockquote><ul><li>final用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。</li><li>finally是异常处理语句结构的一部分，表示总是执行。</li><li>finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，供垃圾收集时的其他资源回收，例如关闭文件等。</li></ul></blockquote><h3 id="中等区别："><a href="#中等区别：" class="headerlink" title="中等区别："></a>中等区别：</h3><blockquote><ul><li><p>final：java中的关键字，修饰符。<br>A).如果一个类被声明为final，就意味着它不能再派生出新的子类，不能作为父类被继承。因此，一个类不能同时被声明为abstract抽象类的和final的类。<br>B).如果将变量或者方法声明为final，可以保证它们在使用中不被改变.<br>　　1)被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。<br>　　2)被声明final的方法只能使用，不能重载。<br>finally：java的一种异常处理机制。</p></li><li><p>finally是对Java异常处理模型的最佳补充。finally结构使代码总会执行，而不管无异常发生。使用finally可以维护对象的内部状态，并可以清理非内存资源。特别是在关闭数据库连接这方面，如果程序员把数据库连接的close()方法放到finally中，就会大大降低程序出错的几率。</p></li><li><p>finalize：Java中的一个方法名。<br>Java技术使用finalize()方法在垃圾收集器将对象从内存中清除出去前，做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没被引用时对这个对象调用的。它是在Object类中定义的，因此所的类都继承了它。子类覆盖finalize()方法以整理系统资源或者执行其他清理工作。finalize()方法是在垃圾收集器删除对象之前对这个对象调用的。</p></li></ul></blockquote><h3 id="3-详细区别："><a href="#3-详细区别：" class="headerlink" title="3.详细区别："></a>3.详细区别：</h3><p>这是一道再经典不过的面试题了，我们在各个公司的面试题中几乎都能看到它的身影。final、finally和finalize虽然长得像孪生兄弟一样，但是它们的含义和用法却是大相径庭。</p><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><blockquote><p>final关键字我们首先来说说final。它可以用于以下四个地方:<br>1).定义变量，包括静态的和非静态的。<br>2).定义方法的参数。<br>3).定义方法。<br>4).定义类。</p></blockquote><h5 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h5><blockquote><ul><li>第一种情况：<br>如果final修饰的是一个基本类型，就表示这个变量被赋予的值是不可变的，即它是个常量；<br>如果final修饰的是一个对象，就表示这个变量被赋予的引用是不可变的<br>这里需要提醒大家注意的是，不可改变的只是这个变量所保存的引用，并不是这个引用所指向的对象。</li><li>第二种情况：<br>final的含义与第一种情况相同。<br>实际上对于前两种情况，一种更贴切的表述final的含义的描述，那就是，如果一个变量或方法参数被final修饰，就表示它只能被赋值一次，但是JAVA虚拟机为变量设定的默认值不记作一次赋值。被final修饰的变量必须被初始化。初始化的方式以下几种：<br>1.在定义的时候初始化。<br>2.final变量可以在初始化块中初始化，不可以在静态初始化块中初始化。<br>3.静态final变量可以在定义时初始化，也可以在静态初始化块中初始化，不可以在初始化块中初始化。<br>4.final变量还可以在类的构造器中初始化，但是静态final变量不可以。</li></ul></blockquote><p>通过下面的代码可以验证以上的观点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span></span>&#123;</span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> A=<span class="number">10</span>; <span class="comment">//在定义时初始化</span></span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> B;&#123;B=<span class="number">20</span>;&#125; <span class="comment">//在初始化块中初始化</span></span><br><span class="line"></span><br><span class="line">　　<span class="comment">//非静态final变量不能在静态初始化块中初始化    </span></span><br><span class="line">　　<span class="comment">//public final int C;static&#123;//C=30; &#125;</span></span><br><span class="line"></span><br><span class="line">　　<span class="comment">//静态常量，在定义时初始化</span></span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_D=<span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//静态常量，在静态初始化块中初始化</span></span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_E;<span class="keyword">static</span>&#123;STATIC_E = <span class="number">50</span>;&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="comment">//静态变量不能在初始化块中初始化    </span></span><br><span class="line">　　<span class="comment">//public static final int  STATIC_F;&#123;STATIC_F=60;&#125;</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> G;</span><br><span class="line"></span><br><span class="line">　　<span class="comment">//静态final变量不可以在构造器中初始化    </span></span><br><span class="line">　　<span class="comment">//public static final int STATIC_H;</span></span><br><span class="line"></span><br><span class="line">　　<span class="comment">//在构造器中初始化         </span></span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="title">finalTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">　　　　G=<span class="number">70</span>;</span><br><span class="line">　　　　<span class="comment">//静态final变量不可以在构造器中初始化</span></span><br><span class="line">　　　　<span class="comment">//STATIC_H=80;</span></span><br><span class="line"></span><br><span class="line">　　　　<span class="comment">//给final的变量第二次赋值时，编译会报错</span></span><br><span class="line">　　　　<span class="comment">//A=99;</span></span><br><span class="line">　　　　<span class="comment">//STATIC_D=99;</span></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="comment">//final变量未被初始化，编译时就会报错</span></span><br><span class="line">　　<span class="comment">//public final int L;</span></span><br><span class="line"></span><br><span class="line">　　<span class="comment">//静态final变量未被初始化，编译时就会报错</span></span><br><span class="line">　　<span class="comment">//public static final int STATIC_J;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>我们运行上面的代码之后出了可以发现final变量（常量和静态final变量（静态常量被初始化时，编译会报错。<br>用final修饰的变量（常量比非final的变量（普通变量拥更高的效率，因此我们在际编程中应该尽可能多的用常量来代替普通变量。</p></blockquote><h5 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h5><blockquote><p>当final用来定义一个方法时，它表示这个方法不可以被子类重写，但是并不影响它被子类继承。我们写段代码来验证一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">TestFinal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类--这是一个final方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span></span>&#123;</span><br><span class="line">    <span class="comment">//子类无法重写（override父类的final方法，否则编译时会报错</span></span><br><span class="line">    <span class="comment">/* public void TestFinal()&#123;</span></span><br><span class="line"><span class="comment">           System.out.println("子类--重写final方法");</span></span><br><span class="line"><span class="comment">    &#125; */</span>   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        SubClass sc = <span class="keyword">new</span> SubClass();</span><br><span class="line">        sc.TestFinal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这里需要特殊说明的是，具有private访问权限的方法也可以增加final修饰，但是由于子类无法继承private方法，因此也无法重写它。编译器在处理private方法时，是照final方来对待的，这样可以提高该方法被调用时的效率。不过子类仍然可以定义同父类中private方法具同样结构的方法，但是这并不会产生重写的效果，而且它们之间也不存在必然联系。</p></blockquote><h5 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h5><blockquote><p>最后我们再来回顾一下final用于类的情况。这个大家应该也很熟悉了，因为我们最常用的String类就是final的。由于final类不允许被继承，编译器在处理时把它的所方法都当作final的，因此final类比普通类拥更高的效率。而由关键字abstract定义的抽象类含必须由继承自它的子类重载实现的抽象方法，因此无法同时用final和abstract来修饰同一个类。同样的道理，final也不能用来修饰接口。 final的类的所方法都不能被重写，但这并不表示final的类的属性（变量值也是不可改变的，要想做到final类的属性值不可改变，必须给它增加final修饰，请看下面的例子：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> j=<span class="number">50</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">          FinalTest ft = <span class="keyword">new</span> FinalTest();</span><br><span class="line">          ft.i = <span class="number">99</span>;<span class="comment">/*final类FinalTest的属性值 i是可以改变的，因为属性值i前面没final修饰*/</span></span><br><span class="line">          <span class="comment">//ft.j=49;//报错....因为j属性是final的不可以改变。</span></span><br><span class="line">          System.out.println(ft.i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行上面的代码试试看，结果是99，而不是初始化时的10。</p></blockquote><h4 id="finally语句"><a href="#finally语句" class="headerlink" title="finally语句"></a>finally语句</h4><blockquote><p>接下来我们一起回顾一下finally的用法。finally只能用在try/catch语句中并且附带着一个语句块，表示这段语句最终总是被执行。请看下面的代码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"程序抛出了异常"</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//这里总会被执行，不受break,return影响另如数据库连接的close()一般写在这里，可以降低程序的出错几率</span></span><br><span class="line">            System.out.println(<span class="string">"执行了finally语句块"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果说明了finally的作用：</p><blockquote><ul><li>1.程序抛出了异常</li><li>2.执行了finally语句块请大家注意，捕获程序抛出的异常之后，既不加处理，也不继续向上抛出异常，并不是良好的编程习惯，它掩盖了程序执行中发生的错误，这里只是方便演示，请不要学习。</li></ul></blockquote><p>那么，没一种情况使finally语句块得不到执行呢？<br>return、continue、break这个可以打乱代码顺序执行语句的规律。那我们就来试试看，这个语句是否能影响finally语句块的执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试return语句</span></span><br><span class="line">    <span class="comment">//结果显示：编译器在编译return new ReturnClass();时，</span></span><br><span class="line">    <span class="comment">//将它分成了两个步骤，new ReturnClass()和return，前一个创建对象的语句是在finally语句块之前被执行的，</span></span><br><span class="line">    <span class="comment">//而后一个return语句是在finally语句块之后执行的，也就是说finally语句块是在程序退出方法之前被执行的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReturnClass <span class="title">testReturn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ReturnClass();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"执行了finally语句"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试continue语句</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testContinue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"con"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"执行了finally语句"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试break语句</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBreak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"执行了finally语句"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FinallyTest ft = <span class="keyword">new</span> FinallyTest();</span><br><span class="line">        <span class="comment">// 测试return语句</span></span><br><span class="line">        ft.testReturn();</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 测试continue语句</span></span><br><span class="line">        ft.testContinue();</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 测试break语句</span></span><br><span class="line">        ft.testBreak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReturnClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReturnClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了return语句"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这段代码的运行结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">执行了<span class="keyword">return</span>语句</span><br><span class="line">执行了<span class="keyword">finally</span>语句</span><br><span class="line">执行了<span class="keyword">finally</span>语句</span><br><span class="line">con</span><br><span class="line">执行了<span class="keyword">finally</span>语句</span><br><span class="line">执行了<span class="keyword">finally</span>语句</span><br><span class="line">执行了<span class="keyword">finally</span>语句</span><br><span class="line">执行了<span class="keyword">finally</span>语句</span><br></pre></td></tr></table></figure></p><blockquote><p>很明显，return、continue和break都没能阻止finally语句块的执行。从输出的结果来看，return语句似乎在finally语句块之前执行了，事实真的如此吗？我们来想想看，return语句的作用是什么呢？是退出当前的方法，并将值或对象返回。如果 finally语句块是在return语句之后执行的，那么return语句被执行后就已经退出当前方法了，finally语句块又如何能被执行呢？因此，正确的执行顺序应该是这样的：编译器在编译return new ReturnClass();时，将它分成了两个步骤，new ReturnClass()和return，前一个创建对象的语句是在finally语句块之前被执行的，而后一个return语句是在finally语句块之后执行的，也就是说finally语句块是在程序退出方法之前被执行的。同样，finally语句块是在循环被跳过（continue和中断（break之前被执行的</p></blockquote><p>总结：</p><blockquote><p>总结：finally块的语句在try或catch中的return语句执行之后返回之前执行且finally里的修改语句可能影响也可能不影响try或catch中 return已经确定的返回值，若finally里也有return语句则覆盖try或catch中的return语句直接返回。</p></blockquote><h5 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h5><blockquote><p>最后，我们再来看看finalize，它是一个方法，属于java.lang.Object类，它的定义如下：protected void finalize()throws Throwable{}众所周知，finalize()方法是GC（garbagecollector运行机制的一部分,在此我们只说说finalize()方法的作用是什么呢？finalize()方法是在GC清理它所从属的对象时被调用的，如果执行它的过程中抛出了无法捕获的异常（uncaughtexception，GC将终止对改对象的清理，并且该异常会被忽略；直到下一次GC开始清理这个对象时，它的finalize()会被再次调用。</p></blockquote><p>参考文章：<br><a href="https://www.cnblogs.com/gjfbk/p/9072059.html" target="_blank" rel="noopener">https://www.cnblogs.com/gjfbk/p/9072059.html</a><br><a href="https://www.cnblogs.com/smart-hwt/p/8257330.html" target="_blank" rel="noopener">https://www.cnblogs.com/smart-hwt/p/8257330.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的特征：继承封装和多态</title>
      <link href="/2018/08/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%B0%81%E8%A3%85%E5%92%8C%E5%A4%9A%E6%80%81/"/>
      <url>/2018/08/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%B0%81%E8%A3%85%E5%92%8C%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象的特征：继承、封装和多态"><a href="#面向对象的特征：继承、封装和多态" class="headerlink" title="面向对象的特征：继承、封装和多态"></a>面向对象的特征：继承、封装和多态</h2><blockquote><ul><li>封装是指将某事物的属性和行为包装到对象中，这个对象只对外公布需要公开的属性和行为，而这个公布也是可以有选择性的公布给其它对象。在java中能使用private、protected、public三种修饰符或不用（即默认defalut）对外部对象访问该对象的属性和行为进行限制。</li><li>继承是子对象可以继承父对象的属性和行为，亦即父对象拥有的属性和行为，其子对象也就拥有了这些属性和行为。这非常类似大自然中的物种遗传。</li><li>多态不是很好解释：更倾向于使用java中的固定用法，即overriding（重写）和overload（重载）。多态则是体现在overriding（重写）上，而overload（重载）则不属于面向对象中多态的范畴，因为overload（重载）概念在非面向对象中也存在。overriding（重写）是面向对象中的多态，因为overriding（重写）是与继承紧密联系，是面向对象所特有的。多态是指父对象中的同一个行为能在其多个子对象中有不同的表现。也就是说子对象可以使用重写父对象中的行为，使其拥有不同于父对象和其它子对象的表现，这就是overriding（重写）。</li></ul></blockquote><blockquote><ul><li>多态的定义：指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）</li><li>实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</li><li>多态的作用：消除类型之间的耦合关系。</li></ul></blockquote><blockquote><p>现实中，关于多态的例子不胜枚举。比方说按下 F1 键这个动作，如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；如果当前在 Word 下弹出的就是 Word 帮助；在 Windows 下弹出的就是 Windows 帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。</p></blockquote><blockquote><p>多态存在的三个必要条件：<br>　　一、要有继承；<br>　　二、要有重写；<br>　　三、父类引用指向子类对象。</p></blockquote><p>父类引用指向子类对象指的是：</p><blockquote><p>例如父类Animal，子类Cat,Dog。其中Animal可以是类也可以是接口，Cat和Dog是继承或实现Animal的子类。<br>Animal animal = new Cat();<br>即声明的是父类，实际指向的是子类的一个对象。<br>那这么使用的优点是什么，为什么要这么用？可以用这几个关键词来概括：多态、动态链接，向上转型<br>也有人说这是面向接口编程，可以降低程序的耦合性，即调用者不必关心调用的是哪个对象，只需要针对接口编程就可以了，被调用者对于调用者是完全透明的。让你更关注父类能做什么,而不去关心子类是具体怎么做的,你可以随时替换一个子类,也就是随时替换一个具体实现,而不用修改其他.<br>以后结合设计模式（如工厂模式，代理模式）和反射机制可能有更深理解。<br>下面介绍java的多态性和其中的动态链接，向上转型：<br>面向对象的三个特征：封装、继承和多态；<br>封装隐藏了类的内部实现机制，可以在不影响使用者的前提下修改类的内部结构，同时保护了数据；<br>继承是为了重用父类代码，子类继承父类就拥有了父类的成员。<br>方法的重写、重载与动态连接构成多态性。Java之所以引入多态的概念，原因之一是它在类的继承问题上和C++不同，后者允许多继承，这确实给其带来的非常强大的功能，但是复杂的继承关系也给C++开发者带来了更大的麻烦，为了规避风险，Java只允许单继承，派生类与基类间有IS-A的关系（即“猫”is a “动物”）。这样做虽然保证了继承关系的简单明了，但是势必在功能上有很大的限制，所以，Java引入了多态性的概念以弥补这点的不足，此外，抽象类和接口也是解决单继承规定限制的重要手段。同时，多态也是面向对象编程的精髓所在。<br>理解多态，首先要知道“向上转型”。<br>我定义了一个子类Cat，它继承了Animal类，那么后者就是前者是父类。我可以通过<br>Cat c = new Cat();<br>实例化一个Cat的对象，这个不难理解。但当我这样定义时：<br>Animal a = new Cat();<br>这代表什么意思呢？<br>很简单，它表示我定义了一个Animal类型的引用，指向新建的Cat类型的对象。由于Cat是继承自它的父类Animal，所以Animal类型的引用是可以指向Cat类型的对象的。这就是“向上转型”。<br>那么这样做有什么意义呢？因为子类是对父类的一个改进和扩充，所以一般子类在功能上较父类更强大，属性较父类更独特， 定义一个父类类型的引用指向一个子类的对象既可以使用子类强大的功能，又可以抽取父类的共性。 所以，父类类型的引用可以调用父类中定义的所有属性和方法，而对于子类中定义而父类中没有的方法，父类引用是无法调用的；<br>那什么是动态链接呢？当父类中的一个方法只有在父类中定义而在子类中没有重写的情况下，才可以被父类类型的引用调用； 对于父类中定义的方法，如果子类中重写了该方法，那么父类类型的引用将会调用子类中的这个方法，这就是动态连接。</p></blockquote><p>参考文章：<br><a href="https://www.cnblogs.com/mengchunchen/p/7890729.html" target="_blank" rel="noopener">https://www.cnblogs.com/mengchunchen/p/7890729.html</a><br><a href="https://www.cnblogs.com/ChrisMurphy/p/5054256.html" target="_blank" rel="noopener">https://www.cnblogs.com/ChrisMurphy/p/5054256.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django发送HTML邮件</title>
      <link href="/2018/08/09/Django%E5%8F%91%E9%80%81HTML%E9%82%AE%E4%BB%B6/"/>
      <url>/2018/08/09/Django%E5%8F%91%E9%80%81HTML%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="Django发送HTML邮件"><a href="#Django发送HTML邮件" class="headerlink" title="Django发送HTML邮件"></a>Django发送HTML邮件</h3><hr><p>之前关于使用Django发送邮件已经写过一篇文章，不会在Django中发送邮件的话，可以先看这个<a href="http://suiwo.xyz/2018/03/16/Django%E9%9B%86%E6%88%90%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%8A%9F%E8%83%BD/">传送门</a></p><p>在这个基础上只需要稍加配置就可以有一个比较好看的HTML而不是单调几句话的页面，话不多说，直接上代码<br>models.py的新生类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewStudent</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    DEPARTMENT_CHOICE=&#123;</span><br><span class="line">        (<span class="string">'3'</span>,<span class="string">'技术部'</span>),</span><br><span class="line">        (<span class="string">'2'</span>,<span class="string">'新媒体'</span>),</span><br><span class="line">        (<span class="string">'1'</span>,<span class="string">'办公室'</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># unique=True 解决异步问题后将唯一性加上</span></span><br><span class="line">    email = models.EmailField(default=<span class="keyword">None</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">False</span>, verbose_name=<span class="string">'邮箱'</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, default=<span class="keyword">None</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, verbose_name=<span class="string">'姓名'</span>)</span><br><span class="line">    student_id = models.CharField(max_length=<span class="number">9</span>, default=<span class="keyword">None</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">False</span>, verbose_name=<span class="string">'学号'</span>)</span><br><span class="line">    qq = models.CharField(max_length=<span class="number">11</span>,null=<span class="keyword">False</span>,verbose_name=<span class="string">'QQ号'</span>)</span><br><span class="line">    choice = models.CharField(max_length=<span class="number">10</span>,choices=DEPARTMENT_CHOICE,default=<span class="number">0</span>,null=<span class="keyword">False</span>,verbose_name=<span class="string">'部门'</span>)</span><br><span class="line">    code = models.CharField(max_length=<span class="number">20</span>,default=<span class="keyword">None</span>, verbose_name=<span class="string">"邮箱验证码"</span>)</span><br><span class="line">    is_success = models.BooleanField(default=<span class="keyword">False</span>,verbose_name=<span class="string">'邮箱已验证'</span>)</span><br><span class="line">    register_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>,verbose_name=<span class="string">'注册时间'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"新生信息"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>邮件发送的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#new_student是前端传过来的新生信息</span></span><br><span class="line"><span class="comment">#EmailMultiAlternatives是邮件信息相关的model，邮件发送的博文中有描述</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_studentinfo</span><span class="params">(request, new_student)</span>:</span></span><br><span class="line">    code = random_str(<span class="number">16</span>)</span><br><span class="line">    new_student.code = code</span><br><span class="line">    active_url = str(EMAIL_ACTIVE_URL) + str(code)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'student_id'</span> : str(new_student.student_id),</span><br><span class="line">        <span class="string">'name'</span> : str(new_student.name),</span><br><span class="line">        <span class="string">'active_url'</span> : str(active_url),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 发送的html模板的名称</span></span><br><span class="line">    email_template_name = <span class="string">'email_template.html'</span></span><br><span class="line">    t = loader.get_template(email_template_name)</span><br><span class="line">    html_content = t.render(context)</span><br><span class="line">    msg = EmailMultiAlternatives(EMAIL_TITLE, html_content, DEFAULT_FROM_EMAIL, [new_student.email])</span><br><span class="line">    msg.attach_alternative(html_content, <span class="string">"text/html"</span>)</span><br><span class="line">    msg.send()</span><br></pre></td></tr></table></figure><p>下面是email_template.html的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vinta<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=2 user-scalable = yes"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            border: 0;</span></span><br><span class="line"><span class="undefined">            font-size: 100%;</span></span><br><span class="line"><span class="undefined">            font: inherit;</span></span><br><span class="line"><span class="undefined">            vertical-align: baseline;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            line-height: 1;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            background: #424242; /* 标准的语法 */</span></span><br><span class="line"><span class="undefined">            font-family: "HelveticaNeue", "Helvetica Neue", Helvetica, Arial, serif;</span></span><br><span class="line"><span class="undefined">            font-size: 14px;</span></span><br><span class="line"><span class="undefined">            font-weight: 400;</span></span><br><span class="line"><span class="undefined">            line-height: 1.5em;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        h1, h2, h3, h4 &#123;</span></span><br><span class="line"><span class="undefined">            font-family: "HelveticaNeue", "Helvetica Neue", Helvetica, Arial, serif;</span></span><br><span class="line"><span class="undefined">            color: #000000;</span></span><br><span class="line"><span class="undefined">            font-style: normal;</span></span><br><span class="line"><span class="undefined">            line-height: 1em;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        h1 &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 18px;</span></span><br><span class="line"><span class="undefined">            text-transform: uppercase;</span></span><br><span class="line"><span class="undefined">            font-weight: 700;</span></span><br><span class="line"><span class="undefined">            margin-bottom: 15px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        h2 &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 16px;</span></span><br><span class="line"><span class="undefined">            font-weight: 700;</span></span><br><span class="line"><span class="undefined">            margin-top: 20px;</span></span><br><span class="line"><span class="undefined">            margin-bottom: 5px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        h3 &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 15px;</span></span><br><span class="line"><span class="undefined">            color: #5e5e5e;</span></span><br><span class="line"><span class="undefined">            font-style: italic;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        h4 &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 16px;</span></span><br><span class="line"><span class="undefined">            font-style: italic;</span></span><br><span class="line"><span class="undefined">            font-weight: 400;</span></span><br><span class="line"><span class="undefined">            margin-bottom: 0px;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            top: -7px;</span></span><br><span class="line"><span class="undefined">            width: 130px;</span></span><br><span class="line"><span class="undefined">            margin-left: -65px;</span></span><br><span class="line"><span class="undefined">            left: 50%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        #wrapper &#123;</span></span><br><span class="line"><span class="undefined">            width: 940px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .logo &#123;</span></span><br><span class="line"><span class="undefined">            width: 276px;</span></span><br><span class="line"><span class="undefined">            height: 58px;</span></span><br><span class="line"><span class="undefined">            padding: 40px 0px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*----- main content of page -----*/</span></span><br><span class="line"><span class="undefined">        #content &#123;</span></span><br><span class="line"><span class="undefined">            background:#ffffff;</span></span><br><span class="line"><span class="undefined">            width: 620px;</span></span><br><span class="line"><span class="undefined">            padding: 40px 160px;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            box-shadow: 0px 1px 2px 0px #000000;</span></span><br><span class="line"><span class="undefined">            -moz-box-shadow: 0px 1px 2px 0px #000000;</span></span><br><span class="line"><span class="undefined">            -webkit-box-shadow: 0px 1px 2px 0px #000000;</span></span><br><span class="line"><span class="undefined">            text-align: left;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .launch &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 2em;</span></span><br><span class="line"><span class="undefined">            font-weight: bolder;</span></span><br><span class="line"><span class="undefined">            width: 402px;</span></span><br><span class="line"><span class="undefined">            height: 108px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--content starts--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"launch"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pd2qkcgty.bkt.clouddn.com/logo.png"</span> <span class="attr">height</span>=<span class="string">"70"</span> <span class="attr">width</span>=<span class="string">"auto"</span> <span class="attr">style</span>=<span class="string">"position: relative;left: -80%;top: -40%"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>致学弟学妹的一封信<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123; student_id &#125;&#125;&#123;&#123; name &#125;&#125;同学你好：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"line-height: 30px"</span>&gt;</span> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;首先祝贺你正式成为计软网安院科协的一员，从加入院科协的那一刻开始，你将经历一段从没经历和感受过的奇妙旅程。我们希望未来的一年中你能在科协这个大家庭中结交志同道合的朋友，从科协牛人中获取经验，成为技术上的大牛，或者在科协活动的举办中锻炼自己的活动组织能力。我们更希望一年后的你能像我们一样在科协为未来的学弟学妹提供技术和学习上的帮助。</span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;愿初来南邮的你，在未来的一年中能在计软网安院科协这片沃土上，施展自己的才华，活出自己的精彩。(๑•̀ㅂ•́)و✧<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; active_url &#125;&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"width: 620px;border-radius: 3px;background: #3498db;border: 4px;height: 35px;border: #2e6da4;color: white;font-family: 宋体;font-weight: bolder"</span>&gt;</span></span><br><span class="line">                点击完成验证</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 80%;height:100%;float: left"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"position: relative;width: 450px;"</span>&gt;</span></span><br><span class="line">                    加入科协，你需要什么？<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    你需要的是 Interest——兴趣 Passion——激情 Perseverance——毅力</span><br><span class="line">                    世界本没路，走的人多了就有了路，没有谁天生就会，一切都是通过不断学习获得。从零开始，你将在这里慢慢成长。在这里你将会获得毕生的朋友，因为你们志同道合。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 20%;float: left;height: 100%"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pd2qkcgty.bkt.clouddn.com/sacc_QR_Code.png"</span> <span class="attr">alt</span>=<span class="string">"微信二维码"</span> <span class="attr">id</span>=<span class="string">"img-left"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">style</span>=<span class="string">"width: 110px;height: 110px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: right"</span>&gt;</span>南京邮电大学计软网安院科协<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                njupt.sacc@outlook.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span>sacc期待你的加入<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后展示一下效果:<br>PC端：</p><p><img src="/images/Django发送HTML邮件/B4F54578-2695-4CB8-A699-4138C70F5786.png" alt="在这里插入图片描述"></p><p>移动端：</p><p><img src="/images/Django发送HTML邮件/F3C7CB3A-677D-4AAC-BD2B-579C1FFEB619.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玄学解决BUG</title>
      <link href="/2018/07/30/%E7%8E%84%E5%AD%A6%E8%A7%A3%E5%86%B3BUG/"/>
      <url>/2018/07/30/%E7%8E%84%E5%AD%A6%E8%A7%A3%E5%86%B3BUG/</url>
      
        <content type="html"><![CDATA[<h4 id="在网上汇总了一些企图玄学的图案，留着万一哪天自己能用到"><a href="#在网上汇总了一些企图玄学的图案，留着万一哪天自己能用到" class="headerlink" title="在网上汇总了一些企图玄学的图案，留着万一哪天自己能用到"></a>在网上汇总了一些企图玄学的图案，留着万一哪天自己能用到</h4><h2 id="佛祖保佑-永无BUG-永不修改"><a href="#佛祖保佑-永无BUG-永不修改" class="headerlink" title="佛祖保佑       永无BUG     永不修改"></a>佛祖保佑       永无BUG     永不修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--////////////////////////////////////////////////////////////////////--&gt;</span><br><span class="line">&lt;!--//                          _ooOoo_                               //--&gt;</span><br><span class="line">&lt;!--//                         o8888888o                              //--&gt;</span><br><span class="line">&lt;!--//                         88&quot; . &quot;88                              //--&gt;</span><br><span class="line">&lt;!--//                         (| ^_^ |)                              //--&gt;</span><br><span class="line">&lt;!--//                         O\  =  /O                              //--&gt;</span><br><span class="line">&lt;!--//                      ____/`-&amp;#45;&amp;#45;&apos;\____                   //--&gt;</span><br><span class="line">&lt;!--//                    .&apos;  \\|     |//  `.                         //--&gt;</span><br><span class="line">&lt;!--//                   /  \\|||  :  |||//  \                        //--&gt;</span><br><span class="line">&lt;!--//                  /  _||||| -:- |||||-  \                       //--&gt;</span><br><span class="line">&lt;!--//                  |   | \\\  -  /// |   |                       //--&gt;</span><br><span class="line">&lt;!--//                  | \_|  &apos;&apos;\-&amp;#45;&amp;#45;/&apos;&apos;  |   |               //--&gt;</span><br><span class="line">&lt;!--//                  \  .-\__  `-`  ___/-. /                       //--&gt;</span><br><span class="line">&lt;!--//                ___`. .&apos;  /&amp;#45;&amp;#45;.&amp;#45;&amp;#45;\  `. . ___     //--&gt;</span><br><span class="line">&lt;!--//              .&quot;&quot; &apos;&lt;  `.___\_&lt;|&gt;_/___.&apos;  &gt;&apos;&quot;&quot;.                  //--&gt;</span><br><span class="line">&lt;!--//            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 //--&gt;</span><br><span class="line">&lt;!--//            \  \ `-.   \_ __\ /__ _/   .-` /  /                 //--&gt;</span><br><span class="line">&lt;!--//      ========`-.____`-.___\_____/___.-`____.-&apos;========         //--&gt;</span><br><span class="line">&lt;!--//                           `=-&amp;#45;&amp;#45;=&apos;                      //--&gt;</span><br><span class="line">&lt;!--//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        //--&gt;</span><br><span class="line">&lt;!--//         佛祖保佑       永无BUG     永不修改                        //--&gt;</span><br><span class="line">&lt;!--////////////////////////////////////////////////////////////////////--&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * _ooOoo_</span><br><span class="line"> * o8888888o</span><br><span class="line"> * 88&quot; . &quot;88</span><br><span class="line"> * (| -_- |)</span><br><span class="line"> *  O\ = /O</span><br><span class="line"> * ___/`---&apos;\____</span><br><span class="line"> * .   &apos; \\| |// `.</span><br><span class="line"> * / \\||| : |||// \</span><br><span class="line"> * / _||||| -:- |||||- \</span><br><span class="line"> * | | \\\ - /// | |</span><br><span class="line"> * | \_| &apos;&apos;\---/&apos;&apos; | |</span><br><span class="line"> * \ .-\__ `-` ___/-. /</span><br><span class="line"> * ___`. .&apos; /--.--\ `. . __</span><br><span class="line"> * .&quot;&quot; &apos;&lt; `.___\_&lt;|&gt;_/___.&apos; &gt;&apos;&quot;&quot;.</span><br><span class="line"> * | | : `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="line"> * \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="line"> * ======`-.____`-.___\_____/___.-`____.-&apos;======</span><br><span class="line"> * `=---=&apos;</span><br><span class="line"> *          .............................................</span><br><span class="line"> *           佛曰：bug泛滥，我已瘫痪！</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">        ´´´´´´´´██´´´´´´´</span><br><span class="line">        ´´´´´´´████´´´´´´</span><br><span class="line">        ´´´´´████████´´´´</span><br><span class="line">        ´´`´███▒▒▒▒███´´´´´</span><br><span class="line">        ´´´███▒●▒▒●▒██´´´</span><br><span class="line">        ´´´███▒▒▒▒▒▒██´´´´´</span><br><span class="line">        ´´´███▒▒▒▒██´                      项目：vue-user-center</span><br><span class="line">        ´´██████▒▒███´´´´´                 语言： ES6-babel</span><br><span class="line">        ´██████▒▒▒▒███´´                   框架： vue+vue-router+vuex+iview+axios</span><br><span class="line">        ██████▒▒▒▒▒▒███´´´´                构建工具： webpack</span><br><span class="line">        ´´▓▓▓▓▓▓▓▓▓▓▓▓▓▒´´                 版本控制： git-github</span><br><span class="line">        ´´▒▒▒▒▓▓▓▓▓▓▓▓▓▒´´´´´              css预处理: less</span><br><span class="line">        ´.▒▒▒´´▓▓▓▓▓▓▓▓▒´´´´´              代码风格：eslint-standard</span><br><span class="line">        ´.▒▒´´´´▓▓▓▓▓▓▓▒                   编辑器： phpstorm</span><br><span class="line">        ..▒▒.´´´´▓▓▓▓▓▓▓▒                  数据库:  mysql</span><br><span class="line">        ´▒▒▒▒▒▒▒▒▒▒▒▒                      服务器端脚本: php go</span><br><span class="line">        ´´´´´´´´´███████´´´´´              author: codeRabbit</span><br><span class="line">        ´´´´´´´´████████´´´´´´´</span><br><span class="line">        ´´´´´´´█████████´´´´´´</span><br><span class="line">        ´´´´´´██████████´´´´             大部分人都在关注你飞的高不高，却没人在乎你飞的累不累，这就是现实！</span><br><span class="line">        ´´´´´´██████████´´´                     我从不相信梦想，我，只，相，信，自，己！</span><br><span class="line">        ´´´´´´´█████████´´</span><br><span class="line">        ´´´´´´´█████████´´´</span><br><span class="line">        ´´´´´´´´████████´´´´´</span><br><span class="line">        ________▒▒▒▒▒</span><br><span class="line">        _________▒▒▒▒</span><br><span class="line">        _________▒▒▒▒</span><br><span class="line">        ________▒▒_▒▒</span><br><span class="line">        _______▒▒__▒▒</span><br><span class="line">        _____ ▒▒___▒▒</span><br><span class="line">        _____▒▒___▒▒</span><br><span class="line">        ____▒▒____▒▒</span><br><span class="line">        ___▒▒_____▒▒</span><br><span class="line">        ███____ ▒▒</span><br><span class="line">        ████____███</span><br><span class="line">        █ _███_ _█_███</span><br><span class="line">——————————————————————————女神保佑，代码无bug——————————————————————</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h2 id="神兽保佑-代码无BUG！"><a href="#神兽保佑-代码无BUG！" class="headerlink" title="神兽保佑       代码无BUG！"></a>神兽保佑       代码无BUG！</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// ┏┓　　　┏┓</span><br><span class="line">// ┏┛┻━━━┛┻┓//</span><br><span class="line">// ┃　　　　　　　┃//</span><br><span class="line">// ┃　　　━　　　┃//</span><br><span class="line">// ┃　┳┛　┗┳　┃//</span><br><span class="line">// ┃　　　　　　　┃//</span><br><span class="line">// ┃　　　┻　　　┃//</span><br><span class="line">// ┃　　　　　　　┃//</span><br><span class="line">// ┗━┓　　　┏━┛//</span><br><span class="line">// ┃　　　┃ 神兽保佑//　　　　　　　　</span><br><span class="line">// ┃　　　┃ 代码无BUG！//</span><br><span class="line">// ┃　　　┗━━━┓//</span><br><span class="line">// ┃　　　　　　　┣┓//</span><br><span class="line">// ┃　　　　　　　┏┛//</span><br><span class="line">// ┗┓┓┏━┳┓┏┛//</span><br><span class="line">// ┃┫┫　┃┫┫//</span><br><span class="line">// ┗┻┛　┗┻┛//</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># 　　　┏┓　　　┏┓</span><br><span class="line"># 　　┏┛┻━━━┛┻┓</span><br><span class="line"># 　　┃　　　　　　　 ┃ 　</span><br><span class="line"># 　　┃　　　━　　　 ┃</span><br><span class="line"># 　　┃　＞　　　＜┃</span><br><span class="line"># 　　┃　　　　　　　 ┃</span><br><span class="line"># 　　┃ . ⌒　..┃</span><br><span class="line"># 　　┃　　　　　　　 ┃</span><br><span class="line"># 　　┗━┓　　　┏━┛</span><br><span class="line"># 　　　　┃　　　┃　Codes are far away from bugs with the animal protecting　　　　　　　</span><br><span class="line"># 　　　　┃　　　┃ 神兽保佑,代码无bug</span><br><span class="line"># 　　　　┃　　　┃　　　　　　　　　　　</span><br><span class="line"># 　　　　┃　　　┃ 　　　　　　</span><br><span class="line"># 　　　　┃　　　┃</span><br><span class="line"># 　　　　┃　　　┃　　　　　　　　　　　</span><br><span class="line"># 　　　　┃　　　┗━━━┓</span><br><span class="line"># 　　　　┃　　　　　　　┣┓</span><br><span class="line"># 　　　　┃　　　　　　　┏┛</span><br><span class="line"># 　　　　┗┓┓┏━┳┓┏┛</span><br><span class="line"># 　　　　　┃┫┫　┃┫┫</span><br><span class="line"># 　　　　　┗┻┛　┗┻┛</span><br><span class="line">#        ┏┓　　　┏┓+ +</span><br><span class="line">#　　　┏┛┻━━━┛┻┓ + +</span><br><span class="line">#　　　┃　　　　　　　┃ 　</span><br><span class="line">#　　　┃　　　━　　　┃ ++ + + +</span><br><span class="line">#　　 ████━████ ┃+</span><br><span class="line">#　　　┃　　　　　　　┃ +</span><br><span class="line">#　　　┃　　　┻　　　┃</span><br><span class="line">#　　　┃　　　　　　　┃ + +</span><br><span class="line">#　　　┗━┓　　　┏━┛</span><br><span class="line">#　　　　　┃　　　┃　　　　　　　　　　　</span><br><span class="line">#　　　　　┃　　　┃ + + + +</span><br><span class="line">#　　　　　┃　　　┃　　　　Codes are far away from bugs with the animal protecting　　　</span><br><span class="line">#　　　　　┃　　　┃ + 　　　　神兽保佑,代码无bug　　</span><br><span class="line">#　　　　　┃　　　┃</span><br><span class="line">#　　　　　┃　　　┃　　+　　　　　　　　　</span><br><span class="line">#　　　　　┃　 　　┗━━━┓ + +</span><br><span class="line">#　　　　　┃ 　　　　　　　┣┓</span><br><span class="line">#　　　　　┃ 　　　　　　　┏┛</span><br><span class="line">#　　　　　┗┓┓┏━┳┓┏┛ + + + +</span><br><span class="line">#　　　　　　┃┫┫　┃┫┫</span><br><span class="line">#　　　　　　┗┻┛　┗┻┛+ + + +</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#                代码无BUG!</span><br><span class="line">#      ,----------------,              ,---------,</span><br><span class="line">#         ,-----------------------,          ,&quot;        ,&quot;|</span><br><span class="line">#       ,&quot;                      ,&quot;|        ,&quot;        ,&quot;  |</span><br><span class="line">#      +-----------------------+  |      ,&quot;        ,&quot;    |</span><br><span class="line">#      |  .-----------------.  |  |     +---------+      |</span><br><span class="line">#      |  |                 |  |  |     | -==----&apos;|      |</span><br><span class="line">#      |  |  I LOVE DOS!    |  |  |     |         |      |</span><br><span class="line">#      |  |  Bad command or |  |  |/----|`---=    |      |</span><br><span class="line">#      |  |  C:\&gt;_          |  |  |   ,/|==== ooo |      ;</span><br><span class="line">#      |  |                 |  |  |  // |(((( [33]|    ,&quot;</span><br><span class="line">#      |  `-----------------&apos;  |,&quot; .;&apos;| |((((     |  ,&quot;</span><br><span class="line">#      +-----------------------+  ;;  | |         |,&quot;</span><br><span class="line">#         /_)______________(_/  //&apos;   | +---------+</span><br><span class="line">#    ___________________________/___  `,</span><br><span class="line">#   /  oooooooooooooooo  .o.  oooo /,   \,&quot;-----------</span><br><span class="line">#  / ==ooooooooooooooo==.o.  ooo= //   ,`\--&#123;)B     ,&quot;</span><br><span class="line"># /_==__==========__==_ooo__ooo=_/&apos;   /___________,&quot;</span><br><span class="line">#</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//   █████▒█    ██  ▄████▄   ██ ▄█▀       ██████╗ ██╗   ██╗ ██████╗</span><br><span class="line">// ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒        ██╔══██╗██║   ██║██╔════╝</span><br><span class="line">// ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░        ██████╔╝██║   ██║██║  ███╗</span><br><span class="line">// ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄        ██╔══██╗██║   ██║██║   ██║</span><br><span class="line">// ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄       ██████╔╝╚██████╔╝╚██████╔╝</span><br><span class="line">//  ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒       ╚═════╝  ╚═════╝  ╚═════╝</span><br><span class="line">//  ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░</span><br><span class="line">//  ░ ░    ░░░ ░ ░ ░        ░ ░░ ░</span><br><span class="line">//           ░     ░ ░      ░  ░</span><br><span class="line">//                 ░</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> _______________########_______________________</span><br><span class="line"> ______________##########_______________________</span><br><span class="line">______________############_____________________</span><br><span class="line">______________#############____________________</span><br><span class="line">_____________##__###########___________________</span><br><span class="line">____________###__######_#####__________________</span><br><span class="line">____________###_#######___####_________________</span><br><span class="line">___________###__##########_####________________</span><br><span class="line">__________####__###########_####_______________</span><br><span class="line">________#####___###########__#####_____________</span><br><span class="line">_______######___###_########___#####___________</span><br><span class="line">_______#####___###___########___######_________</span><br><span class="line">______######___###__###########___######_______</span><br><span class="line">_____######___####_##############__######______</span><br><span class="line">____#######__#####################_#######_____</span><br><span class="line">____#######__##############################____</span><br><span class="line">___#######__######_#################_#######___</span><br><span class="line">___#######__######_######_#########___######___</span><br><span class="line">___#######____##__######___######_____######___</span><br><span class="line">___#######________######____#####_____#####____</span><br><span class="line">____######________#####_____#####_____####_____</span><br><span class="line">_____#####________####______#####_____###______</span><br><span class="line">______#####______;###________###______#________</span><br><span class="line">________##_______####________####______________ </span><br><span class="line"></span><br><span class="line">         葱官赐福  百无禁忌</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 企图玄学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 企图玄学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2018/04/28/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/2018/04/28/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>KMP算法适用于字符串匹配，今天通过相关视频，大致了理解了其实现原理以及步骤，学习的视频链接如下（这是未优化版本）：<br><a href="https://www.bilibili.com/video/av6239731/?p=11" target="_blank" rel="noopener">https://www.bilibili.com/video/av6239731/?p=11</a><br><a href="https://www.bilibili.com/video/av3246487?from=search&amp;seid=8682896714663607035" target="_blank" rel="noopener">https://www.bilibili.com/video/av3246487?from=search&amp;seid=8682896714663607035</a><br><a href="https://study.163.com/course/courseLearn.htm?courseId=468002#/learn/video?lessonId=1023415&amp;courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=468002#/learn/video?lessonId=1023415&amp;courseId=468002</a><br>由于我大概理解了原理以及代码实现，所以我到时候后期复习时建议直接看最后一个链接的视频。<br>我在网上参考了部分其他人使用的C/C++实现的KMP算法实现，代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">( <span class="keyword">int</span> *next,<span class="keyword">char</span> *a,<span class="keyword">int</span> la)</span> <span class="comment">/*求NEXT[]的值*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span> ;</span><br><span class="line">   next[<span class="number">1</span>] = <span class="number">0</span> ;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">while</span> ( i &lt;= la) <span class="comment">/*核心部分*/</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>( a[i] == a[j] || j == <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        j ++ ;</span><br><span class="line">        i ++ ;</span><br><span class="line">        <span class="keyword">if</span>( a[i] == a[j])</span><br><span class="line">        next[i] = next[j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        next[i] = j ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      j = next[j] ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str_kmp</span><span class="params">( <span class="keyword">int</span> *next, <span class="keyword">char</span> *A ,<span class="keyword">char</span> *a, <span class="keyword">int</span> lA,<span class="keyword">int</span> la)</span><span class="comment">/* EASY*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,j,k ;</span><br><span class="line">   i = <span class="number">1</span> ;</span><br><span class="line">   j = <span class="number">1</span> ;</span><br><span class="line">   <span class="keyword">while</span> ( i&lt;=lA &amp;&amp; j &lt;= la )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(A[i] == a[j] || j == <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">          i ++ ;</span><br><span class="line">          j ++ ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      j = next[j] ;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> ( j&gt; la)</span><br><span class="line">   <span class="keyword">return</span> i-j+<span class="number">1</span> ;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">-1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,k;</span><br><span class="line">  <span class="keyword">int</span> next[MAX]=&#123;<span class="number">0</span>&#125; ;</span><br><span class="line">  <span class="keyword">int</span> lA=<span class="number">0</span>,la =<span class="number">0</span> ;</span><br><span class="line">  <span class="keyword">char</span> A[MAX],a[MAX] ;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s %s"</span>,A,a) ;</span><br><span class="line">  </span><br><span class="line">  lA = <span class="built_in">strlen</span>(A);</span><br><span class="line">  la = <span class="built_in">strlen</span>(a);</span><br><span class="line">  <span class="keyword">for</span>(k=la<span class="number">-1</span>; k&gt;= <span class="number">0</span> ;k --)</span><br><span class="line">  a[k+<span class="number">1</span>] = a[k] ;</span><br><span class="line">  <span class="keyword">for</span>(k=lA<span class="number">-1</span>; k&gt;= <span class="number">0</span> ;k --)</span><br><span class="line">  A[k+<span class="number">1</span>] = A[k] ;</span><br><span class="line">  </span><br><span class="line">  get_next(next,a,la) ;</span><br><span class="line">  k = str_kmp(next,A,a,lA,la);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">-1</span> == k)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Not Soulation!!! "</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d "</span>,k) ;</span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> KMP算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2018/04/25/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/04/25/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="其实这节课并没有听太懂，但是为了防止忘记，所以直接将郝斌老师的代码扔到了博客上希望我之后多次看之后能真正理解这个排序方法，还有就是郝斌老师的数据结构课程看完了，并没有图的相关，看来我要开始自学图了，加油！！！！"><a href="#其实这节课并没有听太懂，但是为了防止忘记，所以直接将郝斌老师的代码扔到了博客上希望我之后多次看之后能真正理解这个排序方法，还有就是郝斌老师的数据结构课程看完了，并没有图的相关，看来我要开始自学图了，加油！！！！" class="headerlink" title="其实这节课并没有听太懂，但是为了防止忘记，所以直接将郝斌老师的代码扔到了博客上希望我之后多次看之后能真正理解这个排序方法，还有就是郝斌老师的数据结构课程看完了，并没有图的相关，看来我要开始自学图了，加油！！！！"></a>其实这节课并没有听太懂，但是为了防止忘记，所以直接将郝斌老师的代码扔到了博客上希望我之后多次看之后能真正理解这个排序方法，还有就是郝斌老师的数据结构课程看完了，并没有图的相关，看来我要开始自学图了，加油！！！！</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindPos</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>] = &#123;<span class="number">-2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-985</span>, <span class="number">4</span>, <span class="number">-93</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">QuickSort(a, <span class="number">0</span>, <span class="number">5</span>); <span class="comment">//第二个参数表示第一个元素的下标  第三个参数表示最后一个元素的下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">6</span>; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d  "</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">pos = FindPos(a, low, high);</span><br><span class="line">QuickSort(a, low, pos<span class="number">-1</span>);</span><br><span class="line">QuickSort(a, pos+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindPos</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> val = a[low];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (low&lt;high  &amp;&amp; a[high]&gt;=val)</span><br><span class="line">--high;</span><br><span class="line">a[low] = a[high];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (low&lt;high &amp;&amp; a[low]&lt;=val)</span><br><span class="line">++low;</span><br><span class="line">a[high] = a[low];</span><br><span class="line">&#125;<span class="comment">//终止while循环之后low和high一定是相等的</span></span><br><span class="line"></span><br><span class="line">a[low] = val; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> high; <span class="comment">//high可以改为low, 但不能改为val 也不能改为a[low]  也不能改为a[high]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树以及链式二叉树的常见操作</title>
      <link href="/2018/04/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BB%A5%E5%8F%8A%E9%93%BE%E5%BC%8F%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/04/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BB%A5%E5%8F%8A%E9%93%BE%E5%BC%8F%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h5 id="二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现"><a href="#二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现" class="headerlink" title="二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现"></a>二叉树是树这部分中最重要的知识之一，今天看完了郝斌老师关于树部分的知识，并对老师在看上所说的链式二叉树代码进行了实现</h5><hr><hr><h1 id="一、二叉树的中的一些专有名词的解释："><a href="#一、二叉树的中的一些专有名词的解释：" class="headerlink" title="一、二叉树的中的一些专有名词的解释："></a>一、二叉树的中的一些专有名词的解释：</h1><h4 id="1-先序遍历-指先访问根节点，再先序遍历左子树，再先序遍历右子树"><a href="#1-先序遍历-指先访问根节点，再先序遍历左子树，再先序遍历右子树" class="headerlink" title="1.先序遍历:指先访问根节点，再先序遍历左子树，再先序遍历右子树"></a>1.先序遍历:指先访问根节点，再先序遍历左子树，再先序遍历右子树</h4><h4 id="2-中序遍历-指先中序遍历左子树，再访问根节点，再中序遍历右子树"><a href="#2-中序遍历-指先中序遍历左子树，再访问根节点，再中序遍历右子树" class="headerlink" title="2.中序遍历:指先中序遍历左子树，再访问根节点，再中序遍历右子树"></a>2.中序遍历:指先中序遍历左子树，再访问根节点，再中序遍历右子树</h4><h4 id="3-后序遍历-指先后序遍历左子树，再后序遍历右子树，再访问根节点"><a href="#3-后序遍历-指先后序遍历左子树，再后序遍历右子树，再访问根节点" class="headerlink" title="3.后序遍历:指先后序遍历左子树，再后序遍历右子树，再访问根节点"></a>3.后序遍历:指先后序遍历左子树，再后序遍历右子树，再访问根节点</h4><hr><h3 id="下面是郝斌老师上课时关于这三种遍历的视频截图"><a href="#下面是郝斌老师上课时关于这三种遍历的视频截图" class="headerlink" title="下面是郝斌老师上课时关于这三种遍历的视频截图"></a>下面是郝斌老师上课时关于这三种遍历的视频截图</h3><h4 id="先序遍历："><a href="#先序遍历：" class="headerlink" title="先序遍历："></a>先序遍历：</h4><p><img src="/images/二叉树以及链式二叉树的常见操作/16E99165-B321-4342-88B0-F3569F2EB721.png" alt="这里写图片描述"><br><img src="/images/二叉树以及链式二叉树的常见操作/B99F1817-9470-45C1-9A38-F21E09B0A422.png" alt="这里写图片描述"></p><h4 id="中序遍历："><a href="#中序遍历：" class="headerlink" title="中序遍历："></a>中序遍历：</h4><p><img src="/images/二叉树以及链式二叉树的常见操作/B02F8E38-A519-413C-8B26-CC5579419EDE.png" alt="这里写图片描述"><br><img src="/images/二叉树以及链式二叉树的常见操作/DA062882-F56D-4104-B51F-6BBCEFCF8964.png" alt="这里写图片描述"></p><h4 id="后序遍历："><a href="#后序遍历：" class="headerlink" title="后序遍历："></a>后序遍历：</h4><p><img src="/images/二叉树以及链式二叉树的常见操作/A58BF56E-6085-48BA-8214-50116CE8DE33.png" alt="这里写图片描述"><br><img src="/images/二叉树以及链式二叉树的常见操作/355C5279-81ED-49B5-8D27-40F57D41CCC1.png" alt="这里写图片描述"></p><hr><hr><h1 id="二、通过先序与中序求后序以及通过中序与后序求先序"><a href="#二、通过先序与中序求后序以及通过中序与后序求先序" class="headerlink" title="二、通过先序与中序求后序以及通过中序与后序求先序"></a>二、通过先序与中序求后序以及通过中序与后序求先序</h1><h3 id="不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。"><a href="#不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。" class="headerlink" title="不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。"></a>不论是先序还是后序，我们分别可以从先序的第一个以及后序的最后一个来确认二叉树的根节点，然后通过中序可得出该二叉树的左子树部分由哪些组成，以及右子树部分由哪些组成。</h3><h4 id="1-在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点"><a href="#1-在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点" class="headerlink" title="1.在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点"></a>1.在先序与中序求后序时，先序中谁先出现，谁就是子树的根节点</h4><h4 id="2-在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点"><a href="#2-在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点" class="headerlink" title="2.在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点"></a>2.在中序与后序求后序时，后序中谁后出现，谁就是子树的根节点</h4><hr><h3 id="下面是郝斌老师关于求二叉树时的视频截图"><a href="#下面是郝斌老师关于求二叉树时的视频截图" class="headerlink" title="下面是郝斌老师关于求二叉树时的视频截图:"></a>下面是郝斌老师关于求二叉树时的视频截图:</h3><h4 id="已知先序中序求后序"><a href="#已知先序中序求后序" class="headerlink" title="已知先序中序求后序"></a>已知先序中序求后序</h4><p><img src="/images/二叉树以及链式二叉树的常见操作/A4F5CF1B-9B16-4A66-9279-FDA3F90CAADA.png" alt="这里写图片描述"></p><p><img src="/images/二叉树以及链式二叉树的常见操作/70CFF251-8E00-4241-B367-837AD87B3860.png" alt="这里写图片描述"></p><h4 id="已知中序后序求先序"><a href="#已知中序后序求先序" class="headerlink" title="已知中序后序求先序"></a>已知中序后序求先序</h4><p><img src="/images/二叉树以及链式二叉树的常见操作/E1988CC1-1CC7-4ED9-A8FE-DA6A97DC6C9B.png" alt="这里写图片描述"></p><hr><hr><h2 id="三、链式二叉树的常见操作"><a href="#三、链式二叉树的常见操作" class="headerlink" title="三、链式二叉树的常见操作"></a>三、链式二叉树的常见操作</h2><h5 id="链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下"><a href="#链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下" class="headerlink" title="链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下:"></a>链式二叉树是常见二叉树的程序实现方法，根据郝斌老师的课程，我对他上课所敲的代码进行了实现，具体代码如下:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 该二叉树的树状图如下：</span></span><br><span class="line"><span class="comment">        A</span></span><br><span class="line"><span class="comment">      *   *</span></span><br><span class="line"><span class="comment">    B       C</span></span><br><span class="line"><span class="comment">           *</span></span><br><span class="line"><span class="comment">         D</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">              E</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//程序实现代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> * <span class="title">pLeft</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> * <span class="title">pRight</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="function">struct BTNode * <span class="title">createBTree</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//创建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>;<span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>;<span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>;<span class="comment">//后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> * <span class="title">pT</span> = <span class="title">createBTree</span>();</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"该二叉树的前序遍历为:\n"</span>);</span><br><span class="line">    PreTraverseBTree(pT);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n该二叉树的中序遍历为:\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n该二叉树的后序遍历为:\n"</span>);</span><br><span class="line">    PostTraverseBTree(pT);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct BTNode * <span class="title">createBTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BTNode * pA = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pB = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pC = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pD = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    BTNode * pE = (struct BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给树的每个节点添加数据</span></span><br><span class="line">    pA-&gt;data = <span class="string">'A'</span>;</span><br><span class="line">    pB-&gt;data = <span class="string">'B'</span>;</span><br><span class="line">    pC-&gt;data = <span class="string">'C'</span>;</span><br><span class="line">    pD-&gt;data = <span class="string">'D'</span>;</span><br><span class="line">    pE-&gt;data = <span class="string">'E'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给树的相关节点通过指针连接</span></span><br><span class="line">    pA-&gt;pLeft = pB;</span><br><span class="line">    pA-&gt;pRight = pC;</span><br><span class="line">    pB-&gt;pLeft = pB-&gt;pRight = <span class="literal">NULL</span>;</span><br><span class="line">    pC-&gt;pLeft = pD;</span><br><span class="line">    pC-&gt;pRight = <span class="literal">NULL</span>;</span><br><span class="line">    pD-&gt;pLeft = <span class="literal">NULL</span>;</span><br><span class="line">    pD-&gt;pRight = pE;</span><br><span class="line">    pE-&gt;pLeft = pE-&gt;pRight = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pT != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,pT-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pLeft != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PreTraverseBTree(pT-&gt;pLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pRight != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PreTraverseBTree(pT-&gt;pRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pT != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pLeft != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            InTraverseBTree(pT-&gt;pLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,pT-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pRight != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            InTraverseBTree(pT-&gt;pRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostTraverseBTree</span><span class="params">(struct BTNode * pT)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pT != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pLeft != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PostTraverseBTree(pT-&gt;pLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pT-&gt;pRight != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            PostTraverseBTree(pT-&gt;pRight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>,pT-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔递归问题</title>
      <link href="/2018/04/23/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98/"/>
      <url>/2018/04/23/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h6 id="汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题"><a href="#汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题" class="headerlink" title="汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题"></a>汉诺塔递归是一个用到了递归思想的经典问题，看过相关借时候其实我仍然还是没有完全理解，但是先把代码扔在博客上，慢慢消化这个问题</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hannuota</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span><span class="comment">//指将A上的盘子借助B移到C</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     如果是1个盘子</span></span><br><span class="line"><span class="comment">     直接将A柱子上的盘子从A移到C</span></span><br><span class="line"><span class="comment">     否则</span></span><br><span class="line"><span class="comment">     先将A柱子上的n-1个盘子借助C移到B</span></span><br><span class="line"><span class="comment">     直接将A柱子上的盘子从A移到C</span></span><br><span class="line"><span class="comment">     最后将B柱子上的n-1个盘子借助A移到C</span></span><br><span class="line"><span class="comment">     最上面盘子为1最下面为n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"将编号为%d的盘子直接从%c柱子移到%c柱子\n"</span>, n, A, C);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hannuota(n<span class="number">-1</span>, A, C, B);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"将编号为%d的盘子直接从%c柱子移到%c柱子\n"</span>, n, A, C);</span><br><span class="line">        hannuota(n<span class="number">-1</span>, B, A, C);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要移动盘子的个数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);   </span><br><span class="line">    hannuota(n, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 汉诺塔问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环队列的常见操作</title>
      <link href="/2018/04/22/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/04/22/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h6 id="与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear-1）-len-front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作"><a href="#与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear-1）-len-front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作" class="headerlink" title="与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear+1）% len = front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作"></a>与栈相比，队列我个人感觉简单一些，不过对于一般的队列，都是循环队列，这是为了防止内存的浪费，使为队列分配的内存可以循环使用，而且一般动态分配一个长度为n的循环队列的话，真正用来储存数据的只有n-1，因为要留一个空节点使队列尾的下标等于该空节点的下标，通过该空节点用来区分队满与队空，队满是判断条件是（rear+1）% len = front其中rear为队尾数据的下标，front为队头的下标，len为长度。下面是我在观看郝斌老师的视频后的总结，对原来郝斌老师的代码加上的释放队列空间以及清空队列数据的这两个操作</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">int</span> * pBase;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Queue *)</span></span>;<span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">en_queue</span><span class="params">(Queue *,<span class="keyword">int</span>)</span></span>;<span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_queue</span><span class="params">(Queue *)</span></span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out_queue</span><span class="params">(Queue *)</span></span>;<span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(Queue *)</span></span>;<span class="comment">//释放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *)</span></span>;<span class="comment">//重置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Queue Q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入您需要的循环队列的长度:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;(Q.len));</span><br><span class="line">    init(&amp;Q);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">1</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">2</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">3</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">4</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">5</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">6</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">7</span>);</span><br><span class="line">    en_queue(&amp;Q, <span class="number">8</span>);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    out_queue(&amp;Q);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    destroy(&amp;Q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p"</span>,Q.pBase);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Queue* pQ)</span></span>&#123;</span><br><span class="line">    pQ-&gt;pBase = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(pQ-&gt;len));</span><br><span class="line">    pQ-&gt;front = <span class="number">0</span>;</span><br><span class="line">    pQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">en_queue</span><span class="params">(Queue* pQ,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((pQ-&gt;rear+<span class="number">1</span>)%pQ-&gt;len == pQ-&gt;front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列已满!%d入队失败\n"</span>,val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pQ-&gt;pBase[pQ-&gt;rear] = val;</span><br><span class="line">        pQ-&gt;rear = (pQ-&gt;rear+<span class="number">1</span>) % pQ-&gt;len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_queue</span><span class="params">(Queue* pQ)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ-&gt;rear == pQ-&gt;front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = pQ-&gt;front;</span><br><span class="line">        <span class="keyword">while</span> (i != pQ-&gt;rear) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,pQ-&gt;pBase[i]);</span><br><span class="line">            i = (i+<span class="number">1</span>) % pQ-&gt;len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out_queue</span><span class="params">(Queue *pQ)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pQ-&gt;rear == pQ-&gt;front)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = pQ-&gt;pBase[pQ-&gt;front];</span><br><span class="line">        pQ-&gt;front = (pQ-&gt;front+<span class="number">1</span>) % pQ-&gt;len;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出队的元素值为:%d\n"</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(Queue *pQ)</span></span>&#123;</span><br><span class="line">    pQ-&gt;len=<span class="number">-1</span>;<span class="comment">//因为pQ不是动态分配的，所以不要咬释放变量pQ的空间</span></span><br><span class="line">    <span class="built_in">free</span>(pQ-&gt;pBase);<span class="comment">//释放动态分配的数组的空间</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *pQ)</span></span>&#123;</span><br><span class="line">    pQ-&gt;len = <span class="number">0</span>;</span><br><span class="line">    pQ-&gt;front = <span class="number">0</span>;</span><br><span class="line">    pQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现"><a href="#注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现" class="headerlink" title="注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现"></a>注：个人认为循环队列的主要的一个巧妙的方法就是用取余这个方法，使循环队列的循环功能得以实现</h6>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 循环队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的常见操作</title>
      <link href="/2018/04/20/%E6%A0%88%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/04/20/%E6%A0%88%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h5 id="今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。"><a href="#今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。" class="headerlink" title="今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。"></a>今天正好下午没课，就接着昨天所看的课程一口气把郝斌老师有关栈的视频也刷完了，通过他用代码实现栈的常见操作使我对栈也有了一个进一步的认识，下面是我看过视频后参考郝斌老师的代码对栈常见功能的代码实现。</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125; Node,* PNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span><span class="comment">//创建两个指针分别指向栈顶和栈底</span></span><br><span class="line">    PNode pTop;</span><br><span class="line">    PNode pBottom;<span class="comment">//总是指向栈的头节点</span></span><br><span class="line">&#125; Stack,* PStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PStack)</span></span>;<span class="comment">//初始化一个栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PStack,<span class="keyword">int</span>)</span></span>;<span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PStack)</span></span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PStack,<span class="keyword">int</span>*)</span></span>;<span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PStack)</span></span>;<span class="comment">//重置栈中的数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    init(&amp;S);</span><br><span class="line">    push(&amp;S,<span class="number">1</span>);</span><br><span class="line">    push(&amp;S,<span class="number">2</span>);</span><br><span class="line">    push(&amp;S,<span class="number">3</span>);</span><br><span class="line">    push(&amp;S,<span class="number">4</span>);</span><br><span class="line">    push(&amp;S,<span class="number">5</span>);</span><br><span class="line">    push(&amp;S,<span class="number">6</span>);</span><br><span class="line">    traverse(&amp;S);</span><br><span class="line">    pop(&amp;S,&amp;val);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pop的值为%d\n"</span>,val);</span><br><span class="line">    traverse(&amp;S);</span><br><span class="line">    clear(&amp;S);</span><br><span class="line">    traverse(&amp;S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PStack pS)</span></span>&#123;</span><br><span class="line">    pS-&gt;pTop = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(pS == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pS-&gt;pBottom = pS-&gt;pTop;</span><br><span class="line">        pS-&gt;pBottom-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PStack pS,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    pNew-&gt;data  = val;</span><br><span class="line">    pNew-&gt;pNext = pS-&gt;pTop;</span><br><span class="line">    pS-&gt;pTop = pNew;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PStack pS)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop == pS-&gt;pBottom)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode p = pS-&gt;pTop;</span><br><span class="line">        <span class="keyword">while</span> (p != pS-&gt;pBottom) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">            p = p-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PStack pS,<span class="keyword">int</span>* val)</span></span>&#123;<span class="comment">//这里的int *val是为了让用户知道pop的数据是什么</span></span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop == pS-&gt;pBottom)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        *val = pS-&gt;pTop-&gt;data;</span><br><span class="line">        PNode p = pS-&gt;pTop;</span><br><span class="line">        pS-&gt;pTop = pS-&gt;pTop-&gt;pNext;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PStack pS)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop == pS-&gt;pBottom)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode p = pS-&gt;pTop;</span><br><span class="line">        PNode q;</span><br><span class="line">        <span class="keyword">while</span> (p != pS-&gt;pBottom) &#123;</span><br><span class="line">            q = p;</span><br><span class="line">            p = p-&gt;pNext;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">            q = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pS-&gt;pTop = pS-&gt;pBottom;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"已clear成功!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢-°ω°-ﾉ”"><a href="#注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢-°ω°-ﾉ”" class="headerlink" title="注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢(°ω°)ﾉ”"></a>注：个人感觉有链表基础再去理解栈并不难，我认为所谓的栈只不过是给常见的链表加一个总是指向栈底的指针和一个总是指向栈顶的指针，并且每次添加使其总是添加在栈顶，并更新一下指向栈顶的那个指针便可。和链表相比，栈和链表的区别在链表的头节点是在链表的头部，而对于栈，头节点则是在栈低，即指向栈底的指针总是指向头节点。以上都是我个人学习后总结的一些看法，如果我的总结有不对的地方，请各位看到了之后帮我指出，谢谢(°ω°)ﾉ”</h5>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表的常见操作</title>
      <link href="/2018/04/19/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/04/19/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h6 id="这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下："><a href="#这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下：" class="headerlink" title="这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下："></a>这两天一直在看郝斌的数据结构课程，之前上课大多是是理论，但是实际用代码实现还是比较困难，跟着郝斌老师重新温习了一遍链表的课程，受益匪浅，虽然郝斌老师实现所用代码和教材上的代码稍有区别，但是大致思想相同，而且有的部分感觉郝斌老师的方法更加优秀，所以对他上课时代码进行了重现，完成了链表的常见操作，具体代码如下：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125; Node,*PNode;</span><br><span class="line"><span class="function">PNode <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//创建链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNode)</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_empty</span><span class="params">(PNode)</span></span>;<span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNode)</span></span>;<span class="comment">//判断链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_list</span><span class="params">(PNode,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;<span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(PNode,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;<span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNode)</span></span>;<span class="comment">//对链表进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PNode pHead = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    pHead = create_list();</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表的长度为%d\n"</span>,len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要插入的位置以及数值:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;pos,&amp;val);</span><br><span class="line">    insert_list(pHead, pos, &amp;val);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要删除的位置!\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos);</span><br><span class="line">    delete_list(pHead, pos, &amp;val);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    sort_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"排序后的链表数据如下:"</span>);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PNode <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    </span><br><span class="line">    PNode pHead = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(pHead == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PNode pTail = pHead;<span class="comment">//这里是创建一个指向尾节点的变量</span></span><br><span class="line">    pTail-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要生成的链表的节点数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个节点的值:\n"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</span><br><span class="line">        </span><br><span class="line">        PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pNew-&gt;data = val;</span><br><span class="line">        pTail-&gt;pNext = pNew;</span><br><span class="line">        pNew-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">        pTail = pNew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pHead;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    PNode p = pHead-&gt;pNext;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表中的数据为:"</span>);</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">is_empty</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pHead-&gt;pNext == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该链表为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"该链表不为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNode pHead)</span></span>&#123;</span><br><span class="line">    PNode p = pHead-&gt;pNext;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_list</span><span class="params">(PNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span>* val)</span></span>&#123;</span><br><span class="line">    PNode p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; i&lt;pos<span class="number">-1</span>) &#123;<span class="comment">//使指针最后指向需要插入的节点的前一个节点</span></span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;pos<span class="number">-1</span> || p==<span class="literal">NULL</span>)&#123;<span class="comment">//当该节点为空，则说明该节点为尾节点的下一个节点，即输入不合法</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入不正确!\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode pNew = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"动态分配内存失败!\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pNew-&gt;data = *val;</span><br><span class="line">            pNew-&gt; pNext = p-&gt;pNext;</span><br><span class="line">            p-&gt;pNext = pNew;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_list</span><span class="params">(PNode pHead,<span class="keyword">int</span> pos,<span class="keyword">int</span>* val)</span></span>&#123;</span><br><span class="line">    PNode p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;pNext != <span class="literal">NULL</span> &amp;&amp; i&lt;pos<span class="number">-1</span>) &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i&gt;pos<span class="number">-1</span> || p-&gt;pNext == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入不正确!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PNode q = p-&gt;pNext;</span><br><span class="line">        *val = p-&gt;pNext-&gt;data;</span><br><span class="line">        p-&gt;pNext = p-&gt;pNext-&gt;pNext;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;<span class="comment">//将q中的野指针赋值为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除成功，删除的节点值为%d"</span>,*val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNode pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    PNode p, q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>,p=pHead-&gt;pNext; i&lt;len<span class="number">-1</span>; i++,p=p-&gt;pNext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>,q=p-&gt;pNext; j&lt;len; j++,q=q-&gt;pNext)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)  <span class="comment">//类似于数组中的:  a[i] &gt; a[j]</span></span><br><span class="line">            &#123;</span><br><span class="line">                t = p-&gt;data;<span class="comment">//类似于数组中的:  t = a[i];</span></span><br><span class="line">                p-&gt;data = q-&gt;data; <span class="comment">//类似于数组中的:  a[i] = a[j];</span></span><br><span class="line">                q-&gt;data = t; <span class="comment">//类似于数组中的:  a[j] = t;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。"><a href="#注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。" class="headerlink" title="注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。"></a>注：在这个代码的插入以及删除时使用的while以及if判断语句极为巧妙，使得不合法输入都可避免，简化了代码还提高了代码的健壮性，我思考了很久才大致理解了其思路，这个后期复习时需要重点的温习一下。</h6>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用github+hexo搭建一个博客</title>
      <link href="/2018/04/12/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/04/12/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>本文章是查阅了一下四个博客文章后所做的总结：<br><a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a><br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a><br><a href="https://segmentfault.com/a/1190000009009697#articleHeader15" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009009697#articleHeader15</a><br><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">https://blog.csdn.net/qq_33699981/article/details/72716951</a></p><hr><h4 id="整体项目需要使用git，node-js等，以及写博客时需要使用markdown语法，最好在部署前对这些有些了解，当然就算不了解也并不影响整个部署"><a href="#整体项目需要使用git，node-js等，以及写博客时需要使用markdown语法，最好在部署前对这些有些了解，当然就算不了解也并不影响整个部署" class="headerlink" title="整体项目需要使用git，node.js等，以及写博客时需要使用markdown语法，最好在部署前对这些有些了解，当然就算不了解也并不影响整个部署"></a>整体项目需要使用git，node.js等，以及写博客时需要使用markdown语法，最好在部署前对这些有些了解，当然就算不了解也并不影响整个部署</h4><hr><h3 id="一、配置环境以及准备"><a href="#一、配置环境以及准备" class="headerlink" title="一、配置环境以及准备"></a>一、配置环境以及准备</h3><h4 id="1-安装并配置node-js以及git"><a href="#1-安装并配置node-js以及git" class="headerlink" title="1.安装并配置node.js以及git"></a>1.安装并配置node.js以及git</h4><h4 id="2-在github中新建一个项目（记得点击添加README，项目名最好是“github用户名-github-io”）"><a href="#2-在github中新建一个项目（记得点击添加README，项目名最好是“github用户名-github-io”）" class="headerlink" title="2.在github中新建一个项目（记得点击添加README，项目名最好是“github用户名.github.io”）"></a>2.在github中新建一个项目（记得点击添加README，项目名最好是“github用户名.github.io”）</h4><h4 id="3-在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。"><a href="#3-在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub-Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。" class="headerlink" title="3.在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。"></a>3.在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，发现该项目已经被部署到网络上，能够通过外网来访问它。</h4><h4 id="4-在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo"><a href="#4-在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo" class="headerlink" title="4.在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo"></a>4.在合适的地方新建一个文件夹，进入文件夹使用下面的命令安装Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><h4 id="5-使用下面的命令查看是否安装成功"><a href="#5-使用下面的命令查看是否安装成功" class="headerlink" title="5.使用下面的命令查看是否安装成功"></a>5.使用下面的命令查看是否安装成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h4 id="6-输入下面的命令初始化文件夹"><a href="#6-输入下面的命令初始化文件夹" class="headerlink" title="6.输入下面的命令初始化文件夹"></a>6.输入下面的命令初始化文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h4 id="7-输入下面的命令安装所需要的组件"><a href="#7-输入下面的命令安装所需要的组件" class="headerlink" title="7.输入下面的命令安装所需要的组件"></a>7.输入下面的命令安装所需要的组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="8-输入下面的命令首次体验hexo"><a href="#8-输入下面的命令首次体验hexo" class="headerlink" title="8.输入下面的命令首次体验hexo"></a>8.输入下面的命令首次体验hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="9-输入下面的命令开启服务器（若端口被占用则使用-hexo-server-p-端口号-）来改变端口号"><a href="#9-输入下面的命令开启服务器（若端口被占用则使用-hexo-server-p-端口号-）来改变端口号" class="headerlink" title="9.输入下面的命令开启服务器（若端口被占用则使用 hexo server -p 端口号 ）来改变端口号"></a>9.输入下面的命令开启服务器（若端口被占用则使用 <code>hexo server -p 端口号</code> ）来改变端口号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/images/如何使用github+hexo搭建一个博客/987D31AE-BF71-40A9-9E56-1D2D0550A217.png" alt="这里写图片描述"></p><h5 id="出现该页面则说明成功了"><a href="#出现该页面则说明成功了" class="headerlink" title="出现该页面则说明成功了"></a>出现该页面则说明成功了</h5><h4 id="10-将Hexo与github-page联系起来"><a href="#10-将Hexo与github-page联系起来" class="headerlink" title="10.将Hexo与github page联系起来"></a>10.将Hexo与github page联系起来</h4><h5 id="（1）配置Git个人信息-如果你之前已经配置好git个人信息，请跳过这一个步骤"><a href="#（1）配置Git个人信息-如果你之前已经配置好git个人信息，请跳过这一个步骤" class="headerlink" title="（1）配置Git个人信息(如果你之前已经配置好git个人信息，请跳过这一个步骤)"></a>（1）配置Git个人信息(如果你之前已经配置好git个人信息，请跳过这一个步骤)</h5><h5 id="a-设置Git的user-name和email：-如果是第一次的话）"><a href="#a-设置Git的user-name和email：-如果是第一次的话）" class="headerlink" title="a.设置Git的user name和email：(如果是第一次的话）"></a>a.设置Git的user name和email：(如果是第一次的话）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your_name&quot;</span><br><span class="line">git config --global user.email &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h6 id="b-生成密钥"><a href="#b-生成密钥" class="headerlink" title="b.生成密钥"></a>b.生成密钥</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h4 id="11-配置Deployment"><a href="#11-配置Deployment" class="headerlink" title="11.配置Deployment"></a>11.配置Deployment</h4><h5 id="在-config-yml文件中，找到Deployment，然后按照如下修改："><a href="#在-config-yml文件中，找到Deployment，然后按照如下修改：" class="headerlink" title="在_config.yml文件中，找到Deployment，然后按照如下修改："></a>在_config.yml文件中，找到Deployment，然后按照如下修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="二、写博客，发布文章"><a href="#二、写博客，发布文章" class="headerlink" title="二、写博客，发布文章"></a>二、写博客，发布文章</h3><h4 id="1-使用下面的命令新建一个博文（新建后在hexo-source-posts中将会看到你新建的-md后缀的文件）"><a href="#1-使用下面的命令新建一个博文（新建后在hexo-source-posts中将会看到你新建的-md后缀的文件）" class="headerlink" title="1.使用下面的命令新建一个博文（新建后在hexo\source\ _posts中将会看到你新建的.md后缀的文件）"></a>1.使用下面的命令新建一个博文（新建后在hexo\source\ _posts中将会看到你新建的.md后缀的文件）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;article title&quot;</span><br></pre></td></tr></table></figure><h4 id="2-使用markdown编辑器打开并进行编辑文章"><a href="#2-使用markdown编辑器打开并进行编辑文章" class="headerlink" title="2.使用markdown编辑器打开并进行编辑文章"></a>2.使用markdown编辑器打开并进行编辑文章</h4><h4 id="3-使用下面的命令进行生成和部署，成功后便可在https-yourName-github-io访问您的博文"><a href="#3-使用下面的命令进行生成和部署，成功后便可在https-yourName-github-io访问您的博文" class="headerlink" title="3.使用下面的命令进行生成和部署，成功后便可在https://yourName.github.io访问您的博文"></a>3.使用下面的命令进行生成和部署，成功后便可在<a href="https://yourName.github.io访问您的博文" target="_blank" rel="noopener">https://yourName.github.io访问您的博文</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   // 生成</span><br><span class="line">hexo d   // 部署</span><br></pre></td></tr></table></figure><h5 id="注：若提示-deloyer-not-found-git-则说明缺少一个扩展，运行-npm-install-save-hexo-deployer-git-命令即可解决"><a href="#注：若提示-deloyer-not-found-git-则说明缺少一个扩展，运行-npm-install-save-hexo-deployer-git-命令即可解决" class="headerlink" title="注：若提示 deloyer not found:git 则说明缺少一个扩展，运行 npm install --save hexo-deployer-git 命令即可解决"></a>注：若提示 <code>deloyer not found:git</code> 则说明缺少一个扩展，运行 <code>npm install --save hexo-deployer-git</code> 命令即可解决</h5><h3 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h3><p>hexo提供了许许多多的主题，我们可以轻松的修改一个自己喜欢的主题，具体方法如下：</p><h4 id="1-在-Hexo-中有两份主要的配置文件，其名称都是-config-yml。-其中，一份位于站点根目录下，主要包含-Hexo-本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。-为了描述方便，在以下说明中，将前者称为-站点配置文件，-后者称为-主题配置文件。在文件夹的themes中使用-git-clone-命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用"><a href="#1-在-Hexo-中有两份主要的配置文件，其名称都是-config-yml。-其中，一份位于站点根目录下，主要包含-Hexo-本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。-为了描述方便，在以下说明中，将前者称为-站点配置文件，-后者称为-主题配置文件。在文件夹的themes中使用-git-clone-命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用" class="headerlink" title="1.在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。在文件夹的themes中使用 git clone 命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用"></a>1.在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 <em>站点配置文件</em>， 后者称为 <em>主题配置文件</em>。在文件夹的themes中使用 <code>git clone</code> 命令下载自己喜欢的主题，如我们需要使用NexT主题，则可以使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site #进入你的hexo项目的根文件夹</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h4 id="2-启用主题-与所有-Hexo-主题启用的模式一样。-当-克隆-下载-完成后，打开-站点配置文件，-找到-theme-字段，并将其值更改为-next。-启用-NexT-主题"><a href="#2-启用主题-与所有-Hexo-主题启用的模式一样。-当-克隆-下载-完成后，打开-站点配置文件，-找到-theme-字段，并将其值更改为-next。-启用-NexT-主题" class="headerlink" title="2.启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题"></a>2.启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，检查站点是否正确运行。 当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。选择 Scheme Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line">Mist - Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">Pisces - 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面</span><br></pre></td></tr></table></figure><p>注释 # 即可。 选择 Pisce Scheme</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><h4 id="3-next主题的hexo博客个性化设置"><a href="#3-next主题的hexo博客个性化设置" class="headerlink" title="3.next主题的hexo博客个性化设置"></a>3.next主题的hexo博客个性化设置</h4><p>博客的可个性化设置较多，比如背景设置，博客头，作者，简介，以及插入一下第三方的插件等。在此我就不做赘述，最后我在当时部署时总结了这两个不错的博客教程<br><a href="https://segmentfault.com/a/1190000009009697#articleHeader15" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009009697#articleHeader15</a><br><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">https://blog.csdn.net/qq_33699981/article/details/72716951</a></p><h4 id="4-设置语言-编辑站点配置文件，-将-language-设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下："><a href="#4-设置语言-编辑站点配置文件，-将-language-设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：" class="headerlink" title="4.设置语言 编辑站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下："></a>4.<strong>设置语言</strong> 编辑站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">语言</th><th style="text-align:center">代码</th><th style="text-align:center">设定实例</th></tr></thead><tbody><tr><td style="text-align:center">English</td><td style="text-align:center">en</td><td style="text-align:center">language: en</td></tr><tr><td style="text-align:center">简体中文</td><td style="text-align:center">zh-Hans</td><td style="text-align:center">language:zh-Hans</td></tr><tr><td style="text-align:center">Français</td><td style="text-align:center">fr-FR</td><td style="text-align:center">language:fr-FR</td></tr><tr><td style="text-align:center">Português</td><td style="text-align:center">pt</td><td style="text-align:center">language:pt</td></tr><tr><td style="text-align:center">繁體中文</td><td style="text-align:center">zh-hk或者zh-tw</td><td style="text-align:center">language:zh-hk</td></tr><tr><td style="text-align:center">Русский язык</td><td style="text-align:center">ru</td><td style="text-align:center">language:ru</td></tr><tr><td style="text-align:center">Deutsch</td><td style="text-align:center">de</td><td style="text-align:center">language:de</td></tr><tr><td style="text-align:center">日本語</td><td style="text-align:center">ja</td><td style="text-align:center">language:ja</td></tr><tr><td style="text-align:center">Indonesian</td><td style="text-align:center">id</td><td style="text-align:center">language:id</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django集成邮件发送功能</title>
      <link href="/2018/03/16/Django%E9%9B%86%E6%88%90%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/03/16/Django%E9%9B%86%E6%88%90%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="Django集成邮件发送功能"><a href="#Django集成邮件发送功能" class="headerlink" title="Django集成邮件发送功能"></a>Django集成邮件发送功能</h3><p>由于之前的一些情况，为了防止有人用无效邮箱进行注册，所以这次在报名时添加了邮箱发送以及验证功能，用于验证邮箱是否有效，当然了，在强大的Django之下，集成邮件功能并不难，接下来我们看一下如何有效的在Django中集成邮件功能吧</p><hr><h4 id="1-创建项目-（这里我就不赘述了，之前专门谢了一篇文章用于记录如何创建一个新的Django项目，传送门）"><a href="#1-创建项目-（这里我就不赘述了，之前专门谢了一篇文章用于记录如何创建一个新的Django项目，传送门）" class="headerlink" title="1.创建项目 （这里我就不赘述了，之前专门谢了一篇文章用于记录如何创建一个新的Django项目，传送门）"></a>1.创建项目 （这里我就不赘述了，之前专门谢了一篇文章用于记录如何创建一个新的Django项目，<a href="http://suiwo.xyz/2018/02/10/Django%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/">传送门</a>）</h4><hr><h4 id="2-在settings-py中配置与邮件相关的配置"><a href="#2-在settings-py中配置与邮件相关的配置" class="headerlink" title="2.在settings.py中配置与邮件相关的配置"></a>2.在settings.py中配置与邮件相关的配置</h4><p>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_HOST = <span class="string">'smtp.qq.com'</span> <span class="comment">#邮箱服务商</span></span><br><span class="line">EMAIL_PORT = <span class="number">587</span> <span class="comment">#端口</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'user'</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'password'</span></span><br><span class="line">DEFAULT_FROM_EMAIL = <span class="string">'your Email Address'</span></span><br></pre></td></tr></table></figure></p><p>只需要上面短短几行，就ok了，是不是很简单</p><hr><h4 id="3-邮件发送相关函数"><a href="#3-邮件发送相关函数" class="headerlink" title="3.邮件发送相关函数"></a>3.邮件发送相关函数</h4><p>models.py中添加邮箱验证相关类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailVerifyRecord</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 验证码</span></span><br><span class="line">    code = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">u"验证码"</span>)</span><br><span class="line">    email = models.EmailField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"邮箱"</span>)</span><br><span class="line">    <span class="comment"># 包含注册验证和找回验证</span></span><br><span class="line">    send_time = models.DateTimeField(verbose_name=<span class="string">u"发送时间"</span>, default=datetime.now)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"邮箱验证码"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.email</span><br></pre></td></tr></table></figure></p><p>验证码随机数生成函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成随机字符串用来验证邮箱</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_str</span><span class="params">(randomlength=<span class="number">8</span>)</span>:</span></span><br><span class="line">    str = <span class="string">''</span></span><br><span class="line">    chars = <span class="string">'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789'</span></span><br><span class="line">    length = len(chars) - <span class="number">1</span></span><br><span class="line">    random = Random()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(randomlength):</span><br><span class="line">        str += chars[random.randint(<span class="number">0</span>, length)]</span><br><span class="line">    <span class="keyword">return</span> str</span><br></pre></td></tr></table></figure></p><p>邮箱发送函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendEmail</span><span class="params">(email)</span>:</span></span><br><span class="line">    email_record = EmailVerifyRecord()</span><br><span class="line">    <span class="comment"># 将给用户发的信息保存在数据库中</span></span><br><span class="line">    code = random_str(<span class="number">16</span>) <span class="comment">#这个是生成验证连接的函数</span></span><br><span class="line">    email_record.code = code</span><br><span class="line">    email_record.email = email</span><br><span class="line">    email_record.save()</span><br><span class="line">    <span class="comment"># 初始化为空</span></span><br><span class="line">    email_title = <span class="string">""</span></span><br><span class="line">    email_body = <span class="string">""</span></span><br><span class="line">    email_title = <span class="string">"注册激活链接"</span></span><br><span class="line">    email_body = <span class="string">" 同学你好，欢迎参加本次计算机基础知识大赛，"</span>+<span class="string">"请点击下面的链接激活你的账号:http://127.0.0.1:8000/users/active/&#123;0&#125;"</span>.format(code)</span><br><span class="line">    <span class="comment"># 发送邮件</span></span><br><span class="line">    send_status = send_mail(email_title, email_body, DEFAULT_FROM_EMAIL, [email])</span><br></pre></td></tr></table></figure></p><hr><h4 id="4-身份验证"><a href="#4-身份验证" class="headerlink" title="4.身份验证"></a>4.身份验证</h4><p>身份验证的url<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^active/(?P&lt;active_code&gt;.*)/$'</span>, views.user_active, name=<span class="string">"user_active"</span>),  <span class="comment"># 提取出active后的所有字符赋给active_code</span></span><br></pre></td></tr></table></figure></p><p>身份验证相关函数(通过url中传输的active_code，来判断是否验证成功)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_active</span><span class="params">(request,active_code)</span>:</span></span><br><span class="line">    print(<span class="string">"可以1"</span>)</span><br><span class="line">    all_records = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line">    <span class="keyword">if</span> all_records:</span><br><span class="line">        <span class="keyword">for</span> record <span class="keyword">in</span> all_records:</span><br><span class="line">            email = record.email</span><br><span class="line">            <span class="comment"># 通过邮箱查找到对应的用户</span></span><br><span class="line">            user = models.User.objects.get(email=email)</span><br><span class="line">            <span class="comment"># 激活用户</span></span><br><span class="line">            user.is_active = <span class="keyword">True</span></span><br><span class="line">            user.save()</span><br><span class="line">        print(<span class="string">"可以"</span>)</span><br><span class="line">    print(<span class="string">"不行"</span>)</span><br></pre></td></tr></table></figure></p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><blockquote><p>通过上面的四步就可以把邮箱功能加入到Django项目中，为用户注册，密码找回等功能提供了一个验证本人身份的好方式<br>项目代码链接在这里<a href="https://github.com/ZhangJia97/sacc_sign" target="_blank" rel="noopener">传送门</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在搭建报名系统时遇到的Django报错</title>
      <link href="/2018/03/13/%E5%9C%A8%E6%90%AD%E5%BB%BA%E6%8A%A5%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84Django%E6%8A%A5%E9%94%99/"/>
      <url>/2018/03/13/%E5%9C%A8%E6%90%AD%E5%BB%BA%E6%8A%A5%E5%90%8D%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84Django%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="报错1："><a href="#报错1：" class="headerlink" title="报错1："></a>报错1：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The view sign_up.views.new_user didn<span class="string">'t return an HttpResponse object. It returned None instead.</span></span><br></pre></td></tr></table></figure><h4 id="views-py代码"><a href="#views-py代码" class="headerlink" title="views.py代码"></a>views.py代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = UserInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = UserInfoForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">        context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'new_user.html'</span>,context)</span><br></pre></td></tr></table></figure><h4 id="models-py代码"><a href="#models-py代码" class="headerlink" title="models.py代码"></a>models.py代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User_info</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    student_id = models.CharField(max_length=<span class="number">9</span>)</span><br><span class="line">    college = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    date_added = models.DateField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><h4 id="new-user-html代码"><a href="#new-user-html代码" class="headerlink" title="new_user.html代码"></a>new_user.html代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'sign_up/index.html' %&#125;</span><br><span class="line">&#123;% block header %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>请填写信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'sign_up:new_user' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% form.as_p %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Add user<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>错误原因：当时报错时查询各种资料以及函数都没有解决。。。最后发现是由于views.py文件中的没有返回值，return错位导致。</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = UserInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = UserInfoForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'new_user.html'</span>,context)</span><br></pre></td></tr></table></figure><hr><h3 id="报错2："><a href="#报错2：" class="headerlink" title="报错2："></a>报错2：</h3><p><img src="/images/在搭建报名系统时遇到的django报错/C236720D-BD99-4C41-8985-E1BFFB559943.png" alt="这里写图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invalid block tag on line 8: 'form.as_p', expected 'endblock'. Did you forget to register or load this tag?</span><br></pre></td></tr></table></figure><p>错误原因：前端模版中form.as_p应该放在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125;</span><br><span class="line">```中，而不是`&#123;% %&#125;`中</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">### 报错3：</span><br><span class="line">![这里写图片描述](/images/在搭建报名系统时遇到的django报错/2B46DB12-FF96-4472-BB3D-4C5BFC6059C4.png)</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">no such table: sign_up_actor_info</span><br></pre></td></tr></table></figure></p><p>错误原因：应当使用<code>python manage.py makemigrations</code>以及<code>python manage.py migrate</code>来迁移数据库以及修改数据库即可</p><hr><h3 id="报错4："><a href="#报错4：" class="headerlink" title="报错4："></a>报错4：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Specifying a namespace <span class="keyword">in</span> include() without providing an app_name</span><br></pre></td></tr></table></figure><p>错误原因：python3 Django 环境下，如果你遇到namespace没有注册以及在根目录下urls.py中的include方法的第二个参数namespace添加之后就出错的问题。请在[app_name]目录下的urls.py中的urlpatterns前面加上app_name=’[app_name]’， [app_name]代表你的应用的名称。</p><hr><h3 id="报错5："><a href="#报错5：" class="headerlink" title="报错5："></a>报错5：</h3><p>错误原因：将根目录下的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^users/$&apos;,include(&apos;users.urls&apos;,namespace=&apos;users&apos;)),</span><br></pre></td></tr></table></figure></p><p>中的<code>$</code>删除</p><hr><h3 id="报错6："><a href="#报错6：" class="headerlink" title="报错6："></a>报错6：</h3><p><img src="/images/在搭建报名系统时遇到的django报错/BA75BDEF-0240-42E4-A688-72E4EB0ADD6F.png" alt="这里写图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_actor</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = ActorInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = ActorInfoForm(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            new_actor = form.save()</span><br><span class="line">            new_actor.owner = request.user</span><br><span class="line">            new_actor.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'sign_up/new_actor.html'</span>, context)</span><br></pre></td></tr></table></figure><p>错误原因：在第一次form.save时应该是用参数commit=False，使其不上传到数据库，因为后面还要对其信息进行添加</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_actor</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'POST'</span>:</span><br><span class="line">        form = ActorInfoForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = ActorInfoForm(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            new_actor = form.save(commit=<span class="keyword">False</span>) <span class="comment">#commit=False指不要提交到数据库</span></span><br><span class="line">            new_actor.owner = request.user</span><br><span class="line">            new_actor.save()</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:index'</span>))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'form'</span>:form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'sign_up/new_actor.html'</span>, context)</span><br></pre></td></tr></table></figure><hr><h3 id="报错7："><a href="#报错7：" class="headerlink" title="报错7："></a>报错7：</h3><p><img src="/images/在搭建报名系统时遇到的django报错/3846625E-4AFB-4CB8-92C4-5FB27D53126F.png" alt="这里写图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'QuerySet'</span> object has no attribute <span class="string">'owner'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.filter(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>,args=&#123;<span class="string">'actor_id'</span>:actor_id&#125;))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure><p>错误原因：应该使用get而不是filter</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.get(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>,args=[actor_id]))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure><hr><h3 id="报错8："><a href="#报错8：" class="headerlink" title="报错8："></a>报错8：</h3><p><img src="/images/在搭建报名系统时遇到的django报错/B9C6A242-D045-4DF3-983D-F1237B8D44CD.png" alt="这里写图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Reverse <span class="keyword">for</span> <span class="string">'actor'</span> <span class="keyword">with</span> no arguments <span class="keyword">not</span> found. <span class="number">1</span> pattern(s) tried: [<span class="string">'actors/(?P&lt;actor_id&gt;\\d+)/$'</span>]</span><br><span class="line">Request Method:POST</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.get(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>),args=[actor_id])</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure><p>错误原因：args为reverse函数的参数，而不是HttpResponseRedirect的参数</p><p>正确代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_actor</span><span class="params">(request,actor_id)</span>:</span></span><br><span class="line">    actor = Actor_info.objects.get(id=actor_id)</span><br><span class="line">    <span class="keyword">if</span> actor.owner != request.user:</span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        college = request.POST.get(<span class="string">'college'</span>)</span><br><span class="line">        student_id = request.POST.get(<span class="string">'student_id'</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        Actor_info.objects.filter(id=actor_id).update(</span><br><span class="line">            college=college,student_id=student_id,name=name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'sign_up:actor'</span>,args=[actor_id]))</span><br><span class="line"></span><br><span class="line">    context = &#123;<span class="string">'actor'</span>:actor&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'sign_up/edit_actor.html'</span>,context=context)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask使用ORM连接数据库</title>
      <link href="/2018/02/12/Flask%E4%BD%BF%E7%94%A8ORM%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/02/12/Flask%E4%BD%BF%E7%94%A8ORM%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>注：使用前请安装<code>flask_sqlalchemy</code>包，由于<code>python-mysql</code>不适用于python3.6，所以我们使用pymysql进行替代</p><hr><h1 id="1-flask的app文件中输入以下代码"><a href="#1-flask的app文件中输入以下代码" class="headerlink" title="1.flask的app文件中输入以下代码"></a>1.flask的app文件中输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(文件名为：learn_flask_mysql_orm.py)</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">"SQLALCHEMY_DATABASE_URI"</span>]=<span class="string">"mysql+pymysql://root:@127.0.0.1:3306/learn_flask_mysql"</span></span><br><span class="line"><span class="comment">#注：请勿忘记添加'+pymysql'，否则将会出现没有安装mysqldb的报错</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><hr><h1 id="2-在flask文件夹中新建一个models-py文件，并输入以下代码"><a href="#2-在flask文件夹中新建一个models-py文件，并输入以下代码" class="headerlink" title="2.在flask文件夹中新建一个models.py文件，并输入以下代码"></a>2.在flask文件夹中新建一个models.py文件，并输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> learn_flask_mysql_orm <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line">    user_id = db.Column(db.INT,primary_key=<span class="keyword">True</span>)</span><br><span class="line">    user_name = db.Column(db.TEXT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,user_id,user_name)</span>:</span></span><br><span class="line">        self.user_id = user_id</span><br><span class="line">        self.user_name = user_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id:&#123;&#125;    name:&#123;&#125;"</span>.format(self.user_id,self.user_name)</span><br></pre></td></tr></table></figure><hr><h1 id="3-在flask中新建一个manage-py文件，输入以下代码"><a href="#3-在flask中新建一个manage-py文件，输入以下代码" class="headerlink" title="3.在flask中新建一个manage.py文件，输入以下代码"></a>3.在flask中新建一个manage.py文件，输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> learn_flask_mysql_orm <span class="keyword">import</span> app,db</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">11</span>,<span class="string">'zhangjia11'</span>)</span><br><span class="line">    db.session.add(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query.all()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p>之后使用<code>python manage.py save</code>即可保存数据，使用<code>python manage.py qurey_all</code>即可查询数据</p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask连接MySQL数据库</title>
      <link href="/2018/02/12/Flask%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/02/12/Flask%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="在flask所在文件夹中新建一个models-py文件，输入以下代码"><a href="#在flask所在文件夹中新建一个models-py文件，输入以下代码" class="headerlink" title="在flask所在文件夹中新建一个models.py文件，输入以下代码"></a>在flask所在文件夹中新建一个models.py文件，输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line">    host = <span class="string">"127.0.0.1"</span></span><br><span class="line">    port = <span class="number">3306</span>     <span class="comment">#注：此处应该使用数字而不是字符串</span></span><br><span class="line">    db = <span class="string">'learn_flask_mysql'</span></span><br><span class="line">    user = <span class="string">'root'</span></span><br><span class="line">    password = <span class="string">''</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=host,</span><br><span class="line">        user=user,</span><br><span class="line">        password=password,</span><br><span class="line">        port=port,</span><br><span class="line">        db=db,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,user_id,user_name)</span>:</span></span><br><span class="line">        self.user_id = user_id</span><br><span class="line">        self.user_name = user_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn = get_conn()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql = <span class="string">"INSERT INTO user(user_id, user_name) VALUES (%s,%s)"</span></span><br><span class="line">        cursor.execute(sql,(self.user_id,self.user_name))</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">        conn = get_conn()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql = <span class="string">"SELECT * from user"</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        rows = cursor.fetchall()</span><br><span class="line">        users = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            user = User(row[<span class="number">0</span>],row[<span class="number">1</span>])</span><br><span class="line">            users.append(user)</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> users</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id:&#123;&#125;  name:&#123;&#125;"</span>.format(self.user_id,self.user_name)</span><br></pre></td></tr></table></figure><h1 id="2-在flask新建文件夹中新建一个manage-py，并输入以下代码"><a href="#2-在flask新建文件夹中新建一个manage-py，并输入以下代码" class="headerlink" title="2.在flask新建文件夹中新建一个manage.py，并输入以下代码"></a>2.在flask新建文件夹中新建一个manage.py，并输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_mysql <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'csdn'</span>)</span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query_all()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p>之后使用<code>python manage.py save</code>即可保存数据，使用<code>python manage.py qurey_all</code>即可查询数据</p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask扩展Flask-Script文档中文翻译</title>
      <link href="/2018/02/12/Flask%E6%89%A9%E5%B1%95Flask-Script%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/"/>
      <url>/2018/02/12/Flask%E6%89%A9%E5%B1%95Flask-Script%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>本文转载自<a href="https://my.oschina.net/lijsf/blog/158828" target="_blank" rel="noopener">https://my.oschina.net/lijsf/blog/158828</a></p><hr><hr><h1 id="Flask扩展flask-script文档中文翻译"><a href="#Flask扩展flask-script文档中文翻译" class="headerlink" title="Flask扩展flask-script文档中文翻译"></a>Flask扩展flask-script文档中文翻译</h1><hr><h5 id="Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的-Python-shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。"><a href="#Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的-Python-shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。" class="headerlink" title="Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的 Python shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。"></a>Flask-Script扩展提供向Flask插入外部脚本的功能。包括运行一个开发用的服务器，一个定制的 Python shell，设置数据库的脚本，cronjobs，以及其他的运行在web应用之外的命令行任务。</h5><h5 id="Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。"><a href="#Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。" class="headerlink" title="Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。"></a>Flask-Script和Flask本身的工作方式类似。只需要定义和添加能从命令行中被Manager实例调用的命令即可。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># manage.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><h5 id="只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们："><a href="#只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们：" class="headerlink" title="只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们："></a>只要像上面一样定义你自己的命令脚本，就可以在命令行中如下调用他们：</h5><blockquote><p>python manage.py hello</p></blockquote><p>Flask-Script的源代码和bug追踪见 <a href="https://github.com/smurfix/flask-script" target="_blank" rel="noopener">GitHub</a></p><hr><hr><h1 id="安装Flask-Script"><a href="#安装Flask-Script" class="headerlink" title="安装Flask-Script"></a>安装Flask-Script</h1><hr><h5 id="可以使用pip或者easy-install安装："><a href="#可以使用pip或者easy-install安装：" class="headerlink" title="可以使用pip或者easy_install安装："></a>可以使用pip或者easy_install安装：</h5><blockquote><p>pip install Flask-Script</p></blockquote><h5 id="或者下载最新开发版本："><a href="#或者下载最新开发版本：" class="headerlink" title="或者下载最新开发版本："></a>或者下载最新开发版本：</h5><blockquote><p>git clone <a href="https://github.com/techniq/flask-script.git" target="_blank" rel="noopener">https://github.com/techniq/flask-script.git</a><br>cd flask-script<br>python setup.py develop</p></blockquote><h5 id="如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下"><a href="#如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下" class="headerlink" title="如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下"></a>如果你使用virtualenv，需保证把Flask-Script和你的Flask应用安装在同一virtualenv环境下</h5><hr><hr><h1 id="创建并且运行命令"><a href="#创建并且运行命令" class="headerlink" title="创建并且运行命令"></a>创建并且运行命令</h1><hr><h5 id="首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage-py。"><a href="#首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage-py。" class="headerlink" title="首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage.py。"></a>首先，创建一个Python模块运行你的命令脚本。可以任意起名，例如manage.py。</h5><h5 id="无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。"><a href="#无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。" class="headerlink" title="无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。"></a>无需把所有的命令都放在同一个文件里，例如，在一个大型项目中，可以把相关联的命令放在不同的文件里。</h5><h5 id="在你的manage-py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行-情况"><a href="#在你的manage-py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行-情况" class="headerlink" title="在你的manage.py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行 情况:"></a>在你的manage.py文件中，必须有一个Manager实例。Manager类将追踪所有的在命令行中调用的命令和处理过程的调用运行 情况:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># configure your app</span></span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><h5 id="调用-manager-run-将启动Manger实例接收命令行中的命令。"><a href="#调用-manager-run-将启动Manger实例接收命令行中的命令。" class="headerlink" title="调用 manager.run()将启动Manger实例接收命令行中的命令。"></a>调用 manager.run()将启动Manger实例接收命令行中的命令。</h5><h5 id="Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。"><a href="#Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。" class="headerlink" title="Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。"></a>Manager只有一个参数：一个Flask实例。如果你想用工场模式，那也可以是一个函数或者其他的返回Flask实例的玩意儿。</h5><h5 id="其次，创建并且加入命令。有三种方法可创建命令："><a href="#其次，创建并且加入命令。有三种方法可创建命令：" class="headerlink" title="其次，创建并且加入命令。有三种方法可创建命令："></a>其次，创建并且加入命令。有三种方法可创建命令：</h5><h5 id="创建Command的子类"><a href="#创建Command的子类" class="headerlink" title="创建Command的子类"></a>创建Command的子类</h5><h5 id="使用-command-修饰符"><a href="#使用-command-修饰符" class="headerlink" title="使用 @command 修饰符"></a>使用 @command 修饰符</h5><h5 id="使用-option-修饰符"><a href="#使用-option-修饰符" class="headerlink" title="使用 @option 修饰符"></a>使用 @option 修饰符</h5><h5 id="下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello-word”。"><a href="#下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello-word”。" class="headerlink" title="下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello word”。"></a>下面是一个简单的例子，创建一个Hello命令，该命令只是简单的输出“hello word”。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Command</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(Command)</span>:</span></span><br><span class="line">    <span class="string">"prints hello world"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><h5 id="再把上面创建的Hello命令加入Manager实例："><a href="#再把上面创建的Hello命令加入Manager实例：" class="headerlink" title="再把上面创建的Hello命令加入Manager实例："></a>再把上面创建的Hello命令加入Manager实例：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.add_command(<span class="string">'hello'</span>, Hello())</span><br></pre></td></tr></table></figure><h5 id="很明显，上面的语句需要在manager-run-之前运行。现在执行下面的命令："><a href="#很明显，上面的语句需要在manager-run-之前运行。现在执行下面的命令：" class="headerlink" title="很明显，上面的语句需要在manager.run()之前运行。现在执行下面的命令："></a>很明显，上面的语句需要在manager.run()之前运行。现在执行下面的命令：</h5><blockquote><p>python manage.py hello<br>hello world</p></blockquote><h5 id="也可传给Command实例的run方法一个字典："><a href="#也可传给Command实例的run方法一个字典：" class="headerlink" title="也可传给Command实例的run方法一个字典："></a>也可传给Command实例的run方法一个字典：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.run(&#123;<span class="string">'hello'</span> : Hello()&#125;)</span><br></pre></td></tr></table></figure><h5 id="Command-class-必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。"><a href="#Command-class-必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。" class="headerlink" title="Command class 必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。"></a>Command class 必须定义一个run方法。定义的位置和参数依赖于你的定义的命令的参数。详见下文。</h5><h5 id="运行下面的命令获取可以使用的命令及其描述的列表："><a href="#运行下面的命令获取可以使用的命令及其描述的列表：" class="headerlink" title="运行下面的命令获取可以使用的命令及其描述的列表："></a>运行下面的命令获取可以使用的命令及其描述的列表：</h5><blockquote><p>python manage.py</p></blockquote><h5 id="通过运行下面的命令获取一个特定命令的帮助-这将输出这个命令的docstring。"><a href="#通过运行下面的命令获取一个特定命令的帮助-这将输出这个命令的docstring。" class="headerlink" title="通过运行下面的命令获取一个特定命令的帮助,这将输出这个命令的docstring。"></a>通过运行下面的命令获取一个特定命令的帮助,这将输出这个命令的docstring。</h5><blockquote><p>python manage.py runserver -h</p></blockquote><h5 id="上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的-command修饰符。"><a href="#上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的-command修饰符。" class="headerlink" title="上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的@command修饰符。"></a>上面的第一种方法是最适用的，但也是最麻烦的。对于简单的命令，只需要使用Command实例的@command修饰符。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"Just say hello"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><h5 id="这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。"><a href="#这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。" class="headerlink" title="这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。"></a>这种方法创建的命令的运行方式和Command类创建的运行方式是相同的。</h5><blockquote><p>python manage.py hello<br>hello</p></blockquote><h5 id="如果用Comman类来实现，下面的命令将输出manage类的docstring："><a href="#如果用Comman类来实现，下面的命令将输出manage类的docstring：" class="headerlink" title="如果用Comman类来实现，下面的命令将输出manage类的docstring："></a>如果用Comman类来实现，下面的命令将输出manage类的docstring：</h5><blockquote><p>python manage.py -h<br>Just say hello</p></blockquote><h5 id="最后，-option修饰符适用于更精细的命令行控制："><a href="#最后，-option修饰符适用于更精细的命令行控制：" class="headerlink" title="最后，@option修饰符适用于更精细的命令行控制："></a>最后，@option修饰符适用于更精细的命令行控制：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.option('-n', '--name', help='Your name')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br></pre></td></tr></table></figure><h5 id="后面会有更详细的对-option的介绍。"><a href="#后面会有更详细的对-option的介绍。" class="headerlink" title="后面会有更详细的对@option的介绍。"></a>后面会有更详细的对@option的介绍。</h5><hr><hr><h1 id="增加命令行参数"><a href="#增加命令行参数" class="headerlink" title="增加命令行参数"></a>增加命令行参数</h1><hr><p>#####大多数命令都带有参数。还是上面的例子，如果不仅仅是打印”hello world”，还想输出一个额外的名字，如：</p><blockquote><p>python manage.py hello –name=Joe<br>hello Joe</p></blockquote><h5 id="或者短参数："><a href="#或者短参数：" class="headerlink" title="或者短参数："></a>或者短参数：</h5><blockquote><p>python manage.py hello -n Joe</p></blockquote><h5 id="为实现这一功能，需要使用Command类的option-list属性。"><a href="#为实现这一功能，需要使用Command类的option-list属性。" class="headerlink" title="为实现这一功能，需要使用Command类的option_list属性。"></a>为实现这一功能，需要使用Command类的option_list属性。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Command, Manager, Option</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(Command)</span>:</span></span><br><span class="line"></span><br><span class="line">    option_list = (</span><br><span class="line">        Option(<span class="string">'--name'</span>, <span class="string">'-n'</span>, dest=<span class="string">'name'</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello %s"</span> % name</span><br></pre></td></tr></table></figure><h5 id="长参数和短参数都是存储在Option实例中。详见API部分。"><a href="#长参数和短参数都是存储在Option实例中。详见API部分。" class="headerlink" title="长参数和短参数都是存储在Option实例中。详见API部分。"></a>长参数和短参数都是存储在Option实例中。详见API部分。</h5><h5 id="另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。"><a href="#另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。" class="headerlink" title="另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。"></a>另一种方法是为你的Command类定义一个get——options方法，这将在希望依赖运行实例返回值来得到参数时非常有效。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(Command)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, default_name=<span class="string">'Joe'</span>)</span>:</span></span><br><span class="line">        self.default_name=default_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_options</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            Option(<span class="string">'-n'</span>, <span class="string">'--name'</span>, dest=<span class="string">'name'</span>, default=self.default_name),</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello"</span>,  name</span><br></pre></td></tr></table></figure><h5 id="若使用-command修饰符，参数将直接自动的从函数的参数中获取："><a href="#若使用-command修饰符，参数将直接自动的从函数的参数中获取：" class="headerlink" title="若使用@command修饰符，参数将直接自动的从函数的参数中获取："></a>若使用@command修饰符，参数将直接自动的从函数的参数中获取：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">&gt; python manage.py hello Joe</span><br><span class="line">&gt; hello Joe</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 或者使用可选参数：</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=<span class="string">"Fred"</span>)</span></span></span><br><span class="line">print hello, name</span><br></pre></td></tr></table></figure><h5 id="调用方法如下："><a href="#调用方法如下：" class="headerlink" title="调用方法如下："></a>调用方法如下：</h5><blockquote><p>python manage.py hello –name=Joe<br>hello Joe</p></blockquote><h5 id="或者："><a href="#或者：" class="headerlink" title="或者："></a>或者：</h5><blockquote><p>python manage.py hello -n Joe<br>hello Joe</p></blockquote><h5 id="这里需要注意："><a href="#这里需要注意：" class="headerlink" title="这里需要注意："></a>这里需要注意：</h5><h5 id="n-是由参数的第一个字母决定的。所以”name”-gt-“-n”"><a href="#n-是由参数的第一个字母决定的。所以”name”-gt-“-n”" class="headerlink" title="-n 是由参数的第一个字母决定的。所以”name” &gt; “-n”"></a>-n 是由参数的第一个字母决定的。所以”name” &gt; “-n”</h5><h5 id="其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。"><a href="#其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。" class="headerlink" title="其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。"></a>其次，-h选项通常输出命令的帮助文档，所以避免使用h开头的参数。</h5><h5 id="同时，需要注意选项参数是boolean值，例如："><a href="#同时，需要注意选项参数是boolean值，例如：" class="headerlink" title="同时，需要注意选项参数是boolean值，例如："></a>同时，需要注意选项参数是boolean值，例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manage.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(verified=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Checks if verified</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"VERIFIED?"</span>, <span class="string">"YES"</span> <span class="keyword">if</span> verified <span class="keyword">else</span> <span class="string">"NO"</span></span><br></pre></td></tr></table></figure><h5 id="只能这样调用："><a href="#只能这样调用：" class="headerlink" title="只能这样调用："></a>只能这样调用：</h5><blockquote><p>python manage.py verify<br>VERIFIED? NO</p></blockquote><blockquote><p>python manage.py verify -v<br>VERIFIED? YES</p></blockquote><blockquote><p>python manage.py verify –verified<br>VERIFIED? YES</p></blockquote><h5 id="command修饰符随便简单好用，但在复杂情况下，-option是更好的选择："><a href="#command修饰符随便简单好用，但在复杂情况下，-option是更好的选择：" class="headerlink" title="@command修饰符随便简单好用，但在复杂情况下，@option是更好的选择："></a>@command修饰符随便简单好用，但在复杂情况下，@option是更好的选择：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.option('-n', '--name', dest='name', default='joe')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br><span class="line">```    </span><br><span class="line"><span class="comment">##### 可以增加更多的选项参数：</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">@manager.option('-n', '--name', dest='name', default='joe')</span></span><br><span class="line"><span class="meta">@manager.option('-u', '--url', dest='url', default=None)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name, url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello"</span>, name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello"</span>, name, <span class="string">"from"</span>, url</span><br></pre></td></tr></table></figure><h5 id="可以这样调用："><a href="#可以这样调用：" class="headerlink" title="可以这样调用："></a>可以这样调用：</h5><blockquote><p>python manage.py hello -n Joe -u reddit.com hello Joe from reddit.com</p></blockquote><h5 id="或者：-1"><a href="#或者：-1" class="headerlink" title="或者："></a>或者：</h5><blockquote><p>python manage.py hello –name=Joe –url=reddit.com<br>hello Joe from reddit.com</p></blockquote><hr><hr><h1 id="向manager加入配置项"><a href="#向manager加入配置项" class="headerlink" title="向manager加入配置项"></a>向manager加入配置项</h1><hr><h5 id="配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标-志来为你的应用设置配置文件。例如："><a href="#配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标-志来为你的应用设置配置文件。例如：" class="headerlink" title="配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标 志来为你的应用设置配置文件。例如："></a>配置项也可以传给Manager实例。这是你可以设置传给Flask应用的配置项以便一条命令即可完成。例如，你可以使用一个标 志来为你的应用设置配置文件。例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">(config=None)</span>:</span></span><br><span class="line"></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    <span class="keyword">if</span> config <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        app.config.from_pyfile(config)</span><br><span class="line">    <span class="comment"># configure your app...</span></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><h5 id="可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。"><a href="#可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。" class="headerlink" title="可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。"></a>可以使用命令行定义配置文件参数，例如使用一条命令设置数据库，可以根据生产环境和开发环境选用不同的配置文件。</h5><h5 id="为实现传配置参数，可以使用add-option-方法，这和Option的参数一样。"><a href="#为实现传配置参数，可以使用add-option-方法，这和Option的参数一样。" class="headerlink" title="为实现传配置参数，可以使用add_option()方法，这和Option的参数一样。"></a>为实现传配置参数，可以使用add_option()方法，这和Option的参数一样。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.add_option(&apos;-c&apos;, &apos;--config&apos;, dest=&apos;config&apos;, required=False)</span><br></pre></td></tr></table></figure><h5 id="同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager-run-之前执行。"><a href="#同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager-run-之前执行。" class="headerlink" title="同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager.run()之前执行。"></a>同其他Flask-Script配置一样，可以在任何地方使用上面的语句，但确保在manager.run()之前执行。</h5><h5 id="假设你有下面的命令："><a href="#假设你有下面的命令：" class="headerlink" title="假设你有下面的命令："></a>假设你有下面的命令：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    uppercase = app.config.get(<span class="string">'USE_UPPERCASE'</span>, <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> uppercase:</span><br><span class="line">        name = name.upper()</span><br><span class="line">    <span class="keyword">print</span> hello, name</span><br></pre></td></tr></table></figure><blockquote><p>python manage.py hello joe -c dev.cfg<br>hello JOE</p></blockquote><h5 id="注意，”config“选项并没有传给上面的hello命令。"><a href="#注意，”config“选项并没有传给上面的hello命令。" class="headerlink" title="注意，”config“选项并没有传给上面的hello命令。"></a>注意，”config“选项并没有传给上面的hello命令。</h5><h5 id="为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示-例。"><a href="#为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示-例。" class="headerlink" title="为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示 例。"></a>为保证manage的选项能正常工作，需要传一个工厂函数给Manager的构造器，而不是一个Flask实例。上面既是可以简单的示 例。</h5><hr><hr><h1 id="获取用户输入"><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h1><hr><h5 id="Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如："><a href="#Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如：" class="headerlink" title="Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如："></a>Flask-Script拥有一组helper函数来获取用户在命令行中的输入，例如：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager, prompt_bool</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropdb</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> prompt_bool(</span><br><span class="line">        <span class="string">"Are you sure you want to lose all your data"</span>):</span><br><span class="line">        db.drop_all()</span><br></pre></td></tr></table></figure><h5 id="执行如下："><a href="#执行如下：" class="headerlink" title="执行如下："></a>执行如下：</h5><blockquote><p>python manage.py dropdb<br>Are you sure you want to lose all your data ? [N]</p></blockquote><p>#####从下文API中获取更多关于prompt functions的内容。</p><hr><hr><h1 id="默认命令"><a href="#默认命令" class="headerlink" title="默认命令"></a>默认命令</h1><hr><h5 id="Flask-Script拥有一对预设的命令，你可以加入或者定制：Server-and-Shell。"><a href="#Flask-Script拥有一对预设的命令，你可以加入或者定制：Server-and-Shell。" class="headerlink" title="Flask-Script拥有一对预设的命令，你可以加入或者定制：Server and Shell。"></a>Flask-Script拥有一对预设的命令，你可以加入或者定制：Server and Shell。</h5><h5 id="Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。"><a href="#Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。" class="headerlink" title="Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。"></a>Server命令运行Flask的开发server，它带有一个可选的端口参数，默认是5000。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Server, Manager</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> create_app</span><br><span class="line"></span><br><span class="line">manager = Manager(create_app)</span><br><span class="line">manager.add_command(<span class="string">"runserver"</span>, Server())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><h5 id="运行如下："><a href="#运行如下：" class="headerlink" title="运行如下："></a>运行如下：</h5><blockquote><p>python manage.py runserver</p></blockquote><h5 id="Server命令有一组命令行参数，运行python-manage-py-runserver-h-获取详细信息。你也可以在构造函数中重新定义默认-行为："><a href="#Server命令有一组命令行参数，运行python-manage-py-runserver-h-获取详细信息。你也可以在构造函数中重新定义默认-行为：" class="headerlink" title="Server命令有一组命令行参数，运行python manage.py runserver -h 获取详细信息。你也可以在构造函数中重新定义默认 行为："></a>Server命令有一组命令行参数，运行python manage.py runserver -h 获取详细信息。你也可以在构造函数中重新定义默认 行为：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server = Server(host=&quot;0.0.0.0&quot;, port=9000)</span><br></pre></td></tr></table></figure><h5 id="无需赘言，开发Server不是为生产环境准备的。"><a href="#无需赘言，开发Server不是为生产环境准备的。" class="headerlink" title="无需赘言，开发Server不是为生产环境准备的。"></a>无需赘言，开发Server不是为生产环境准备的。</h5><h5 id="Shell名令启动一个Python-shell。可以穿进去一个make-context参数，这个参数必须是一个字典。默认情况下，将返回你的-Flask应用实例。"><a href="#Shell名令启动一个Python-shell。可以穿进去一个make-context参数，这个参数必须是一个字典。默认情况下，将返回你的-Flask应用实例。" class="headerlink" title="Shell名令启动一个Python shell。可以穿进去一个make_context参数，这个参数必须是一个字典。默认情况下，将返回你的 Flask应用实例。"></a>Shell名令启动一个Python shell。可以穿进去一个make_context参数，这个参数必须是一个字典。默认情况下，将返回你的 Flask应用实例。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Shell, Manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_make_context</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> dict(app=app, db=db, models=models)</span><br><span class="line"></span><br><span class="line">manager = Manager(create_app)</span><br><span class="line">manager.add_command(<span class="string">"shell"</span>, Shell(make_context=_make_context))</span><br></pre></td></tr></table></figure><h5 id="这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。"><a href="#这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。" class="headerlink" title="这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。"></a>这将对于你希望在shell引入一组默认的包非常有利，无需再输入很多import语句。</h5><h5 id="Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python-shell。你可以用两种方法关闭这一-行为：传use-ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。"><a href="#Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python-shell。你可以用两种方法关闭这一-行为：传use-ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。" class="headerlink" title="Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python shell。你可以用两种方法关闭这一 行为：传use_ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。"></a>Shell命令将使用IPthon，如果安装了的话。否则，默认使用标准Python shell。你可以用两种方法关闭这一 行为：传use_ipython参数给Shell构造器，或者在命令行中传标记–no-ipython。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell = Shell(use_ipython=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h5 id="也有一个shell修饰符，你可以在函数上下文中使用。"><a href="#也有一个shell修饰符，你可以在函数上下文中使用。" class="headerlink" title="也有一个shell修饰符，你可以在函数上下文中使用。"></a>也有一个shell修饰符，你可以在函数上下文中使用。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.shell</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_shell_context</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> dict(app=app, db=db, models=models)</span><br></pre></td></tr></table></figure><h5 id="这将使这个命令成为shell的默认执行的命令。"><a href="#这将使这个命令成为shell的默认执行的命令。" class="headerlink" title="这将使这个命令成为shell的默认执行的命令。"></a>这将使这个命令成为shell的默认执行的命令。</h5><blockquote><p>python manage.py shell</p></blockquote><h5 id="默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写-add-command-或者修饰符。若你传给Manager的构造器一个with-default-commands-False参数，则这些命令不会被载入。"><a href="#默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写-add-command-或者修饰符。若你传给Manager的构造器一个with-default-commands-False参数，则这些命令不会被载入。" class="headerlink" title="默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写 add_command()或者修饰符。若你传给Manager的构造器一个with_default_commands=False参数，则这些命令不会被载入。"></a>默认命令shell和runserver是默认引入的，并且带有这两个命令的默认选项。若你想用其他命令替代默认的命令，只要重写 add_command()或者修饰符。若你传给Manager的构造器一个with_default_commands=False参数，则这些命令不会被载入。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager = Manager(app, with_default_commands=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask的外部脚本的使用</title>
      <link href="/2018/02/12/Flask%E7%9A%84%E5%A4%96%E9%83%A8%E8%84%9A%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/02/12/Flask%E7%9A%84%E5%A4%96%E9%83%A8%E8%84%9A%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码"><a href="#1-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码" class="headerlink" title="1.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码"></a>1.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><hr><p>在终端中使用<code>python manage.py hello</code>即可运行该脚本<br><img src="/images/flask的外部脚本的使用/0C71170F-1BEA-4977-B4A9-401B85C69117.png" alt="这里写图片描述"></p><h1 id="2-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码"><a href="#2-在flask文件夹中新建一个manage-py文件，在文件中输入以下代码" class="headerlink" title="2.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码"></a>2.在flask文件夹中新建一个manage.py文件，在文件中输入以下代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option('-m','--msg',dest='msg_val',default='world')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(msg_val)</span>:</span></span><br><span class="line">    print(<span class="string">'hello '</span>+msg_val)</span><br></pre></td></tr></table></figure><p>在终端中使用<code>python manage.py hello -m csdn</code>或者<code>python manage.py hello --msg_val=csdn</code>即可运行该脚本<br>运行结果为<code>hello csdn</code></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask连接SQLite3数据库</title>
      <link href="/2018/02/12/Flask%E8%BF%9E%E6%8E%A5SQLite3%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/02/12/Flask%E8%BF%9E%E6%8E%A5SQLite3%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1-在flask文件夹中新建一个models-py文件用来定义模型，内部代码如下"><a href="#1-在flask文件夹中新建一个models-py文件用来定义模型，内部代码如下" class="headerlink" title="1.在flask文件夹中新建一个models.py文件用来定义模型，内部代码如下"></a>1.在flask文件夹中新建一个models.py文件用来定义模型，内部代码如下</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3 <span class="comment">#导入sqlite3包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#定义该函数用来连接数据库</span></span><br><span class="line">    <span class="keyword">return</span> sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,id,name)</span>:</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        sql = <span class="string">"insert into user VALUES (?,?)"</span><span class="comment">#sql语句</span></span><br><span class="line">        conn = get_conn()<span class="comment">#连接数据库</span></span><br><span class="line">        cursor = conn.cursor()<span class="comment">#定义一个游标</span></span><br><span class="line">        cursor.execute(sql,(self.id,self.name))<span class="comment">#执行sql语句</span></span><br><span class="line">        conn.commit()<span class="comment">#提交数据库改动</span></span><br><span class="line">        cursor.close()<span class="comment">#关闭游标</span></span><br><span class="line">        conn.close()<span class="comment">#关闭数据库连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    staticmethod相当于一个定义在类里面的函数，所以如果一个方法既不跟实例</span></span><br><span class="line"><span class="string">    相关也不跟特定的类相关，推荐将其定义为一个staticmethod，这样不仅使代</span></span><br><span class="line"><span class="string">    码一目了然，而且似的利于维护代码。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">()</span>:</span></span><br><span class="line">        sql = <span class="string">"select * from user"</span></span><br><span class="line">        conn = get_conn()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        rows = cursor.execute(sql)</span><br><span class="line">        users = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            user = User(row[<span class="number">0</span>],row[<span class="number">1</span>])</span><br><span class="line">            users.append(user)</span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> users</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'id:&#123;&#125;--name:&#123;&#125;'</span>.format(self.id,self.name)<span class="comment">#注此处的是点不是逗号</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="2-在flask文件夹中新建一个manage-py文件"><a href="#2-在flask文件夹中新建一个manage-py文件" class="headerlink" title="2.在flask文件夹中新建一个manage.py文件"></a>2.在flask文件夹中新建一个manage.py文件</h1><hr><p>###（1）导入flask_script包，导入sqlite3包，导入models.py中定义的模型，导入flask中的应用，所以最终头部代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br></pre></td></tr></table></figure></p><hr><p>###（2）创建数据库，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    sql = <span class="string">"create table user (id INT,name TEXT)"</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure></p><hr><p>###（3）保存数据，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'csdn'</span>)</span><br><span class="line">    user.save()</span><br></pre></td></tr></table></figure></p><hr><p>###（4）查询数据，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br></pre></td></tr></table></figure></p><hr><h3 id="整体代码如下"><a href="#整体代码如下" class="headerlink" title="整体代码如下"></a>整体代码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> learn_flask_script <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    sql = <span class="string">"create table user (id INT,name TEXT)"</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">'zhangjia'</span>)</span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_all</span><span class="params">()</span>:</span></span><br><span class="line">    users = User.query()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        print(user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><hr><hr><h1 id="3-在终端中使用命令即可运行数据库的创建，添加以及查询"><a href="#3-在终端中使用命令即可运行数据库的创建，添加以及查询" class="headerlink" title="3.在终端中使用命令即可运行数据库的创建，添加以及查询"></a>3.在终端中使用命令即可运行数据库的创建，添加以及查询</h1>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask路由，消息提醒，以及异常处理</title>
      <link href="/2018/02/11/Flask%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%B6%88%E6%81%AF%E6%8F%90%E9%86%92%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2018/02/11/Flask%E8%B7%AF%E7%94%B1%EF%BC%8C%E6%B6%88%E6%81%AF%E6%8F%90%E9%86%92%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建一个小的flask应用"><a href="#1-创建一个小的flask应用" class="headerlink" title="1.创建一个小的flask应用"></a>1.创建一个小的flask应用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">（文件名为app.py）</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>上述代码便是一个最简单的flask应用，使用<code>python app.py</code>即可运行，命令行运行情况如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python app.py</span><br><span class="line"> * Running on http://127.0.0.1:5000/</span><br></pre></td></tr></table></figure></p><hr><hr><h1 id="2-flask的路由"><a href="#2-flask的路由" class="headerlink" title="2.flask的路由"></a>2.flask的路由</h1><hr><p>###（1）下面的代码表示在<a href="http://127.0.0.1:5000/hello路径下可以在网页中看到返回值`hello`" target="_blank" rel="noopener">http://127.0.0.1:5000/hello路径下可以在网页中看到返回值`hello`</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure></p><hr><p>###（2）下面的代码表示可以在获取路由中的值，如在路径中输入路径<a href="http://127.0.0.1:5000/hello/123，页面中将会显示返回值`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello/123，页面中将会显示返回值`hello</a> 123`<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello/&lt;id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+id)</span><br></pre></td></tr></table></figure></p><hr><p>###（3）下面的代码同样可以获取路由中的值，如在路径中输入<a href="http://127.0.0.1:5000/hello?id=123，页面将会显示返回值`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello?id=123，页面将会显示返回值`hello</a> 123`<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    id = request.args.get(<span class="string">'id'</span>)</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+id)</span><br></pre></td></tr></table></figure></p><hr><hr><h1 id="3-flask反向路由"><a href="#3-flask反向路由" class="headerlink" title="3.flask反向路由"></a>3.flask反向路由</h1><hr><h4 id="第二个函数将会通过url-for函数来获取函数名为hello的函数的路由，即在路径中输入http-127-0-0-1-5000-hello-url，网页将会显示-hello-hello"><a href="#第二个函数将会通过url-for函数来获取函数名为hello的函数的路由，即在路径中输入http-127-0-0-1-5000-hello-url，网页将会显示-hello-hello" class="headerlink" title="第二个函数将会通过url_for函数来获取函数名为hello的函数的路由，即在路径中输入http://127.0.0.1:5000/hello_url，网页将会显示`hello /hello`"></a>第二个函数将会通过url_for函数来获取函数名为hello的函数的路由，即在路径中输入<a href="http://127.0.0.1:5000/hello_url，网页将会显示`hello" target="_blank" rel="noopener">http://127.0.0.1:5000/hello_url，网页将会显示`hello</a> /hello`</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#反向路由</span></span><br><span class="line"><span class="meta">@app.route('/hello_url')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"hello "</span>+url_for(<span class="string">'hello'</span>))</span><br></pre></td></tr></table></figure><hr><hr><h1 id="4-前后端数据传输"><a href="#4-前后端数据传输" class="headerlink" title="4.前后端数据传输"></a>4.前后端数据传输</h1><hr><p>###（1）后端向前端传输数据</p><h4 id="下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可看到页面返回了"><a href="#下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可看到页面返回了" class="headerlink" title="下面的代码最后在在路径中输入http://127.0.0.1:5000/hello即可看到页面返回了"></a>下面的代码最后在在路径中输入<a href="http://127.0.0.1:5000/hello即可看到页面返回了" target="_blank" rel="noopener">http://127.0.0.1:5000/hello即可看到页面返回了</a></h4><p><code>hello csdn</code><br><code>hello 1</code></p><h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(<span class="number">1</span>,<span class="string">"csdn"</span>)</span><br><span class="line">    context = &#123;<span class="string">"user"</span>:user&#125;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>,context=context)</span><br><span class="line">    <span class="comment">#注意，此处的传参数方式与Django中的不同，前一个context指传到前端的参数名</span></span><br></pre></td></tr></table></figure><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>user_index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; context.user.user_name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; context.user.user_id &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>###（2）前端向后端提交数据</p><h4 id="下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可返回一个表单，-if-request-method-‘GET’-用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理"><a href="#下面的代码最后在在路径中输入http-127-0-0-1-5000-hello即可返回一个表单，-if-request-method-‘GET’-用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理" class="headerlink" title="下面的代码最后在在路径中输入http://127.0.0.1:5000/hello即可返回一个表单，`if request.method == ‘GET’:`用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理"></a>下面的代码最后在在路径中输入<a href="http://127.0.0.1:5000/hello即可返回一个表单，`if" target="_blank" rel="noopener">http://127.0.0.1:5000/hello即可返回一个表单，`if</a> request.method == ‘GET’:`用来判断是否是第一次请求，当时第一次请求时将返回一个空表单，如不是则将表单提交到后端进行处理</h4><h4 id="后端代码-1"><a href="#后端代码-1" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request,flash</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/hello",methods=['POST','GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = request.form</span><br><span class="line">        user_name = form.get(<span class="string">"user_name"</span>)</span><br><span class="line">        password = form.get(<span class="string">"password"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_name:</span><br><span class="line">            flash(<span class="string">"Please input username"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> password:</span><br><span class="line">            flash(<span class="string">"Please input password"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user_name == <span class="string">"csdn"</span> <span class="keyword">and</span> password == <span class="string">"12345678"</span>:</span><br><span class="line">            flash(<span class="string">"Login succeed"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">"username or password is wrong"</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br></pre></td></tr></table></figure><h4 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; get_flashed_messages()[0] &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="5-消息提醒"><a href="#5-消息提醒" class="headerlink" title="5.消息提醒"></a>5.消息提醒</h1><hr><p>####（1）使用消息提示是需要配置secret_key</p><p>####（2）flash获得的为一个列表，所以前端使用<code>get_flashed_messages()[0]</code>来获得消息提醒</p><h4 id="后端代码-2"><a href="#后端代码-2" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,render_template,flash</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = &apos;123&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/hello&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    flash(&quot;csdn&quot;)</span><br><span class="line">    return render_template(&quot;hello.html&quot;)</span><br></pre></td></tr></table></figure><h4 id="前端代码-2"><a href="#前端代码-2" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; get_flashed_messages()[0] &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6.异常处理"></a>6.异常处理</h1><hr><p>###（1）404错误</p><h4 id="当路由中输入错误路径，将会返回404页面"><a href="#当路由中输入错误路径，将会返回404页面" class="headerlink" title="当路由中输入错误路径，将会返回404页面"></a>当路由中输入错误路径，将会返回404页面</h4><h4 id="后端代码-3"><a href="#后端代码-3" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"404.html"</span>)</span><br></pre></td></tr></table></figure><h4 id="前端代码-3"><a href="#前端代码-3" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（文件名为404.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>抱歉您找的页面不存在<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>###（2）有条件的跳转到404页面</p><h4 id="当在路由中输入http-127-0-0-1-5000-error-login-1是返回登录成功页面，反之返回404页面"><a href="#当在路由中输入http-127-0-0-1-5000-error-login-1是返回登录成功页面，反之返回404页面" class="headerlink" title="当在路由中输入http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面"></a>当在路由中输入<a href="http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面" target="_blank" rel="noopener">http://127.0.0.1:5000/error_login/1是返回登录成功页面，反之返回404页面</a></h4><p>####后端代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,abort</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/hello/&lt;id&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> int(id) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">"hello.html"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br></pre></td></tr></table></figure></p><h4 id="前端代码-4"><a href="#前端代码-4" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（文件名为hello.html）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>您已登录成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django网站部署前期准备</title>
      <link href="/2018/02/10/Django%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
      <url>/2018/02/10/Django%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h3 id="建立虚拟环境"><a href="#建立虚拟环境" class="headerlink" title="建立虚拟环境"></a>建立虚拟环境</h3><hr><p>####（1）创建一个空文件夹，并命名为learning_log</p><p>####（2）在终端中切换到该文件夹中使用<code>virtualenv ll_env</code>创建一个虚拟环境，如创建失败请使用<code>pip install virtualenv</code>命令来安装virtualenv包</p><p>####（3）完成上述命令后learning_log文件加如下所示<br><img src="/images/Django网站部署前期准备/C8ACB738-1CEE-480F-BF0B-D386892A068A.png" alt="这里写图片描述"></p><p><img src="/images/Django网站部署前期准备/2CD77709-FE56-4704-A194-29F885EC5BD4.png" alt="这里写图片描述"></p><hr><hr><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><hr><p>####（1）使用<code>source ll_env/bin/activate</code>命令激活虚拟环境，激活后终端前将出现（ll_env）<br><img src="/images/Django网站部署前期准备/974485ED-0954-4E4D-A707-AE7CE9013DC2.png" alt="这里写图片描述"></p><h5 id="注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境"><a href="#注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境" class="headerlink" title="注：如果需要停止虚拟环境，请使用deactivate命令来关闭虚拟环境"></a>注：如果需要停止虚拟环境，请使用<code>deactivate</code>命令来关闭虚拟环境</h5><hr><hr><h3 id="安装，新建Django项目"><a href="#安装，新建Django项目" class="headerlink" title="安装，新建Django项目"></a>安装，新建Django项目</h3><hr><p>####（1）创建并激活虚拟环境之后，我们就可以安装Django了安装命令为<code>pip install django</code></p><p>####（2）使用<code>django-admin.py startproject learning_log .</code>来新建项目（注意不要忽略.，如没有.则manage.py文件将不与ll_env文件夹在同一目录，会影响后期部署）<br><img src="/images/Django网站部署前期准备/7419757A-AB42-43DD-BDBE-EE546956CE9B.png" alt="这里写图片描述"></p><hr><hr><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><hr><p>####（1）使用命令<code>python manage.py migrate</code>来修改数据库，我们将这称为迁移数据库，首次执行将新建一个必要的数据表<br><img src="/images/Django网站部署前期准备/87285B1B-7928-44AB-B7B0-37C2E7FD8A32.png" alt="这里写图片描述"></p><hr><hr><h3 id="查看项目"><a href="#查看项目" class="headerlink" title="查看项目"></a>查看项目</h3><hr><p>####（1）使用<code>python manage.py runserver</code>来启动该项目，启动之后便可在<a href="http://127.0.0.1:8000/打开该网站，若8000端口被占用可使用`python" target="_blank" rel="noopener">http://127.0.0.1:8000/打开该网站，若8000端口被占用可使用`python</a> manage.py runserver 8001`使网站在8001端口打开，如仍被占用，请继续向后增加，直至成功，关闭请按ctrl+c<br><img src="/images/Django网站部署前期准备/C732941D-96E2-4099-A92B-88D68BF04574.png" alt="这里写图片描述"></p><p><img src="/images/Django网站部署前期准备/4030F3FE-055D-4DE6-954D-41F2C452D4D1.png" alt="这里写图片描述"></p><hr><hr><h3 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h3><hr><p>####（1）使用<code>python manage.py startapp learning_logs</code>命令创建一个名为learning_logs的app,运行后文件夹中将出现learning_logs文件夹</p><hr><hr><h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><hr><p>####（1）打开models.py文件添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br></pre></td></tr></table></figure></p><h5 id="DateTimeField-auto-now-add-True-是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串"><a href="#DateTimeField-auto-now-add-True-是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串" class="headerlink" title="DateTimeField(auto_now_add=True)是指日期自动添加，str函数表示了该模型的简单显示，该模型的返回值等于text字符串"></a><code>DateTimeField(auto_now_add=True)</code>是指日期自动添加，<strong>str</strong>函数表示了该模型的简单显示，该模型的返回值等于text字符串</h5><hr><hr><p>###激活模型</p><hr><p>####（1）在settings.py文件中将learning_logs这个app添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#我的应用</span></span><br><span class="line">    <span class="string">'learning_logs'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>####（2）我们使用<code>python manage.py makemigrations</code>命令，makemigrations是Django确认数据库如何修改，输出表示django创建了一个0001_initial.py的迁移文件，之后使用<code>python manage.py migrate</code>这种迁移数据库来修改数据库<br><img src="/images/Django网站部署前期准备/3B4B5F11-F537-4A7C-9BCD-106D448558CB.png" alt="这里写图片描述"></p><p>#####注：管理数据的正常顺序为：修改models.py，对修改使用makemigrations，最后使用migrate来迁移数据</p><hr><hr><p>###Django管理网站</p><hr><p>####（1）创建超级用户，命令为<code>python manage.py createsuperuser</code></p><p>####（2）向管理网站注册模型，在admin.py文件中添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic,Entry</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br></pre></td></tr></table></figure></p><p>####之后登录<a href="http://127.0.0.1:8000/admin通过Django的后台来进行网站管理，在这个网站中寻在Topic模型，可以在这里添加Topic" target="_blank" rel="noopener">http://127.0.0.1:8000/admin通过Django的后台来进行网站管理，在这个网站中寻在Topic模型，可以在这里添加Topic</a></p><p>####（3）同理我们可以定义一个Entry模型，models.py文件中添加的代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    topic = models.ForeignKey(Topic)</span><br><span class="line">    text = models.TextField()</span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name_plural = <span class="string">'entries'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text[:<span class="number">50</span>] + <span class="string">'...'</span></span><br></pre></td></tr></table></figure></p><h4 id="这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys"><a href="#这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys" class="headerlink" title="这里的str指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys"></a>这里的<strong>str</strong>指返回text的前50的字符，Meta指当多个entry时为entries，如没有默认则为entrys</h4><p>####（4）进行数据迁移</p><p>####（5）向管理网站注册entry，在admin.py中添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.site.register(Entry)</span><br></pre></td></tr></table></figure></p><hr><hr>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow由于未初始化变量所导致的错误</title>
      <link href="/2017/12/07/Tensorflow%E7%94%B1%E4%BA%8E%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%98%E9%87%8F%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2017/12/07/Tensorflow%E7%94%B1%E4%BA%8E%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%98%E9%87%8F%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">train_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'train'</span>)</span><br><span class="line">train_input_data = np.array(train_input_data).ravel()</span><br><span class="line">train_input_data = list(train_input_data)</span><br><span class="line">train_input_data = tf.constant(train_input_data,dtype=tf.float32)</span><br><span class="line">train_output_data = train_input_data</span><br><span class="line"></span><br><span class="line">test_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'test'</span>)</span><br><span class="line">test_input_data = np.array(test_input_data).ravel()</span><br><span class="line">test_input_data = list(test_input_data)</span><br><span class="line">test_input_data = tf.constant(test_input_data,shape=[<span class="number">270</span>,<span class="number">1</span>],dtype=tf.float32)</span><br><span class="line">test_output_data = test_input_data</span><br><span class="line"></span><br><span class="line">print(type(train_input_data))</span><br><span class="line"></span><br><span class="line">fc_mean, fc_var = tf.nn.moments(train_input_data,axes=[<span class="number">0</span>])</span><br><span class="line">scale = tf.Variable(tf.ones([<span class="number">1</span>]))</span><br><span class="line">shift = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">epslion = <span class="number">0.001</span></span><br><span class="line">train_input_data = tf.nn.batch_normalization(train_input_data,fc_mean,fc_var,shift,scale,epslion)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(train_input_data)</span><br></pre></td></tr></table></figure><h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1327</span>, <span class="keyword">in</span> _do_call</span><br><span class="line">    <span class="keyword">return</span> fn(*args)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1306</span>, <span class="keyword">in</span> _run_fn</span><br><span class="line">    status, run_metadata)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/contextlib.py"</span>, line <span class="number">89</span>, <span class="keyword">in</span> __exit__</span><br><span class="line">    next(self.gen)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py"</span>, line <span class="number">466</span>, <span class="keyword">in</span> raise_exception_on_not_ok_status</span><br><span class="line">    pywrap_tensorflow.TF_GetCode(status))</span><br><span class="line">tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized value Variable_1</span><br><span class="line"> [[Node: Variable_1/read = Identity[T=DT_FLOAT, _class=[<span class="string">"loc:@Variable_1"</span>], _device=<span class="string">"/job:localhost/replica:0/task:0/cpu:0"</span>](Variable_1)]]</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/PycharmProjects/太阳能预测/test.py"</span>, line <span class="number">30</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a = sess.run(train_input_data)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">895</span>, <span class="keyword">in</span> run</span><br><span class="line">    run_metadata_ptr)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1124</span>, <span class="keyword">in</span> _run</span><br><span class="line">    feed_dict_tensor, options, run_metadata)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1321</span>, <span class="keyword">in</span> _do_run</span><br><span class="line">    options, run_metadata)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py"</span>, line <span class="number">1340</span>, <span class="keyword">in</span> _do_call</span><br><span class="line">    <span class="keyword">raise</span> type(e)(node_def, op, message)</span><br><span class="line">tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized value Variable_1</span><br><span class="line"> [[Node: Variable_1/read = Identity[T=DT_FLOAT, _class=[<span class="string">"loc:@Variable_1"</span>], _device=<span class="string">"/job:localhost/replica:0/task:0/cpu:0"</span>](Variable_1)]]</span><br><span class="line"></span><br><span class="line">Caused by op <span class="string">'Variable_1/read'</span>, defined at:</span><br><span class="line">  File <span class="string">"/Users/PycharmProjects/太阳能预测/test.py"</span>, line <span class="number">21</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    shift = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/ops/variables.py"</span>, line <span class="number">199</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    expected_shape=expected_shape)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/ops/variables.py"</span>, line <span class="number">330</span>, <span class="keyword">in</span> _init_from_args</span><br><span class="line">    self._snapshot = array_ops.identity(self._variable, name=<span class="string">"read"</span>)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py"</span>, line <span class="number">1400</span>, <span class="keyword">in</span> identity</span><br><span class="line">    result = _op_def_lib.apply_op(<span class="string">"Identity"</span>, input=input, name=name)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py"</span>, line <span class="number">767</span>, <span class="keyword">in</span> apply_op</span><br><span class="line">    op_def=op_def)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/ops.py"</span>, line <span class="number">2630</span>, <span class="keyword">in</span> create_op</span><br><span class="line">    original_op=self._default_original_op, op_def=op_def)</span><br><span class="line">  File <span class="string">"/Users/anaconda/lib/python3.6/site-packages/tensorflow/python/framework/ops.py"</span>, line <span class="number">1204</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    self._traceback = self._graph._extract_stack()  <span class="comment"># pylint: disable=protected-access</span></span><br><span class="line"></span><br><span class="line">FailedPreconditionError (see above <span class="keyword">for</span> traceback): Attempting to use uninitialized value Variable_1</span><br><span class="line"> [[Node: Variable_1/read = Identity[T=DT_FLOAT, _class=[<span class="string">"loc:@Variable_1"</span>], _device=<span class="string">"/job:localhost/replica:0/task:0/cpu:0"</span>](Variable_1)]]</span><br></pre></td></tr></table></figure><h2 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h2><h4 id="在初始的代码中，由于没有使用tf-global-variables-initializer-函数来对变量初始化，导致代码出现错误"><a href="#在初始的代码中，由于没有使用tf-global-variables-initializer-函数来对变量初始化，导致代码出现错误" class="headerlink" title="在初始的代码中，由于没有使用tf.global_variables_initializer()函数来对变量初始化，导致代码出现错误"></a>在初始的代码中，由于没有使用<code>tf.global_variables_initializer()</code>函数来对变量初始化，导致代码出现错误</h4><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><h4 id="在代码中加入tf-global-variables-initializer-函数来对数据进行初始化之后便可解决"><a href="#在代码中加入tf-global-variables-initializer-函数来对数据进行初始化之后便可解决" class="headerlink" title="在代码中加入tf.global_variables_initializer()函数来对数据进行初始化之后便可解决"></a>在代码中加入<code>tf.global_variables_initializer()</code>函数来对数据进行初始化之后便可解决</h4><h2 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">train_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'train'</span>)</span><br><span class="line">train_input_data = np.array(train_input_data).ravel()</span><br><span class="line">train_input_data = list(train_input_data)</span><br><span class="line">train_input_data = tf.constant(train_input_data,dtype=tf.float32)</span><br><span class="line">train_output_data = train_input_data</span><br><span class="line"></span><br><span class="line">test_input_data = pd.read_excel(<span class="string">'new_data/4.12.2.xlsx'</span>,header=<span class="keyword">None</span>,sheetname=<span class="string">'test'</span>)</span><br><span class="line">test_input_data = np.array(test_input_data).ravel()</span><br><span class="line">test_input_data = list(test_input_data)</span><br><span class="line">test_input_data = tf.constant(test_input_data,shape=[<span class="number">270</span>,<span class="number">1</span>],dtype=tf.float32)</span><br><span class="line">test_output_data = test_input_data</span><br><span class="line"></span><br><span class="line">fc_mean, fc_var = tf.nn.moments(train_input_data,axes=[<span class="number">0</span>])</span><br><span class="line">scale = tf.Variable(tf.ones([<span class="number">1</span>]))</span><br><span class="line">shift = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">epslion = <span class="number">0.001</span></span><br><span class="line">train_input_data = tf.nn.batch_normalization(train_input_data,fc_mean,fc_var,shift,scale,epslion)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Tensorflow实现CNN进行MNIST数字识别</title>
      <link href="/2017/11/18/%E4%BD%BF%E7%94%A8Tensorflow%E5%AE%9E%E7%8E%B0CNN%E8%BF%9B%E8%A1%8CMNIST%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2017/11/18/%E4%BD%BF%E7%94%A8Tensorflow%E5%AE%9E%E7%8E%B0CNN%E8%BF%9B%E8%A1%8CMNIST%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="comment"># number 1 to 10 data</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'MNIST_data'</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_accuracy</span><span class="params">(v_xs, v_ys)</span>:</span><span class="comment">#返回准确度</span></span><br><span class="line">    <span class="keyword">global</span> prediction</span><br><span class="line">    y_pre = sess.run(prediction, feed_dict=&#123;xs: v_xs, keep_prob: <span class="number">1</span>&#125;)</span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(y_pre,<span class="number">1</span>), tf.argmax(v_ys,<span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">    result = sess.run(accuracy, feed_dict=&#123;xs: v_xs, ys: v_ys, keep_prob: <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span><span class="comment">#定义weight</span></span><br><span class="line">    initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span><span class="comment">#定义bias</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span><span class="comment">#定义卷积层</span></span><br><span class="line">    <span class="comment"># stride [1, x_movement, y_movement, 1]</span></span><br><span class="line">    <span class="comment"># Must have strides[0] = strides[3] = 1</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span><span class="comment">#定义池化层</span></span><br><span class="line">    <span class="comment"># stride [1, x_movement, y_movement, 1]</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define placeholder for inputs to network</span></span><br><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])/<span class="number">255.</span>   <span class="comment"># 28x28</span></span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line">x_image = tf.reshape(xs, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])<span class="comment">#-1指将所有图片的例子维度不管他，之后再加上所有的维度，然后将xs图片信息转变成28x28的矩阵，1指只有一个通道，即黑白的图片</span></span><br><span class="line"><span class="comment"># print(x_image.shape)  # [n_samples, 28,28,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## conv1 layer ##</span></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>,<span class="number">5</span>, <span class="number">1</span>,<span class="number">32</span>]) <span class="comment"># 指筛选器 5x5, 步数 1, 深度 32</span></span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1) <span class="comment"># output size 28x28x32</span></span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)                                         <span class="comment"># output size 14x14x32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## conv2 layer ##</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>,<span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>]) <span class="comment"># patch 5x5, in size 32, out size 64</span></span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2) <span class="comment"># output size 14x14x64，激活去线性化</span></span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)                                         <span class="comment"># output size 7x7x64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## fc1 layer ##</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>, <span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="number">1024</span>])</span><br><span class="line"><span class="comment"># [n_samples, 7, 7, 64] -&gt;&gt; [n_samples, 7*7*64]</span></span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment">## fc2 layer ##</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line">prediction = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the error between prediction and real data</span></span><br><span class="line">cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),</span><br><span class="line">                                              reduction_indices=[<span class="number">1</span>]))       <span class="comment"># loss</span></span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># important step</span></span><br><span class="line"><span class="comment"># tf.initialize_all_variables() no long valid from</span></span><br><span class="line"><span class="comment"># 2017-03-02 if using tensorflow &gt;= 0.12</span></span><br><span class="line"><span class="keyword">if</span> int((tf.__version__).split(<span class="string">'.'</span>)[<span class="number">1</span>]) &lt; <span class="number">12</span> <span class="keyword">and</span> int((tf.__version__).split(<span class="string">'.'</span>)[<span class="number">0</span>]) &lt; <span class="number">1</span>:</span><br><span class="line">    init = tf.initialize_all_variables()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;xs: batch_xs, ys: batch_ys, keep_prob: <span class="number">0.5</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        print(compute_accuracy(</span><br><span class="line">            mnist.test.images[:<span class="number">1000</span>], mnist.test.labels[:<span class="number">1000</span>]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python常用的程序调试方法</title>
      <link href="/2017/11/17/Python%E5%B8%B8%E7%94%A8%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/"/>
      <url>/2017/11/17/Python%E5%B8%B8%E7%94%A8%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="程序能一次写完并正常运行的概率很小，基本不超过1-，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法"><a href="#程序能一次写完并正常运行的概率很小，基本不超过1-，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法" class="headerlink" title="程序能一次写完并正常运行的概率很小，基本不超过1%，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法"></a>程序能一次写完并正常运行的概率很小，基本不超过1%，总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。下面我们来看下常用的Python调试方法</h4><hr><h2 id="1-断点打印法"><a href="#1-断点打印法" class="headerlink" title="1. 断点打印法"></a>1. 断点打印法</h2><h4 id="第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看："><a href="#第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看：" class="headerlink" title="第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看："></a>第一种方法简单直接粗暴有效，就是用print把可能有问题的变量打印出来看看：</h4><h4 id="err-py"><a href="#err-py" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">n = int(s)</span><br><span class="line">print &apos;&gt;&gt;&gt; n = %d&apos; % n</span><br><span class="line">return 10 / n</span><br><span class="line">def main():</span><br><span class="line">foo(&apos;0&apos;)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h4 id="执行后在输出中查找打印的变量值："><a href="#执行后在输出中查找打印的变量值：" class="headerlink" title="执行后在输出中查找打印的变量值："></a>执行后在输出中查找打印的变量值：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">&gt;&gt;&gt; n = 0</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。"><a href="#用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。" class="headerlink" title="用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。"></a>用print最大的坏处是将来还得删掉它，想想程序里到处都是print，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。</h4><hr><h2 id="2-断言"><a href="#2-断言" class="headerlink" title="2. 断言"></a>2. 断言</h2><p>####凡是用print来辅助查看的地方，都可以用断言（assert）来替代：</p><h4 id="err-py-1"><a href="#err-py-1" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">n = int(s)</span><br><span class="line">assert n != 0, &apos;n is zero!&apos;</span><br><span class="line">return 10 / n</span><br><span class="line">def main():</span><br><span class="line">foo(&apos;0&apos;)</span><br></pre></td></tr></table></figure><h4 id="assert的意思是，表达式n-0应该是True，否则，后面的代码就会出错。"><a href="#assert的意思是，表达式n-0应该是True，否则，后面的代码就会出错。" class="headerlink" title="assert的意思是，表达式n != 0应该是True，否则，后面的代码就会出错。"></a>assert的意思是，表达式n != 0应该是True，否则，后面的代码就会出错。</h4><h4 id="如果断言失败，assert语句本身就会抛出AssertionError："><a href="#如果断言失败，assert语句本身就会抛出AssertionError：" class="headerlink" title="如果断言失败，assert语句本身就会抛出AssertionError："></a>如果断言失败，assert语句本身就会抛出AssertionError：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">AssertionError: n is zero!</span><br></pre></td></tr></table></figure><h4 id="程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert："><a href="#程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert：" class="headerlink" title="程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert："></a>程序中如果到处充斥着assert，和print相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python -O err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="关闭后，你可以把所有的assert语句当成pass来看。"><a href="#关闭后，你可以把所有的assert语句当成pass来看。" class="headerlink" title="关闭后，你可以把所有的assert语句当成pass来看。"></a>关闭后，你可以把所有的assert语句当成pass来看。</h4><hr><h2 id="3-logging日志"><a href="#3-logging日志" class="headerlink" title="3. logging日志"></a>3. logging日志</h2><h4 id="把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件："><a href="#把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件：" class="headerlink" title="把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件："></a>把print替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件：</h4><p>####err.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">s = &apos;0&apos;</span><br><span class="line">n = int(s)</span><br><span class="line">logging.info(&apos;n = %d&apos; % n)</span><br><span class="line">print 10 / n</span><br></pre></td></tr></table></figure></p><h4 id="logging-info-就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？"><a href="#logging-info-就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？" class="headerlink" title="logging.info()就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？"></a>logging.info()就可以输出一段文本。运行，发现除了ZeroDivisionError，没有任何信息。怎么回事？</h4><h4 id="别急，在import-logging之后添加一行配置再试试："><a href="#别急，在import-logging之后添加一行配置再试试：" class="headerlink" title="别急，在import logging之后添加一行配置再试试："></a>别急，在import logging之后添加一行配置再试试：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br></pre></td></tr></table></figure><h4 id="看到输出了："><a href="#看到输出了：" class="headerlink" title="看到输出了："></a>看到输出了：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">INFO:root:n = 0</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File &quot;err.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">  print 10 / n</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level-INFO时，logging-debug就不起作用了。同理，指定level-WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。"><a href="#这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level-INFO时，logging-debug就不起作用了。同理，指定level-WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。" class="headerlink" title="这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。"></a>这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。</h4><h4 id="logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。"><a href="#logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。" class="headerlink" title="logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。"></a>logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。</h4><hr><h2 id="4-pdb调试"><a href="#4-pdb调试" class="headerlink" title="4. pdb调试"></a>4. pdb调试</h2><h4 id="第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序："><a href="#第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：" class="headerlink" title="第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序："></a>第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：</h4><h4 id="err-py-2"><a href="#err-py-2" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;0&apos;</span><br><span class="line">n = int(s)</span><br><span class="line">print 10 / n</span><br></pre></td></tr></table></figure><h4 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pdb err.py</span><br><span class="line">&gt; /Users/PythonTab/Github/sicp/err.py(2)&lt;module&gt;()</span><br><span class="line">-&gt; s = &apos;0&apos;</span><br></pre></td></tr></table></figure><h4 id="以参数-m-pdb启动后，pdb定位到下一步要执行的代码-gt-s-‘0’。输入命令l来查看代码："><a href="#以参数-m-pdb启动后，pdb定位到下一步要执行的代码-gt-s-‘0’。输入命令l来查看代码：" class="headerlink" title="以参数-m pdb启动后，pdb定位到下一步要执行的代码-&gt; s = ‘0’。输入命令l来查看代码："></a>以参数-m pdb启动后，pdb定位到下一步要执行的代码-&gt; s = ‘0’。输入命令l来查看代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) l</span><br><span class="line"> 1   # err.py</span><br><span class="line"> 2 -&gt; s = &apos;0&apos;</span><br><span class="line"> 3   n = int(s)</span><br><span class="line"> 4   print 10 / n</span><br><span class="line">[EOF]</span><br></pre></td></tr></table></figure><h4 id="输入命令n可以单步执行代码："><a href="#输入命令n可以单步执行代码：" class="headerlink" title="输入命令n可以单步执行代码："></a>输入命令n可以单步执行代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) n</span><br><span class="line">/Users/PythonTab/Github/sicp/err.py(3)&lt;module&gt;()</span><br><span class="line">-&gt; n = int(s)</span><br><span class="line">(Pdb) n</span><br><span class="line">/Users/PythonTab/Github/sicp/err.py(4)&lt;module&gt;()</span><br><span class="line">-&gt; print 10 / n</span><br></pre></td></tr></table></figure><h4 id="任何时候都可以输入命令p-变量名来查看变量："><a href="#任何时候都可以输入命令p-变量名来查看变量：" class="headerlink" title="任何时候都可以输入命令p 变量名来查看变量："></a>任何时候都可以输入命令p 变量名来查看变量：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p s</span><br><span class="line">&apos;0&apos;</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="输入命令q结束调试，退出程序："><a href="#输入命令q结束调试，退出程序：" class="headerlink" title="输入命令q结束调试，退出程序："></a>输入命令q结束调试，退出程序：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) n</span><br><span class="line">ZeroDivisionError: &apos;integer division or modulo by zero&apos;</span><br><span class="line">&gt; /Users/PythonTab/Github/sicp/err.py(4)&lt;module&gt;()</span><br><span class="line">-&gt; print 10 / n</span><br><span class="line">(Pdb) q</span><br></pre></td></tr></table></figure><h4 id="这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。"><a href="#这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。" class="headerlink" title="这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。"></a>这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。</h4><h4 id="pdb-set-trace"><a href="#pdb-set-trace" class="headerlink" title="pdb.set_trace()"></a><code>pdb.set_trace()</code></h4><h4 id="这个方法也是用pdb，但是不需要单步执行，我们只需要import-pdb，然后，在可能出错的地方放一个pdb-set-trace-，就可以设置一个断点："><a href="#这个方法也是用pdb，但是不需要单步执行，我们只需要import-pdb，然后，在可能出错的地方放一个pdb-set-trace-，就可以设置一个断点：" class="headerlink" title="这个方法也是用pdb，但是不需要单步执行，我们只需要import pdb，然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点："></a>这个方法也是用pdb，但是不需要单步执行，我们只需要import pdb，然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点：</h4><h4 id="err-py-3"><a href="#err-py-3" class="headerlink" title="err.py"></a>err.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pdb</span><br><span class="line">s = &apos;0&apos;</span><br><span class="line">n = int(s)</span><br><span class="line">pdb.set_trace() # 运行到这里会自动暂停</span><br><span class="line">print 10 / n</span><br></pre></td></tr></table></figure><h4 id="运行代码，程序会自动在pdb-set-trace-暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行："><a href="#运行代码，程序会自动在pdb-set-trace-暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行：" class="headerlink" title="运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行："></a>运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python err.py </span><br><span class="line">&gt; /Users/PythonTab/Github/sicp/err.py(7)&lt;module&gt;()</span><br><span class="line">-&gt; print 10 / n</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br><span class="line">(Pdb) c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File &quot;err.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">  print 10 / n</span><br><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><h4 id="这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。"><a href="#这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。" class="headerlink" title="这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。"></a>这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。</h4><h2 id="5-IDE调试"><a href="#5-IDE调试" class="headerlink" title="5. IDE调试"></a>5. IDE调试</h2><h4 id="如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python-IDE有PyCharm，"><a href="#如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python-IDE有PyCharm，" class="headerlink" title="如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python IDE有PyCharm，"></a>如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python IDE有PyCharm，</h4><h4 id="另外，Eclipse加上pydev插件也可以调试Python程序。"><a href="#另外，Eclipse加上pydev插件也可以调试Python程序。" class="headerlink" title="另外，Eclipse加上pydev插件也可以调试Python程序。"></a>另外，Eclipse加上pydev插件也可以调试Python程序。</h4><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h4 id="写程序花费的时间往往要小于调试的时间，这个是基本规律。"><a href="#写程序花费的时间往往要小于调试的时间，这个是基本规律。" class="headerlink" title="写程序花费的时间往往要小于调试的时间，这个是基本规律。"></a>写程序花费的时间往往要小于调试的时间，这个是基本规律。</h4><h4 id="虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！"><a href="#虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！" class="headerlink" title="虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！"></a>虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。断点调试也是高手的终极利器！</h4><hr><h6 id="本文章为转载，原文章链接："><a href="#本文章为转载，原文章链接：" class="headerlink" title="本文章为转载，原文章链接："></a>本文章为转载，原文章链接：</h6><h6 id="http-www-pythontab-com-html-2017-pythonhexinbiancheng-1115-1182-html-ref-myread"><a href="#http-www-pythontab-com-html-2017-pythonhexinbiancheng-1115-1182-html-ref-myread" class="headerlink" title="http://www.pythontab.com/html/2017/pythonhexinbiancheng_1115/1182.html?ref=myread"></a><a href="http://www.pythontab.com/html/2017/pythonhexinbiancheng_1115/1182.html?ref=myread" target="_blank" rel="noopener">http://www.pythontab.com/html/2017/pythonhexinbiancheng_1115/1182.html?ref=myread</a></h6>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow卷积神经网络常用结构</title>
      <link href="/2017/11/17/Tensorflow%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B8%B8%E7%94%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2017/11/17/Tensorflow%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B8%B8%E7%94%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="1-卷积层"><a href="#1-卷积层" class="headerlink" title="1.卷积层"></a>1.卷积层</h2><h3 id="Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。"><a href="#Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。" class="headerlink" title="Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。"></a>Tensorflow对卷积神经网络有着很好的支持，下面的程序实现了一个卷积层的前向传播。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">filter_weight = tf.get_variable(</span><br><span class="line"></span><br><span class="line"><span class="comment">#前两个维度代表过滤器的尺寸，第三个维度表示当前层的深度，</span></span><br><span class="line"><span class="comment">#第四个表示过滤器的深度。</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'weight'</span>,[<span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">16</span>],</span><br><span class="line">initializer=tf.truncated_normal_initializer(stddev=<span class="number">0.1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">biases = tf.get_variable(</span><br><span class="line"><span class="comment">#由于当前过滤器的深度为16，所以偏置相为16，也是神经网络中下一层节点矩阵深度</span></span><br><span class="line">    <span class="string">'biases'</span>,[<span class="number">16</span>],initializer=tf.constant_initializer(<span class="number">0.1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">conv = tf.nn.conv2d(</span><br><span class="line">input,filter_weight,strides=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">bias = tf.nn.bias_add(conv,biases)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过ReLU函数激活，去线性化</span></span><br><span class="line">actived_conv = tf.nn.relu(bias)</span><br></pre></td></tr></table></figure><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><h4 id="1-tf-nn-conv2d提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input-0-指输入第一张图片，input-1-指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。"><a href="#1-tf-nn-conv2d提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input-0-指输入第一张图片，input-1-指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。" class="headerlink" title="1.tf.nn.conv2d提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input[0,:,:,:]指输入第一张图片，input[1,:,:,:]指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。"></a>1.<code>tf.nn.conv2d</code>提供了一个简单方便的函数来实现卷积层前向传播的算法。该函数第一个输入为当前层的节点矩阵，注意该矩阵为一个四维矩阵，后面三个维度对应一个节点矩阵，第一维输入一个batch。如input[0,:,:,:]指输入第一张图片，input[1,:,:,:]指输入第二张图片。该函数提供的第二个参数是卷积层的权重，第三个为不同维度上的步长，虽然第三个参数提供的一个长度为4的数组，但是第一维和第四维一定为1，因为卷积层的步数只对矩阵的长宽有效。最后一个参数为填充（padding）的方法，一共有’SAME’和’VALID’两种选择，其中SAME是指添加全0填充，VAILID表示不添加。</h4><h4 id="2-tf-nn-bias-add提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。"><a href="#2-tf-nn-bias-add提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。" class="headerlink" title="2.tf.nn.bias_add提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。"></a>2.<code>tf.nn.bias_add</code>提供一个方便的函数给每个节点加上一个偏置项。注意这里不能直接使用方法，因为矩阵上不同位置的节点都需要加上同样的偏置项。</h4><h2 id="2-池化层"><a href="#2-池化层" class="headerlink" title="2.池化层"></a>2.池化层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pool = tf.nn.max_pool(actived_conv,ksize=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br></pre></td></tr></table></figure><h4 id="tf-nn-max-pool实现了最大池化层的前向传播，他的参数和tf-nn-conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。"><a href="#tf-nn-max-pool实现了最大池化层的前向传播，他的参数和tf-nn-conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。" class="headerlink" title="tf.nn.max_pool实现了最大池化层的前向传播，他的参数和tf.nn.conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。"></a>tf.nn.max_pool实现了最大池化层的前向传播，他的参数和tf.nn.conv2d函数类似。ksize提供了过滤器的尺寸，strides提供了步长信息，padding提供了是否需要使用全0填充。</h4>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow持久化原理及数据格式</title>
      <link href="/2017/11/16/Tensorflow%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/"/>
      <url>/2017/11/16/Tensorflow%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Tensorflow持久化原理及数据格式"><a href="#Tensorflow持久化原理及数据格式" class="headerlink" title="Tensorflow持久化原理及数据格式"></a>Tensorflow持久化原理及数据格式</h1><hr><h4 id="Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义"><a href="#Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义" class="headerlink" title="Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义"></a>Tensorflow是一个通过图的形式来表述计算的编程系统，Tensorflow中所有的计算都会被表达成计算图上的节点。Tensorflow通过元图（MetaGraph）来记录计算图中的信息，以及运行计算图中节点所需要的元数据。以下代码给出了MetaGraphDef类型的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message MetaGraphDef&#123;</span><br><span class="line">MeatInfoDef meta_info_def = <span class="number">1</span>;</span><br><span class="line">GraphDef graph_def = <span class="number">2</span>;</span><br><span class="line">SaverDef saver_def = <span class="number">3</span>;</span><br><span class="line">map&lt;string,CollectionDef&gt; collection_def = <span class="number">4</span>;</span><br><span class="line">map&lt;string,SignatureDef&gt; signature_def = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="保存MetaGraphDef信息的文件默认以-meta为后缀名，在之前的例子中文件test-ckpt-meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export-meta-graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码"><a href="#保存MetaGraphDef信息的文件默认以-meta为后缀名，在之前的例子中文件test-ckpt-meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export-meta-graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码" class="headerlink" title="保存MetaGraphDef信息的文件默认以.meta为后缀名，在之前的例子中文件test.ckpt.meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export_meta_graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码"></a>保存MetaGraphDef信息的文件默认以.meta为后缀名，在之前的例子中文件test.ckpt.meta中存储的就是元图的数据。由于得到的是二进制文件不方便查看。为了方便调试，Tensorflow提供了export_meta_graph函数，这个函数支持以json格式导出MetaGraphDef。下面为实现的代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">1.0</span>, shape=[<span class="number">1</span>]), name =<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(tf.constant(<span class="number">2.0</span>, shape=[<span class="number">1</span>]), name =<span class="string">"v2"</span>)</span><br><span class="line">result1 = v1 + v2</span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"><span class="comment">#通过export_meta_graph函数导出Tensorflow的计算图的元图，并保存为json格式</span></span><br><span class="line">saver.export_meta_graph(<span class="string">"test/test.ckpt.json"</span>, as_text=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="meta-info-def-属性"><a href="#meta-info-def-属性" class="headerlink" title="meta_info_def 属性"></a>meta_info_def 属性</h2><h4 id="meta-info-def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义"><a href="#meta-info-def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义" class="headerlink" title="meta_info_def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义"></a>meta_info_def属性通过MetaInfoDef定义，它记录了Tensorflow计算图中的元数据以及Tensorflow程序中所有使用到的运算方法的信息。下面的MetaInfoDef的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message MetaInfoDef&#123;</span><br><span class="line"><span class="comment">#saver没有特殊指定，默认属性都为空。meta_info_def属性里只有stripped_op_list属性不能为空。</span></span><br><span class="line">string meta_graph_version = <span class="number">1</span>;<span class="comment">#该属性不能为空</span></span><br><span class="line">OpList stripped_op_list = <span class="number">2</span>;<span class="comment">#该属性记录了计算图中使用到的所有运算方法的信息，该函数只记录运算信息，不记录计算的次数</span></span><br><span class="line">google.protobuf.Any any_info = <span class="number">3</span>;</span><br><span class="line">repeated string tags = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="元数据包括计算图的版本号（meta-graph-version属性）以及用户指定的一些标签（tags属性）。"><a href="#元数据包括计算图的版本号（meta-graph-version属性）以及用户指定的一些标签（tags属性）。" class="headerlink" title="元数据包括计算图的版本号（meta_graph_version属性）以及用户指定的一些标签（tags属性）。"></a>元数据包括计算图的版本号（meta_graph_version属性）以及用户指定的一些标签（tags属性）。</h4><hr><h4 id="OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义："><a href="#OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义：" class="headerlink" title="OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义："></a>OpList类型是一个OpDef类型的列表，以下代码给出OpDef类型的定义：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">message opDef&#123;</span><br><span class="line">string name = <span class="number">1</span>;<span class="comment">#定义了运算的名称</span></span><br><span class="line">repeated ArgDef input_arg = <span class="number">2</span>; <span class="comment">#定义了输入，属性是列表</span></span><br><span class="line">repeated ArgDef output_arg =<span class="number">3</span>; <span class="comment">#定义了输出，属性是列表</span></span><br><span class="line">repeated AttrDef attr = <span class="number">4</span>;<span class="comment">#给出了其他运算的参数信息</span></span><br><span class="line">string summary = <span class="number">5</span>;</span><br><span class="line">string description = <span class="number">6</span>;</span><br><span class="line">OpDeprecation deprecation = <span class="number">8</span>;</span><br><span class="line">bool is_commutative = <span class="number">18</span>;</span><br><span class="line">bool is_aggregate = <span class="number">16</span></span><br><span class="line">bool is_stateful = <span class="number">17</span>;</span><br><span class="line">bool allows_uninitialized_input = <span class="number">19</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。"><a href="#下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。" class="headerlink" title="下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。"></a>下面给出一个比较有代表性的运算来辅助说明OpDef的数据结构。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">op &#123;</span><br><span class="line">name: <span class="string">"Add"</span></span><br><span class="line">input_arg&#123;</span><br><span class="line">name: <span class="string">"x"</span></span><br><span class="line">type_attr:<span class="string">"T"</span></span><br><span class="line">&#125;</span><br><span class="line">input_arg&#123;</span><br><span class="line">name: <span class="string">"y"</span></span><br><span class="line">type_attr:<span class="string">"T"</span></span><br><span class="line">&#125;</span><br><span class="line">output_arg&#123;</span><br><span class="line">name: <span class="string">"z"</span></span><br><span class="line">type_attr:<span class="string">"T"</span></span><br><span class="line">&#125;</span><br><span class="line">attr&#123;</span><br><span class="line">name:<span class="string">"T"</span></span><br><span class="line">type:<span class="string">"type"</span></span><br><span class="line">allow_values&#123;</span><br><span class="line">list&#123;</span><br><span class="line">type:DT_HALF</span><br><span class="line">type:DT_FLOAT</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面给出的是名称为Add的运算。这个运算的输入有两个，输出有一个，输入输出属性均指定了属性typr_attr，并且这个属性的值为T。在OpDef的attr的属性中。必须要出现名称（name）为T的属性。以上样例中，这个属性指定了运算输入输出允许的参数类型 （allowed_values）。</p><hr><h2 id="graph-def属性"><a href="#graph-def属性" class="headerlink" title="graph_def属性"></a>graph_def属性</h2><h4 id="graph-def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta-info-def中已经包含所有运算的具体信息，所以graph-def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息："><a href="#graph-def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta-info-def中已经包含所有运算的具体信息，所以graph-def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息：" class="headerlink" title="graph_def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta_info_def中已经包含所有运算的具体信息，所以graph_def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息："></a>graph_def属性主要记录了计算图中的节点信息。Tensorflow计算图中的一个节点对应Tensorflow中的一个运算。因为meta_info_def中已经包含所有运算的具体信息，所以graph_def属性指关注运算的连接结构。GraphDef主要包含了一个NodeDef类型的列表。以下代码给出GraphDef和NodeDef类型中包含的信息：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">message GraphDef&#123;</span><br><span class="line"><span class="comment">#GraphDef的主要信息存储在node属性中，他记录了Tensorflow计算图上所有的节点信息。</span></span><br><span class="line">repeated NodeDef node = <span class="number">1</span>;</span><br><span class="line">VersionDef versions = <span class="number">4</span>; <span class="comment">#主要储存了Tensorflow的版本号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message NodeDef&#123;</span><br><span class="line"><span class="comment">#NodeDef类型中有一个名称属性name，他是一个节点的唯一标识符，在程序中，通过节点的名称来获得相应的节点。</span></span><br><span class="line">string name = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">op属性给出了该节点使用的Tensorflow运算方法的名称。</span></span><br><span class="line"><span class="string">通过这个名称可以在TensorFlow计算图元图的meta_info_def属性中找到该运算的具体信息。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">string op = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">input属性是一个字符串列表，他定义了运算的输入。每个字符串饿的取值格式为弄的：src_output</span></span><br><span class="line"><span class="string">node部分给出节点名称，src_output表明了这个输入是指定节点的第几个输出。</span></span><br><span class="line"><span class="string">src_output=0时可以省略src_output部分</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">repeated string input = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#制定了处理这个运算的设备，可以是本地或者远程的CPU or GPU。属性为空时自动选择</span></span><br><span class="line">string device = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#制定了和当前运算有关的配置信息</span></span><br><span class="line">map&lt;string, AttrValue&gt; attr = <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="下面列举test-ckpt-meta-json具体介绍graph-def属性"><a href="#下面列举test-ckpt-meta-json具体介绍graph-def属性" class="headerlink" title="下面列举test.ckpt.meta.json具体介绍graph_def属性"></a>下面列举test.ckpt.meta.json具体介绍graph_def属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">graph def &#123;</span><br><span class="line">node &#123;</span><br><span class="line">name: <span class="string">"v1"</span></span><br><span class="line">op: <span class="string">"Variable"</span></span><br><span class="line">attr &#123;</span><br><span class="line">key:<span class="string">"_output_shapes"</span></span><br><span class="line">value &#123;</span><br><span class="line">list&#123; shape &#123; dim &#123; size: <span class="number">1</span> &#125; &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">attr &#123; </span><br><span class="line">key :<span class="string">"dtype"</span></span><br><span class="line">value &#123;</span><br><span class="line">type: DT_FLOAT</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">node &#123;</span><br><span class="line">name :<span class="string">"add"</span></span><br><span class="line">op :<span class="string">"Add"</span></span><br><span class="line">input :<span class="string">"v1/read"</span> <span class="comment">#read指读取变量v1的值</span></span><br><span class="line">input: <span class="string">"v2/read"</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">node &#123;</span><br><span class="line">name: <span class="string">"save/control_dependency"</span> <span class="comment">#指系统在完成tensorflow模型持久化过程中自动生成一个运算。</span></span><br><span class="line">op:<span class="string">"Identity"</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">versions &#123;</span><br><span class="line">producer :<span class="number">9</span> <span class="comment">#给出了文件使用时的Tensorflow版本号。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="saver-def属性"><a href="#saver-def属性" class="headerlink" title="saver_def属性"></a>saver_def属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">message SaverDef &#123;</span><br><span class="line">string filename_tensor_name = <span class="number">1</span>;</span><br><span class="line">string save_tensor_name = <span class="number">2</span>;</span><br><span class="line">string restore_op_name = <span class="number">3</span>;</span><br><span class="line">int32 max_to_keep = <span class="number">4</span>;</span><br><span class="line">bool sharded = <span class="number">5</span>;</span><br><span class="line">float keep_checkpoint_every_n_hours = <span class="number">6</span>;</span><br><span class="line">enum CheckpointFormatVersion &#123;</span><br><span class="line">LEGACY = <span class="number">0</span>;</span><br><span class="line">V1 = <span class="number">1</span>;</span><br><span class="line">V2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">CheckpointFormatVersion version = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下面给出test-ckpt-meta-json文件中saver-def属性的内容。"><a href="#下面给出test-ckpt-meta-json文件中saver-def属性的内容。" class="headerlink" title="下面给出test.ckpt.meta.json文件中saver_def属性的内容。"></a>下面给出test.ckpt.meta.json文件中saver_def属性的内容。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">saver_def &#123;</span><br><span class="line">filename_tensor_name :<span class="string">"save/Const:0”</span></span><br><span class="line"><span class="string">#给出了保存文件的张量名，这个张量就是节点save/Const的第一个输出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">save_tensor_name :"</span>save/control_dependency: <span class="number">0</span>”</span><br><span class="line"><span class="comment">#给出了持久化模型运算所对应的节点名称</span></span><br><span class="line"></span><br><span class="line">restore_op_name: <span class="string">"save/restore_all"</span></span><br><span class="line"><span class="comment">#和持久性模型运算对应的是加载模型的运算的名称</span></span><br><span class="line"></span><br><span class="line">max_to_keep:<span class="number">5</span></span><br><span class="line">keep_checkpoint_every_n_hours :<span class="number">10000.0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">上面两个属性设定了tf.train.Saver类清理之前保存的模型的策略。比如当max_to_keep为5时，第六次调用</span></span><br><span class="line"><span class="string">saver.save时，第一次保存的模型就会被自动删除，通过设置keep_checkpoint_every_n_hours，每n小</span></span><br><span class="line"><span class="string">时可以在max_to_keep的基础上保存一个模型</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h2 id="collection-def属性"><a href="#collection-def属性" class="headerlink" title="collection_def属性"></a>collection_def属性</h2><h4 id="collection-def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef-Protocol-Buffer。以下代码给出CollectionDef类型的定义"><a href="#collection-def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef-Protocol-Buffer。以下代码给出CollectionDef类型的定义" class="headerlink" title="collection_def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef Protocol Buffer。以下代码给出CollectionDef类型的定义"></a>collection_def属性是一个集合名称到集合内容的映射，其中集合的名称为字符串，而集合内容为CollectionDef Protocol Buffer。以下代码给出CollectionDef类型的定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">message CollectionDef &#123;</span><br><span class="line">message Nodelist &#123;</span><br><span class="line"><span class="comment">#用于维护计算图上的节点集合</span></span><br><span class="line">repeated string value = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message BytesList &#123;</span><br><span class="line"><span class="comment">#维护字符串或者系列化之后的Procotol Buffer的集合。例如张量是通过Protocol Buffer表示的，而张量的集合是通过BytesList维护的。</span></span><br><span class="line">repeated bytes value = <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Int64List &#123;</span><br><span class="line">repeated int64 value = <span class="number">1</span>[packed = true];</span><br><span class="line">&#125;</span><br><span class="line">message FloatList &#123;</span><br><span class="line">repeated float value = <span class="number">1</span>[packed = true] ;</span><br><span class="line">&#125;</span><br><span class="line">message AnyList &#123;</span><br><span class="line">repeated google.protobuf.Any value= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">oneof kind &#123;</span><br><span class="line">NodeList node_list = <span class="number">1</span>;</span><br><span class="line">BytesList bytes_lista = <span class="number">2</span>;</span><br><span class="line">Int64List int64_list = <span class="number">3</span>;</span><br><span class="line">Floatlist float_list = <span class="number">4</span>;</span><br><span class="line">AnyList any_list = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下面给出了test-ckpt-meta-json文件中的collection-def属性的内容"><a href="#下面给出了test-ckpt-meta-json文件中的collection-def属性的内容" class="headerlink" title="下面给出了test.ckpt.meta.json文件中的collection_def属性的内容"></a>下面给出了test.ckpt.meta.json文件中的collection_def属性的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">collection_def &#123;</span><br><span class="line"><span class="comment">#可训练变量的集合</span></span><br><span class="line">key: <span class="string">"trainable_variables"</span></span><br><span class="line">value &#123;</span><br><span class="line">bytes_list &#123;</span><br><span class="line">value; <span class="string">"\n\004v1:0\022\tv1/Assign\032\tv1/read:0"</span></span><br><span class="line">value: <span class="string">"\n\004v2:0\022\tv2/Assign\032\cv2/read:0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">collection_def &#123;</span><br><span class="line"><span class="comment">#所有变量的集合</span></span><br><span class="line">key: <span class="string">"variables"</span></span><br><span class="line">value &#123;</span><br><span class="line">bytes_list &#123;</span><br><span class="line">value:<span class="string">"\n\004v1:0\022\tv1/Assign\032\tv1/read:0"</span></span><br><span class="line">value:<span class="string">"\n\004v2:0\022\tv2/Assign\032\tv2/read:0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow模型持久化的代码实现</title>
      <link href="/2017/11/16/Tensorflow%E6%A8%A1%E5%9E%8B%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/11/16/Tensorflow%E6%A8%A1%E5%9E%8B%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-存储模型"><a href="#1-存储模型" class="headerlink" title="1.存储模型"></a>1.存储模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">1.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(tf.constant(<span class="number">2.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v2"</span>)</span><br><span class="line">result = v1 + v2</span><br><span class="line"></span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line">saver = tf.train.Saver()<span class="comment">#声明tf.train.Saver()类用于保存模型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">sess.run(init_op)</span><br><span class="line">saver.save(sess, <span class="string">"test/test.ckpt"</span>)<span class="comment">#将模型保存于test文件夹中</span></span><br></pre></td></tr></table></figure><h3 id="运行该程序后，将在test文件中出现以下的文件"><a href="#运行该程序后，将在test文件中出现以下的文件" class="headerlink" title="运行该程序后，将在test文件中出现以下的文件"></a>运行该程序后，将在test文件中出现以下的文件</h3><p><img src="/images/Tensorflow模型持久化的代码实现/3ECD8E7B-A896-4A8A-B32B-FB0E2A87BA15.png" alt="这里写图片描述"></p><hr><h1 id="2-加载模型"><a href="#2-加载模型" class="headerlink" title="2.加载模型"></a>2.加载模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">1.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v1"</span>)</span><br><span class="line">v2 = tf.Variable(tf.constant(<span class="number">4.0</span>, shape=[<span class="number">1</span>]),name=<span class="string">"v2"</span>)</span><br><span class="line">result = v1 + v2</span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">saver.restore(sess, <span class="string">"test/test.ckpt"</span>)<span class="comment">#加载已经保存的模型，并通过已经保存的模型中的变量的值来计算加法</span></span><br><span class="line">print(sess.run(result))</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算输出结果为[3.]不是[5.]是因为该程序加载了之前保存的模型，所以计算的变量也是保存的模型中的变量</span></span><br></pre></td></tr></table></figure><p><img src="/images/Tensorflow模型持久化的代码实现/6D1969B8-CC01-47C8-B2B0-5A6291A0BA9A.png" alt="这里写图片描述"></p><hr><h2 id="如果不希望重复定义变量以及运算，可以直接加载已经持久化的图"><a href="#如果不希望重复定义变量以及运算，可以直接加载已经持久化的图" class="headerlink" title="如果不希望重复定义变量以及运算，可以直接加载已经持久化的图"></a>如果不希望重复定义变量以及运算，可以直接加载已经持久化的图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">saver = tf.train.import_meta_graph(<span class="string">"test/test.ckpt.meta"</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">saver.restore(sess, <span class="string">"test/test.ckpt"</span>)</span><br><span class="line"><span class="comment">#通过张量的名称来获取张量</span></span><br><span class="line">print(sess.run(tf.get_default_graph().get_tensor_by_name(<span class="string">"add:0"</span>)))</span><br><span class="line"><span class="comment">#输出[3.]</span></span><br></pre></td></tr></table></figure><p>该程序默认保存和加载了Tensorflow计算图中定义的全部变量。</p><hr><h1 id="3-加载或者保存部分变量"><a href="#3-加载或者保存部分变量" class="headerlink" title="3.加载或者保存部分变量"></a>3.加载或者保存部分变量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">saver = tf.train.Saver([v1])<span class="comment">#该命令只用来加载变量v1</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-加载或者保存时对变量重命名"><a href="#4-加载或者保存时对变量重命名" class="headerlink" title="4.加载或者保存时对变量重命名"></a>4.加载或者保存时对变量重命名</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里声明的变量名称和已经保存的模型中变量的名称不同</span></span><br><span class="line">V1=tf.Variable(tf.constant(<span class="number">1.0</span>,shape=[<span class="number">1</span>]),name=<span class="string">"other-v1"</span>)</span><br><span class="line">V2=tf.variable(tf.constant (<span class="number">2.0</span>，shape=[<span class="number">1</span>]),name=<span class="string">"other-v2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果直接使用tf.train.Saver () 来加载模型会报变量找不到的错误。下面显示了报错信息:</span></span><br><span class="line"><span class="comment"># tensorflow.python.framewotk.erors.NotFoundError: Tensor name "other-v2"</span></span><br><span class="line"><span class="comment"># not found in checkpoint files /test/test.ckpt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一个字典(aictionary) 来重命名变量可以就可以加载原来的模型了。这个字典指定了</span></span><br><span class="line"><span class="comment"># 原来名称为v1的变量现在加载到变量v1中(名称为other-v1),名称为v2的变量</span></span><br><span class="line"><span class="comment"># 加载到变量v2 中(名称为other-v2)。</span></span><br><span class="line">saver=tf.train.Saver(&#123;<span class="string">"v1"</span>=v1,<span class="string">"v2"</span>:v2&#125;)</span><br></pre></td></tr></table></figure><h4 id="如果直接通过saver-tf-train-Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。"><a href="#如果直接通过saver-tf-train-Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。" class="headerlink" title="如果直接通过saver=tf.train.Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。"></a>如果直接通过saver=tf.train.Saver默认构造的函数来加载保存的模型，那么程序会报变量找不到的错误。因为保存时候的变量和加载时的变量的名称不一致。因此可以通过字典来将保存时和加载是的变量联系起来。</h4>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow的变量管理</title>
      <link href="/2017/11/10/Tensorflow%E7%9A%84%E5%8F%98%E9%87%8F%E7%AE%A1%E7%90%86/"/>
      <url>/2017/11/10/Tensorflow%E7%9A%84%E5%8F%98%E9%87%8F%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Tensorflow中常见的变量初始化函数"><a href="#Tensorflow中常见的变量初始化函数" class="headerlink" title="Tensorflow中常见的变量初始化函数"></a>Tensorflow中常见的变量初始化函数</h2><table><thead><tr><th>初始化函数</th><th>功能</th><th>主要参数</th></tr></thead><tbody><tr><td>tf.constant_initializer</td><td>将变量初始化为给定的常量</td><td>常量的取值</td></tr><tr><td>tf.random_normal_initializer</td><td>将变量初始化为满足正态分布的随机值</td><td>正态分布的均值和标准差</td></tr><tr><td>tf.truncated_normal_initializer</td><td>将变量初始化为满足正态分布的随机值，但如果随机出来的值偏离平均值超过2个标准差，那么这个数将会被重新随机</td><td>正态分布的均值和标准差</td></tr><tr><td>tf.random_uniform_initializer</td><td>将变量初始化为满足平均分布的随机值</td><td>最大，最小值</td></tr><tr><td>tf.uniform_unit_scaling_initializer</td><td>将变量初始化为满足平均分布但不影响输出量级的随机值</td><td>factor(产生随机值时乘以的系数)</td></tr><tr><td>tf.zero_initializer</td><td>将变量设置为0</td><td>变量维度</td></tr><tr><td>tf.ones_initializer</td><td>将变量设置为1</td><td>变量维度</td></tr></tbody></table><hr><h2 id="使用tf-variable-scope函数来控制tf-get-variable函数获取已经创建的函数"><a href="#使用tf-variable-scope函数来控制tf-get-variable函数获取已经创建的函数" class="headerlink" title="使用tf.variable_scope函数来控制tf.get_variable函数获取已经创建的函数"></a>使用tf.variable_scope函数来控制tf.get_variable函数获取已经创建的函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在名字为foo的命名空间内创建名字为v的变量</span></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>):</span><br><span class="line">    v = tf.get_variable(<span class="string">"v"</span>, [<span class="number">1</span>], initializer=tf.constant_initializer(<span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">命名空间foo中已经存在变量v，所以下面的代码将会报错:Variable foo/v already exitst,disallowed.Did you mean to set reuse=True in VarScope?</span></span><br><span class="line"><span class="string">'''</span>              </span><br><span class="line"><span class="comment">#with tf.variable_scope("foo"):</span></span><br><span class="line">   <span class="comment"># v = tf.get_variable("v", [1])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在生成上下文管理器时，将参数reuse 设置为True.这样tf.get_variable 函数将直接获取已经声明的变量    </span></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>, reuse=<span class="keyword">True</span>):</span><br><span class="line">    v1 = tf.get_variable(<span class="string">"v"</span>, [<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> v == v1   <span class="comment">#输出为True,代表v,v1代表的是相同的TensorFlow 中变量。</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">将参数reuse 设置为True 时，tf.variable_scope 将只能获取已经创建过的变量。因为在命名空间bar 中还没有创建变量v，所以下面的代码将会报错:Variable foo/v not exitst,disallowed.Did you mean to set reuse=None in VarScope?</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#with tf.variable_scope("bar", reuse=True):</span></span><br><span class="line">   <span class="comment"># v = tf.get_variable("v", [1])</span></span><br></pre></td></tr></table></figure><h4 id="上面的样例简单地说明了通过tf-variable-scope-函数可以控制tf-get-variable函数的语义。当tf-variable-scope-函数使用参数reuse-True-生成上下文管理器时，这个上下文管理器内所有的tf-get-variable-函数会直接获取已经创建的变量。如果变量不存在，则tf-get-variable函数将报错-相反，如果tf-variabe-scope-函数使用参数reuse-None-或者reuse-False-创建上下文管理器，tf-get-variable-操作将创建新的变量。如果同名的变量已经存在，则tf-get-variable函数将报错。TensorFlow-中tf-variable-scope函数是可以嵌套的。下面的程序说明了当tf-variable-scope函数嵌套时，reuse参数的取值是如何确定的。"><a href="#上面的样例简单地说明了通过tf-variable-scope-函数可以控制tf-get-variable函数的语义。当tf-variable-scope-函数使用参数reuse-True-生成上下文管理器时，这个上下文管理器内所有的tf-get-variable-函数会直接获取已经创建的变量。如果变量不存在，则tf-get-variable函数将报错-相反，如果tf-variabe-scope-函数使用参数reuse-None-或者reuse-False-创建上下文管理器，tf-get-variable-操作将创建新的变量。如果同名的变量已经存在，则tf-get-variable函数将报错。TensorFlow-中tf-variable-scope函数是可以嵌套的。下面的程序说明了当tf-variable-scope函数嵌套时，reuse参数的取值是如何确定的。" class="headerlink" title="上面的样例简单地说明了通过tf.variable_scope 函数可以控制tf.get_variable函数的语义。当tf.variable_scope 函数使用参数reuse=True 生成上下文管理器时，这个上下文管理器内所有的tf.get_variable 函数会直接获取已经创建的变量。如果变量不存在，则tf.get_variable函数将报错; 相反，如果tf.variabe_scope 函数使用参数reuse=None 或者reuse=False 创建上下文管理器，tf.get_variable 操作将创建新的变量。如果同名的变量已经存在，则tf.get_variable函数将报错。TensorFlow 中tf.variable_scope函数是可以嵌套的。下面的程序说明了当tf.variable_scope函数嵌套时，reuse参数的取值是如何确定的。"></a><em>上面的样例简单地说明了通过tf.variable_scope 函数可以控制tf.get_variable函数的语义。当tf.variable_scope 函数使用参数reuse=True 生成上下文管理器时，这个上下文管理器内所有的tf.get_variable 函数会直接获取已经创建的变量。如果变量不存在，则tf.get_variable函数将报错; 相反，如果tf.variabe_scope 函数使用参数reuse=None 或者reuse=False 创建上下文管理器，tf.get_variable 操作将创建新的变量。如果同名的变量已经存在，则tf.get_variable函数将报错。TensorFlow 中tf.variable_scope函数是可以嵌套的。下面的程序说明了当tf.variable_scope函数嵌套时，reuse参数的取值是如何确定的。</em></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"root"</span>):</span><br><span class="line"><span class="comment">#可以通过tf.variable_scope()函数来获取当前上下文管理器中reuse参数的取值</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">print</span> tf.get_variable_scope().reuse<span class="comment">#输出False，即最外层reuse为False。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新建一个嵌套的上下文管理器，并指定reuse 为True。</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>, reuse=<span class="keyword">True</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> tf.get_variable_scope().reuse</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#新建一个嵌套的上下文管理器但不指定reuse,这时reuse的取值会和外面一层保持一致。    </span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">"bar"</span>):</span><br><span class="line">            <span class="keyword">print</span> tf.get_variable_scope().reuse<span class="comment">#输出True。</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">print</span> tf.get_variable_scope().reuse</span><br><span class="line">    <span class="comment">#输出False。退出reuse 设置为True 的上下文之后的值又回到了False。</span></span><br></pre></td></tr></table></figure><h4 id="tf-variable-scope函数生成的上下文管理器也会创建个TensorFlow中的命名空间，在命名空间内创建的变量名称都会带上这个命名空间名作为前级缀。所以，tf-variable-scope函数除了可以控制tf-get-variable执行的功能之外，这个函数也提供了一个管理变量命名空间的方式。以下代码显示了如何通过tf-variable-scope来管理变量的名称。"><a href="#tf-variable-scope函数生成的上下文管理器也会创建个TensorFlow中的命名空间，在命名空间内创建的变量名称都会带上这个命名空间名作为前级缀。所以，tf-variable-scope函数除了可以控制tf-get-variable执行的功能之外，这个函数也提供了一个管理变量命名空间的方式。以下代码显示了如何通过tf-variable-scope来管理变量的名称。" class="headerlink" title="tf.variable_scope函数生成的上下文管理器也会创建个TensorFlow中的命名空间，在命名空间内创建的变量名称都会带上这个命名空间名作为前级缀。所以，tf.variable_scope函数除了可以控制tf.get_variable执行的功能之外，这个函数也提供了一个管理变量命名空间的方式。以下代码显示了如何通过tf.variable_scope来管理变量的名称。"></a><em>tf.variable_scope函数生成的上下文管理器也会创建个TensorFlow中的命名空间，在命名空间内创建的变量名称都会带上这个命名空间名作为前级缀。所以，tf.variable_scope函数除了可以控制tf.get_variable执行的功能之外，这个函数也提供了一个管理变量命名空间的方式。以下代码显示了如何通过tf.variable_scope来管理变量的名称。</em></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">v1 = tf.get_variable(<span class="string">"v"</span>, [<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> v1.name<span class="comment">#输出v:0"v" 为变量的名称，“:0”表示这个变量是生成变量这个运算的第一个结果。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>,reuse=<span class="keyword">True</span>):</span><br><span class="line">    v2 = tf.get_variable(<span class="string">"v"</span>, [<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> v2.name<span class="comment">#输出foo/v:O.在tf.variabie_scope中创建的变量，名称前面会加入命名空间的名称，并通过/来分隔命名空间的名称和变量的名称。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">"foo"</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"bar"</span>):</span><br><span class="line">        v3 = tf.get_variable(<span class="string">"v"</span>, [<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">print</span> v3.name<span class="comment">#输出foo/bar 'v :0。命名空间可以嵌套，同时变量的名称也会加入所有命名空间的名称作为前缀。</span></span><br><span class="line">        </span><br><span class="line">v4 = tf.get_variable(<span class="string">"v1"</span>, [<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> v4.name<span class="comment">#输出foo/v1:0。当命名空间退出之后，变量名称也就不会再被加入其前缀了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个名称为空的命名空间，并设置为reuse=True</span></span><br><span class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">""</span>,reuse=<span class="keyword">True</span>):</span><br><span class="line">    v5 = tf.get_variable(<span class="string">"foo/bar/v"</span>, [<span class="number">1</span>])</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    可以直接通过带命名空间名称的变量名来获取其他命名空   间下的变量。比如这里通过指定名称foo/bar/v来获取在命名空间foo/bar/中创建的变量。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> v5 == v3   <span class="comment">#输出True。</span></span><br><span class="line">    v6 = tf.get_variable(<span class="string">"v1"</span>, [<span class="number">1</span>])     </span><br><span class="line">    <span class="keyword">print</span> v6 == v4   <span class="comment">#输出True.</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium下载文件</title>
      <link href="/2017/11/09/Selenium%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
      <url>/2017/11/09/Selenium%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Firefox文件下载"><a href="#一、Firefox文件下载" class="headerlink" title="一、Firefox文件下载"></a>一、Firefox文件下载</h2><hr><h3 id="Web容许我们设置默认的文件下载路劲，文件会自动下载并且存放在指定的目录下。"><a href="#Web容许我们设置默认的文件下载路劲，文件会自动下载并且存放在指定的目录下。" class="headerlink" title="Web容许我们设置默认的文件下载路劲，文件会自动下载并且存放在指定的目录下。"></a>Web容许我们设置默认的文件下载路劲，文件会自动下载并且存放在指定的目录下。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">fp = webdriver.FirefoxProfile()</span><br><span class="line">fp.set_preference(<span class="string">"browser.download.folderList"</span>,<span class="number">0</span>)</span><br><span class="line">fp.set_preference(<span class="string">"browser.download.manager.showhenStarting"</span>,<span class="keyword">True</span>)</span><br><span class="line">fp.set_preference(<span class="string">"browser.download.dir"</span>,os.getcwd())</span><br><span class="line">fp.set_preference(<span class="string">"browser.helperApps.neverAsk.saveToDisk"</span>,<span class="string">"applaction/octet-stream"</span>)<span class="comment">#下载文件类型</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox(firefox_profile = fp)</span><br><span class="line">driver.get(<span class="string">"http://pypi.Python.org/pypi/selenium"</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id='download-button']/a"</span>).click()</span><br><span class="line"> </span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id='content']/div[3]/table/tbody/tr[3]/td[1]/span/a[1]"</span>).click()</span><br></pre></td></tr></table></figure><h4 id="为了让Firefox浏览器能实现文件下载，需要通过FirefoxProfile（）对其做一些设置。"><a href="#为了让Firefox浏览器能实现文件下载，需要通过FirefoxProfile（）对其做一些设置。" class="headerlink" title="为了让Firefox浏览器能实现文件下载，需要通过FirefoxProfile（）对其做一些设置。"></a>为了让Firefox浏览器能实现文件下载，需要通过FirefoxProfile（）对其做一些设置。</h4><h4 id="browser-download-foladerList-设置成0代表下载到浏览器默认下载路径，设置成2则可以保存到指定的目录。"><a href="#browser-download-foladerList-设置成0代表下载到浏览器默认下载路径，设置成2则可以保存到指定的目录。" class="headerlink" title="browser.download.foladerList :设置成0代表下载到浏览器默认下载路径，设置成2则可以保存到指定的目录。"></a>browser.download.foladerList :设置成0代表下载到浏览器默认下载路径，设置成2则可以保存到指定的目录。</h4><h4 id="browser-download-manager-showWhenStarting-是否显示开始：True为显示开始，Flase为不显示开始。"><a href="#browser-download-manager-showWhenStarting-是否显示开始：True为显示开始，Flase为不显示开始。" class="headerlink" title="browser.download.manager.showWhenStarting  :是否显示开始：True为显示开始，Flase为不显示开始。"></a>browser.download.manager.showWhenStarting  :是否显示开始：True为显示开始，Flase为不显示开始。</h4><h4 id="browser-download-dir-用于指定所下载文件的目录。"><a href="#browser-download-dir-用于指定所下载文件的目录。" class="headerlink" title="browser.download.dir :用于指定所下载文件的目录。"></a>browser.download.dir :用于指定所下载文件的目录。</h4><h4 id="os-getcwd（）函数不需要传递参数。用于返回当前的目录。"><a href="#os-getcwd（）函数不需要传递参数。用于返回当前的目录。" class="headerlink" title="os.getcwd（）函数不需要传递参数。用于返回当前的目录。"></a>os.getcwd（）函数不需要传递参数。用于返回当前的目录。</h4><h4 id="browser-helperApps-neverAsk-saveToDisk-对所给文件类型不再弹出框进行询问。"><a href="#browser-helperApps-neverAsk-saveToDisk-对所给文件类型不再弹出框进行询问。" class="headerlink" title="browser.helperApps.neverAsk.saveToDisk  :对所给文件类型不再弹出框进行询问。"></a>browser.helperApps.neverAsk.saveToDisk  :对所给文件类型不再弹出框进行询问。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">profile = webdriver.FirefoxProfile()</span><br><span class="line">profile.set_preference(<span class="string">'browser.download.dir'</span>, <span class="string">'d:\\'</span>)  <span class="comment">#现在文件存放的目录</span></span><br><span class="line">profile.set_preference(<span class="string">'browser.download.folderList'</span>, <span class="number">2</span>)</span><br><span class="line">profile.set_preference(<span class="string">'browser.download.manager.showWhenStarting'</span>, <span class="keyword">False</span>)</span><br><span class="line">profile.set_preference(<span class="string">'browser.helperApps.neverAsk.saveToDisk'</span>, <span class="string">'application/zip'</span>)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox(firefox_profile=profile)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'http://sahitest.com/demo/saveAs.htm'</span>)</span><br><span class="line"><span class="comment">#driver.find_element_by_xpath('//a[text()="testsaveas.zip"]').click()</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">'/html/body/a[1]'</span>).click()</span><br><span class="line">sleep(<span class="number">20</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><hr><h2 id="二、Chrome文件下载"><a href="#二、Chrome文件下载" class="headerlink" title="二、Chrome文件下载"></a>二、Chrome文件下载</h2><hr><h3 id="download-default-directory-设置下载路径"><a href="#download-default-directory-设置下载路径" class="headerlink" title="download.default_directory:设置下载路径"></a>download.default_directory:设置下载路径</h3><h3 id="profile-default-content-settings-popups-设置为0禁止弹出窗口"><a href="#profile-default-content-settings-popups-设置为0禁止弹出窗口" class="headerlink" title="profile.default_content_settings.popups:设置为0禁止弹出窗口"></a>profile.default_content_settings.popups:设置为0禁止弹出窗口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">options = webdriver.ChromeOptions() </span><br><span class="line">prefs = &#123;<span class="string">'profile.default_content_settings.popups'</span>: <span class="number">0</span>, <span class="string">'download.default_directory'</span>: <span class="string">'d:\\'</span>&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">'prefs'</span>, prefs) </span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">'D:\\chromedriver.exe'</span>, chrome_options=options) </span><br><span class="line">driver.get(<span class="string">'http://sahitest.com/demo/saveAs.htm'</span>) </span><br><span class="line">driver.find_element_by_xpath(<span class="string">'//a[text()="testsaveas.zip"]'</span>).click() </span><br><span class="line">sleep(<span class="number">3</span>) </span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><img src="/images/selenium下载文件/4215C8D9-2CA6-4CD2-A229-AC1EDD125898.png" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium中的常见报错</title>
      <link href="/2017/11/09/Selenium%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/"/>
      <url>/2017/11/09/Selenium%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: cannot import name ‘webdriver&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selenium.common.exceptions.WebDriverException: Message: &apos;chromedriver&apos; executable needs to be in PATH</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selenium.common.exceptions.WebDriverException: Message: &apos;chromedriver.exe&apos; executable needs to be in PATH.</span><br></pre></td></tr></table></figure><h4 id="Please-see-https-sites-google-com-a-chromium-org-chromedriver-home原因是由于没有将chromedriver-exe放在-usr-bin-目录里"><a href="#Please-see-https-sites-google-com-a-chromium-org-chromedriver-home原因是由于没有将chromedriver-exe放在-usr-bin-目录里" class="headerlink" title="Please see https://sites.google.com/a/chromium.org/chromedriver/home原因是由于没有将chromedriver.exe放在/usr/bin/目录里"></a>Please see <a href="https://sites.google.com/a/chromium.org/chromedriver/home原因是由于没有将chromedriver.exe放在/usr/bin/目录里" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/home原因是由于没有将chromedriver.exe放在/usr/bin/目录里</a></h4><h4 id="在导入是要注意："><a href="#在导入是要注意：" class="headerlink" title="在导入是要注意："></a>在导入是要注意：</h4><p><img src="/images/selenium中的常见报错/CE365A8A-7372-4629-9C12-03A304E99BDA.png" alt="这里写图片描述"></p><h5 id="第四行"><a href="#第四行" class="headerlink" title="第四行"></a>第四行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(r&quot;/usr/bin/chromedriver”) </span><br><span class="line">``` </span><br><span class="line">##### 中应该是chromedrive.exe的路径</span><br><span class="line">---</span><br><span class="line">### 2.</span><br><span class="line">```python</span><br><span class="line">======================================================================</span><br><span class="line">ERROR: test_search_in_python_org (__main__.mytest)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;mystyle.py&quot;, line 12, in test_search_in_python_org</span><br><span class="line">    driver.get(&quot;www.baidu.com&quot;)</span><br><span class="line">  File &quot;/Users/zhangjia/anaconda/lib/python3.6/site-packages/selenium/webdriver/remote/webdriver.py&quot;, line 309, in get</span><br><span class="line">    self.execute(Command.GET, &#123;&apos;url&apos;: url&#125;)</span><br><span class="line">  File &quot;/Users/zhangjia/anaconda/lib/python3.6/site-packages/selenium/webdriver/remote/webdriver.py&quot;, line 297, in execute</span><br><span class="line">    self.error_handler.check_response(response)</span><br><span class="line">  File &quot;/Users/zhangjia/anaconda/lib/python3.6/site-packages/selenium/webdriver/remote/errorhandler.py&quot;, line 194, in check_response</span><br><span class="line">    raise exception_class(message, screen, stacktrace)</span><br><span class="line">selenium.common.exceptions.WebDriverException: Message: unknown error: unhandled inspector error: &#123;&quot;code&quot;:-32000,&quot;message&quot;:&quot;Cannot navigate to invalid URL&quot;&#125;</span><br><span class="line">  (Session info: chrome=61.0.3163.100)</span><br><span class="line">  (Driver info: chromedriver=2.32.498537 (cb2f855cbc7b82e20387eaf9a43f6b99b6105061),platform=Mac OS X 10.12.6 x86_64)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 1.896s</span><br><span class="line">FAILED (errors=1)</span><br></pre></td></tr></table></figure><h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p><img src="/images/selenium中的常见报错/A81077B3-E0FA-4926-A703-7113995E53B4.png" alt="这里写图片描述"></p><h4 id="第十二行应该是http-www-baidu-com不是www-baidu-com"><a href="#第十二行应该是http-www-baidu-com不是www-baidu-com" class="headerlink" title="第十二行应该是http://www.baidu.com不是www.baidu.com"></a>第十二行应该是<a href="http://www.baidu.com不是www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com不是www.baidu.com</a></h4>]]></content>
      
      
      <categories>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium中如何定位伪元素</title>
      <link href="/2017/11/09/Selenium%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
      <url>/2017/11/09/Selenium%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E4%BC%AA%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/selenium中如何定位伪元素/891836AD-6626-445F-86E4-4CC3CCBFECE5.png" alt="这里写图片描述"><br>定位方法：<br>driver.find_element_by_css_selector(‘div.panel-body&gt;div’)</p>]]></content>
      
      
      <categories>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串前缀 u和r的区别</title>
      <link href="/2017/11/09/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E7%BC%80-u%E5%92%8Cr%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/11/09/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E7%BC%80-u%E5%92%8Cr%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>在python2里面，u表示unicode string，类型是unicode, 没有u表示byte string，类型是 str。在python3里面，所有字符串都是unicode string, u前缀没有特殊含义了。r都表示raw string. 与特殊字符的escape规则有关，一般用在正则表达式里面。r和u可以搭配使用，例如ur”abc”。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3格式化输出</title>
      <link href="/2017/11/09/Python3%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
      <url>/2017/11/09/Python3%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="python格式化字符串有-和-两种-字符串格式控制符"><a href="#python格式化字符串有-和-两种-字符串格式控制符" class="headerlink" title="python格式化字符串有%和{}两种 字符串格式控制符."></a>python格式化字符串有%和{}两种 字符串格式控制符.</h2><hr><h3 id="字符串输入数据格式类型-格式操作符号"><a href="#字符串输入数据格式类型-格式操作符号" class="headerlink" title="字符串输入数据格式类型(%格式操作符号)"></a>字符串输入数据格式类型(%格式操作符号)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%%百分号标记</span><br><span class="line">%c字符及其ASCII码</span><br><span class="line">%s字符串</span><br><span class="line">%d有符号整数(十进制)</span><br><span class="line">%u无符号整数(十进制)</span><br><span class="line">%o无符号整数(八进制)</span><br><span class="line">%x无符号整数(十六进制)</span><br><span class="line">%X无符号整数(十六进制大写字符)</span><br><span class="line">%e浮点数字(科学计数法)</span><br><span class="line">%E浮点数字(科学计数法，用E代替e)</span><br><span class="line">%f浮点数字(用小数点符号)</span><br><span class="line">%g浮点数字(根据值的大小采用%e或%f)</span><br><span class="line">%G浮点数字(类似于%g)</span><br><span class="line">%p指针(用十六进制打印值的内存地址)</span><br><span class="line">%n存储输出字符的数量放进参数列表的下一个变量中</span><br></pre></td></tr></table></figure><hr><h3 id="字符串格式控制-name-flag-width-precision-type"><a href="#字符串格式控制-name-flag-width-precision-type" class="headerlink" title="字符串格式控制%[(name)][flag][width][.][precision]type"></a>字符串格式控制%[(name)][flag][width][.][precision]type</h3><h4 id="name-可为空，数字-占位-命名-传递参数名-不能以数字开头-以字典格式映射格式化，其为键名"><a href="#name-可为空，数字-占位-命名-传递参数名-不能以数字开头-以字典格式映射格式化，其为键名" class="headerlink" title="name:可为空，数字(占位),命名(传递参数名,不能以数字开头)以字典格式映射格式化，其为键名"></a>name:可为空，数字(占位),命名(传递参数名,不能以数字开头)以字典格式映射格式化，其为键名</h4><h4 id="flag-标记格式限定符号-包含-和0-表示右对齐-会显示正负号-左对齐-前面默认为填充空格-即默认右对齐-，0表示填充0，-表示八进制时前面补充0-16进制数填充0x-二进制填充0b"><a href="#flag-标记格式限定符号-包含-和0-表示右对齐-会显示正负号-左对齐-前面默认为填充空格-即默认右对齐-，0表示填充0，-表示八进制时前面补充0-16进制数填充0x-二进制填充0b" class="headerlink" title="flag:标记格式限定符号,包含+-#和0,+表示右对齐(会显示正负号),-左对齐,前面默认为填充空格(即默认右对齐)，0表示填充0，#表示八进制时前面补充0,16进制数填充0x,二进制填充0b"></a>flag:标记格式限定符号,包含+-#和0,+表示右对齐(会显示正负号),-左对齐,前面默认为填充空格(即默认右对齐)，0表示填充0，#表示八进制时前面补充0,16进制数填充0x,二进制填充0b</h4><h4 id="width-宽度-最短长度-包含小数点-小于width时会填充"><a href="#width-宽度-最短长度-包含小数点-小于width时会填充" class="headerlink" title="width:宽度(最短长度,包含小数点,小于width时会填充)"></a>width:宽度(最短长度,包含小数点,小于width时会填充)</h4><h4 id="precision-小数点后的位数-与C相同"><a href="#precision-小数点后的位数-与C相同" class="headerlink" title="precision:小数点后的位数,与C相同"></a>precision:小数点后的位数,与C相同</h4><h4 id="type-输入格式类型，请看上面"><a href="#type-输入格式类型，请看上面" class="headerlink" title="type:输入格式类型，请看上面"></a>type:输入格式类型，请看上面</h4><h4 id="还有一种format-spec格式"><a href="#还有一种format-spec格式" class="headerlink" title="还有一种format_spec格式"></a>还有一种format_spec格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;[name][:][[fill]align][sign][#][0][width][,][.precision][type]&#125;</span><br><span class="line">用&#123;&#125;包裹name命名传递给format以命名=值 写法,非字典映射,其他和上面相同</span><br><span class="line"></span><br><span class="line">fill =  &lt;any character&gt;　　#fill是表示可以填写任何</span><br><span class="line">align =  &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot;　　#align是对齐方式，&lt;是左对齐， &gt;是右对齐，^是居中对齐。</span><br><span class="line">sign  =  &quot;+&quot; | &quot;-&quot; | &quot; &quot;　　#sign是符号， +表示正号， -表示负号</span><br><span class="line">width =  integer　　#width是数字宽度，表示总共输出多少位数字</span><br><span class="line">precision =  integer　　#precision是小数保留位数</span><br><span class="line">type =  &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;　　#type是输出数字值是的表示方式</span><br><span class="line">比如b是二进制表示；比如E是指数表示；比如X是十六进制表示例子</span><br></pre></td></tr></table></figure><hr><p>###例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"&#123;:,&#125;"</span>.format(<span class="number">123456</span>))<span class="comment">#输出1234,56</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;a:w^8&#125;"</span>.format(a=<span class="string">"8"</span>))<span class="comment">#输出www8wwww,填充w</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%.5f"</span> %<span class="number">5</span>)<span class="comment">#输出5.000000</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%-7s3"</span> %(<span class="string">"python"</span>))<span class="comment">#输出python 3</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%.3e"</span> %<span class="number">2016</span>)<span class="comment">#输出2.016e+03,也可以写大E</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%d %s"</span> %(<span class="number">123456</span>,<span class="string">"myblog"</span>))<span class="comment">#输出123456 myblog</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%(what)s is %(year)d"</span> % &#123;<span class="string">"what"</span>:<span class="string">"this year"</span>,<span class="string">"year"</span>:<span class="number">2016</span>&#125;)<span class="comment">#输出this year is 2016</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"&#123;0&#125;&#123;1&#125;"</span>.format(<span class="string">"hello"</span>,<span class="string">"fun"</span>))<span class="comment">#输出hellofun,这与CSharp的格式化字符(占位符)相似</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;&#125;&#123;&#125;&#123;&#125;"</span>.format(<span class="string">"spkk"</span>,<span class="string">"."</span>,<span class="string">"cn"</span>))<span class="comment">#输出spkk.cn</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;a[0]&#125;&#123;a[1]&#125;&#123;a[2]&#125;"</span>.format(a=[<span class="string">"spkk"</span>,<span class="string">"."</span>,<span class="string">"cn"</span>]))<span class="comment">#输出spkk.cn</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;dict[host]&#125;&#123;dict[dot]&#125;&#123;dict[domain]&#125;"</span>.format(dict=&#123;<span class="string">"host"</span>:<span class="string">"www"</span>,<span class="string">"domain"</span>:<span class="string">"spkk.cn"</span>,<span class="string">"dot"</span>:<span class="string">"."</span>&#125;))<span class="comment">#输出www.spkk.cn</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;a&#125;&#123;b&#125;"</span>.format(a=<span class="string">"python"</span>,b=<span class="string">"3"</span>))<span class="comment">#输出python3</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"&#123;who&#125; &#123;doing&#125; &#123;0&#125;"</span>.format(<span class="string">"python"</span>,doing=<span class="string">"like"</span>,who=<span class="string">"I"</span>))<span class="comment">#输出I like python</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow中一些常见的函数</title>
      <link href="/2017/11/09/Tensorflow%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2017/11/09/Tensorflow%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Tensorflow中一些常见的函数"><a href="#Tensorflow中一些常见的函数" class="headerlink" title="Tensorflow中一些常见的函数"></a>Tensorflow中一些常见的函数</h2><hr><h3 id="1-tf-constant-value-dtype-None-shape-None-name-39-Const-39"><a href="#1-tf-constant-value-dtype-None-shape-None-name-39-Const-39" class="headerlink" title="1.tf.constant(value,dtype=None,shape=None,name=&#39;Const&#39;)"></a>1.<code>tf.constant(value,dtype=None,shape=None,name=&#39;Const&#39;)</code></h3><h4 id="创建一个常量tensor，按照给出value来赋值，可以用shape来指定其形状。value可以是一个数，也可以是一个list。-如果是一个数，那么这个常亮中所有值的按该数来赋值。-如果是list-那么len-value-一定要小于等于shape展开后的长度。赋值时，先将value中的值逐个存入。不够的部分，则全部存入value的最后一个值。"><a href="#创建一个常量tensor，按照给出value来赋值，可以用shape来指定其形状。value可以是一个数，也可以是一个list。-如果是一个数，那么这个常亮中所有值的按该数来赋值。-如果是list-那么len-value-一定要小于等于shape展开后的长度。赋值时，先将value中的值逐个存入。不够的部分，则全部存入value的最后一个值。" class="headerlink" title="创建一个常量tensor，按照给出value来赋值，可以用shape来指定其形状。value可以是一个数，也可以是一个list。 如果是一个数，那么这个常亮中所有值的按该数来赋值。 如果是list,那么len(value)一定要小于等于shape展开后的长度。赋值时，先将value中的值逐个存入。不够的部分，则全部存入value的最后一个值。"></a>创建一个常量tensor，按照给出value来赋值，可以用shape来指定其形状。value可以是一个数，也可以是一个list。 如果是一个数，那么这个常亮中所有值的按该数来赋值。 如果是list,那么len(value)一定要小于等于shape展开后的长度。赋值时，先将value中的值逐个存入。不够的部分，则全部存入value的最后一个值。</h4><p><img src="/images/Tensorflow中一些常见的函数/8FDE1211-6891-4480-8350-BC1FE07EDCE5.png" alt="这里写图片描述"></p><hr><h3 id="2-tf-nn-relu"><a href="#2-tf-nn-relu" class="headerlink" title="2.tf.nn.relu"></a>2.<code>tf.nn.relu</code></h3><h2 id="使用激活函数relu进行计算-类似的还有-tf-sigmoid-tf-tanh"><a href="#使用激活函数relu进行计算-类似的还有-tf-sigmoid-tf-tanh" class="headerlink" title="####使用激活函数relu进行计算 类似的还有 tf.sigmoid , tf.tanh"></a>####使用激活函数relu进行计算 类似的还有 <code>tf.sigmoid</code> , <code>tf.tanh</code></h2><h3 id="3-tf-matmul"><a href="#3-tf-matmul" class="headerlink" title="3.tf.matmul"></a>3.<code>tf.matmul</code></h3><h4 id="进行矩阵相乘"><a href="#进行矩阵相乘" class="headerlink" title="进行矩阵相乘"></a>进行矩阵相乘</h4><hr><h3 id="4-tf-placeholder"><a href="#4-tf-placeholder" class="headerlink" title="4.tf.placeholder"></a>4.<code>tf.placeholder</code></h3><h4 id="运行时传入参数-placeholder（type-strucuct…-它的第一个参数是你要保存的数据的数据类型，大多数是tensorflow中的float32数据类型，后面的参数就是要保存数据的结构，比如要保存一个1×2的矩阵，则struct-1-2-。"><a href="#运行时传入参数-placeholder（type-strucuct…-它的第一个参数是你要保存的数据的数据类型，大多数是tensorflow中的float32数据类型，后面的参数就是要保存数据的结构，比如要保存一个1×2的矩阵，则struct-1-2-。" class="headerlink" title="运行时传入参数,placeholder（type,strucuct…)它的第一个参数是你要保存的数据的数据类型，大多数是tensorflow中的float32数据类型，后面的参数就是要保存数据的结构，比如要保存一个1×2的矩阵，则struct=[1 2]。"></a>运行时传入参数,placeholder（type,strucuct…)它的第一个参数是你要保存的数据的数据类型，大多数是tensorflow中的float32数据类型，后面的参数就是要保存数据的结构，比如要保存一个1×2的矩阵，则struct=[1 2]。</h4><hr><h3 id="5-tf-Variable（initializer，-name"><a href="#5-tf-Variable（initializer，-name" class="headerlink" title="5.tf.Variable（initializer， name)"></a>5.<code>tf.Variable（initializer， name)</code></h3><h4 id="initializer是初始化参数，可以为tf-random-normal，tf-constant，tf-constant等，name就是变量的名字，用法如下："><a href="#initializer是初始化参数，可以为tf-random-normal，tf-constant，tf-constant等，name就是变量的名字，用法如下：" class="headerlink" title="initializer是初始化参数，可以为tf.random_normal，tf.constant，tf.constant等，name就是变量的名字，用法如下："></a>initializer是初始化参数，可以为tf.random_normal，tf.constant，tf.constant等，name就是变量的名字，用法如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf;</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np;    </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt;    </span><br><span class="line">    </span><br><span class="line">a1 = tf.Variable(tf.random_normal(shape=[<span class="number">2</span>,<span class="number">3</span>], mean=<span class="number">0</span>, stddev=<span class="number">1</span>), name=<span class="string">'a1'</span>)  </span><br><span class="line">a2 = tf.Variable(tf.constant(<span class="number">1</span>), name=<span class="string">'a2'</span>)  </span><br><span class="line">a3 = tf.Variable(tf.ones(shape=[<span class="number">2</span>,<span class="number">3</span>]), name=<span class="string">'a3'</span>)  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:  </span><br><span class="line">     sess.run(tf.initialize_all_variables())  </span><br><span class="line">     <span class="keyword">print</span> sess.run(a1)  </span><br><span class="line">     <span class="keyword">print</span> sess.run(a2)  </span><br><span class="line">     <span class="keyword">print</span> sess.run(a3)</span><br></pre></td></tr></table></figure><h4 id="输出的结果如下："><a href="#输出的结果如下：" class="headerlink" title="输出的结果如下："></a>输出的结果如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">[[ 0.76599932  0.99722123 -0.89361787]</span><br><span class="line"> [ 0.19991693 -0.16539733  2.16605783]]</span><br><span class="line">1</span><br><span class="line">[[ 1.  1.  1.]</span><br><span class="line"> [ 1.  1.  1.]]</span><br></pre></td></tr></table></figure><hr><h3 id="6-tf-truncated-normal-shape-mean-stddev"><a href="#6-tf-truncated-normal-shape-mean-stddev" class="headerlink" title="6.tf.truncated_normal(shape, mean, stddev)"></a>6.<code>tf.truncated_normal(shape, mean, stddev)</code></h3><h4 id="shape表示生成张量的维度，mean是均值，stddev是标准差。这个函数产生正太分布，均值和标准差自己设定。这是一个截断的产生正太分布的函数，就是说产生正太分布的值如果与均值的差值大于两倍的标准差，那就重新生成。和一般的正太分布的产生随机数据比起来，这个函数产生的随机数与均值的差距不会超过两倍的标准差，但是一般的别的函数是可能的。"><a href="#shape表示生成张量的维度，mean是均值，stddev是标准差。这个函数产生正太分布，均值和标准差自己设定。这是一个截断的产生正太分布的函数，就是说产生正太分布的值如果与均值的差值大于两倍的标准差，那就重新生成。和一般的正太分布的产生随机数据比起来，这个函数产生的随机数与均值的差距不会超过两倍的标准差，但是一般的别的函数是可能的。" class="headerlink" title="shape表示生成张量的维度，mean是均值，stddev是标准差。这个函数产生正太分布，均值和标准差自己设定。这是一个截断的产生正太分布的函数，就是说产生正太分布的值如果与均值的差值大于两倍的标准差，那就重新生成。和一般的正太分布的产生随机数据比起来，这个函数产生的随机数与均值的差距不会超过两倍的标准差，但是一般的别的函数是可能的。"></a>shape表示生成张量的维度，mean是均值，stddev是标准差。这个函数产生正太分布，均值和标准差自己设定。这是一个截断的产生正太分布的函数，就是说产生正太分布的值如果与均值的差值大于两倍的标准差，那就重新生成。和一般的正太分布的产生随机数据比起来，这个函数产生的随机数与均值的差距不会超过两倍的标准差，但是一般的别的函数是可能的。</h4><p>###示例代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf;  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np;  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt;  </span><br><span class="line">  </span><br><span class="line">c = tf.truncated_normal(shape=[<span class="number">10</span>,<span class="number">10</span>], mean=<span class="number">0</span>, stddev=<span class="number">1</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:  </span><br><span class="line">    <span class="keyword">print</span> sess.run(c)</span><br></pre></td></tr></table></figure></p><h4 id="输出结果如下："><a href="#输出结果如下：" class="headerlink" title="输出结果如下："></a>输出结果如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">[[ <span class="number">1.95758033</span> <span class="number">-0.68666345</span> <span class="number">-1.83860338</span>  <span class="number">0.78213859</span> <span class="number">-1.08119416</span> <span class="number">-1.44530308</span></span><br><span class="line">   <span class="number">0.38035342</span>  <span class="number">0.57904619</span> <span class="number">-0.57145643</span> <span class="number">-1.22899497</span>]</span><br><span class="line"> [<span class="number">-0.75853795</span>  <span class="number">0.48202974</span>  <span class="number">1.03464043</span>  <span class="number">1.19210851</span> <span class="number">-0.15739718</span>  <span class="number">0.8506189</span></span><br><span class="line">   <span class="number">1.18259966</span> <span class="number">-0.99061841</span> <span class="number">-0.51968449</span>  <span class="number">1.38996458</span>]</span><br><span class="line"> [ <span class="number">1.05636907</span> <span class="number">-0.02668529</span>  <span class="number">0.64182931</span>  <span class="number">0.4110294</span>  <span class="number">-0.4978295</span>  <span class="number">-0.64912242</span></span><br><span class="line">   <span class="number">1.27779591</span> <span class="number">-0.01533993</span>  <span class="number">0.47417602</span> <span class="number">-1.28639436</span>]</span><br><span class="line"> [<span class="number">-1.65927458</span> <span class="number">-0.364887</span>   <span class="number">-0.45535028</span>  <span class="number">0.078814</span>   <span class="number">-0.30295736</span>  <span class="number">1.91779387</span></span><br><span class="line">  <span class="number">-0.66928798</span> <span class="number">-0.14847915</span>  <span class="number">0.91875714</span>  <span class="number">0.61889237</span>]</span><br><span class="line"> [<span class="number">-0.01308221</span> <span class="number">-0.38468206</span>  <span class="number">1.34700036</span>  <span class="number">0.64531708</span>  <span class="number">1.15899456</span>  <span class="number">1.09932268</span></span><br><span class="line">   <span class="number">1.22457981</span> <span class="number">-1.1610316</span>   <span class="number">0.59036094</span> <span class="number">-1.97302651</span>]</span><br><span class="line"> [<span class="number">-0.24886213</span>  <span class="number">0.82857937</span>  <span class="number">0.09046989</span>  <span class="number">0.39251322</span>  <span class="number">0.21155456</span> <span class="number">-0.27749416</span></span><br><span class="line">   <span class="number">0.18883201</span>  <span class="number">0.08812679</span> <span class="number">-0.32917103</span>  <span class="number">0.20547724</span>]</span><br><span class="line"> [ <span class="number">0.05388507</span>  <span class="number">0.45474565</span>  <span class="number">0.23398806</span>  <span class="number">1.32670367</span> <span class="number">-0.01957406</span>  <span class="number">0.52013856</span></span><br><span class="line">  <span class="number">-1.13907862</span> <span class="number">-1.71957874</span>  <span class="number">0.75772947</span> <span class="number">-1.01719368</span>]</span><br><span class="line"> [ <span class="number">0.27155915</span>  <span class="number">0.05900437</span>  <span class="number">0.81448066</span> <span class="number">-0.37997526</span> <span class="number">-0.62020499</span> <span class="number">-0.88820189</span></span><br><span class="line">   <span class="number">1.53407145</span> <span class="number">-0.01600445</span> <span class="number">-0.4236775</span>  <span class="number">-1.68852305</span>]</span><br><span class="line"> [ <span class="number">0.78942037</span> <span class="number">-1.32458341</span> <span class="number">-0.91667277</span> <span class="number">-0.00963761</span>  <span class="number">0.76824385</span> <span class="number">-0.5405798</span></span><br><span class="line">  <span class="number">-0.73307443</span> <span class="number">-1.19854116</span> <span class="number">-0.66179073</span>  <span class="number">0.26329204</span>]</span><br><span class="line"> [ <span class="number">0.59473759</span> <span class="number">-0.37507254</span> <span class="number">-1.21623695</span> <span class="number">-1.30528259</span>  <span class="number">1.18013096</span> <span class="number">-1.32077384</span></span><br><span class="line">  <span class="number">-0.59241474</span> <span class="number">-0.28063133</span>  <span class="number">0.12341146</span>  <span class="number">0.48480138</span>]]</span><br></pre></td></tr></table></figure><hr><h3 id="7-tf-train-ExponentialMovingAverage"><a href="#7-tf-train-ExponentialMovingAverage" class="headerlink" title="7.tf.train.ExponentialMovingAverage"></a>7.<code>tf.train.ExponentialMovingAverage</code></h3><h4 id="这个函数用于更新参数，就是采用滑动平均的方法更新参数。这个函数初始化需要提供一个衰减速率（decay），用于控制模型的更新速度。这个函数还会维护一个影子变量（也就是更新参数后的参数值），这个影子变量的初始值就是这个变量的初始值，影子变量值的更新方式如下："><a href="#这个函数用于更新参数，就是采用滑动平均的方法更新参数。这个函数初始化需要提供一个衰减速率（decay），用于控制模型的更新速度。这个函数还会维护一个影子变量（也就是更新参数后的参数值），这个影子变量的初始值就是这个变量的初始值，影子变量值的更新方式如下：" class="headerlink" title="这个函数用于更新参数，就是采用滑动平均的方法更新参数。这个函数初始化需要提供一个衰减速率（decay），用于控制模型的更新速度。这个函数还会维护一个影子变量（也就是更新参数后的参数值），这个影子变量的初始值就是这个变量的初始值，影子变量值的更新方式如下："></a>这个函数用于更新参数，就是采用滑动平均的方法更新参数。这个函数初始化需要提供一个衰减速率（decay），用于控制模型的更新速度。这个函数还会维护一个影子变量（也就是更新参数后的参数值），这个影子变量的初始值就是这个变量的初始值，影子变量值的更新方式如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shadow_variable = decay * shadow_variable + (1-decay) * variable</span><br></pre></td></tr></table></figure><h4 id="shadow-variable是影子变量，variable表示待更新的变量，也就是变量被赋予的值，decay为衰减速率。decay一般设为接近于1的数（0-99-0-999）。decay越大模型越稳定，因为decay越大，参数更新的速度就越慢，趋于稳定。"><a href="#shadow-variable是影子变量，variable表示待更新的变量，也就是变量被赋予的值，decay为衰减速率。decay一般设为接近于1的数（0-99-0-999）。decay越大模型越稳定，因为decay越大，参数更新的速度就越慢，趋于稳定。" class="headerlink" title="shadow_variable是影子变量，variable表示待更新的变量，也就是变量被赋予的值，decay为衰减速率。decay一般设为接近于1的数（0.99,0.999）。decay越大模型越稳定，因为decay越大，参数更新的速度就越慢，趋于稳定。"></a>shadow_variable是影子变量，variable表示待更新的变量，也就是变量被赋予的值，decay为衰减速率。decay一般设为接近于1的数（0.99,0.999）。decay越大模型越稳定，因为decay越大，参数更新的速度就越慢，趋于稳定。</h4><h4 id="tf-train-ExponentialMovingAverage这个函数还提供了自己动更新decay的计算方式：decay-min（decay，（1-steps）-（10-steps））其中steps是迭代的次数，可以自己设定。"><a href="#tf-train-ExponentialMovingAverage这个函数还提供了自己动更新decay的计算方式：decay-min（decay，（1-steps）-（10-steps））其中steps是迭代的次数，可以自己设定。" class="headerlink" title="tf.train.ExponentialMovingAverage这个函数还提供了自己动更新decay的计算方式：decay= min（decay，（1+steps）/（10+steps））其中steps是迭代的次数，可以自己设定。"></a>tf.train.ExponentialMovingAverage这个函数还提供了自己动更新decay的计算方式：<code>decay= min（decay，（1+steps）/（10+steps））</code>其中steps是迭代的次数，可以自己设定。</h4><h3 id="示例代码如下："><a href="#示例代码如下：" class="headerlink" title="示例代码如下："></a>示例代码如下：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf;  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np;  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt;  </span><br><span class="line">  </span><br><span class="line">v1 = tf.Variable(<span class="number">0</span>, dtype=tf.float32)  </span><br><span class="line">step = tf.Variable(tf.constant(<span class="number">0</span>))  </span><br><span class="line">  </span><br><span class="line">ema = tf.train.ExponentialMovingAverage(<span class="number">0.99</span>, step)  </span><br><span class="line">maintain_average = ema.apply([v1])  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:  </span><br><span class="line">    init = tf.initialize_all_variables()  </span><br><span class="line">    sess.run(init)  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">print</span> sess.run([v1, ema.average(v1)]) <span class="comment">#初始的值都为0  </span></span><br><span class="line">  </span><br><span class="line">    sess.run(tf.assign(v1, <span class="number">5</span>)) <span class="comment">#把v1变为5  </span></span><br><span class="line">    sess.run(maintain_average)  </span><br><span class="line">    <span class="keyword">print</span> sess.run([v1, ema.average(v1)]) <span class="comment"># decay=min(0.99, 1/10)=0.1, v1=0.1*0+0.9*5=4.5  </span></span><br><span class="line"> </span><br><span class="line">    sess.run(tf.assign(step, <span class="number">10000</span>)) <span class="comment"># steps=10000  </span></span><br><span class="line">    sess.run(tf.assign(v1, <span class="number">10</span>)) <span class="comment"># v1=10  </span></span><br><span class="line">    sess.run(maintain_average)  </span><br><span class="line">    <span class="keyword">print</span> sess.run([v1, ema.average(v1)]) <span class="comment"># decay=min(0.99,(1+10000)/(10+10000))=0.99, v1=0.99*4.5+0.01*10=4.555  </span></span><br><span class="line">  </span><br><span class="line">    sess.run(maintain_average)  </span><br><span class="line">    <span class="keyword">print</span> sess.run([v1, ema.average(v1)]) <span class="comment">#decay=min(0.99,&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;(1+10000)/(10+10000)&lt;/span&gt;&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;)=0.99, v1=0.99*4.555+0.01*10=4.6&lt;/span&gt;</span></span><br></pre></td></tr></table></figure><h4 id="输出结果如下：-1"><a href="#输出结果如下：-1" class="headerlink" title="输出结果如下："></a>输出结果如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">[<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">[<span class="number">5.0</span>, <span class="number">4.5</span>]</span><br><span class="line">[<span class="number">10.0</span>, <span class="number">4.5549998</span>]</span><br><span class="line">[<span class="number">10.0</span>, <span class="number">4.6094499</span>]</span><br></pre></td></tr></table></figure><h4 id="解释：每次更新完以后，影子变量的值更新，varible的值就是你设定的值。如果在下一次运行这个函数的时候你不在指定新的值，那就不变，影子变量更新。如果指定，那就variable改变，影子变量也改变"><a href="#解释：每次更新完以后，影子变量的值更新，varible的值就是你设定的值。如果在下一次运行这个函数的时候你不在指定新的值，那就不变，影子变量更新。如果指定，那就variable改变，影子变量也改变" class="headerlink" title="解释：每次更新完以后，影子变量的值更新，varible的值就是你设定的值。如果在下一次运行这个函数的时候你不在指定新的值，那就不变，影子变量更新。如果指定，那就variable改变，影子变量也改变"></a>解释：每次更新完以后，影子变量的值更新，varible的值就是你设定的值。如果在下一次运行这个函数的时候你不在指定新的值，那就不变，影子变量更新。如果指定，那就variable改变，影子变量也改变</h4><hr><h3 id="8-tf-clip-by-value"><a href="#8-tf-clip-by-value" class="headerlink" title="8.tf.clip_by_value"></a>8.<code>tf.clip_by_value</code></h3><h4 id="将张量中的一个值限制在一个范围之内"><a href="#将张量中的一个值限制在一个范围之内" class="headerlink" title="将张量中的一个值限制在一个范围之内"></a>将张量中的一个值限制在一个范围之内</h4><p>如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>],[<span class="number">4.0</span>,<span class="number">5.0</span>,<span class="number">6.0</span>]])</span><br><span class="line">print(tf.clip_by_value(a,<span class="number">2.5</span>,<span class="number">4.5</span>).eval())</span><br></pre></td></tr></table></figure></p><h4 id="输出-2-5-2-5-3-4-4-5-4-5-由此可见小于2-5的换成了2-5，大于4-5的都换成了4-5"><a href="#输出-2-5-2-5-3-4-4-5-4-5-由此可见小于2-5的换成了2-5，大于4-5的都换成了4-5" class="headerlink" title="输出[[2.5,2.5,3],[4,4.5,4.5]]由此可见小于2.5的换成了2.5，大于4.5的都换成了4.5"></a>输出[[2.5,2.5,3],[4,4.5,4.5]]由此可见小于2.5的换成了2.5，大于4.5的都换成了4.5</h4><p><code>Tensor.eval()</code> 和 <code>Operation.run()</code> 方法代替 <code>Session.run()</code>。</p><h3 id="9-tf-reduce-mean"><a href="#9-tf-reduce-mean" class="headerlink" title="9.tf.reduce_mean"></a>9.<code>tf.reduce_mean</code></h3><h4 id="指求平均值"><a href="#指求平均值" class="headerlink" title="指求平均值"></a>指求平均值</h4><h4 id="如：tf-reduce-mean-1-2-3-4-5-6"><a href="#如：tf-reduce-mean-1-2-3-4-5-6" class="headerlink" title="如：tf.reduce_mean(([1,2,3],[4,5,6]))"></a>如：<code>tf.reduce_mean(([1,2,3],[4,5,6]))</code></h4><h4 id="等于：（1-2-3-4-5-6）／6-3-5"><a href="#等于：（1-2-3-4-5-6）／6-3-5" class="headerlink" title="等于：（1+2+3+4+5+6）／6 = 3.5"></a>等于：<code>（1+2+3+4+5+6）／6 = 3.5</code></h4><hr><h3 id="10-p-tf-log-q"><a href="#10-p-tf-log-q" class="headerlink" title="10.p * tf.log(q)"></a>10.<code>p * tf.log(q)</code></h3><h4 id="交叉熵损失函数-H-p-q-求和符-p-x-log-q-x-可以直接用Tensorflow交叉熵函数来计算-p-tf-log-q"><a href="#交叉熵损失函数-H-p-q-求和符-p-x-log-q-x-可以直接用Tensorflow交叉熵函数来计算-p-tf-log-q" class="headerlink" title="交叉熵损失函数  H(p,q) = -求和符(p(x)log(q(x)))可以直接用Tensorflow交叉熵函数来计算 p * tf.log(q)"></a>交叉熵损失函数  <code>H(p,q) = -求和符(p(x)log(q(x)))</code>可以直接用Tensorflow交叉熵函数来计算 <code>p * tf.log(q)</code></h4><hr><h3 id="11-tf-nn-softmax-cross-entropy-with-logits-y，y"><a href="#11-tf-nn-softmax-cross-entropy-with-logits-y，y" class="headerlink" title="11.tf.nn.softmax_cross_entropy_with_logits(y，y_)"></a>11.<code>tf.nn.softmax_cross_entropy_with_logits(y，y_)</code></h3><hr><h4 id="直接通过这个公式来实现softmax回归之后的交叉熵损失函数（y指原是神经网络的输出结果，y-指标准答案）"><a href="#直接通过这个公式来实现softmax回归之后的交叉熵损失函数（y指原是神经网络的输出结果，y-指标准答案）" class="headerlink" title="直接通过这个公式来实现softmax回归之后的交叉熵损失函数（y指原是神经网络的输出结果，y_指标准答案）"></a>直接通过这个公式来实现softmax回归之后的交叉熵损失函数（y指原是神经网络的输出结果，y_指标准答案）</h4><h3 id="12-tf-reduce-sum"><a href="#12-tf-reduce-sum" class="headerlink" title="12.tf.reduce_sum"></a>12.<code>tf.reduce_sum</code></h3><h4 id="该函数用来求和"><a href="#该函数用来求和" class="headerlink" title="该函数用来求和"></a>该函数用来求和</h4><hr><h3 id="13-tf-greater"><a href="#13-tf-greater" class="headerlink" title="13.tf.greater"></a>13.<code>tf.greater</code></h3><h4 id="输入两个张量并比较大小，当维度不同时，进行类似于numpy广播的处理，当第一个参数大于第二个是为True反之为False"><a href="#输入两个张量并比较大小，当维度不同时，进行类似于numpy广播的处理，当第一个参数大于第二个是为True反之为False" class="headerlink" title="输入两个张量并比较大小，当维度不同时，进行类似于numpy广播的处理，当第一个参数大于第二个是为True反之为False"></a>输入两个张量并比较大小，当维度不同时，进行类似于numpy广播的处理，当第一个参数大于第二个是为True反之为False</h4><hr><h3 id="14-tf-select"><a href="#14-tf-select" class="headerlink" title="14.tf.select"></a>14.<code>tf.select</code></h3><h2 id="（目前已经更新为tf-where）第一个参数为选择条件，当满足时使用第二个参数，不满足时返回第三个参数"><a href="#（目前已经更新为tf-where）第一个参数为选择条件，当满足时使用第二个参数，不满足时返回第三个参数" class="headerlink" title="####（目前已经更新为tf.where）第一个参数为选择条件，当满足时使用第二个参数，不满足时返回第三个参数"></a>####（目前已经更新为tf.where）第一个参数为选择条件，当满足时使用第二个参数，不满足时返回第三个参数</h2><h3 id="15-tf-train-AdamOptimizer"><a href="#15-tf-train-AdamOptimizer" class="headerlink" title="15.tf.train.AdamOptimizer"></a>15.<code>tf.train.AdamOptimizer</code></h3><h4 id="该函数来控制学习速度。AdamOptimizer-通过使用动量（参数的移动平均数）来改善传统梯度下降，促进超参数动态调整。"><a href="#该函数来控制学习速度。AdamOptimizer-通过使用动量（参数的移动平均数）来改善传统梯度下降，促进超参数动态调整。" class="headerlink" title="该函数来控制学习速度。AdamOptimizer 通过使用动量（参数的移动平均数）来改善传统梯度下降，促进超参数动态调整。"></a>该函数来控制学习速度。AdamOptimizer 通过使用动量（参数的移动平均数）来改善传统梯度下降，促进超参数动态调整。</h4><hr><h3 id="16-tf-contrib-layers-l1-regularize"><a href="#16-tf-contrib-layers-l1-regularize" class="headerlink" title="16.tf.contrib.layers.l1_regularize"></a>16.<code>tf.contrib.layers.l1_regularize</code></h3><h4 id="可以计算解决过拟合化问题的l1正则化项的值-lambda表示正则化的权重"><a href="#可以计算解决过拟合化问题的l1正则化项的值-lambda表示正则化的权重" class="headerlink" title="可以计算解决过拟合化问题的l1正则化项的值   #lambda表示正则化的权重"></a>可以计算解决过拟合化问题的l1正则化项的值   #lambda表示正则化的权重</h4><hr><h3 id="17-tf-contrib-layers-l2-regularize"><a href="#17-tf-contrib-layers-l2-regularize" class="headerlink" title="17.tf.contrib.layers.l2_regularize"></a>17.<code>tf.contrib.layers.l2_regularize</code></h3><h4 id="可以计算解决过拟合化问题的l2正则化项的值"><a href="#可以计算解决过拟合化问题的l2正则化项的值" class="headerlink" title="可以计算解决过拟合化问题的l2正则化项的值"></a>可以计算解决过拟合化问题的l2正则化项的值</h4><hr><h3 id="18-tf-add-to-collection"><a href="#18-tf-add-to-collection" class="headerlink" title="18.tf.add_to_collection"></a>18.<code>tf.add_to_collection</code></h3><h4 id="把变量放入一个集合，把很多变量变成一个列表"><a href="#把变量放入一个集合，把很多变量变成一个列表" class="headerlink" title="把变量放入一个集合，把很多变量变成一个列表"></a>把变量放入一个集合，把很多变量变成一个列表</h4><hr><h3 id="19-tf-train-ExpontialMovingAverage"><a href="#19-tf-train-ExpontialMovingAverage" class="headerlink" title="19.tf.train.ExpontialMovingAverage"></a>19.<code>tf.train.ExpontialMovingAverage</code></h3><h4 id="实现滑动平均模型"><a href="#实现滑动平均模型" class="headerlink" title="实现滑动平均模型"></a>实现滑动平均模型</h4><hr><h3 id="20-tf-assign-x-y"><a href="#20-tf-assign-x-y" class="headerlink" title="20.tf.assign(x,y)"></a>20.<code>tf.assign(x,y)</code></h3><h4 id="将y的值赋值给x-nbsp"><a href="#将y的值赋值给x-nbsp" class="headerlink" title="将y的值赋值给x&nbsp;"></a>将y的值赋值给x&nbsp;</h4><hr><h3 id="30"><a href="#30" class="headerlink" title="30."></a>30.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mnist = input_data.resd_data_sets(<span class="string">"文件路径”)  </span></span><br><span class="line"><span class="string">mnist.train.next_batch(batch_size)  #input_data.resd_data_sets</span></span><br></pre></td></tr></table></figure><h4 id="函数生成的类还提供了mnist-train-next-batch函数，他将从所有的训练数据中读取一小部分作为训练数据batch"><a href="#函数生成的类还提供了mnist-train-next-batch函数，他将从所有的训练数据中读取一小部分作为训练数据batch" class="headerlink" title="函数生成的类还提供了mnist.train.next_batch函数，他将从所有的训练数据中读取一小部分作为训练数据batch"></a>函数生成的类还提供了mnist.train.next_batch函数，他将从所有的训练数据中读取一小部分作为训练数据batch</h4><hr><h3 id="31"><a href="#31" class="headerlink" title="31."></a>31.</h3><h4 id="tf-trainable-variables"><a href="#tf-trainable-variables" class="headerlink" title="tf.trainable_variables"></a><code>tf.trainable_variables</code></h4><h4 id="返回的是需要训练的变量列表"><a href="#返回的是需要训练的变量列表" class="headerlink" title="返回的是需要训练的变量列表"></a>返回的是需要训练的变量列表</h4><h4 id="tf-all-variables"><a href="#tf-all-variables" class="headerlink" title="tf.all_variables"></a><code>tf.all_variables</code></h4><h4 id="返回的是所有变量的列表"><a href="#返回的是所有变量的列表" class="headerlink" title="返回的是所有变量的列表"></a>返回的是所有变量的列表</h4><p>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf;    </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np;    </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt;    </span><br><span class="line">  </span><br><span class="line">v = tf.Variable(tf.constant(<span class="number">0.0</span>, shape=[<span class="number">1</span>], dtype=tf.float32), name=<span class="string">'v'</span>)  </span><br><span class="line">v1 = tf.Variable(tf.constant(<span class="number">5</span>, shape=[<span class="number">1</span>], dtype=tf.float32), name=<span class="string">'v1'</span>)  </span><br><span class="line">   </span><br><span class="line">global_step = tf.Variable(tf.constant(<span class="number">5</span>, shape=[<span class="number">1</span>], dtype=tf.float32), name=<span class="string">'global_step'</span>, trainable=<span class="keyword">False</span>)  </span><br><span class="line">ema = tf.train.ExponentialMovingAverage(<span class="number">0.99</span>, global_step)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> ele1 <span class="keyword">in</span> tf.trainable_variables():  </span><br><span class="line">    <span class="keyword">print</span> ele1.name  </span><br><span class="line"><span class="keyword">for</span> ele2 <span class="keyword">in</span> tf.all_variables():  </span><br><span class="line">    <span class="keyword">print</span> ele2.name</span><br></pre></td></tr></table></figure></p><h4 id="输出结果如下：-2"><a href="#输出结果如下：-2" class="headerlink" title="输出结果如下："></a>输出结果如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">v:<span class="number">0</span></span><br><span class="line">v1:<span class="number">0</span></span><br><span class="line">v:<span class="number">0</span></span><br><span class="line">v1:<span class="number">0</span></span><br><span class="line">global_step:<span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><h5 id="上面得到两个变量，后面的一个得到上三个变量，因为global-step在声明的时候说明不是训练变量，用来关键字trainable-False。"><a href="#上面得到两个变量，后面的一个得到上三个变量，因为global-step在声明的时候说明不是训练变量，用来关键字trainable-False。" class="headerlink" title="上面得到两个变量，后面的一个得到上三个变量，因为global_step在声明的时候说明不是训练变量，用来关键字trainable=False。"></a>上面得到两个变量，后面的一个得到上三个变量，因为global_step在声明的时候说明不是训练变量，用来关键字trainable=False。</h5>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow不同版本引起的错误</title>
      <link href="/2017/11/08/TensorFlow%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%BC%95%E8%B5%B7%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2017/11/08/TensorFlow%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%BC%95%E8%B5%B7%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>前4个是 V0.11 的API 用在 V1.0 的错误</p><ol><li><p>AttributeError: ‘module’ object has no attribute ‘merge_all_summaries’</p><blockquote><p>tf.merge_all_summaries() 改为：summary_op = tf.summary.merge_all()</p></blockquote></li><li><p>AttributeError: ‘module’ object has no attribute ‘SummaryWriter’</p><blockquote><p>tf.train.SummaryWriter 改为：tf.summary.FileWriter</p></blockquote></li><li><p>AttributeError: ‘module’ object has no attribute ‘scalar_summary’</p><blockquote><p>tf.scalar_summary 改为：tf.summary.scalar</p></blockquote></li><li><p>AttributeError: ‘module’ object has no attribute ‘histogram_summary’</p><blockquote><p>histogram_summary 改为：tf.summary.histogram</p></blockquote></li></ol><p>下边这个是 V1.0 的API 用在 V0.11 的错误<br>File “dis-alexnet_benchmark.py”, line 110, in alexnet_v2<br>    biases_initializer=tf.zeros_initializer(),<br>TypeError: zeros_initializer() takes at least 1 argument (0 given)</p><blockquote><p>将 biases_initializer=tf.zeros_initializer() 改为：biases_initializer=tf.zeros_initializer</p></blockquote><p>本文章为转载原文章链接为：<a href="http://blog.csdn.net/s_sunnyy/article/details/70999462" target="_blank" rel="noopener">http://blog.csdn.net/s_sunnyy/article/details/70999462</a></p>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用TensorBoard进行数据可视化</title>
      <link href="/2017/11/08/%E4%BD%BF%E7%94%A8TensorBoard%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2017/11/08/%E4%BD%BF%E7%94%A8TensorBoard%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="使用TensorBoard进行数据可视化"><a href="#使用TensorBoard进行数据可视化" class="headerlink" title="使用TensorBoard进行数据可视化"></a>使用TensorBoard进行数据可视化</h1><hr><hr><h3 id="除了python的matplotlib这个数据图像化的包，我们还可以使用Tensorflow自带的TensorBoard来将数据进行可视化，实现的代码如下"><a href="#除了python的matplotlib这个数据图像化的包，我们还可以使用Tensorflow自带的TensorBoard来将数据进行可视化，实现的代码如下" class="headerlink" title="除了python的matplotlib这个数据图像化的包，我们还可以使用Tensorflow自带的TensorBoard来将数据进行可视化，实现的代码如下"></a>除了python的matplotlib这个数据图像化的包，我们还可以使用Tensorflow自带的TensorBoard来将数据进行可视化，实现的代码如下</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, n_layer, activation_function=None)</span>:</span></span><br><span class="line">    layer_name = <span class="string">'layer%s'</span> % n_layer</span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">"layer"</span>): </span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"weight"</span>):</span><br><span class="line">            Weights = tf.Variable(tf.random_normal([in_size,out_size]),name=<span class="string">"W"</span>)</span><br><span class="line">            tf.summary.histogram(layer_name+<span class="string">'/Weights'</span>,Weights)</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"biases"</span>):</span><br><span class="line">            biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size])+<span class="number">0.1</span>,name=<span class="string">"b"</span>)</span><br><span class="line">            tf.summary.histogram(layer_name+<span class="string">'/biases'</span>,biases)</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"Wx_plus_b"</span>):</span><br><span class="line">            Wx_plus_b = tf.matmul(inputs, Weights)+biases</span><br><span class="line">        <span class="keyword">if</span> activation_function == <span class="keyword">None</span>:</span><br><span class="line">            outputs = Wx_plus_b</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            outputs = activation_function(Wx_plus_b)</span><br><span class="line">            tf.summary.histogram(layer_name+<span class="string">'/outputs'</span>,outputs)</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line">x_data = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">300</span>)[:,np.newaxis]</span><br><span class="line">noise = np.random.normal(<span class="number">0</span>,<span class="number">0.05</span>,x_data.shape)</span><br><span class="line">y_data = np.square(x_data) - <span class="number">0.5</span> + noise</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"inputs"</span>):</span><br><span class="line">    xs = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>],name=<span class="string">"x_input"</span>)</span><br><span class="line">    ys = tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>],name=<span class="string">"y_input"</span>)</span><br><span class="line">    </span><br><span class="line">l1 = add_layer(xs, <span class="number">1</span>, <span class="number">10</span>, n_layer=<span class="number">1</span>, activation_function=tf.nn.relu)</span><br><span class="line">prediction = add_layer(l1, <span class="number">10</span>, <span class="number">1</span>, n_layer=<span class="number">2</span>, activation_function=<span class="keyword">None</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"loss"</span>):</span><br><span class="line">    loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction),reduction_indices=[<span class="number">1</span>]),name=<span class="string">"loss"</span>)</span><br><span class="line">    tf.summary.scalar(<span class="string">'loss'</span>,loss)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">"train"</span>):</span><br><span class="line">    train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">merged = tf.summary.merge_all()</span><br><span class="line">writer = tf.summary.FileWriter(<span class="string">"logs/"</span>,sess.graph)</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    sess.run(train_step,feed_dict=&#123;xs:x_data,ys:y_data&#125;)</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">50</span>==<span class="number">0</span>:</span><br><span class="line">        result = sess.run(merged,feed_dict=&#123;xs:x_data,ys:y_data&#125;)</span><br><span class="line">        writer.add_summary(result,i)</span><br></pre></td></tr></table></figure><hr><h3 id="代码进行保存以及运行之后，将会在指定文件夹中看到保存的文件，这是我们需要在终端中运行下面的命令，然后将网址复制到浏览器即可打开"><a href="#代码进行保存以及运行之后，将会在指定文件夹中看到保存的文件，这是我们需要在终端中运行下面的命令，然后将网址复制到浏览器即可打开" class="headerlink" title="代码进行保存以及运行之后，将会在指定文件夹中看到保存的文件，这是我们需要在终端中运行下面的命令，然后将网址复制到浏览器即可打开"></a>代码进行保存以及运行之后，将会在指定文件夹中看到保存的文件，这是我们需要在终端中运行下面的命令，然后将网址复制到浏览器即可打开</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tensorboard --logdir=&apos;logs/&apos; #&apos;logs&apos;是指保存的文件所在的文件夹</span><br></pre></td></tr></table></figure><p><img src="/images/使用TensorBoard进行数据可视化/6ABC5AB8-54CB-4DCB-9D87-2B12E5C471FB" alt="这里写图片描述"></p><hr><hr><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><hr><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.name_scope(<span class="string">"name"</span>)</span><br></pre></td></tr></table></figure><h3 id="该函数中的name是指GRAPHS中的"><a href="#该函数中的name是指GRAPHS中的" class="headerlink" title="该函数中的name是指GRAPHS中的"></a>该函数中的name是指GRAPHS中的</h3><p><img src="/images/使用TensorBoard进行数据可视化/344D410D-76BE-47F9-AF90-0F76C20E4A38.png" alt="这里写图片描述"></p><h3 id="以及每个神经网络的节点打开后里面的各种量的名字"><a href="#以及每个神经网络的节点打开后里面的各种量的名字" class="headerlink" title="以及每个神经网络的节点打开后里面的各种量的名字"></a>以及每个神经网络的节点打开后里面的各种量的名字</h3><h3 id="这是部分节点点开后的样子"><a href="#这是部分节点点开后的样子" class="headerlink" title="这是部分节点点开后的样子"></a>这是部分节点点开后的样子</h3><p><img src="/images/使用TensorBoard进行数据可视化/82BA149A-ABB4-48EB-AFB5-A1F7CA652BB7.png" alt="这里写图片描述"></p><h3 id="这是所有节点点开后的样子"><a href="#这是所有节点点开后的样子" class="headerlink" title="这是所有节点点开后的样子"></a>这是所有节点点开后的样子</h3><p><img src="/images/使用TensorBoard进行数据可视化/D013876E-E733-41F5-9551-1D9D95A70D94.png" alt="这里写图片描述"></p><hr><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.summary.histogram(layer_name+<span class="string">'name'</span>,name)</span><br></pre></td></tr></table></figure><h3 id="该函数是用来绘制histogram中图可视化绘图"><a href="#该函数是用来绘制histogram中图可视化绘图" class="headerlink" title="该函数是用来绘制histogram中图可视化绘图"></a>该函数是用来绘制histogram中图可视化绘图</h3><p><img src="/images/使用TensorBoard进行数据可视化/9C028572-E3F8-443D-ADCB-AAA7D3E32DDA.png" alt="这里写图片描述"></p><hr><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.summary.scalar(<span class="string">'name'</span>,name)</span><br></pre></td></tr></table></figure><h3 id="该函数主要适用于损失函数在scalar的可视化绘图"><a href="#该函数主要适用于损失函数在scalar的可视化绘图" class="headerlink" title="该函数主要适用于损失函数在scalar的可视化绘图"></a>该函数主要适用于损失函数在scalar的可视化绘图</h3><p><img src="/images/使用TensorBoard进行数据可视化/E226C81A-EA78-4153-8F72-D1F5C6C4381F.png" alt="这里写图片描述"></p><hr><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.summary.FileWriter(<span class="string">"logs/"</span>,sess.graph)</span><br></pre></td></tr></table></figure><h3 id="该函数是将TensorBoard文件保存到指定路径，例如”logs-“即是指路径，正常运行后将会在logs文件夹下产生一个文件"><a href="#该函数是将TensorBoard文件保存到指定路径，例如”logs-“即是指路径，正常运行后将会在logs文件夹下产生一个文件" class="headerlink" title="该函数是将TensorBoard文件保存到指定路径，例如”logs/“即是指路径，正常运行后将会在logs文件夹下产生一个文件"></a>该函数是将TensorBoard文件保存到指定路径，例如”logs/“即是指路径，正常运行后将会在logs文件夹下产生一个文件</h3><p><img src="/images/使用TensorBoard进行数据可视化/EB02646E-4107-4246-8F6F-65AE970225EA.png" alt="这里写图片描述"></p><hr><h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.summary.merge_all()</span><br></pre></td></tr></table></figure><h3 id="该函数是将所有summary文件合并到同一个文件里并在下一步的tf-summary-FileWriter-“logs-“-sess-graph-进行保存"><a href="#该函数是将所有summary文件合并到同一个文件里并在下一步的tf-summary-FileWriter-“logs-“-sess-graph-进行保存" class="headerlink" title="该函数是将所有summary文件合并到同一个文件里并在下一步的tf.summary.FileWriter(“logs/“,sess.graph)进行保存"></a>该函数是将所有summary文件合并到同一个文件里并在下一步的tf.summary.FileWriter(“logs/“,sess.graph)进行保存</h3><hr><h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_summary(result,i)</span><br></pre></td></tr></table></figure><h3 id="该函数是将result这个数据加入到writer-tf-summary-FileWriter-“logs-“-sess-graph-这个函数的write中去，其中i是指步数，例如本函数中就是50布记录一个点"><a href="#该函数是将result这个数据加入到writer-tf-summary-FileWriter-“logs-“-sess-graph-这个函数的write中去，其中i是指步数，例如本函数中就是50布记录一个点" class="headerlink" title="该函数是将result这个数据加入到writer = tf.summary.FileWriter(“logs/“,sess.graph)这个函数的write中去，其中i是指步数，例如本函数中就是50布记录一个点"></a>该函数是将result这个数据加入到writer = tf.summary.FileWriter(“logs/“,sess.graph)这个函数的write中去，其中i是指步数，例如本函数中就是50布记录一个点</h3><hr><h3 id="7-运行应该在ipython中运行，如果在jupyter中运行可能会产生报错"><a href="#7-运行应该在ipython中运行，如果在jupyter中运行可能会产生报错" class="headerlink" title="7.运行应该在ipython中运行，如果在jupyter中运行可能会产生报错"></a>7.运行应该在ipython中运行，如果在jupyter中运行可能会产生报错</h3>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> TensorBoard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Python的Matplotlib包将Tensorflow数据进行可视化</title>
      <link href="/2017/11/08/%E9%80%9A%E8%BF%87Python%E7%9A%84Matplotlib%E5%8C%85%E5%B0%86Tensorflow%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2017/11/08/%E9%80%9A%E8%BF%87Python%E7%9A%84Matplotlib%E5%8C%85%E5%B0%86Tensorflow%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="使用matplotlib中的一些函数将tensorflow中的数据可视化，更加便于分析"><a href="#使用matplotlib中的一些函数将tensorflow中的数据可视化，更加便于分析" class="headerlink" title="使用matplotlib中的一些函数将tensorflow中的数据可视化，更加便于分析"></a>使用matplotlib中的一些函数将tensorflow中的数据可视化，更加便于分析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    Weights = tf.Variable(tf.random_normal([in_size, out_size]))</span><br><span class="line">    biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size]) + <span class="number">0.1</span>)</span><br><span class="line">    Wx_plus_b = tf.matmul(inputs, Weights) + biases</span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make up some real data</span></span><br><span class="line">x_data = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">300</span>)[:, np.newaxis]</span><br><span class="line">noise = np.random.normal(<span class="number">0</span>, <span class="number">0.05</span>, x_data.shape)</span><br><span class="line">y_data = np.square(x_data) - <span class="number">0.5</span> + noise</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># define placeholder for inputs to network</span></span><br><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># add hidden layer</span></span><br><span class="line">l1 = add_layer(xs, <span class="number">1</span>, <span class="number">10</span>, activation_function=tf.nn.relu)</span><br><span class="line"><span class="comment"># add output layer</span></span><br><span class="line">prediction = add_layer(l1, <span class="number">10</span>, <span class="number">1</span>, activation_function=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the error between prediction and real data</span></span><br><span class="line">loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction), reduction_indices=[<span class="number">1</span>]))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"><span class="comment"># important step</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#initialize_all_variables已被弃用,使用tf.global_variables_initializer代替。 </span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the real data</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">ax.scatter(x_data, y_data)</span><br><span class="line">plt.ion() <span class="comment">#使plt不会在show之后停止而是继续运行</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># training</span></span><br><span class="line">    sess.run(train_step, feed_dict=&#123;xs: x_data, ys: y_data&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># to visualize the result and improvement</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ax.lines.remove(lines[<span class="number">0</span>]) <span class="comment">#在每一次绘图之前先讲上一次绘图删除，使得画面更加清晰</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        prediction_value = sess.run(prediction, feed_dict=&#123;xs: x_data&#125;)</span><br><span class="line">        <span class="comment"># plot the prediction</span></span><br><span class="line">        lines = ax.plot(x_data, prediction_value, <span class="string">'r-'</span>, lw=<span class="number">5</span>) <span class="comment">#'r-'指绘制一个红色的线</span></span><br><span class="line">        plt.pause(<span class="number">1</span>) <span class="comment">#指等待一秒钟</span></span><br></pre></td></tr></table></figure><p>运行结果如下：（实际效果应该是动态的，应当使用ipython运行，使用jupyter运行则图片不是动态的）<br><img src="/images/通过python的matplotlib包将Tensorflow数据进行可视化/4AEE0648-43F7-431F-83C0-CE7F8F1D55BF.png" alt="这里写图片描述"></p><p>注意：initialize_all_variables已被弃用,使用tf.global_variables_initializer代替。 </p>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow进行简单的神经网络的尝试（建造神经网络）</title>
      <link href="/2017/11/08/Tensorflow%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%B0%9D%E8%AF%95%EF%BC%88%E5%BB%BA%E9%80%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%89/"/>
      <url>/2017/11/08/Tensorflow%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E7%9A%84%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%B0%9D%E8%AF%95%EF%BC%88%E5%BB%BA%E9%80%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="通过对一个简单的函数的轨迹的预测来进行一个较为简单的神经网络的构建"><a href="#通过对一个简单的函数的轨迹的预测来进行一个较为简单的神经网络的构建" class="headerlink" title="通过对一个简单的函数的轨迹的预测来进行一个较为简单的神经网络的构建"></a>通过对一个简单的函数的轨迹的预测来进行一个较为简单的神经网络的构建</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入程序所需要的包</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#该函数用来进行添加神经网络的层数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    <span class="comment"># add one more layer and return the output of this layer</span></span><br><span class="line">    Weights = tf.Variable(tf.random_normal([in_size, out_size]))</span><br><span class="line">    biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size]) + <span class="number">0.1</span>)</span><br><span class="line">    Wx_plus_b = tf.matmul(inputs, Weights) + biases</span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make up some real data</span></span><br><span class="line">x_data = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">300</span>)[:, np.newaxis]</span><br><span class="line">noise = np.random.normal(<span class="number">0</span>, <span class="number">0.05</span>, x_data.shape)</span><br><span class="line">y_data = np.square(x_data) - <span class="number">0.5</span> + noise</span><br><span class="line"></span><br><span class="line"><span class="comment"># define placeholder for inputs to network</span></span><br><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># add hidden layer</span></span><br><span class="line">l1 = add_layer(xs, <span class="number">1</span>, <span class="number">10</span>, activation_function=tf.nn.relu)</span><br><span class="line"><span class="comment"># add output layer</span></span><br><span class="line">prediction = add_layer(l1, <span class="number">10</span>, <span class="number">1</span>, activation_function=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the error between prediction and real data</span></span><br><span class="line">loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),</span><br><span class="line">                     reduction_indices=[<span class="number">1</span>]))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># important step</span></span><br><span class="line"><span class="comment"># tf.initialize_all_variables() no long valid from</span></span><br><span class="line"><span class="comment"># 2017-03-02 if using tensorflow &gt;= 0.12</span></span><br><span class="line"><span class="keyword">if</span> int((tf.__version__).split(<span class="string">'.'</span>)[<span class="number">1</span>]) &lt; <span class="number">12</span>:</span><br><span class="line">    init = tf.initialize_all_variables()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># training</span></span><br><span class="line">    sess.run(train_step, feed_dict=&#123;xs: x_data, ys: y_data&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># to see the step improvement</span></span><br><span class="line">        print(sess.run(loss, feed_dict=&#123;xs: x_data, ys: y_data&#125;))</span><br></pre></td></tr></table></figure><p>运行的结果如下：<br><img src="/images/Tensorflow进行简单的神经网络的尝试（建造神经网络）/B6944E23-9D5B-4903-874D-15EA9408DB9D.png" alt="这里写图片描述"></p><p>主要的注意事项：了解tensorflow的Session会话，懂得各个神经网络层间的数据关系</p>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Matplotlib中常用函数</title>
      <link href="/2017/11/04/Python-Matplotlib%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2017/11/04/Python-Matplotlib%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="python-matplotlib中常用函数"><a href="#python-matplotlib中常用函数" class="headerlink" title="python matplotlib中常用函数"></a>python matplotlib中常用函数</h1><ul><li><strong>绘图</strong></li><li><strong>常见设置</strong></li><li><strong>散点图</strong></li><li><strong>柱状图</strong></li><li><strong>等高线</strong></li><li><strong>matplotlib绘制3D图</strong></li><li><strong>子图像</strong></li><li><strong>动态图</strong></li></ul><hr><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt    <span class="comment">#倒入matplotlib库</span></span><br><span class="line">plt.plot(x,y)   <span class="comment">#绘制y关于x的函数</span></span><br><span class="line">plt.show()  <span class="comment">#将图形绘出</span></span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/460BA14D-C2CD-434F-8422-C2FEE6D59853.png" alt="这里写图片描述"></p><hr><h2 id="常见设置"><a href="#常见设置" class="headerlink" title="常见设置"></a>常见设置</h2><h3 id="设置坐标轴"><a href="#设置坐标轴" class="headerlink" title="设置坐标轴"></a>设置坐标轴</h3><h4 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x轴和y轴的值域</span></span><br><span class="line">plt.xlim((<span class="number">-1</span>,<span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># color为线的颜色，linewidth为线宽度，linestyle为样式（-为实线，--为虚线）</span></span><br><span class="line">plt.plot(x,y,color=<span class="string">'red'</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">'—'</span>)</span><br><span class="line"></span><br><span class="line">plt.figure <span class="comment">#绘制一个新画布</span></span><br><span class="line">plt.figsize <span class="comment">#花布尺寸</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x和y轴</span></span><br><span class="line">plt.xtick()</span><br><span class="line">plt.ytick()</span><br><span class="line">例如：</span><br><span class="line">plt.xticks(new_ticks) <span class="comment">#new_ticks 为-2，2分成十一等份</span></span><br><span class="line">plt.yticks([<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">          [<span class="string">'level2'</span>,<span class="string">'level2'</span>,<span class="string">'level3'</span>,<span class="string">'level4'</span>,<span class="string">'level5'</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/D14DE992-F4B8-4161-87FB-F57C96811174.png" alt="这里写图片描述"></p><h4 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plt.gca <span class="comment">#获取当前的坐标轴</span></span><br><span class="line">spines[<span class="string">'right'</span>].set_color(<span class="string">'red’) #右边框为红色</span></span><br><span class="line"><span class="string"># 分别把x轴与y轴的刻度设置为bottom与left</span></span><br><span class="line"><span class="string">xaxis.set_ticks_position('</span>bottom<span class="string">')</span></span><br><span class="line"><span class="string">yaxis.set_ticks_position('</span>left’)</span><br><span class="line"><span class="comment"># 分别v把bottom和left类型设置为data，交点为（0，0）</span></span><br><span class="line">spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(‘red<span class="string">')</span></span><br><span class="line"><span class="string">ax.spines['</span>top<span class="string">'].set_color(‘red’)</span></span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/788FEFB8-8547-4799-8CCC-537097186613.png" alt="这里写图片描述"></p><h4 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1, = plt.plot(x,y1,color=<span class="string">'red'</span>,linewidth=<span class="number">1.0</span>,linestyle=<span class="string">'—'</span>) <span class="comment">#设置两条线为l1,l2    注：应该在后面加上，</span></span><br><span class="line">l2, = plt.plot(x,y2,color=<span class="string">"blue"</span>,linewidth=<span class="number">5.0</span>,linestyle=<span class="string">"-"</span>)</span><br><span class="line">plt.legend(handles=[l1,l2],labels=[<span class="string">'test1'</span>,<span class="string">'test2'</span>],loc=<span class="string">'best’) #将l1，l2绘制于一张图中，其中名字分别是l1，l2，位置自动取在最佳位置</span></span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/E3EDB955-4349-4458-91E8-B2B88A9EC0FA.png" alt="这里写图片描述"></p><h3 id="设置备注"><a href="#设置备注" class="headerlink" title="设置备注"></a>设置备注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x0 = <span class="number">0.5</span></span><br><span class="line">y0 = <span class="number">2</span>*x0 + <span class="number">1</span></span><br><span class="line"><span class="comment"># 画点</span></span><br><span class="line">plt.scatter(x0,y0,s=<span class="number">50</span>,color=<span class="string">'blue'</span>)</span><br><span class="line"><span class="comment"># 画虚线</span></span><br><span class="line">plt.plot([x0,x0],[y0,<span class="number">0</span>],<span class="string">'k--'</span>,lw=<span class="number">2</span>)<span class="comment">#[x0,x0],[y0,0]代表x0，y0点作虚线交于x0，0  k--代表颜色的虚线,lw代表宽度</span></span><br><span class="line">plt.annotate(<span class="string">r'$2x+1=%s$'</span> % y0,xy=(x0,y0),xytext=(+<span class="number">30</span>,<span class="number">-30</span>),textcoords=<span class="string">'offset points'</span>,fontsize=<span class="number">16</span>,arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>,connectionstyle=<span class="string">'arc3,rad=.2'</span>))</span><br><span class="line"><span class="comment">#xy=(x0,y0)指在x0，y0点，xytext=(+30,-30)指在点向右移动30，向下移动30,textcoords='offset points'指以点为起点</span></span><br><span class="line"><span class="comment">#arrowprops=dict(arrowstyle='-&gt;',connectionstyle='arc3,rad=.2')指弧度曲线，  .2指弧度</span></span><br><span class="line">plt.text(<span class="number">-2</span>,<span class="number">2</span>,<span class="string">r'$This\ is\ the\ text$'</span>,fontsize=<span class="number">16</span>,color=<span class="string">'red’) #-2,2指从-2，2开始写</span></span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/5925C318-BFC1-49BB-BE29-5C1C0EFC1095.png" alt="这里写图片描述"></p><hr><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">500</span>)</span><br><span class="line">y = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,<span class="number">500</span>)</span><br><span class="line">plt.scatter(x,y,s=<span class="number">50</span>,color=<span class="string">'blue'</span>,alpha=<span class="number">0.5</span>) <span class="comment">#s指点大小，alpha指透明度</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/C02F8D95-CC61-4561-ACB3-5595C5D4C100.png" alt="这里写图片描述"></p><hr><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">y = <span class="number">2</span>**x + <span class="number">10</span></span><br><span class="line">plt.bar(x,y,facecolor=<span class="string">'#9999ff'</span>,edgecolor=<span class="string">'white'</span>)<span class="comment">#柱颜色，柱边框颜色</span></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> zip(x,y):<span class="comment">#zip指把x，y结合为一个整体，一次可以读取一个x和一个y</span></span><br><span class="line">    plt.text(x,y,<span class="string">'%.2f'</span> % y,ha=<span class="string">'center'</span>,va=<span class="string">'bottom'</span>)<span class="comment">#指字体在中间和柱最顶的顶部</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/FD3793BD-4615-44CB-9AEB-D4BD65079B07.png" alt="这里写图片描述"></p><hr><h2 id="等高图"><a href="#等高图" class="headerlink" title="等高图"></a>等高图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="comment">#用来生成高度</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>-x/<span class="number">2</span>+x**<span class="number">5</span>+y**<span class="number">3</span>)*np.exp(-x**<span class="number">2</span>-y**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">100</span>)</span><br><span class="line">y = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">X,Y = np.meshgrid(x,y)<span class="comment">#将x，y指传入网格中</span></span><br><span class="line">plt.contourf(X,Y,f(X,Y),<span class="number">8</span>,alpha=<span class="number">0.75</span>,cmap=plt.cm.hot)<span class="comment">#8指图中的8+1根线，绘制等温线，其中cmap指颜色</span></span><br><span class="line"></span><br><span class="line">C = plt.contour(X,Y,f(X,Y),<span class="number">8</span>,colors=<span class="string">'black'</span>,linewidth=<span class="number">.5</span>)<span class="comment">#colors指等高线颜色</span></span><br><span class="line">plt.clabel(C,inline=<span class="keyword">True</span>,fontsize=<span class="number">10</span>)<span class="comment">#inline=True指字体在等高线中</span></span><br><span class="line"></span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.yticks(())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/728EB2FF-CD29-446B-B2C4-EDF7D2227502.png" alt="这里写图片描述"></p><hr><h2 id="matplotlib绘制3D图"><a href="#matplotlib绘制3D图" class="headerlink" title="matplotlib绘制3D图"></a>matplotlib绘制3D图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D<span class="comment">#动态图所需要的包</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-4</span>,<span class="number">4</span>,<span class="number">0.25</span>)<span class="comment">#0.25指-4至4间隔为0.25</span></span><br><span class="line">y = np.arange(<span class="number">-4</span>,<span class="number">4</span>,<span class="number">0.25</span>)</span><br><span class="line">X,Y = np.meshgrid(x,y)<span class="comment">#x，y放入网格</span></span><br><span class="line">R = np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>)</span><br><span class="line">Z = np.sin(R)</span><br><span class="line"></span><br><span class="line">ax.plot_surface(X,Y,Z,rstride=<span class="number">1</span>,cstride=<span class="number">1</span>,cmap=plt.get_cmap(<span class="string">'rainbow'</span>))<span class="comment">#rstride=1指x方向和y方向的色块大小</span></span><br><span class="line">ax.contourf(X,Y,Z,zdir=<span class="string">'z'</span>,offset=<span class="number">-2</span>,cmap=<span class="string">'rainbow'</span>)<span class="comment">#zdir指映射到z方向，-2代表映射到了z=-2</span></span><br><span class="line">ax.set_zlim(<span class="number">-2</span>,<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/DD75A758-F8B4-4229-B2E2-A05929AE9B1A.png" alt="这里写图片描述"></p><hr><h2 id="子图像"><a href="#子图像" class="headerlink" title="子图像"></a>子图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)<span class="comment">#建立一个两行两列的画布，第一个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)<span class="comment">#第二个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">#第三个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)<span class="comment">#第四个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/44E19686-944D-4EE3-8456-0D2F27865F22.png" alt="这里写图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)<span class="comment">#建立一个两行两列的画布，第一个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)<span class="comment">#第二个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)<span class="comment">#第三个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>)<span class="comment">#第四个</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/BE05B796-A244-4F6D-BA07-401602F74A95.png" alt="这里写图片描述"></p><hr><h2 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation<span class="comment">#动态图所需要的包</span></span><br><span class="line">fig,ax = plt.subplots()<span class="comment">#子图像</span></span><br><span class="line">x = np.arange(<span class="number">0</span>,<span class="number">2</span>*np.pi,<span class="number">0.01</span>)</span><br><span class="line">line, = ax.plot(x,np.sin(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animate</span><span class="params">(i)</span>:</span></span><br><span class="line">    line.set_ydata(np.sin(x+i/<span class="number">10</span>))<span class="comment">#用来改变的y对应的值</span></span><br><span class="line">    <span class="keyword">return</span> line,</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    line.set_ydata(np.sin(x))<span class="comment">#动态图初始图像</span></span><br><span class="line">    <span class="keyword">return</span> line,</span><br><span class="line"></span><br><span class="line">ani = animation.FuncAnimation(fig=fig,func=animate,init_func=init,interval=<span class="number">20</span>)<span class="comment">#动态作图的方法，func动态图函数，init_func初始化函数，interval指图像改变的时间间隔</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/python-matplotlib中常用函数/C4F247A8-B5C7-4A4E-9AEB-332041AE18AB.png" alt="这里写图片描述"></p><h4 id="注：若想看动态效果请在ipython中使用"><a href="#注：若想看动态效果请在ipython中使用" class="headerlink" title="注：若想看动态效果请在ipython中使用"></a>注：若想看动态效果请在ipython中使用</h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/11/03/hello-world/"/>
      <url>/2017/11/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
