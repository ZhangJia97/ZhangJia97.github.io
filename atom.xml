<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随我的博客</title>
  
  <subtitle>记录学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suiwo.xyz/"/>
  <updated>2023-01-07T14:45:55.370Z</updated>
  <id>http://suiwo.xyz/</id>
  
  <author>
    <name>随我</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HiveDML数据操作之导入导出</title>
    <link href="http://suiwo.xyz/2020/11/24/HiveDML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <id>http://suiwo.xyz/2020/11/24/HiveDML数据操作之导入导出/</id>
    <published>2020-11-24T06:54:50.000Z</published>
    <updated>2023-01-07T14:45:55.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数据导入"><a href="#一、数据导入" class="headerlink" title="一、数据导入"></a>一、数据导入</h3><p>向表中加载数据Load<br>语法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> [<span class="keyword">local</span>] inpath <span class="string">'/opt/module/datas/student.txt'</span> [overwrite] | <span class="keyword">into</span> <span class="keyword">table</span> student [<span class="keyword">partition</span> (partcol1=val1,...)];</span><br></pre></td></tr></table></figure></p><p>load data：表示加载数据<br>local： 表示从本地数据中加载数据到Hive表中，否则是从HDFS中加载数据到Hive表<br>inpath： 表示加载数据的路径<br>overwrite： 表示覆盖表中的已有数据，否则表示追加<br>into table： 表示加载到哪张表<br>student： 表示表名<br>partition： 表示上传到指定的分区</p><p>案例实操</p><p>创建一张表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(<span class="keyword">id</span> <span class="keyword">string</span>, <span class="keyword">name</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure></p><p>加载本地文件到hive<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/datas/student.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> default.student;</span><br></pre></td></tr></table></figure></p><p>加载HDFS文件到Hive<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> inpath <span class="string">'/user/suiwo/hive/student.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> default.student;</span><br></pre></td></tr></table></figure></p><p>加载数据覆盖表中的已有的数据<br>上传文件到HDFS<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs -put /opt/module/datas/student.txt /user/suiwo/hive;</span><br></pre></td></tr></table></figure></p><p>加载数据覆盖表中已有的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> inpath <span class="string">"/user/suiwo/hive/student.txt"</span> overwrite <span class="keyword">into</span> <span class="keyword">table</span> default.student;</span><br></pre></td></tr></table></figure></p><p>通过查询语句向表中插入数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201708'</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span>;</span><br></pre></td></tr></table></figure></p><p>查询语句中创建表并加载数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> student3</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></p><p>import数据到指定的Hive表中（此处导入的数据格式应该是和导出的数据格式相同）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import table student2 partition(month='201709') from '/user/hive/warehouse/export/student';</span><br></pre></td></tr></table></figure></p><h3 id="二、数据导出"><a href="#二、数据导出" class="headerlink" title="二、数据导出"></a>二、数据导出</h3><p>将查询的结果导出到本地（将local去掉便是将数据导出到HDFS）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/opt/module/datas/export/student1'</span> <span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></p><p>将查询的结果格式化导出到本地<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/opt/module/datas/export/student1'</span> <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> dields <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></p><p>Hadoop命令导出到本地<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dfs -get /user/hive/warehouse/student/month=2017/00000_0</span><br><span class="line">/opt/module/datas/export/studemt3.txt</span><br></pre></td></tr></table></figure></p><p>Hive Shell 命令导出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hive -e <span class="string">'select * from default.student;'</span> &gt; /opt/module/datas/<span class="built_in">export</span>/student3.txt;</span><br></pre></td></tr></table></figure></p><p>export 导出到HDFS上<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export table default.student to '/user/hive/warehouse/export/student'</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      使用HiveDML将数据进行导入导出。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Hive" scheme="http://suiwo.xyz/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>HiveDDL数据操作</title>
    <link href="http://suiwo.xyz/2020/11/23/HiveDDL%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"/>
    <id>http://suiwo.xyz/2020/11/23/HiveDDL数据操作/</id>
    <published>2020-11-23T07:08:46.000Z</published>
    <updated>2023-01-07T14:42:26.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-Hive集合数据类型"><a href="#一、-Hive集合数据类型" class="headerlink" title="一、 Hive集合数据类型"></a>一、 Hive集合数据类型</h3><p>除了常见的基本数据类型，Hive还支持三种复杂的数据类型ARRAY、MAP和STRUCT。ARRAY和MAP与Java中的Array和Map类似，而STRUCT与C语言中的Struct类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。</p><table><thead><tr><th>数据类型</th><th>描述</th><th>语法示例</th></tr></thead><tbody><tr><td>STRUCT</td><td>和c语言中的struct类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是STRUCT{first STRING, last STRING},那么第1个元素可以通过字段.first来引用。</td><td>struct()</td></tr><tr><td>MAP</td><td>MAP是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是MAP，其中键-&gt;值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么可以通过字段名[‘last’]获取最后一个元素</td><td>map()</td></tr><tr><td>ARRAY</td><td>数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’, ‘Doe’]，那么第2个元素可以通过数组名[1]进行引用。</td><td>Array()</td></tr></tbody></table><h4 id="1-案例实操"><a href="#1-案例实操" class="headerlink" title="1. 案例实操"></a>1. 案例实操</h4><p>假设某表有如下一行，我们用JSON格式来表示其数据结构。下面这个json字符串存在列表，键值对，以及结构体<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"songsong"</span>,</span><br><span class="line">    <span class="attr">"friends"</span>:[ // Array</span><br><span class="line">        <span class="string">"bingbing"</span>,</span><br><span class="line">        <span class="string">"lili"</span></span><br><span class="line">    ],</span><br><span class="line">    "children":&#123; // Map</span><br><span class="line">        "xiao song":18,</span><br><span class="line">        "xiaoxiao song":19</span><br><span class="line">    &#125;,</span><br><span class="line">    "address":&#123; // Struct</span><br><span class="line">        "street":"huilongguan",</span><br><span class="line">        "city":"beijing"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们尝试创建对应的表，并将上述的json中包含的数据导入到这个表中。<br>首先我们创建本地的测试文件test.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">songsong,bingbing_lili,xiaosong:18_xiaoxiaosong:19,huilongguan_beijing</span><br><span class="line">yangyang,caicai_susu,xiaoyang:18_xiaoxiaoyang:19,chaoyang_beijing</span><br></pre></td></tr></table></figure></p><p>注意:MAP，STRUCT和ARRAY里的元素间关系都可以用同一个字符表示，这里用“_”。</p><p>首先我们创建一个数据表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">friend <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">children <span class="keyword">map</span>&lt;<span class="keyword">string</span>, <span class="built_in">int</span>&gt;,</span><br><span class="line">address <span class="keyword">struct</span>&lt;street:<span class="keyword">string</span>, city:<span class="keyword">string</span>&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="comment">-- 列分隔符</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'_'</span> <span class="comment">-- MAP，ARRAY，STRUCT的分隔符</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">keys</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span> <span class="comment">-- MAP中的key与value的分隔符</span></span><br><span class="line"><span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>; <span class="comment">-- 行分隔符</span></span><br></pre></td></tr></table></figure></p><p>将文本数据导入到测试表中<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">"/filepath/test.txt"</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure></p><p>之后我们尝试访问三种集合列中的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> friend[<span class="number">1</span>], children[<span class="string">'xiaosong'</span>], address.city <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'songsong'</span>;</span><br></pre></td></tr></table></figure></p><p>执行后可以发现返回结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OK</span><br><span class="line">_c0 _c1 city</span><br><span class="line">lili 18 beijing</span><br><span class="line">Time taken: 0.076 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure></p><h4 id="2-类型转换"><a href="#2-类型转换" class="headerlink" title="2. 类型转换"></a>2. 类型转换</h4><p>使用CAST操作显示进行数据类型转换<br>例如CAST(‘1’ AS INT)将把字符串’1’转换成整数1;如果强制类型转换失败，如执行CAST(‘X’ AS INT)，表达式返回空值NULL。</p><h3 id="二、-DDL数据操作"><a href="#二、-DDL数据操作" class="headerlink" title="二、 DDL数据操作"></a>二、 DDL数据操作</h3><h4 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h4><p>为了避免已创建的数据库已存在，建议增加if not exists进行判断<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> db_hive;</span><br></pre></td></tr></table></figure></p><p>创建数据库可以指定HDFS上存放的位置<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> db_hive location <span class="string">'/db_hive2.db'</span>;</span><br></pre></td></tr></table></figure></p><h4 id="3-查询数据库"><a href="#3-查询数据库" class="headerlink" title="3. 查询数据库"></a>3. 查询数据库</h4><p>显示数据库<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure></p><p>过滤显示查询的数据库<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span> <span class="keyword">like</span> <span class="string">'db_hive*'</span>;</span><br></pre></td></tr></table></figure></p><h4 id="4-查看数据库详细"><a href="#4-查看数据库详细" class="headerlink" title="4. 查看数据库详细"></a>4. 查看数据库详细</h4><p>显示数据库信息<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc database db_hive;</span><br></pre></td></tr></table></figure></p><p>查询数据库详细信息， extended<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc database extended db_hive;</span><br></pre></td></tr></table></figure></p><h4 id="5-切换当前数据库"><a href="#5-切换当前数据库" class="headerlink" title="5. 切换当前数据库"></a>5. 切换当前数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> db_hive;</span><br></pre></td></tr></table></figure><h4 id="6-修改数据库"><a href="#6-修改数据库" class="headerlink" title="6. 修改数据库"></a>6. 修改数据库</h4><p>用户可以使用ALTER DATABASE命令为某个数据库的DBPROPERTIES设置键-值对属性值，来描述这个数据库的属性信息。数据库的其他元数据信息都是不可更改的，包括数据库名和数据库所在的目录位置。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> hive <span class="keyword">set</span> dbproperties(<span class="string">'createtime'</span>=<span class="string">'20170830'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="7-删除数据库"><a href="#7-删除数据库" class="headerlink" title="7. 删除数据库"></a>7. 删除数据库</h4><p>最好采用if exists判断数据库是否存在<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> db_hive2;</span><br></pre></td></tr></table></figure></p><p>对于数据库不为空的时候，可以使用cascade命令强制删除<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> db_hive <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure></p><h4 id="8-创建表"><a href="#8-创建表" class="headerlink" title="8. 创建表"></a>8. 创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name</span><br><span class="line">[(col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)]</span><br><span class="line">[<span class="keyword">COMMENT</span> table_comment]</span><br><span class="line">[PARTITIONED <span class="keyword">BY</span> (col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)] [CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...)</span><br><span class="line">[SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>], ...)] <span class="keyword">INTO</span> num_buckets BUCKETS]</span><br><span class="line">[<span class="keyword">ROW</span> <span class="keyword">FORMAT</span> row_format]</span><br><span class="line">[<span class="keyword">STORED</span> <span class="keyword">AS</span> file_format]</span><br><span class="line">[LOCATION hdfs_path]</span><br></pre></td></tr></table></figure><p>字段解释说明<br>(1)CREATE TABLE创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常;用户可以用IFNOTEXISTS选项来忽略这个异常。<br>(2)EXTERNAL 关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际 数据的路径(LOCATION)，Hive创建内部表时，会将数据移动到数据仓库指向的路径;若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。<br>(3)COMMENT:为表和列添加注释。<br>(4)PARTITIONED BY创建分区表<br>(5)CLUSTERED BY创建分桶表<br>(6)SORTED BY不常用<br>(7)ROW FORMAT<br>DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char] [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char] | SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, …)]<br>用户在建表的时候可以自定义SerDe或者使用自带的 SerDe。如果没有指定ROW FORMAT或者ROW FORMAT DELIMITED，将会使用自带的SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的SerDe，Hive 通过SerDe确定表的具体的列的数据。SerDe是Serialize/Deserilize的简称，目的是用于序列化和反序列化。<br>(8)STORED AS指定存储文件类型,常用的存储文件类型:SEQUENCEFILE(二进制序列文件)、TEXTFILE(文本)、 RCFILE(列式存储格式文件),如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用STORED AS SEQUENCEFILE。<br>(9)LOCATION:指定表在HDFS上的存储位置。<br>(10)LIKE允许用户复制现有的表结构，但是不复制数据。</p><h4 id="9-内部表，外部表，分区表"><a href="#9-内部表，外部表，分区表" class="headerlink" title="9. 内部表，外部表，分区表"></a>9. 内部表，外部表，分区表</h4><p>略</p><h3 id="三-分区表常见操作"><a href="#三-分区表常见操作" class="headerlink" title="三. 分区表常见操作"></a>三. 分区表常见操作</h3><ol><li><p>创建分区表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept_partition(deptno <span class="built_in">int</span>, dname <span class="keyword">string</span>, loc <span class="keyword">string</span>)</span><br><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">month</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure></li><li><p>加载数据到分区表</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/datas/dept.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> default.dept_partition <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201709'</span>);</span><br><span class="line">hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition partition(month='201708');</span><br><span class="line">hive (default)&gt; load data local inpath '/opt/module/datas/dept.txt' into table default.dept_partition partition(month='201707’);</span><br></pre></td></tr></table></figure></li><li><p>创建单个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201706'</span>) ;</span><br></pre></td></tr></table></figure></li><li><p>创建多个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201705'</span>) <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201704'</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除单个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">month</span>=<span class="string">'201704'</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除多个分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">month</span>=<span class="string">'201705'</span>), <span class="keyword">partition</span> (<span class="keyword">month</span>=<span class="string">'201706'</span>);</span><br></pre></td></tr></table></figure></li></ol><p><em>记得区分创建多个和删除多个的时候，分隔符一个为空格一个为逗号。</em></p><ol start="7"><li>创建二级分区<br>(1) 首先创建一个表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept_partition2(deptno <span class="built_in">int</span>, dname <span class="keyword">string</span>, loc <span class="keyword">string</span>)</span><br><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">month</span> <span class="keyword">string</span>, <span class="keyword">day</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure></li></ol><p>(2) 正常的加载数据,加载数据到二级分区表中<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/filepath/test.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> default.dept_partition2 <span class="keyword">partition</span>(moth=<span class="string">'201709'</span>, <span class="keyword">day</span>=<span class="string">'13'</span>);</span><br></pre></td></tr></table></figure></p><p>(3) 查询分区数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_partition2 <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span> <span class="keyword">and</span> <span class="keyword">day</span>=<span class="string">'13'</span>;</span><br></pre></td></tr></table></figure></p><ol start="8"><li>当我们把数据直接上传到分区目录上的时候，我们需要让分区表和数据产生关联，一共有三种方式</li></ol><p>(1) 上传数据后修复<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br><span class="line">dfs -put /opt/module/datas/dept.txt /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br></pre></td></tr></table></figure></p><p>此时我们是查询不到数据的，需要执行修复指令<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msck <span class="keyword">repair</span> <span class="keyword">table</span> dept_partition2;</span><br></pre></td></tr></table></figure></p><p>这个时候便可以查询到数据了</p><p>(2) 上传数据后添加分区<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br><span class="line">dfs -put /opt/module/datas/dept.txt /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br></pre></td></tr></table></figure></p><p>执行添加分区<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition2 <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201709'</span>,<span class="keyword">day</span>=<span class="string">'11'</span>);</span><br></pre></td></tr></table></figure></p><p>(3) 创建文件夹后load数据到分区<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br><span class="line">dfs -put /opt/module/datas/dept.txt /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br></pre></td></tr></table></figure></p><p>上传数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/datas/dept.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> dept_partition2 <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201709'</span>,<span class="keyword">day</span>=<span class="string">'10'</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      HiveDDL是Hive中负责数据结构定义与数据库对象定义的语言
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Hive" scheme="http://suiwo.xyz/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>HiveDML数据操作之查询</title>
    <link href="http://suiwo.xyz/2020/11/23/HiveDML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9F%A5%E8%AF%A2/"/>
    <id>http://suiwo.xyz/2020/11/23/HiveDML数据操作之查询/</id>
    <published>2020-11-23T05:46:19.000Z</published>
    <updated>2023-01-07T14:49:43.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、常用函数"><a href="#一、常用函数" class="headerlink" title="一、常用函数"></a>一、常用函数</h3><p>总行数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><p>最大值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><p>最小值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><p>总和<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><p>平均值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><h3 id="二、案例实操"><a href="#二、案例实操" class="headerlink" title="二、案例实操"></a>二、案例实操</h3><h3 id="2-1-比较运算符"><a href="#2-1-比较运算符" class="headerlink" title="2.1 比较运算符"></a>2.1 比较运算符</h3><p>查出薪水大于1000的虽有员工emp<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; <span class="number">1000</span>;</span><br></pre></td></tr></table></figure></p><p>查出薪水等于1000的员工<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure></p><p>查询工资在1000到5000的员工<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">1000</span> <span class="keyword">and</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure></p><p>查询comm为空的所有员工<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>查询工资是1000或者5000的员工<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span> (<span class="number">1000</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure></p><h3 id="2-2-Like-RLike"><a href="#2-2-Like-RLike" class="headerlink" title="2.2 Like RLike"></a>2.2 Like RLike</h3><p>查询薪资是以2开头的员工<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">like</span> <span class="string">'2%'</span>;</span><br></pre></td></tr></table></figure></p><p>查询薪水中第二个数值为2的员工信息<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">like</span> <span class="string">'_2%'</span>;</span><br></pre></td></tr></table></figure></p><p>查询薪水中含有2的员工信息 (rlike是Hive的一个扩展功能，可以通过正则表达式来指定匹配条件)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">rlike</span> <span class="string">'[2]'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-Group-By"><a href="#2-3-Group-By" class="headerlink" title="2.3 Group By"></a>2.3 Group By</h3><p>计算各个部门的平均工资<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure></p><p>计算各部门中各个岗位的最高薪水<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno, job, <span class="keyword">max</span>(<span class="keyword">sql</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno, job;</span><br></pre></td></tr></table></figure></p><h3 id="2-4-Having"><a href="#2-4-Having" class="headerlink" title="2.4 Having"></a>2.4 Having</h3><p>1.having 与 where 不同点<br>(1)where 针对表中的列发挥作用，查询数据;having 针对查询结果中的列发挥作用， 筛选数据。<br>(2)where 后面不能写聚合函数，而 having 后面可以使用聚合函数。 (3)having 只用于 group by 分组统计语句。<br>计算平均薪资大于2000的部门<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="keyword">as</span> avg_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> avg_sal &gt; <span class="number">2000</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-JOIN"><a href="#2-5-JOIN" class="headerlink" title="2.5 JOIN"></a>2.5 JOIN</h3><p>Join 连接谓词中不支持 or<br>左连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></p><p>右连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></p><p>内连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></p><p>满外连接（将会返回所有表中符合 WHERE 语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用 NULL 值替代。）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">full</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></p><p>笛卡尔积<br>1.笛卡尔集会在下面条件下产生<br>(1)省略连接条件 (2)连接条件无效 (3)所有表中的所有行互相连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno, dname <span class="keyword">from</span> emp, dept;</span><br></pre></td></tr></table></figure></p><h3 id="2-6-排序"><a href="#2-6-排序" class="headerlink" title="2.6 排序"></a>2.6 排序</h3><ul><li>Order By: 全局排序，一个Reducer</li><li>Sort By: 每个Reducer内部进行排序，对全局结果集来说不是排序。</li><li>Distribute By: 类似MR中partition，进行分区，结合sort by使用。</li><li>Cluster By: 当distribute by和sorts by字段相同时，可以使用cluster by方式。cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</li></ul><h3 id="2-7-分桶表"><a href="#2-7-分桶表" class="headerlink" title="2.7 分桶表"></a>2.7 分桶表</h3><p>略</p><h3 id="2-8-CASE-WHEN"><a href="#2-8-CASE-WHEN" class="headerlink" title="2.8 CASE WHEN"></a>2.8 CASE WHEN</h3><ol><li>数据准备</li></ol><table><thead><tr><th>name</th><th>dept_id</th><th>sex</th></tr></thead><tbody><tr><td>悟空</td><td>A</td><td>男</td></tr><tr><td>大海</td><td>A</td><td>男</td></tr><tr><td>宋宋</td><td>B</td><td>男</td></tr><tr><td>凤姐</td><td>A</td><td>女</td></tr><tr><td>婷姐</td><td>B</td><td>女</td></tr><tr><td>婷婷</td><td>B</td><td>女</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">dept_id,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'男'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) male_count, <span class="keyword">sum</span>(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'女'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) female_count</span><br><span class="line"><span class="keyword">from</span> emp_sex</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  dept_id;</span><br></pre></td></tr></table></figure><h3 id="2-9-其他常用的查询函数"><a href="#2-9-其他常用的查询函数" class="headerlink" title="2.9 其他常用的查询函数"></a>2.9 其他常用的查询函数</h3><p>空字段赋值<br>NVL赋值，它的格式是NVL(string1, replace_with)。它的功能是如果string1是NULL，则NVL函数返回replace_with的值，否则返回string1的值，如果两个参数都是NULL，则返回NULL。</p><p>1)date_format:格式化时间<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive(default)&gt; select date_format('2019-06-29','yyyy-MM-dd');</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-06-29</span><br></pre></td></tr></table></figure></p><p>2)date_add:时间跟天数相加<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select date_add('2019-06-29',5);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-07-04</span><br><span class="line">hive (default)&gt; select date_add('2019-06-29',-5);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-06-24</span><br></pre></td></tr></table></figure></p><p>3)date_sub:时间跟天数相减<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select date_sub('2019-06-29',5);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-06-24</span><br><span class="line">hive (default)&gt; select date_sub('2019-06-29 12:12:12',5);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-06-24</span><br><span class="line">hive (default)&gt; select date_sub('2019-06-29',-5);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">2019-07-04</span><br></pre></td></tr></table></figure></p><p>4)datediff:两个时间相减<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select datediff('2019-06-29','2019-06-24');</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">5</span><br><span class="line">hive (default)&gt; select datediff('2019-06-24','2019-06-29');</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">-5</span><br><span class="line">hive (default)&gt; select datediff('2019-06-24 12:12:12','2019-06-29');</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">-5</span><br><span class="line">hive (default)&gt; select datediff('2019-06-24 12:12:12','2019-06-29 13:13:13');</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">-5</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      HiveDML是Hive中对表中数据的查询、插入、删除和修改的语言。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Hive" scheme="http://suiwo.xyz/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Hive基础</title>
    <link href="http://suiwo.xyz/2020/11/23/Hive%E5%9F%BA%E7%A1%80/"/>
    <id>http://suiwo.xyz/2020/11/23/Hive基础/</id>
    <published>2020-11-23T05:46:19.000Z</published>
    <updated>2023-01-07T14:42:27.993Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-Hive介绍"><a href="#一、-Hive介绍" class="headerlink" title="一、 Hive介绍"></a>一、 Hive介绍</h3><p>Hive是为了解决<code>海量结构化日志</code>的数据统计框架，他是一个基于Hadoop的<code>数据仓库工具</code>，可以将<code>结构化的数据映射为一张表</code>，并提供<code>类SQL</code>的查询功能。本质就是<code>将HQL转化成MR程序</code>。<br>简化流程可以理解成： </p><ol><li>编写SQL。</li><li>Hive匹配出相对应的MR模板并将将SQL转化成MR程序。</li><li>运行MR程序，生成相应的分析结果。</li><li>将结果写入持久化存储。</li></ol><p>Hive优点：</p><ol><li>类SQL语句，简单易上手。</li><li>自动转化成MR程序，减少开发人员学习成本。</li><li>Hive支持自定义函数，用户可以根据自己需求来实现自己的函数。</li></ol><p>Hive缺点：</p><ol><li>效率低，自动生成的MR程序通常情况下不够智能，并且调优比较困难。</li><li>HQL表达能力有限。</li><li>只适合实时性要求不高的场合。</li></ol><h3 id="二、-Hive架构"><a href="#二、-Hive架构" class="headerlink" title="二、 Hive架构"></a>二、 Hive架构</h3><p><img src="/images/Hive基础/0E472121-19CE-4CC2-A08C-9F3B4F42B545.jpeg" alt="a11d648f4c81611b4ccc929be282dba6.jpeg"></p><ol><li><p>Hive提供了三种用户接口<br>CLI(Hive shell)： CLI启动的时候，会同时启动一个Hive副本，CLI会连接到client是Hive的客户端会连接到Hive Server。在启动Client模式的时候，需要指出Hive Server所在节点，并且在该节点启动Hive Server。<br>JDBC/ODBC：使用Java访问Hive。<br>WUI：通过浏览器访问Hive。</p></li><li><p>元数据Metastore<br>Hive将元数据存储在数据库中，如mysql、derby。Hive中的元数据包括表的名字，表所属的数据库(默认是 default)，表的拥有者，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在目录等。</p></li><li><p>Hadoop<br>Hive使用HDFS进行存储，使用MR进行计算。</p></li><li><p>驱动器:Driver<br>解析器(SQL Parser):将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr;对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。<br>编译器(Physical Plan):将AST编译生成逻辑执行计划。<br>优化器(Query Optimizer):对逻辑执行计划进行优化。<br>执行器(Execution):把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是将其转化成MR/Spark。</p></li></ol><h3 id="三、-Hive与数据库进行比较"><a href="#三、-Hive与数据库进行比较" class="headerlink" title="三、 Hive与数据库进行比较"></a>三、 Hive与数据库进行比较</h3><p>查询语言： SQL被广泛应用在数据仓库中，因此专门针对Hive的提醒设计了类SQL的查询语句HQL。熟悉SQL的开发者可以很方便的使用Hive进行开发。<br>数据存储位： Hive是数据Hadoop生态下的一个数据仓库工具，显然，Hive中的数据是存放在HDFS中的。而数据库一般则是将数据保存在块设备或者本地文件系统中。<br>数据更新：Hive是针对数据仓库应用设计的，而数据仓库的内容一般是读多写少。因此Hive中不建议对数据进行改写。所有数据应当在加载时就确认好。而数据库中的数据通常是需要经常进行修改的，所以使用INSERT，UPDATE比较常见。<br>索引：Hive在加载数据的过程中不会对数据进行任何的处理，甚至不会对数据进行扫描，因此也没有对数据中的某些Key创建索引。Hive想要访问满足条件的特定值的时候，需要使用暴力扫描，因此访问数据的延迟比较大。也正因为延迟大，所以Hive不适合在线数据查询。因为引入了MR，Hive可以进行并行访问数据，所以即使没有索引，在遇到大数据量的访问时，Hive仍然可以体现出优势。数据库中，通常会对常用的列创建一个或者多个索引，因此可以有较高的效率以及较小的延迟。<br>执行： Hive中对的大多数查询的执行都是通过MR来实现的。而数据库通常是存在自己的执行引擎的。<br>执行延迟： Hive由于没有索引，需要扫描整个表，因此延迟较高。并且由于MR自身的延迟就较高，所以在使用MR执行Hive查询的时候，也会有较高的延迟。所以在数据量小的时候数据库的执行能力更好，但是当数据规模比较大，达到超过了数据库的数据处理能力的时候，Hive并行查询能力的优势显然能体现出来了。<br>可扩展性： 由Hive是建立在Hadoop之上的，因此Hive的可扩展性适合Hadoop的可扩展性一致的。数据库由于ACID的严格限制，扩展行非常有限。目前最先进的并行数据库Oracle在理论上的扩展能力也只有100台左右。<br>数据规模： Hive是建立在集群上的，可以利用MR进行并行计算，因此可以执行很大规模的数据。对应的数据库可以支持的数据规模较小。</p><h3 id="四、-Hive常见操作"><a href="#四、-Hive常见操作" class="headerlink" title="四、 Hive常见操作"></a>四、 Hive常见操作</h3><p>在操作Hive之前，我们需要部署好Hive，这部分可以参考<a href="https://suiwo.xyz/2020/05/24/Hive%E5%88%9D%E8%AF%86/">Hive初识</a>中的介绍。<br>并且由于Hive默认的Metastore为derby的性能限制，建议将Metastore改成MYSQL，详细更改方式同样参考<a href="https://suiwo.xyz/2020/05/24/Hive%E5%88%9D%E8%AF%86/">Hive初识</a>。<br>启动Hive  进行Hive文件夹下对的bin目录，我们可以执行<code>./hive</code>启动hive客户端</p><p>查看数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; show databases;</span><br></pre></td></tr></table></figure></p><p>打开默认数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; use default;</span><br></pre></td></tr></table></figure></p><p>显示 default 数据库中的表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; show tables;</span><br></pre></td></tr></table></figure></p><p>创建一张表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student(id int, name string);</span><br></pre></td></tr></table></figure></p><p>显示数据库中有几张表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; show tables;</span><br></pre></td></tr></table></figure></p><p>查看表的结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; desc student;</span><br></pre></td></tr></table></figure></p><p>向表中插入数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; insert into student values(1000,&quot;ss&quot;);</span><br></pre></td></tr></table></figure></p><p>查询表中数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select * from student;</span><br></pre></td></tr></table></figure></p><p>退出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive hive&gt; quit;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Hive是为了解决海量结构化日志的数据统计框架，他是一个基于Hadoop的数据仓库工具，可以将结构化的数据映射为一张表，并提供类SQL的查询功能。本质就是将HQL转化成MR程序。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Hive" scheme="http://suiwo.xyz/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>MR学习总结</title>
    <link href="http://suiwo.xyz/2020/08/07/MR%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://suiwo.xyz/2020/08/07/MR学习总结/</id>
    <published>2020-08-07T01:54:37.000Z</published>
    <updated>2020-08-07T02:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是在尚硅谷MapReduce课程后的课后总结</p></blockquote><h3 id="一、-MapReduce介绍"><a href="#一、-MapReduce介绍" class="headerlink" title="一、 MapReduce介绍"></a>一、 MapReduce介绍</h3><p>MapReduce是一种编程模型，用于大规模数据集（大于1TB）的并行运算。概念”Map（映射）”和”Reduce（归约）”，是它们的主要思想，都是从函数式编程语言里借来的，还有从矢量编程语言里借来的特性。它极大地方便了编程人员在不会分布式并行编程的情况下，将自己的程序运行在分布式系统上。 当前的软件实现是指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（归约）函数，用来保证所有映射的键值对中的每一个共享相同的键组。</p><hr><h3 id="二、-MapReduce进程"><a href="#二、-MapReduce进程" class="headerlink" title="二、 MapReduce进程"></a>二、 MapReduce进程</h3><p>一个完整的MapReduce程序在分布式运行时有三类实例进程：<br>| 进程类型 | 作用 |<br>| — | — |<br>| MrAppMaster | 负责整个程序的过程调度及状态协调 |<br>| MapTask | 负责Map阶段的整个数据处理流程 |<br>| ReduceTask | 负责Reduce阶段的整个数据处理流程 |</p><hr><h3 id="三、-常见数据序列化类型"><a href="#三、-常见数据序列化类型" class="headerlink" title="三、 常见数据序列化类型"></a>三、 常见数据序列化类型</h3><table><thead><tr><th>Java类型</th><th>Hadoop Writable类型</th></tr></thead><tbody><tr><td>boolean</td><td>BooleanWritable</td></tr><tr><td>byte</td><td>ByteWritable</td></tr><tr><td>int</td><td>IntWritable</td></tr><tr><td>float</td><td>FloatWritable</td></tr><tr><td>long</td><td>LongWritable</td></tr><tr><td>double</td><td>DoubleWritable</td></tr><tr><td>String</td><td>Text</td></tr><tr><td>map</td><td>MapWritable</td></tr><tr><td>array</td><td>ArrayWritable</td></tr></tbody></table><hr><h3 id="四、-maven包准备"><a href="#四、-maven包准备" class="headerlink" title="四、 maven包准备"></a>四、 maven包准备</h3><h4 id="1-在项目中添加以下pom配置"><a href="#1-在项目中添加以下pom配置" class="headerlink" title="1. 在项目中添加以下pom配置"></a>1. 在项目中添加以下pom配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-在resource目录下添加日志相关配置文件-log4j-properties"><a href="#2-在resource目录下添加日志相关配置文件-log4j-properties" class="headerlink" title="2. 在resource目录下添加日志相关配置文件 log4j.properties"></a>2. 在resource目录下添加日志相关配置文件 log4j.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line">log4j.appender.logfile=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.logfile.File=target/spring.log</span><br><span class="line">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</span><br></pre></td></tr></table></figure><hr><h3 id="五、-实现WordCount"><a href="#五、-实现WordCount" class="headerlink" title="五、 实现WordCount"></a>五、 实现WordCount</h3><h4 id="1-统计数据如下"><a href="#1-统计数据如下" class="headerlink" title="1. 统计数据如下"></a>1. 统计数据如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello hadoop</span><br><span class="line">hello hdfs</span><br><span class="line">hello scala</span><br><span class="line">mapreduce</span><br><span class="line">word count</span><br></pre></td></tr></table></figure><h4 id="2-期望输出数据："><a href="#2-期望输出数据：" class="headerlink" title="2. 期望输出数据："></a>2. 期望输出数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">count1</span><br><span class="line">hadoop1</span><br><span class="line">hdfs1</span><br><span class="line">hello3</span><br><span class="line">mapreduce1</span><br><span class="line">scala1</span><br><span class="line">word1</span><br></pre></td></tr></table></figure><h4 id="3-编写Mapper方法"><a href="#3-编写Mapper方法" class="headerlink" title="3. 编写Mapper方法"></a>3. 编写Mapper方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">private</span> IntWritable v = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString();</span><br><span class="line">        String[] lineArr = line.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : lineArr) &#123;</span><br><span class="line">            k.set(s);</span><br><span class="line">            context.write(k, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写Reducer方法"><a href="#4-编写Reducer方法" class="headerlink" title="4. 编写Reducer方法"></a>4. 编写Reducer方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        context.write(key, <span class="keyword">new</span> IntWritable(sum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-编写Driver方法"><a href="#5-编写Driver方法" class="headerlink" title="5. 编写Driver方法"></a>5. 编写Driver方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>, <span class="string">"/output/path"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">// 获取Job对象</span></span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        <span class="comment">// 设置jar存储位置</span></span><br><span class="line">        job.setJarByClass(WordCountDriver.class);</span><br><span class="line">        <span class="comment">// 关联map和reduce</span></span><br><span class="line">        job.setMapperClass(WordCountMapper.class);</span><br><span class="line">        job.setReducerClass(WordCountReducer.class);</span><br><span class="line">        <span class="comment">// 设置mapper阶段输出数据</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置最终数据输出类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置程序输入路径和输出路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 提交job</span></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-执行Driver方法"><a href="#6-执行Driver方法" class="headerlink" title="6. 执行Driver方法"></a>6. 执行Driver方法</h4><p>可在输出路径下看到结果与预期一致</p><hr><h3 id="六、-自定义序列化对象"><a href="#六、-自定义序列化对象" class="headerlink" title="六、 自定义序列化对象"></a>六、 自定义序列化对象</h3><h4 id="1-什么是序列化"><a href="#1-什么是序列化" class="headerlink" title="1. 什么是序列化"></a>1. 什么是序列化</h4><p>序列化就是把内存中的对象，转换成字节序列（或其他数据传输协议）以便于存储到磁盘（持久化）和网络传输。<br>反序列化就是将收到字节序列（或其他数据传输协议）或者是磁盘的持久化数据，转换成内存中的对象。</p><h4 id="2-自定义bean对象实现序列化接口（Writable）"><a href="#2-自定义bean对象实现序列化接口（Writable）" class="headerlink" title="2. 自定义bean对象实现序列化接口（Writable）"></a>2. 自定义bean对象实现序列化接口（Writable）</h4><p>实现一个bean对象的序列化需要以下7个步骤</p><ol><li>类必须实现Writable接口</li><li><p>反序列化的时候，需要反射调用无参构造函数，所以类必须有无参构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WritableBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写序列化方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写反序列化方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反序列化顺序和序列化顺序必须完全一致。否则会导致反序列化失败</p></li><li>要想把结果显示在文件中，需要重写toString()，可用”\t”分开，方便后续用</li><li>如果自定义bean需要在key中传输，需要实现Comparable接口，因为MapReduce的Shuffle阶段要求key是可排序的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(WritableBean o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-案例实操"><a href="#3-案例实操" class="headerlink" title="3. 案例实操"></a>3. 案例实操</h4><h5 id="1-需求如下："><a href="#1-需求如下：" class="headerlink" title="1. 需求如下："></a>1. 需求如下：</h5><p>需要统计下列数据中每个手机号的总上行流量，总下行流量以及总流量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">113736230513192.196.100.1www.atguigu.com248124681200</span><br><span class="line">213846544121192.196.100.22640200</span><br><span class="line">3 13956435636192.196.100.31321512200</span><br><span class="line">4 13966251146192.168.100.12400404</span><br><span class="line">5 18271575951192.168.100.2www.atguigu.com15272106200</span><br><span class="line">6 84188413192.168.100.3www.atguigu.com41161432200</span><br><span class="line">7 13590439668192.168.100.41116954200</span><br><span class="line">8 15910133277192.168.100.5www.hao123.com31562936200</span><br><span class="line">9 13729199489192.168.100.62400200</span><br><span class="line">10 13630577991192.168.100.7www.shouhu.com6960690200</span><br><span class="line">11 15043685818192.168.100.8www.baidu.com36593538200</span><br><span class="line">12 15959002129192.168.100.9www.atguigu.com1938180500</span><br><span class="line">13 13560439638192.168.100.109184938200</span><br><span class="line">14 13470253144192.168.100.11180180200</span><br><span class="line">15 13682846555192.168.100.12www.qq.com19382910200</span><br><span class="line">16 13992314666192.168.100.13www.gaga.com30083720200</span><br><span class="line">17 13509468723192.168.100.14www.qinghua.com7335110349404</span><br><span class="line">18 18390173782192.168.100.15www.sogou.com95312412200</span><br><span class="line">19 13975057813192.168.100.16www.baidu.com1105848243200</span><br><span class="line">20 13768778790192.168.100.17120120200</span><br><span class="line">21 13568436656192.168.100.18www.alibaba.com248124681200</span><br><span class="line">22 13568436656192.168.100.191116954200</span><br></pre></td></tr></table></figure></p><h5 id="2-期望输出数据：-1"><a href="#2-期望输出数据：-1" class="headerlink" title="2. 期望输出数据："></a>2. 期望输出数据：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">13470253144180180360</span><br><span class="line">135094687237335110349117684</span><br><span class="line">1356043963891849385856</span><br><span class="line">1356843665635972563529232</span><br><span class="line">1359043966811169542070</span><br><span class="line">1363057799169606907650</span><br><span class="line">13682846555193829104848</span><br><span class="line">137291994892400240</span><br><span class="line">1373623051324812468127162</span><br><span class="line">13768778790120120240</span><br><span class="line">138465441212640264</span><br><span class="line">1395643563613215121644</span><br><span class="line">139662511462400240</span><br><span class="line">13975057813110584824359301</span><br><span class="line">13992314666300837206728</span><br><span class="line">15043685818365935387197</span><br><span class="line">15910133277315629366092</span><br><span class="line">1595900212919381802118</span><br><span class="line">18271575951152721063633</span><br><span class="line">183901737829531241211943</span><br><span class="line">84188413411614325548</span><br></pre></td></tr></table></figure><h5 id="3-创建流量统计Bean对象"><a href="#3-创建流量统计Bean对象" class="headerlink" title="3. 创建流量统计Bean对象"></a>3. 创建流量统计Bean对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上行流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">    <span class="comment">// 下行流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> downFlow;</span><br><span class="line">    <span class="comment">// 总流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = upFlow + downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeLong(upFlow);</span><br><span class="line">        dataOutput.writeLong(downFlow);</span><br><span class="line">        dataOutput.writeLong(sumFlow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        upFlow = dataInput.readLong();</span><br><span class="line">        downFlow = dataInput.readLong();</span><br><span class="line">        sumFlow = dataInput.readLong();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUpFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFlow</span><span class="params">(<span class="keyword">long</span> upFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDownFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDownFlow</span><span class="params">(<span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSumFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSumFlow</span><span class="params">(<span class="keyword">long</span> sumFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow + <span class="string">"\t"</span> + downFlow + <span class="string">"\t"</span> + sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-编写Mapper类"><a href="#4-编写Mapper类" class="headerlink" title="4. 编写Mapper类"></a>4. 编写Mapper类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">private</span> FlowBean flowBean = <span class="keyword">new</span> FlowBean();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取一行</span></span><br><span class="line">        String line = value.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切割</span></span><br><span class="line">        String[] lineArr = line.split(<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装对象</span></span><br><span class="line">        k.set(lineArr[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">long</span> upFLow = Long.parseLong(lineArr[lineArr.length - <span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">long</span> downFLow = Long.parseLong(lineArr[lineArr.length - <span class="number">2</span>]);</span><br><span class="line">        flowBean.setUpFlow(upFLow);</span><br><span class="line">        flowBean.setDownFlow(downFLow);</span><br><span class="line">        flowBean.setSumFlow(upFLow + downFLow);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出</span></span><br><span class="line">        context.write(k, flowBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-编写Reducer类"><a href="#5-编写Reducer类" class="headerlink" title="5. 编写Reducer类"></a>5. 编写Reducer类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">FlowBean</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FlowBean flowBean = <span class="keyword">new</span> FlowBean();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;FlowBean&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sumUpFlow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> sumDownFlow = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 累计求和</span></span><br><span class="line">        <span class="keyword">for</span> (FlowBean value : values) &#123;</span><br><span class="line">            sumDownFlow += value.getDownFlow();</span><br><span class="line">            sumUpFlow += value.getUpFlow();</span><br><span class="line">        &#125;</span><br><span class="line">        flowBean.setUpFlow(sumUpFlow);</span><br><span class="line">        flowBean.setDownFlow(sumDownFlow);</span><br><span class="line">        flowBean.setSumFlow(sumDownFlow + sumUpFlow);</span><br><span class="line">        <span class="comment">// 写出</span></span><br><span class="line">        context.write(key, flowBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-编写Driver类"><a href="#6-编写Driver类" class="headerlink" title="6. 编写Driver类"></a>6. 编写Driver类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>, <span class="string">"/output_path"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        job.setJarByClass(FlowCountDriver.class);</span><br><span class="line">        job.setMapperClass(FlowCountMapper.class);</span><br><span class="line">        job.setReducerClass(FlowCountReducer.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-执行Driver类"><a href="#7-执行Driver类" class="headerlink" title="7. 执行Driver类"></a>7. 执行Driver类</h5><p>可得统计结果与预期一致</p><hr><h3 id="七、-FileInputFormat实现类介绍"><a href="#七、-FileInputFormat实现类介绍" class="headerlink" title="七、 FileInputFormat实现类介绍"></a>七、 FileInputFormat实现类介绍</h3><p>FileInputFormat常见的接口实现类包括：TextInputFormat、KeyValueTextInputFormat、NLineInputFormat、CombineTextInputFormat和自定义InputFormat等。</p><h4 id="1-TextInputFormat"><a href="#1-TextInputFormat" class="headerlink" title="1. TextInputFormat"></a>1. TextInputFormat</h4><p>TextInputFormat是默认的FileInputFormat实现类。按行读取每条记录。键是存储该行在整个文件中的起始字节偏移量， LongWritable类型。值是这行的内容，不包括任何行终止符（换行符和回车符），Text类型。<br>以下是一个示例，比如，一个分片包含了如下4条文本记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rich learning form</span><br><span class="line">Intelligent learning engine</span><br><span class="line">Learning more convenient</span><br><span class="line">From the real demand for more close to the enterprise</span><br></pre></td></tr></table></figure></p><p>每条记录表示为以下键/值对：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(0,Rich learning form)</span><br><span class="line">(19,Intelligent learning engine)</span><br><span class="line">(47,Learning more convenient)</span><br><span class="line">(72,From the real demand for more close to the enterprise)</span><br></pre></td></tr></table></figure></p><h4 id="2-KeyValueTextInputFormat"><a href="#2-KeyValueTextInputFormat" class="headerlink" title="2. KeyValueTextInputFormat"></a>2. KeyValueTextInputFormat</h4><p>每一行均为一条记录，被分隔符分割为key，value。可以通过在驱动类中添加以下配置来设定分隔符。默认分隔符是<code>tab（\t）</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conf.set(KeyValueLineRecordReader.KEY_VALUE_SEPERATOR, <span class="string">"\t"</span>);</span><br></pre></td></tr></table></figure></p><p>以下是一个示例，输入是一个包含4条记录的分片。其中——&gt;表示一个（水平方向的）制表符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">line1 ——&gt;Rich learning form</span><br><span class="line">line2 ——&gt;Intelligent learning engine</span><br><span class="line">line3 ——&gt;Learning more convenient</span><br><span class="line">line4 ——&gt;From the real demand for more close to the enterprise</span><br></pre></td></tr></table></figure></p><p>每条记录表示为以下键/值对：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(line1,Rich learning form)</span><br><span class="line">(line2,Intelligent learning engine)</span><br><span class="line">(line3,Learning more convenient)</span><br><span class="line">(line4,From the real demand for more close to the enterprise)</span><br></pre></td></tr></table></figure></p><p>此时的键是每行排在制表符之前的Text序列。</p><h4 id="3-NLineInputFormat"><a href="#3-NLineInputFormat" class="headerlink" title="3. NLineInputFormat"></a>3. NLineInputFormat</h4><p>如果使用NlineInputFormat，代表每个map进程处理的InputSplit不再按Block块去划分，而是按NlineInputFormat指定的行数N来划分。即输入文件的总行数/N=切片数，如果不整除，切片数=商+1。<br>以下是一个示例，仍然以上面的4行输入为例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rich learning form</span><br><span class="line">Intelligent learning engine</span><br><span class="line">Learning more convenient</span><br><span class="line">From the real demand for more close to the enterprise</span><br></pre></td></tr></table></figure></p><p>例如，如果N是2，则每个输入分片包含两行。开启2个MapTask。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(0,Rich learning form)</span><br><span class="line">(19,Intelligent learning engine)</span><br></pre></td></tr></table></figure></p><p>另一个 mapper 则收到后两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(47,Learning more convenient)</span><br><span class="line">(72,From the real demand for more close to the enterprise)</span><br></pre></td></tr></table></figure></p><p>这里的键和值与TextInputFormat生成的一样。</p><h4 id="4-CombineTextInputFormat"><a href="#4-CombineTextInputFormat" class="headerlink" title="4. CombineTextInputFormat"></a>4. CombineTextInputFormat</h4><p>框架默认的TextInputFormat切片机制是对任务按文件规划切片，不管文件多小，都会是一个单独的切片，都会交给一个MapTask，这样如果有大量小文件，就会产生大量的MapTask，处理效率极其低下。<br>设置虚拟存储切片最大值方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值。</span></span><br><span class="line">CombineTextInputFormat.setMaxInputSplitSize(job, <span class="number">4194304</span>);<span class="comment">// 4m</span></span><br></pre></td></tr></table></figure></p><p>（1）虚拟存储过程：<br>将输入目录下所有文件大小，依次和设置的setMaxInputSplitSize值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块；当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件均分成2个虚拟存储块（防止出现太小切片）。<br>例如setMaxInputSplitSize值为4M，输入文件大小为8.02M，则先逻辑上分成一个4M。剩余的大小为4.02M，如果按照4M逻辑划分，就会出现0.02M的小的虚拟存储文件，所以将剩余的4.02M文件切分成（2.01M和2.01M）两个文件。<br>（2）切片过程：<br>（a）判断虚拟存储的文件大小是否大于setMaxInputSplitSize值，大于等于则单独形成一个切片。<br>（b）如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。<br>（c）测试举例：有4个小文件大小分别为1.7M、5.1M、3.4M以及6.8M这四个小文件，则虚拟存储之后形成6个文件块，大小分别为：1.7M，（2.55M、2.55M），3.4M以及（3.4M、3.4M）<br>最终会形成3个切片，大小分别为：（1.7+2.55）M，（2.55+3.4）M，（3.4+3.4）M</p><hr><h3 id="八、-KeyValueTextInputFormat实操"><a href="#八、-KeyValueTextInputFormat实操" class="headerlink" title="八、 KeyValueTextInputFormat实操"></a>八、 KeyValueTextInputFormat实操</h3><h4 id="1-需求如下：-1"><a href="#1-需求如下：-1" class="headerlink" title="1. 需求如下："></a>1. 需求如下：</h4><p>统计输入文件中每一行的第一个单词相同的行数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br></pre></td></tr></table></figure></p><h4 id="2-期望输出数据：-2"><a href="#2-期望输出数据：-2" class="headerlink" title="2. 期望输出数据："></a>2. 期望输出数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">banzhang2</span><br><span class="line">xihuan2</span><br></pre></td></tr></table></figure><h4 id="3-编写Mapper类"><a href="#3-编写Mapper类" class="headerlink" title="3. 编写Mapper类"></a>3. 编写Mapper类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KVTextMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    IntWritable intWritable = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        context.write(key, intWritable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写Reducer类"><a href="#4-编写Reducer类" class="headerlink" title="4. 编写Reducer类"></a>4. 编写Reducer类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KVTextReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    IntWritable intWritable = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        intWritable.set(sum);</span><br><span class="line">        context.write(key, intWritable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-编写Driver类"><a href="#5-编写Driver类" class="headerlink" title="5. 编写Driver类"></a>5. 编写Driver类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KVTextDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>, <span class="string">"/output_path"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">// 设置切割符</span></span><br><span class="line">        conf.set(KeyValueLineRecordReader.KEY_VALUE_SEPERATOR, <span class="string">" "</span>);</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        job.setJarByClass(KVTextDriver.class);</span><br><span class="line">        job.setMapperClass(KVTextMapper.class);</span><br><span class="line">        job.setReducerClass(KVTextReducer.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setInputFormatClass(KeyValueTextInputFormat.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-执行Driver方法-1"><a href="#6-执行Driver方法-1" class="headerlink" title="6. 执行Driver方法"></a>6. 执行Driver方法</h4><p>发现输出结果与期望数据一致</p><hr><h3 id="九、-NLineInputFormat实操"><a href="#九、-NLineInputFormat实操" class="headerlink" title="九、 NLineInputFormat实操"></a>九、 NLineInputFormat实操</h3><h4 id="1-需求如下：-2"><a href="#1-需求如下：-2" class="headerlink" title="1. 需求如下："></a>1. 需求如下：</h4><p>对每个单词进行个数统计，要求根据每个输入文件的行数来规定输出多少个切片。此案例要求每三行放入一个切片中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br><span class="line">banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang banzhang ni hao</span><br><span class="line">xihuan hadoop banzhang</span><br></pre></td></tr></table></figure></p><h4 id="2-期待输出数据："><a href="#2-期待输出数据：" class="headerlink" title="2. 期待输出数据："></a>2. 期待输出数据：</h4><p>在日志中打印的分区数为4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Number of splits:4</span><br></pre></td></tr></table></figure></p><h4 id="3-编写Mapper类-1"><a href="#3-编写Mapper类-1" class="headerlink" title="3. 编写Mapper类"></a>3. 编写Mapper类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NLineMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    Text k = <span class="keyword">new</span> Text();</span><br><span class="line">    IntWritable v = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString();</span><br><span class="line">        String[] strArr = line.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : strArr) &#123;</span><br><span class="line">            k.set(s);</span><br><span class="line">            context.write(k, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写Reducer类-1"><a href="#4-编写Reducer类-1" class="headerlink" title="4. 编写Reducer类"></a>4. 编写Reducer类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NLineReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    IntWritable v = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        v.set(sum);</span><br><span class="line">        context.write(key, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-编写Driver类-1"><a href="#5-编写Driver类-1" class="headerlink" title="5. 编写Driver类"></a>5. 编写Driver类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NLineDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>, <span class="string">"/output_path"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        <span class="comment">// 设置每个切片InputSplit中划分三条记录</span></span><br><span class="line">        NLineInputFormat.setNumLinesPerSplit(job, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 使用NLineInputFormat处理记录数</span></span><br><span class="line">        job.setInputFormatClass(NLineInputFormat.class);</span><br><span class="line">        job.setJarByClass(NLineDriver.class);</span><br><span class="line">        job.setMapperClass(NLineMapper.class);</span><br><span class="line">        job.setReducerClass(NLineReducer.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="自定义InputFormat"><a href="#自定义InputFormat" class="headerlink" title="自定义InputFormat"></a>自定义InputFormat</h3><p>无论HDFS还是MapReduce，在处理小文件时效率都非常低，但又难免面临处理大量小文件的场景，此时，就需要有相应解决方案。可以自定义InputFormat实现小文件的合并。</p><h4 id="1．需求"><a href="#1．需求" class="headerlink" title="1．需求"></a>1．需求</h4><p>将多个小文件合并成一个SequenceFile文件（SequenceFile文件是Hadoop用来存储二进制形式的key-value对的文件格式），SequenceFile里面存储着多个文件，存储的形式为文件路径+名称为key，文件内容为value。<br>输入数据为三个文件，所存储的数据分别如下<br>1.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yongpeng weidong weinan</span><br><span class="line">sanfeng luozong xiaoming</span><br></pre></td></tr></table></figure></p><p>2.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">longlong fanfan</span><br><span class="line">mazong kailun yuhang yixin</span><br><span class="line">longlong fanfan</span><br><span class="line">mazong kailun yuhang yixin</span><br></pre></td></tr></table></figure></p><p>3.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuaige changmo zhenqiang </span><br><span class="line">dongli lingu xuanxuan</span><br></pre></td></tr></table></figure></p><h4 id="2-自定义InputFormat流程"><a href="#2-自定义InputFormat流程" class="headerlink" title="2. 自定义InputFormat流程"></a>2. 自定义InputFormat流程</h4><ol><li>自定义一个类继承FileInputFormat<br>（1）重写isSplitable()方法，返回false不可切割<br>（2）重写createRecordReader()，创建自定义的RecordReader对象，并初始化</li><li>改写RecordReader，实现一次读取一个完整文件封装为KV<br>（1）采用IO流一次读取一个文件输出到value中，因为设置了不可切片，最终把所有文件都封装到了value中<br>（2）获取文件路径信息+名称，并设置key</li><li>设置Driver<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （1）设置输入的自定义inputFormat</span></span><br><span class="line">job.setInputFormatClass(XXXFileInputformat.class);</span><br><span class="line"><span class="comment">// （2）设置输出的outputFormat</span></span><br><span class="line">job.setOutputFormatClass(SequenceFileOutputFormat.class);</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-实现WholeFileInputFormat"><a href="#3-实现WholeFileInputFormat" class="headerlink" title="3. 实现WholeFileInputFormat"></a>3. 实现WholeFileInputFormat</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WholeFileInputFormat</span> <span class="keyword">extends</span> <span class="title">FileInputFormat</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RecordReader&lt;Text, BytesWritable&gt; <span class="title">createRecordReader</span><span class="params">(InputSplit inputSplit, TaskAttemptContext taskAttemptContext)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        WholeRecordReader recordReader = <span class="keyword">new</span> WholeRecordReader();</span><br><span class="line">        recordReader.initialize(inputSplit, taskAttemptContext);</span><br><span class="line">        <span class="keyword">return</span> recordReader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-实现WholeRecordReader类"><a href="#4-实现WholeRecordReader类" class="headerlink" title="4. 实现WholeRecordReader类"></a>4. 实现WholeRecordReader类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WholeRecordReader</span> <span class="keyword">extends</span> <span class="title">RecordReader</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    FileSplit split;</span><br><span class="line">    Configuration configuration;</span><br><span class="line">    Text k = <span class="keyword">new</span> Text();</span><br><span class="line">    BytesWritable v = <span class="keyword">new</span> BytesWritable();</span><br><span class="line">    <span class="keyword">boolean</span> isProgress = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(InputSplit inputSplit, TaskAttemptContext taskAttemptContext)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">this</span>.split = (FileSplit) inputSplit;</span><br><span class="line">        <span class="keyword">this</span>.configuration = taskAttemptContext.getConfiguration();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">nextKeyValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 核心业务</span></span><br><span class="line">        <span class="keyword">if</span> (isProgress)&#123;</span><br><span class="line">            <span class="comment">// 1. 获取fileSystem对象</span></span><br><span class="line">            Path path = split.getPath();</span><br><span class="line">            FileSystem fileSystem = path.getFileSystem(configuration);</span><br><span class="line">            <span class="comment">// 2. 获取输入流</span></span><br><span class="line">            FSDataInputStream fsDataInputStream = fileSystem.open(path);</span><br><span class="line">            <span class="comment">// 3. 拷贝</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) split.getLength()];</span><br><span class="line">            IOUtils.readFully(fsDataInputStream, buf, <span class="number">0</span>, buf.length);</span><br><span class="line">            <span class="comment">// 4. 封装kv</span></span><br><span class="line">            k.set(path.toString());</span><br><span class="line">            v.set(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">            <span class="comment">// 5. 关闭资源</span></span><br><span class="line">            IOUtils.closeStream(fsDataInputStream);</span><br><span class="line">            isProgress = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Text <span class="title">getCurrentKey</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BytesWritable <span class="title">getCurrentValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getProgress</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-编写Mapper方法"><a href="#5-编写Mapper方法" class="headerlink" title="5. 编写Mapper方法"></a>5. 编写Mapper方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFileMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>, <span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, BytesWritable value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        context.write(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-编写Reducer方法"><a href="#6-编写Reducer方法" class="headerlink" title="6. 编写Reducer方法"></a>6. 编写Reducer方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFileReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>, <span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;BytesWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (BytesWritable value : values) &#123;</span><br><span class="line">            context.write(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-编写Driver方法"><a href="#7-编写Driver方法" class="headerlink" title="7. 编写Driver方法"></a>7. 编写Driver方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFileDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>, <span class="string">"/output_path"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        job.setJarByClass(SequenceFileDriver.class);</span><br><span class="line">        job.setMapperClass(SequenceFileMapper.class);</span><br><span class="line">        job.setReducerClass(SequenceFileReducer.class);</span><br><span class="line">        <span class="comment">// 设置输入的inputFormat</span></span><br><span class="line">        job.setInputFormatClass(WholeFileInputFormat.class);</span><br><span class="line">        <span class="comment">// 设置输出的outputFormat</span></span><br><span class="line">        job.setOutputFormatClass(SequenceFileOutputFormat.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(BytesWritable.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="十、-实现自定义Partition分区"><a href="#十、-实现自定义Partition分区" class="headerlink" title="十、 实现自定义Partition分区"></a>十、 实现自定义Partition分区</h3><h4 id="1-需求："><a href="#1-需求：" class="headerlink" title="1. 需求："></a>1. 需求：</h4><p>在之前统计流量的基础上，将统计结果按照手机归属地不同省份输出到不同文件中</p><h4 id="2-在之前的案例中添加一个自定义分区类"><a href="#2-在之前的案例中添加一个自定义分区类" class="headerlink" title="2. 在之前的案例中添加一个自定义分区类"></a>2. 在之前的案例中添加一个自定义分区类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvincePartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text text, FlowBean flowBean, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> partition = <span class="number">4</span>;</span><br><span class="line">        String prePhone = text.toString().substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"136"</span>.equals(prePhone)) &#123;</span><br><span class="line">            partition = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"137"</span>.equals(prePhone)) &#123;</span><br><span class="line">            partition = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"138"</span>.equals(prePhone)) &#123;</span><br><span class="line">            partition = <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"139"</span>.equals(prePhone)) &#123;</span><br><span class="line">            partition = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> partition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-在原案例的Driver方法中添加分区配置"><a href="#3-在原案例的Driver方法中添加分区配置" class="headerlink" title="3. 在原案例的Driver方法中添加分区配置"></a>3. 在原案例的Driver方法中添加分区配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/Users/zhangjia/Desktop/phone.txt"</span>, <span class="string">"/Users/zhangjia/Desktop/result_phone"</span>&#125;;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        job.setJarByClass(FlowCountDriver.class);</span><br><span class="line">        job.setMapperClass(FlowCountMapper.class);</span><br><span class="line">        job.setReducerClass(FlowCountReducer.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line">        <span class="comment">// 设置自定义分区类</span></span><br><span class="line">        job.setPartitionerClass(ProvincePartitioner.class);</span><br><span class="line">        <span class="comment">// 设定Reducer任务数量</span></span><br><span class="line">        job.setNumReduceTasks(<span class="number">5</span>);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-执行"><a href="#4-执行" class="headerlink" title="4. 执行"></a>4. 执行</h4><p>发现输出结果已经按照手机号前三位进行分区</p><h4 id="5-注意"><a href="#5-注意" class="headerlink" title="5. 注意"></a>5. 注意</h4><p>对于Driver中设置的Reducer Task任务数量<br>（1）如果ReduceTask的数量&gt; getPartition的结果数，则会多产生几个空的输出文件part-r-000xx；<br>（2）如果1&lt;ReduceTask的数量&lt;getPartition的结果数，则有一部分分区数据无处安放，会Exception；<br>（3）如果ReduceTask的数量=1，则不管MapTask端输出多少个分区文件，最终结果都交给这一个ReduceTask，最终也就只会产生一个结果文件 part-r-00000；<br>（4）分区号必须从零开始，逐一累加。<br>举例：例如：假设自定义分区数为5，则</p><table><thead><tr><th>DriverTask数</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>会正常运行，只不过会产生一个输出文件</td></tr><tr><td>2</td><td>会报错</td></tr><tr><td>6</td><td>大于5，程序会正常运行，会产生空文件</td></tr></tbody></table><h3 id="十一、-自定义WritableComparable排序"><a href="#十一、-自定义WritableComparable排序" class="headerlink" title="十一、 自定义WritableComparable排序"></a>十一、 自定义WritableComparable排序</h3><h4 id="1-原理分析"><a href="#1-原理分析" class="headerlink" title="1. 原理分析"></a>1. 原理分析</h4><p>bean对象做为key传输，需要实现WritableComparable接口重写compareTo方法，就可以实现排序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-WritableComparable排序案例实操（全排序）"><a href="#2-WritableComparable排序案例实操（全排序）" class="headerlink" title="2. WritableComparable排序案例实操（全排序）"></a>2. WritableComparable排序案例实操（全排序）</h4><h5 id="1-输入数据为之前流量统计的输出数据"><a href="#1-输入数据为之前流量统计的输出数据" class="headerlink" title="1. 输入数据为之前流量统计的输出数据"></a>1. 输入数据为之前流量统计的输出数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">13470253144180180360</span><br><span class="line">135094687237335110349117684</span><br><span class="line">1356043963891849385856</span><br><span class="line">1356843665635972563529232</span><br><span class="line">1359043966811169542070</span><br><span class="line">1363057799169606907650</span><br><span class="line">13682846555193829104848</span><br><span class="line">137291994892400240</span><br><span class="line">1373623051324812468127162</span><br><span class="line">13768778790120120240</span><br><span class="line">138465441212640264</span><br><span class="line">1395643563613215121644</span><br><span class="line">139662511462400240</span><br><span class="line">13975057813110584824359301</span><br><span class="line">13992314666300837206728</span><br><span class="line">15043685818365935387197</span><br><span class="line">15910133277315629366092</span><br><span class="line">1595900212919381802118</span><br><span class="line">18271575951152721063633</span><br><span class="line">183901737829531241211943</span><br><span class="line">84188413411614325548</span><br></pre></td></tr></table></figure><h5 id="2-期望输出数据"><a href="#2-期望输出数据" class="headerlink" title="2. 期望输出数据"></a>2. 期望输出数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">135094687237335110349117684</span><br><span class="line">13975057813110584824359301</span><br><span class="line">1356843665635972563529232</span><br><span class="line">1373623051324812468127162</span><br><span class="line">183901737829531241211943</span><br><span class="line">1363057799169606907650</span><br><span class="line">15043685818365935387197</span><br><span class="line">13992314666300837206728</span><br><span class="line">15910133277315629366092</span><br><span class="line">1356043963891849385856</span><br><span class="line">84188413411614325548</span><br><span class="line">13682846555193829104848</span><br><span class="line">18271575951152721063633</span><br><span class="line">1595900212919381802118</span><br><span class="line">1359043966811169542070</span><br><span class="line">1395643563613215121644</span><br><span class="line">13470253144180180360</span><br><span class="line">138465441212640264</span><br><span class="line">139662511462400240</span><br><span class="line">13768778790120120240</span><br><span class="line">137291994892400240</span><br></pre></td></tr></table></figure><h5 id="3-编写自定义FlowBean类"><a href="#3-编写自定义FlowBean类" class="headerlink" title="3. 编写自定义FlowBean类"></a>3. 编写自定义FlowBean类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上行流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">    <span class="comment">// 下行流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> downFlow;</span><br><span class="line">    <span class="comment">// 总流量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = upFlow + downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sumFlow &gt; o.getSumFlow() ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeLong(upFlow);</span><br><span class="line">        dataOutput.writeLong(downFlow);</span><br><span class="line">        dataOutput.writeLong(sumFlow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        upFlow = dataInput.readLong();</span><br><span class="line">        downFlow = dataInput.readLong();</span><br><span class="line">        sumFlow = dataInput.readLong();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUpFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFlow</span><span class="params">(<span class="keyword">long</span> upFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDownFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDownFlow</span><span class="params">(<span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSumFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSumFlow</span><span class="params">(<span class="keyword">long</span> sumFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow + <span class="string">"\t"</span> + downFlow + <span class="string">"\t"</span> + sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-编写Mapper类-1"><a href="#4-编写Mapper类-1" class="headerlink" title="4. 编写Mapper类"></a>4. 编写Mapper类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountSortMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    FlowBean flowBean = <span class="keyword">new</span> FlowBean();</span><br><span class="line">    Text v = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString();</span><br><span class="line">        String[] strArr = line.split(<span class="string">"\t"</span>);</span><br><span class="line">        String phoneNum = strArr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">long</span> upFlow = Long.parseLong(strArr[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">long</span> downFlow = Long.parseLong(strArr[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">long</span> sumFlow = Long.parseLong(strArr[<span class="number">3</span>]);</span><br><span class="line">        flowBean.setUpFlow(upFlow);</span><br><span class="line">        flowBean.setDownFlow(downFlow);</span><br><span class="line">        flowBean.setSumFlow(sumFlow);</span><br><span class="line">        v.set(phoneNum);</span><br><span class="line">        context.write(flowBean, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-编写Reducer类-1"><a href="#5-编写Reducer类-1" class="headerlink" title="5. 编写Reducer类"></a>5. 编写Reducer类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountSortReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">FlowBean</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(FlowBean key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Text value : values) &#123;</span><br><span class="line">            context.write(value, key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-编写Driver方法"><a href="#6-编写Driver方法" class="headerlink" title="6. 编写Driver方法"></a>6. 编写Driver方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountSortDriver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 输入输出路径需要根据自己电脑上实际的输入输出路径设置</span></span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">"/input_path"</span>,<span class="string">"/output_path"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 获取配置信息，或者job对象实例</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 指定本程序的jar包所在的本地路径</span></span><br><span class="line">        job.setJarByClass(FlowCountSortDriver.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 指定本业务job要使用的mapper/Reducer业务类</span></span><br><span class="line">        job.setMapperClass(FlowCountSortMapper.class);</span><br><span class="line">        job.setReducerClass(FlowCountSortReducer.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4 指定mapper输出数据的kv类型</span></span><br><span class="line">        job.setMapOutputKeyClass(FlowBean.class);</span><br><span class="line">        job.setMapOutputValueClass(Text.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 指定最终输出的数据的kv类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(FlowBean.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6 指定job的输入原始文件所在目录</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7 将job中配置的相关参数，以及job所用的java类所在的jar包， 提交给yarn去运行</span></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-执行"><a href="#7-执行" class="headerlink" title="7. 执行"></a>7. 执行</h5><p>执行后发现结果与期望数据一致</p><p>注：如果希望实现区内排序，只需要在之前需求的基础上添加一个自定义Partition类即可。</p>]]></content>
    
    <summary type="html">
    
      MapReduce是一种编程模型，用于大规模数据集（大于1TB）的并行运算。概念&quot;Map（映射）&quot;和&quot;Reduce（归约）&quot;，是它们的主要思想，都是从函数式编程语言里借来的，还有从矢量编程语言里借来的特性。它极大地方便了编程人员在不会分布式并行编程的情况下，将自己的程序运行在分布式系统上。 当前的软件实现是指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（归约）函数，用来保证所有映射的键值对中的每一个共享相同的键组。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="Flume" scheme="http://suiwo.xyz/tags/Flume/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Flume自定义Sink</title>
    <link href="http://suiwo.xyz/2020/06/02/Flume%E8%87%AA%E5%AE%9A%E4%B9%89Sink/"/>
    <id>http://suiwo.xyz/2020/06/02/Flume自定义Sink/</id>
    <published>2020-06-02T06:11:17.000Z</published>
    <updated>2020-06-02T12:21:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为尚硅谷Flume课程随堂笔记</p><hr><hr><h3 id="一、-项目介绍"><a href="#一、-项目介绍" class="headerlink" title="一、 项目介绍"></a>一、 项目介绍</h3><p>使用 flume 接收数据，并在 Sink 端给每条数据添加前缀和后缀，输出到控制台。前后 缀可在flume任务配置文件中配置。</p><blockquote><p><a href="https://flume.apache.org/FlumeDeveloperGuide.html#sink" target="_blank" rel="noopener">https://flume.apache.org/FlumeDeveloperGuide.html#sink</a> 根据官方说明自定义 MySink 需要继承 AbstractSink 类并实现 Configurable 接口。</p></blockquote><hr><hr><h3 id="二、-Sink"><a href="#二、-Sink" class="headerlink" title="二、 Sink"></a>二、 Sink</h3><h4 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1.创建maven项目"></a>1.创建maven项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-ng-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="2-构建自定义类"><a href="#2-构建自定义类" class="headerlink" title="2. 构建自定义类"></a>2. 构建自定义类</h4><p>根据官方说明自定义 MySink 需要继承 AbstractSink 类并实现 Configurable 接口。<br>具体代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flume.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.conf.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.sink.AbstractSink;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> MySink</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/2 14:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySink</span> <span class="keyword">extends</span> <span class="title">AbstractSink</span> <span class="keyword">implements</span> <span class="title">Configurable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String subfix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 获取Channel</span></span><br><span class="line"><span class="comment">     * 2. 从Channel获取事务以及数据</span></span><br><span class="line"><span class="comment">     * 3. 发送数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">process</span><span class="params">()</span> <span class="keyword">throws</span> EventDeliveryException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 定义返回值</span></span><br><span class="line">        Status status;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取Channel</span></span><br><span class="line">        Channel channel = getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 从Channel中获取事务</span></span><br><span class="line">        Transaction transaction = channel.getTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 启动事务</span></span><br><span class="line">        transaction.begin();</span><br><span class="line">        Event event;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 5. 从Channel中获取数据</span></span><br><span class="line">            event = channel.take();</span><br><span class="line">        &#125; <span class="keyword">while</span> (event == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 处理事件</span></span><br><span class="line">            String body = <span class="keyword">new</span> String(event.getBody());</span><br><span class="line">            System.out.println(prefix + <span class="string">"--"</span> + body + <span class="string">"--"</span> + subfix);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7. 提交事务</span></span><br><span class="line">            transaction.commit();</span><br><span class="line">            status = Status.READY;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ChannelException e) &#123;</span><br><span class="line">            transaction.rollback();</span><br><span class="line">            <span class="comment">// 10. 修改状态</span></span><br><span class="line">            status = Status.BACKOFF;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 11. 关闭事务</span></span><br><span class="line">            transaction.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        prefix = context.getString(<span class="string">"prefix"</span>);</span><br><span class="line">        subfix = context.getString(<span class="string">"subfix"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-maven打包"><a href="#3-maven打包" class="headerlink" title="3. maven打包"></a>3. maven打包</h4><p>将项目打包，并将项目放至flume的lib目录下</p><hr><hr><h3 id="三、编写Flume相关配置"><a href="#三、编写Flume相关配置" class="headerlink" title="三、编写Flume相关配置"></a>三、编写Flume相关配置</h3><h4 id="1-编写my-sink-conf"><a href="#1-编写my-sink-conf" class="headerlink" title="1. 编写my-sink.conf"></a>1. 编写my-sink.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = xyz.suiwo.flume.sink.MySink</span><br><span class="line">a1.sinks.k1.prefix = suiwo</span><br><span class="line">a1.sinks.k1.subfix = haha</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><hr><hr><h3 id="四、-启动测试"><a href="#四、-启动测试" class="headerlink" title="四、 启动测试"></a>四、 启动测试</h3><p>执行下面指令启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -c conf -f job/my-sink.conf -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Sink 是完全事务性的。在从 Channel 批量删除数据之前，每个 Sink 用 Channel 启动一 个事务。批量事件一旦成功写出到存储系统或下一个 Flume Agent，Sink 就利用 Channel 提 交事务。事务一旦被提交，该 Channel 从自己的内部缓冲区删除事件。Sink 组件目的地包括 hdfs、logger、avro、thrift、ipc、file、null、HBase、solr、 自定义。官方提供的 Sink 类型已经很多，但是有时候并不能满足实际开发当中的需求，此 时我们就需要根据实际需求自定义某些 Sink。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="Flume" scheme="http://suiwo.xyz/tags/Flume/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Flume自定义Source</title>
    <link href="http://suiwo.xyz/2020/06/01/Flume%E8%87%AA%E5%AE%9A%E4%B9%89Source/"/>
    <id>http://suiwo.xyz/2020/06/01/Flume自定义Source/</id>
    <published>2020-06-01T07:39:00.000Z</published>
    <updated>2020-06-02T07:31:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为尚硅谷Flume课程随堂笔记</p><hr><hr><h3 id="一、-项目介绍"><a href="#一、-项目介绍" class="headerlink" title="一、 项目介绍"></a>一、 项目介绍</h3><p>在本案例中使用flume接收数据，并给每条数据添加前缀，输出到控制台。前缀可从flume配置文件中配置。<br>整个架构大致如下图：</p><p><img src="/images/Flume自定义Source/8E64C481-2E59-4986-B367-98B5A0A28EA1.png" alt="flume"></p><hr><p>官方也提供了自定义<code>source</code>的接口:<br><a href="https://flume.apache.org/FlumeDeveloperGuide.html#source" target="_blank" rel="noopener">https://flume.apache.org/FlumeDeveloperGuide.html#source</a> 根据官方说明自定义<code>MySource</code>需要继承<code>AbstractSource</code>类并实现<code>Configurable</code>和<code>PollableSource</code>接口。</p><hr><hr><h3 id="二、-构建自定义Source代码"><a href="#二、-构建自定义Source代码" class="headerlink" title="二、 构建自定义Source代码"></a>二、 构建自定义Source代码</h3><h4 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1.创建maven项目"></a>1.创建maven项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-ng-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="2-构建自定义类"><a href="#2-构建自定义类" class="headerlink" title="2. 构建自定义类"></a>2. 构建自定义类</h4><p>首先创建自定义类继承<code>AbstractSource</code>类并实现<code>Configurable</code>和<code>PollableSource</code>接口。<br>具体代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flume.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.Event;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.EventDeliveryException;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.PollableSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.conf.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.event.SimpleEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.source.AbstractSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> MySource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/2 13:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySource</span> <span class="keyword">extends</span> <span class="title">AbstractSource</span> <span class="keyword">implements</span> <span class="title">Configurable</span>, <span class="title">PollableSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String subfix;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        prefix = context.getString(<span class="string">"prefix"</span>);</span><br><span class="line">        subfix = context.getString(<span class="string">"sub"</span>,<span class="string">"noSubfix"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 接收数据（for循环造数据）</span></span><br><span class="line"><span class="comment">     * 2. 封装为时间</span></span><br><span class="line"><span class="comment">     * 3. 将时间传给Channel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">process</span><span class="params">()</span> <span class="keyword">throws</span> EventDeliveryException </span>&#123;</span><br><span class="line">        Status status = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 1. 接受数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2. 构建事件对象</span></span><br><span class="line">                SimpleEvent event = <span class="keyword">new</span> SimpleEvent();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3. 给事件设置值</span></span><br><span class="line">                event.setBody((prefix + <span class="string">"--"</span> + i + <span class="string">"--"</span> + subfix).getBytes());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 4. 将时间传递给Channel</span></span><br><span class="line">                getChannelProcessor().processEvent(event);</span><br><span class="line"></span><br><span class="line">                status = Status.READY;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            status = Status.BACKOFF;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getBackOffSleepIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getMaxBackOffSleepInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-maven打包"><a href="#3-maven打包" class="headerlink" title="3. maven打包"></a>3. maven打包</h4><p>将项目打包，并将项目放至flume的lib目录下</p><hr><hr><h3 id="三、编写Flume相关配置"><a href="#三、编写Flume相关配置" class="headerlink" title="三、编写Flume相关配置"></a>三、编写Flume相关配置</h3><h4 id="1-编写my-source-conf"><a href="#1-编写my-source-conf" class="headerlink" title="1. 编写my-source.conf"></a>1. 编写my-source.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = xyz.suiwo.flume.source.MySource</span><br><span class="line">a1.sources.r1.prefix = suiwo</span><br><span class="line">a1.sources.r1.subfix = zaixian</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><hr><hr><h3 id="四、-启动测试"><a href="#四、-启动测试" class="headerlink" title="四、 启动测试"></a>四、 启动测试</h3><p>执行下面指令启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent -c conf -f job/my-source.conf -n a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><blockquote><p>此时可以发现prefix参数获取成功，subfix因为配置文件中未配置，所以使用默认值</p></blockquote>]]></content>
    
    <summary type="html">
    
      Source是负责接收数据到Flume Agent的组件。Source组件可以处理各种类型、各种 格式的日志数据，包括 avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy。官方提供的 source 类型已经很多，但是有时候并不能 满足实际开发当中的需求，此时我们就需要根据实际需求自定义某些 source。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="Flume" scheme="http://suiwo.xyz/tags/Flume/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Flume自定义Interceptor</title>
    <link href="http://suiwo.xyz/2020/05/31/Flume%E8%87%AA%E5%AE%9A%E4%B9%89Interceptor/"/>
    <id>http://suiwo.xyz/2020/05/31/Flume自定义Interceptor/</id>
    <published>2020-05-31T06:14:09.000Z</published>
    <updated>2020-05-31T07:37:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为尚硅谷Flume课程随堂笔记</p><hr><h3 id="一、-项目介绍"><a href="#一、-项目介绍" class="headerlink" title="一、 项目介绍"></a>一、 项目介绍</h3><p>在该案例中，我们以端口数据模拟日志，以是否存在“Hello”模拟不同类型的日志，我们需要自定义interceptor区分是否存在，将其分别发往不同的分析系统 (Channel)。<br>整个架构大致如下图：<br><img src="/images/Flume自定义Interceptor/C13A7432-8217-463A-BF50-7BD20C0F81BB.png" alt="Flume"></p><hr><hr><h3 id="二、-构建拦截器代码"><a href="#二、-构建拦截器代码" class="headerlink" title="二、 构建拦截器代码"></a>二、 构建拦截器代码</h3><h4 id="1-创建maven项目"><a href="#1-创建maven项目" class="headerlink" title="1.创建maven项目"></a>1.创建maven项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-ng-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="2-创建自定义拦截器"><a href="#2-创建自定义拦截器" class="headerlink" title="2.创建自定义拦截器"></a>2.创建自定义拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flume.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.Event;</span><br><span class="line"><span class="keyword">import</span> org.apache.flume.interceptor.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suiwo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> TypeInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/31 14:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Event&gt; result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        result = <span class="keyword">new</span> ArrayList&lt;Event&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单个事件拦截</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">intercept</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取事件中的头信息</span></span><br><span class="line">        Map&lt;String, String&gt; headers = event.getHeaders();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取事件中的body信息</span></span><br><span class="line">        String body = <span class="keyword">new</span> String(event.getBody());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据body中是否有Hello来决定添加怎样的头信息</span></span><br><span class="line">        <span class="keyword">if</span> (body.contains(<span class="string">"Hello"</span>)) &#123;</span><br><span class="line">            <span class="comment">// channel选择器通过type字段中的值向指定的avro发送信息</span></span><br><span class="line">            headers.put(<span class="string">"type"</span>, <span class="string">"suiwo"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            headers.put(<span class="string">"type"</span>, <span class="string">"inc"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量事件拦截</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Event&gt; <span class="title">intercept</span><span class="params">(List&lt;Event&gt; list)</span> </span>&#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        <span class="keyword">for</span> (Event event : list) &#123;</span><br><span class="line">            result.add(intercept(event));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">Interceptor</span>.<span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Interceptor <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TypeInterceptor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-maven打包"><a href="#3-maven打包" class="headerlink" title="3. maven打包"></a>3. maven打包</h4><p>将项目打包，并将项目放至flume的lib目录下</p><hr><hr><h3 id="三、编写Flume相关配置"><a href="#三、编写Flume相关配置" class="headerlink" title="三、编写Flume相关配置"></a>三、编写Flume相关配置</h3><h4 id="1-编写flume1"><a href="#1-编写flume1" class="headerlink" title="1. 编写flume1"></a>1. 编写flume1</h4><p>编写flume1的配置文件<code>flume1.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># Name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line"></span><br><span class="line"># Source</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># Channel</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 1000</span><br><span class="line">a1.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Sink</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = localhost</span><br><span class="line">a1.sinks.k1.port = 4141</span><br><span class="line">a1.sinks.k2.type= avro</span><br><span class="line">a1.sinks.k2.hostname = localhost</span><br><span class="line">a1.sinks.k2.port = 4142</span><br><span class="line"></span><br><span class="line"># Bind</span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line"># Channel Selector</span><br><span class="line">a1.sources.r1.selector.type = multiplexing</span><br><span class="line">a1.sources.r1.selector.header = type</span><br><span class="line">a1.sources.r1.selector.mapping.suiwo = c1</span><br><span class="line">a1.sources.r1.selector.mapping.inc = c2</span><br><span class="line"></span><br><span class="line"># Interceptor</span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line"># 使用拦截器全类名，$符号后的为Builder内部类名</span><br><span class="line">a1.sources.r1.interceptors.i1.type = xyz.suiwo.flume.interceptor.TypeInterceptor$Builder</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-编写flume2"><a href="#2-编写flume2" class="headerlink" title="2. 编写flume2"></a>2. 编写flume2</h4><p>书写flume2的配置文件<code>flume2.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a2.sources = r2</span><br><span class="line">a2.sinks = k2</span><br><span class="line">a2.channels = c2</span><br><span class="line">a2.sources.r2.type = avro</span><br><span class="line">a2.sources.r2.bind = localhost</span><br><span class="line">a2.sources.r2.port = 4141</span><br><span class="line">a2.sinks.k2.type = logger</span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 1000</span><br><span class="line">a2.channels.c2.transactionCapacity = 100</span><br><span class="line">a2.sinks.k2.channel = c2</span><br><span class="line">a2.sources.r2.channels = c2</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-编写flume3"><a href="#3-编写flume3" class="headerlink" title="3. 编写flume3"></a>3. 编写flume3</h4><p>书写flume3的配置文件<code>flume3.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a3.sources = r3</span><br><span class="line">a3.sinks = k3</span><br><span class="line">a3.channels = c3</span><br><span class="line">a3.sources.r3.type = avro</span><br><span class="line">a3.sources.r3.bind = localhost</span><br><span class="line">a3.sources.r3.port = 4142</span><br><span class="line">a3.sinks.k3.type = logger</span><br><span class="line">a3.channels.c3.type = memory</span><br><span class="line">a3.channels.c3.capacity = 1000</span><br><span class="line">a3.channels.c3.transactionCapacity = 100</span><br><span class="line">a3.sinks.k3.channel = c3</span><br><span class="line">a3.sources.r3.channels = c3</span><br></pre></td></tr></table></figure></p><hr><hr><h3 id="四、-启动测试"><a href="#四、-启动测试" class="headerlink" title="四、 启动测试"></a>四、 启动测试</h3><ol><li>先启动flume2以及flume3最后启动flume1。</li><li>使用<code>netcat</code>工具向<code>44444</code>端口发送消息。</li><li>经过测试发现，拦截功能已实现。</li></ol>]]></content>
    
    <summary type="html">
    
      在实际的开发中，一台服务器产生的日志类型可能有很多种，不同类型的日志可能需要 发送到不同的分析系统。此时会用到Flume拓扑结构中的Multiplexing结构，Multiplexing的原理是，根据event中Header的某个key的值，将不同的event发送到不同的Channel中，所以我们需要自定义一个 Interceptor，为不同类型的event的Header中的key赋予不同的值。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="Flume" scheme="http://suiwo.xyz/tags/Flume/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Flume初识</title>
    <link href="http://suiwo.xyz/2020/05/26/Flume%E5%88%9D%E8%AF%86/"/>
    <id>http://suiwo.xyz/2020/05/26/Flume初识/</id>
    <published>2020-05-26T03:54:21.000Z</published>
    <updated>2020-05-26T06:24:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是尚硅谷Flume课程随手笔记，记录课程的一些实战的操作步骤</p></blockquote><hr><h3 id="一、安装Flume并实现一个简易端口监控"><a href="#一、安装Flume并实现一个简易端口监控" class="headerlink" title="一、安装Flume并实现一个简易端口监控"></a>一、安装Flume并实现一个简易端口监控</h3><blockquote><p>实现监控端口案例，通过Flume来监听端口数据，并将数据打印到控制台</p></blockquote><hr><h4 id="1-首先进入官网下载Flume源码包"><a href="#1-首先进入官网下载Flume源码包" class="headerlink" title="1. 首先进入官网下载Flume源码包"></a>1. 首先进入官网下载Flume源码包</h4><hr><h4 id="2-修改flume-env-sh文件"><a href="#2-修改flume-env-sh文件" class="headerlink" title="2. 修改flume-env.sh文件"></a>2. 修改flume-env.sh文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure><hr><h4 id="3-添加配置文件"><a href="#3-添加配置文件" class="headerlink" title="3. 添加配置文件"></a>3. 添加配置文件</h4><p>创建Flume Agent配置文件flume-netcat-logger.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为netcat端口类型</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line"># 表示a1的监听的主机</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line"># 表示a1的监听的端口号</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="4-启动Flume"><a href="#4-启动Flume" class="headerlink" title="4. 启动Flume"></a>4. 启动Flume</h4><p>启动终端，在终端中属于下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf/ --name a1 --conf-file job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>使用下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc localhost 44444</span><br></pre></td></tr></table></figure></p><p>通过netcat发送数据，发现此时flume日志中显示接收到数据</p><hr><hr><h3 id="二、-实时监控单个追加文件"><a href="#二、-实时监控单个追加文件" class="headerlink" title="二、 实时监控单个追加文件"></a>二、 实时监控单个追加文件</h3><blockquote><p>实时监控 Hive 日志，并上传到 HDFS 中</p></blockquote><hr><h4 id="1-添加配置文件"><a href="#1-添加配置文件" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h4><p>创建本次程序的配置文件，创建 flume-file-logger.conf 文件，根据官网添加一下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为exec source类型</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line"># 监控文件</span><br><span class="line">a1.sources.r1.command = tail -F /Users/user/Library/Hive/logs/hive.log</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-启动Flume"><a href="#2-启动Flume" class="headerlink" title="2. 启动Flume"></a>2. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-flume-logger.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后启动该任务，并且可以监听hive的日志文件</p><hr><hr><h3 id="三、-实时监控单个追加文件到HDFS"><a href="#三、-实时监控单个追加文件到HDFS" class="headerlink" title="三、 实时监控单个追加文件到HDFS"></a>三、 实时监控单个追加文件到HDFS</h3><blockquote><p>Flume监控Hive实时更新日志然后上传到HDFS</p></blockquote><hr><h4 id="1-添加相关依赖包"><a href="#1-添加相关依赖包" class="headerlink" title="1. 添加相关依赖包"></a>1. 添加相关依赖包</h4><p>首先将需要使用的相关Jar包放入Flume的lib目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">commons-configuration-1.6.jar、</span><br><span class="line">hadoop-auth-2.7.2.jar、</span><br><span class="line">hadoop-common-2.7.2.jar、</span><br><span class="line">hadoop-hdfs-2.7.2.jar、</span><br><span class="line">commons-io-2.4.jar、</span><br><span class="line">htrace-core-3.1.0-incubating.jar</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-添加配置文件"><a href="#2-添加配置文件" class="headerlink" title="2.添加配置文件"></a>2.添加配置文件</h4><p>创建本次程序的配置文件，创建 flume-file-hdfs.conf 文件，根据官网添加一下配置，因为这里与上一节区别主要在sink部分，所以只需要在上一节配置的基础上对sink相关的部分进行修改即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为exec source类型</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line"># 监控文件</span><br><span class="line">a1.sources.r1.command = tail -F /Users/user/Library/Hive/logs/hive.log</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"></span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://localhost:9000/flume/%Y%m%d/%H</span><br><span class="line"># 上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logs- </span><br><span class="line"># 是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round = true </span><br><span class="line"># 多少时间单位创建一个新的文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"># 重新定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"># 积攒多少个 Event 才 flush 到 HDFS 一次</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"># 设置文件类型，可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"># 多久生成一个新的文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"># 设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"># 文件的滚动与 Event 数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-启动Flume"><a href="#3-启动Flume" class="headerlink" title="3. 启动Flume"></a>3. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-file-hdfs.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后启动该任务，并且可以监听文件的追加</p><hr><hr><h3 id="四、-实时监控目录下的多个新文件至HDFS"><a href="#四、-实时监控目录下的多个新文件至HDFS" class="headerlink" title="四、 实时监控目录下的多个新文件至HDFS"></a>四、 实时监控目录下的多个新文件至HDFS</h3><blockquote><p>当监控的目录下有新文件时，进行上传</p></blockquote><hr><h4 id="1-添加配置文件-1"><a href="#1-添加配置文件-1" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h4><p>写下如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line"># 表示a1的输入源类型为spooldir类型</span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line"># 监控文件的路径</span><br><span class="line">a1.sources.r1.spoolDir = /Users/user/Library/Flume/upload</span><br><span class="line"># 上传完成文件后缀</span><br><span class="line">a1.sources.r1.fileSuffix = .COMPLETED</span><br><span class="line"># 忽略所有以.tmp 结尾的文件，不上传</span><br><span class="line">a1.sources.r1.ignorePattern = ([^ ]*\.tmp)</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"></span><br><span class="line"># 表示a1的输出目的地是控制台hdfs类型</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://localhost:9000/flume/%Y%m%d/%H</span><br><span class="line"># 上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = upload- </span><br><span class="line"># 是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round = true </span><br><span class="line"># 多少时间单位创建一个新的文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"># 重新定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"># 积攒多少个 Event 才 flush 到 HDFS 一次</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"># 设置文件类型，可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"># 多久生成一个新的文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"># 设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"># 文件的滚动与 Event 数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-启动Flume-1"><a href="#2-启动Flume-1" class="headerlink" title="2. 启动Flume"></a>2. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-dir-hdfs.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后我们向upload文件夹添加文件，发现成功上传至HDFS。</p><blockquote><p>注： 但是它并不能监控动态变化的数据，在使用 Spooling Directory Source 时，不要在监控目录中创建并持续修改文件，上传完成的文件会以.COMPLETED 结尾，被监控文件夹每 500 毫秒扫描一次文件变动。</p></blockquote><hr><hr><h3 id="五、-实时监控目录下的多个追加文件"><a href="#五、-实时监控目录下的多个追加文件" class="headerlink" title="五、 实时监控目录下的多个追加文件"></a>五、 实时监控目录下的多个追加文件</h3><blockquote><p>Exec source 适用于监控一个实时追加的文件，但不能保证数据不丢失;Spooldir Source 能够保证数据不丢失，且能够实现断点续传，但延迟较高，不能实时监控;而 Taildir Source 既能够实现断点续传，又可以保证数据不丢失，还能够进行实时监控。</p></blockquote><hr><h4 id="1-添加配置文件-2"><a href="#1-添加配置文件-2" class="headerlink" title="1. 添加配置文件"></a>1. 添加配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent a1:表示agent的名称</span><br><span class="line"># r1:表示a1的Source的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line"># k1:表示a1的Sink的名称</span><br><span class="line">a1.sinks = k1</span><br><span class="line"># c1:表示a1的Channel的名称</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">#表示a1的输入源类型为TAILDIR类型</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line"># 指定position_file位置</span><br><span class="line">a1.sources.r1.positionFile = /Users/user/Library/Flume/upload/tail_dir.json</span><br><span class="line"># 文件组</span><br><span class="line">a1.sources.r1.filegroups = f1 f2</span><br><span class="line"># f1文件组</span><br><span class="line">a1.sources.r1.filegroups.f1 = /Users/user/Library/Flume/upload/dict1/a.log</span><br><span class="line"># f2文件组</span><br><span class="line">a1.sources.r1.filegroups.f2 = /Users/user/Library/Flume/upload/dict2/.*.txt</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line"></span><br><span class="line"># 表示a1的输出目的地是控制台logger类型</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://localhost:9000/flume/%Y%m%d/%H</span><br><span class="line"># 上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = upload- </span><br><span class="line"># 是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round = true </span><br><span class="line"># 多少时间单位创建一个新的文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"># 重新定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"># 积攒多少个 Event 才 flush 到 HDFS 一次</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"># 设置文件类型，可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"># 多久生成一个新的文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"># 设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"># 文件的滚动与 Event 数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line"># 表示a1的channel类型是memory内存型</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 表示a1的channel总容量1000个event</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line"># 表示a1的channel传输时收集到了100条event以后再去提交事务</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line"># 表示将r1和c1连接起来</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"># 表示将k1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><hr><h4 id="2-启动Flume-2"><a href="#2-启动Flume-2" class="headerlink" title="2. 启动Flume"></a>2. 启动Flume</h4><p>在终端中输入下面的指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf --conf-file job/file-taildir-hdfs.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></p><p>之后我们对监控的文件组中的文件进行追加，发现成功监听。</p><blockquote><p>注： 在查看tail_dir.json中可以发现监听记录，同时每条记录都存在inode字段和pos字段，inode字段为文件唯一标识符，不随文件名称的变化而变化，pos则是上传文件的偏移量，正是通过这个来实现断点续传。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="Flume" scheme="http://suiwo.xyz/tags/Flume/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hive初识</title>
    <link href="http://suiwo.xyz/2020/05/24/Hive%E5%88%9D%E8%AF%86/"/>
    <id>http://suiwo.xyz/2020/05/24/Hive初识/</id>
    <published>2020-05-24T12:54:16.000Z</published>
    <updated>2020-05-26T06:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-安装Hive并启动"><a href="#一、-安装Hive并启动" class="headerlink" title="一、 安装Hive并启动"></a>一、 安装Hive并启动</h3><hr><h4 id="1-下载源码包"><a href="#1-下载源码包" class="headerlink" title="1. 下载源码包"></a>1. 下载源码包</h4><p>解压源码包后，配置hive-env.sh<br>(a)配置 <code>HADOOP_HOME</code> 路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=$&#123;Hadoop的路径&#125;</span><br></pre></td></tr></table></figure></p><p>(b)配置 <code>HIVE_CONF_DIR</code> 路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_CONF_DIR=$&#123;Hive配置文件路径&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-启动hadoop"><a href="#2-启动hadoop" class="headerlink" title="2. 启动hadoop"></a>2. 启动hadoop</h4><hr><h4 id="3-启动Hive客户端"><a href="#3-启动Hive客户端" class="headerlink" title="3. 启动Hive客户端"></a>3. 启动Hive客户端</h4><p>调用bin/hive进入Hive的客户端</p><blockquote><p>启动Hive后会发现Hive源码包中多了<code>derby.log</code>和<code>metastore_db</code>这个就是Hive默认的元数据</p></blockquote><hr><h4 id="4-创建数据表"><a href="#4-创建数据表" class="headerlink" title="4. 创建数据表"></a>4. 创建数据表</h4><p>在Hive客户端中创建一个数据表，并数据表中插入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student(id int, name string);</span><br><span class="line">hive&gt; insert into student values(1000,<span class="string">"ss"</span>);</span><br></pre></td></tr></table></figure></p><p>此时我们可以发现在hdfs中出现了<code>user/hive/warehouse</code>文件夹下存在一个与表名同名的文件夹，这个文件夹中存储的就是数据表的数据</p><hr><hr><h3 id="二、-尝试在文件系统中加载数据"><a href="#二、-尝试在文件系统中加载数据" class="headerlink" title="二、 尝试在文件系统中加载数据"></a>二、 尝试在文件系统中加载数据</h3><hr><h4 id="1-创建测试数据"><a href="#1-创建测试数据" class="headerlink" title="1. 创建测试数据"></a>1. 创建测试数据</h4><p>创建一个<code>student.txt</code>文件（id与姓名之间用tab隔开）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1001    zhangsan</span><br><span class="line">1002    lisi</span><br><span class="line">1003    wangwu</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-使用load导入数据"><a href="#2-使用load导入数据" class="headerlink" title="2. 使用load导入数据"></a>2. 使用load导入数据</h4><p>在hive中执行以下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; load data <span class="built_in">local</span> inpath <span class="string">'文件路径'</span> into table student;</span><br></pre></td></tr></table></figure></p><p>此时我们可以发现<code>user/hive/warehouse/student</code>文件夹下多了一个student.txt文件，所以可以理解这其实就是一个上传操作，但是使用select语句查询时发现查询结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NULLNULL</span><br><span class="line">NULLNULL</span><br><span class="line">NULLNULL</span><br></pre></td></tr></table></figure></p><p>这是因为我们在创建表时并未声明文件分隔符，所以我们重新创建数据表，并声明分隔符为’\t’<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student(id int, name string) ROW FORMAT DELIMITED FIELDS TERMINATED BY <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure></p><p>之后重新导入后数据发现可以正常查询了。</p><hr><h4 id="3-通过上传文件导入数据"><a href="#3-通过上传文件导入数据" class="headerlink" title="3. 通过上传文件导入数据"></a>3. 通过上传文件导入数据</h4><p>现在我们再创建一个student1.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1004    zhaoliu</span><br><span class="line">1005    chenba</span><br><span class="line">1006    sunjiu</span><br></pre></td></tr></table></figure></p><p>然后直接上传到hdfs的<code>user/hive/warehouse/student</code>路径下<br>之后在查询，可以发现我们上传的<code>student1.txt</code>文件中的数据也可以查询到了。</p><blockquote><p>在实际开发中，可以选择使用load指令或者直接上传两种方式，如果我们想使用load指令加载hdfs下的数据，同样可以使用load指令，此时可以理解成将该文件移动到数据表所对应的文件之下<br>hive&gt; load data inpath ‘文件路径’ into table student;</p></blockquote><hr><hr><h3 id="三、-配置Hive元数据至MySQL"><a href="#三、-配置Hive元数据至MySQL" class="headerlink" title="三、 配置Hive元数据至MySQL"></a>三、 配置Hive元数据至MySQL</h3><blockquote><p>我们会发现一个问题同一时间只能启动一个Hive客户端。这就是数据derby数据库的原因，所以我们接下来要将我们的元数据转移到MySQL中，MySQL安装在此不做赘述。</p></blockquote><hr><h4 id="1-添加MySQL连接驱动"><a href="#1-添加MySQL连接驱动" class="headerlink" title="1. 添加MySQL连接驱动"></a>1. 添加MySQL连接驱动</h4><p>安装好MySQL后，首先我们需要下载mysql连接驱动也就是<code>mysql-connector-java-5.1.47.jar</code>（这个jar包可以在maven的本地仓库中找到，如果之前在maven中使用过这个依赖）文件放入到hive的lib目录中。</p><hr><h4 id="2-配置hive-site-xml"><a href="#2-配置hive-site-xml" class="headerlink" title="2. 配置hive-site.xml"></a>2. 配置<code>hive-site.xml</code></h4><p>按照官方配置，将下列数据拷贝到文件中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop102:3306/metastore?createDatabaseI fNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>000000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置完毕后，如果启动 hive 异常，可以重启hadoop，此时我们可以看到mysql中创建了相关的数据库。</p><hr><h4 id="3-创建数据表"><a href="#3-创建数据表" class="headerlink" title="3. 创建数据表"></a>3. 创建数据表</h4><p>然后我们创建一个数据表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; create table student1(id int, name string);</span><br></pre></td></tr></table></figure></p><p>这时我们在数据库中的TBLS数据表中会发现我们创建者条数据的记录，在DBS表中可以看到我们的数据库路径。</p>]]></content>
    
    <summary type="html">
    
      Hive是一个数据仓库基础工具在Hadoop中用来处理结构化数据。它架构在Hadoop之上，总归为大数据，并使得查询和分析方便。并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Hive" scheme="http://suiwo.xyz/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>YARN集群搭建</title>
    <link href="http://suiwo.xyz/2020/04/20/YARN%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://suiwo.xyz/2020/04/20/YARN集群搭建/</id>
    <published>2020-04-20T13:21:40.000Z</published>
    <updated>2020-04-20T13:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要是记录集群搭建流程，具体细节较为简略</p></blockquote><h3 id="一、YARN简介"><a href="#一、YARN简介" class="headerlink" title="一、YARN简介"></a>一、YARN简介</h3><p>Apache Hadoop YARN （Yet Another Resource Negotiator，另一种资源协调者）是一种新的 Hadoop 资源管理器，它是一个通用资源管理系统，可为上层应用提供统一的资源管理和调度，它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。</p><h3 id="二、集群规划"><a href="#二、集群规划" class="headerlink" title="二、集群规划"></a>二、集群规划</h3><table><thead><tr><th>主机名</th><th>作用</th></tr></thead><tbody><tr><td>hadoop11</td><td>NameNode &amp; DataNode &amp; NodeManager</td></tr><tr><td>hadoop12</td><td>DataNode &amp; ResourceManager &amp; NodeManager</td></tr><tr><td>hadoop13</td><td>NameNode &amp; DataNode &amp; NodeManager</td></tr></tbody></table><h3 id="三、搭建集群"><a href="#三、搭建集群" class="headerlink" title="三、搭建集群"></a>三、搭建集群</h3><ol><li>修改主机名以及<code>host</code>映射并重启机器</li><li>配置<code>ssh</code>免密登录</li><li>配置<code>JAVA</code>环境变量</li><li>安装Hadoop<br>(1). 修改<code>hadoop-env.sh</code><br>(2). 修改<code>core-site.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop11:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/zhangjia/hadoop-2.9.2/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>(3). 修改<code>hdfs-site.xml</code><br>不需要修改，默认配置即可<br>(4). 修改mapred-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(5). 修改<code>yarn-site.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop12<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(6). 配置<code>slaves</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop11</span><br><span class="line">hadoop12</span><br><span class="line">hadoop13</span><br></pre></td></tr></table></figure></p><p>(7). 格式化NameNode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure></p><p>(8). 启动HDFS集群<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></p><p>(9). 启动YARN集群(只可以在ResourceManager节点启动)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure></p><p>(10). 可以在 <a href="http://hadoop12:8088查看当前YARN启动情况" target="_blank" rel="noopener">http://hadoop12:8088查看当前YARN启动情况</a></p>]]></content>
    
    <summary type="html">
    
      Apache Hadoop YARN （Yet Another Resource Negotiator，另一种资源协调者）是一种新的 Hadoop 资源管理器，它是一个通用资源管理系统，可为上层应用提供统一的资源管理和调度，它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
      <category term="YARN" scheme="http://suiwo.xyz/tags/YARN/"/>
    
  </entry>
  
  <entry>
    <title>HDFS高可用集群搭建</title>
    <link href="http://suiwo.xyz/2020/04/20/HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://suiwo.xyz/2020/04/20/HDFS高可用集群搭建/</id>
    <published>2020-04-20T03:19:10.000Z</published>
    <updated>2020-04-20T13:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>环境</p><ul><li>CentOS 7</li><li>JAVA 1.8</li><li>Zookeeper 2.9.2</li><li>Hadoop 3.4.14</li></ul></blockquote><hr><h3 id="一、简单HDFS集群中存在的问题及解决办法"><a href="#一、简单HDFS集群中存在的问题及解决办法" class="headerlink" title="一、简单HDFS集群中存在的问题及解决办法"></a>一、简单HDFS集群中存在的问题及解决办法</h3><ol><li><p>如何解决NameNode的单节点问题</p><p> 多个NameNode备份原NameNode数据</p></li><li><p>如何解决多个NameNode是集群脑裂问题<br> 使用QJM，<code>QJM（Quorum Journal Manager）</code>是Hadoop专门为Namenode共享存储开发的组件。其集群运行一组<code>Journal Node</code>，每个Journal 节点暴露一个简单的RPC接口，允许Namenode读取和写入数据，数据存放在Journal节点的本地磁盘。当Namenode写入<code>edit log</code>时，它向集群的所有Journal Node发送写入请求，当多数节点回复确认成功写入之后，edit log就认为是成功写入。例如有3个Journal Node，Namenode如果收到来自2个节点的确认消息，则认为写入成功。<br> 而在故障自动转移的处理上，引入了监控Namenode状态的ZookeeperFailController（ZKFC）。ZKFC一般运行在Namenode的宿主机器上，与Zookeeper集群协作完成故障的自动转移。整个集群架构图如下：<br> <img src="/images/HDFS高可用集群搭建/SouthEast.png" alt="img"></p></li><li><p>在HA集群中如何ZK与<code>NameNode active</code>出现网络延迟问题这种情况，ZK会自动将<code>NameNode standby</code>切换为活跃节点，这个时候就出现了多个active节点，也就意味着现有集群面临脑裂问题<br> 使用JournalNode</p><ol><li>负责NameNode的edit log同步</li><li>JournalNode隔离机制，保证在一个时刻只有一个NameNode active，使用ssh登录到NameNode节点使用kill命令杀死NameNode。</li></ol></li></ol><hr><h3 id="二、集群规划"><a href="#二、集群规划" class="headerlink" title="二、集群规划"></a>二、集群规划</h3><h4 id="1-相关要求："><a href="#1-相关要求：" class="headerlink" title="1. 相关要求："></a>1. 相关要求：</h4><ul><li>节点个数最好是奇数个 3个节点</li><li>每个zookeeper服务会启动至少三个端口<ul><li>1.client处理</li><li>2.内部数据原子广播</li><li>3.内部选举投票端口</li></ul></li></ul><h4 id="2-服务器相关信息"><a href="#2-服务器相关信息" class="headerlink" title="2. 服务器相关信息"></a>2. 服务器相关信息</h4><table><thead><tr><th>hostname</th><th>所运行服务</th><th>IP地址</th></tr></thead><tbody><tr><td>zk1</td><td>zkNode1</td><td>按照实际IP地址</td></tr><tr><td>zk2</td><td>zkNode2</td><td>按照实际IP地址</td></tr><tr><td>zk3</td><td>zkNode3</td><td>按照实际IP地址</td></tr><tr><td>hadoop1</td><td>NameNode(active) &amp; DataNode &amp; JournalNode &amp; ZKFC</td><td>按照实际IP地址</td></tr><tr><td>hadoop2</td><td>NameNode(standby) &amp; DataNode &amp; JournalNode &amp; ZKFC</td><td>按照实际IP地址</td></tr><tr><td>hadoop3</td><td>DataNode &amp; JournalNode &amp; ZKFC</td><td>按照实际IP地址</td></tr></tbody></table><h4 id="3-共同配置"><a href="#3-共同配置" class="headerlink" title="3. 共同配置"></a>3. 共同配置</h4><p>(1) 修改所有机器hostname<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure></p><p>(2) 配置hosts文件，将ip地址与主机名进行映射<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure></p><p>(3) 重启机器</p><p>(4) 配置ssh免密登录，实现start-dfs.sh执行的机器可以免密登录其他的NameNode和DataNode节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. hadoop1: ssh-keygen -t -rsa</span><br><span class="line">2. hadoop1: ssh-copy-id hadoop1</span><br><span class="line">3. hadoop1: ssh-copy-id hadoop2</span><br><span class="line">4. hadoop1: ssh-copy-id hadoop3</span><br></pre></td></tr></table></figure></p><p>(5) 配置JAVA环境</p><p>(6) 修改环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入配置文件</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_251-amd64</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p><hr><h3 id="三、zk集群搭建"><a href="#三、zk集群搭建" class="headerlink" title="三、zk集群搭建"></a>三、zk集群搭建</h3><h4 id="1-解压zookeeper文件"><a href="#1-解压zookeeper文件" class="headerlink" title="1. 解压zookeeper文件"></a>1. 解压zookeeper文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper文件</span><br></pre></td></tr></table></figure><h4 id="2-在每一个zk节点上创建zk的数据目录"><a href="#2-在每一个zk节点上创建zk的数据目录" class="headerlink" title="2. 在每一个zk节点上创建zk的数据目录"></a>2. 在每一个zk节点上创建zk的数据目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/zkdata</span><br></pre></td></tr></table></figure><h4 id="3-在每一个节点存放zk数据的目录中必须创建一个myid文件"><a href="#3-在每一个节点存放zk数据的目录中必须创建一个myid文件" class="headerlink" title="3. 在每一个节点存放zk数据的目录中必须创建一个myid文件"></a>3. 在每一个节点存放zk数据的目录中必须创建一个myid文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zk1: <span class="built_in">echo</span> <span class="string">"1"</span> &gt;&gt; /home/zkdata/myid</span><br><span class="line">zk2: <span class="built_in">echo</span> <span class="string">"2"</span> &gt;&gt; /home/zkdata/myid</span><br><span class="line">zk3: <span class="built_in">echo</span> <span class="string">"3"</span> &gt;&gt; /home/zkdata/myid</span><br></pre></td></tr></table></figure><h4 id="4-创建zookeeper的基础配置文件zoo-cfg"><a href="#4-创建zookeeper的基础配置文件zoo-cfg" class="headerlink" title="4. 创建zookeeper的基础配置文件zoo.cfg"></a>4. 创建zookeeper的基础配置文件zoo.cfg</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/zkdata/zoo.cfg</span><br></pre></td></tr></table></figure><p>配置内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 3001为client端口</span><br><span class="line"># 3002为原子广播端口</span><br><span class="line"># 3003为选举投票端口</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/zkdata</span><br><span class="line">clientPort=3001</span><br><span class="line">server.1=zk1:3002:3003</span><br><span class="line">server.2=zk2:3002:3003</span><br><span class="line">server.3=zk3:3002:3003</span><br></pre></td></tr></table></figure></p><h4 id="5-启动zk节点，进入zk文件的bin目录下执行以下命令"><a href="#5-启动zk节点，进入zk文件的bin目录下执行以下命令" class="headerlink" title="5. 启动zk节点，进入zk文件的bin目录下执行以下命令"></a>5. 启动zk节点，进入zk文件的bin目录下执行以下命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start /home/zkdata/zoo.cfg</span><br></pre></td></tr></table></figure><h4 id="6-执行jps命令发现已成功启动QuorumPeerMain进程"><a href="#6-执行jps命令发现已成功启动QuorumPeerMain进程" class="headerlink" title="6. 执行jps命令发现已成功启动QuorumPeerMain进程"></a>6. 执行jps命令发现已成功启动QuorumPeerMain进程</h4><h4 id="7-查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower"><a href="#7-查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower" class="headerlink" title="7. 查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower"></a>7. 查询各个zk节点的集群状态，发现其中一个节点为leader其余节点为follower</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status /home/zkdata/zoo.cfg</span><br></pre></td></tr></table></figure><h4 id="8-zk集群搭建完毕"><a href="#8-zk集群搭建完毕" class="headerlink" title="8. zk集群搭建完毕"></a>8. zk集群搭建完毕</h4><hr><h3 id="四、HDFS集群搭建"><a href="#四、HDFS集群搭建" class="headerlink" title="四、HDFS集群搭建"></a>四、HDFS集群搭建</h3><h4 id="1-在所有hadoop节点添加Cent-OS依赖"><a href="#1-在所有hadoop节点添加Cent-OS依赖" class="headerlink" title="1. 在所有hadoop节点添加Cent OS依赖"></a>1. 在所有hadoop节点添加Cent OS依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install psmisc -y</span><br></pre></td></tr></table></figure><h4 id="2-安装hadoop-配置Hadoop环境变量-非必须"><a href="#2-安装hadoop-配置Hadoop环境变量-非必须" class="headerlink" title="2. 安装hadoop(配置Hadoop环境变量 非必须)"></a>2. 安装hadoop(配置Hadoop环境变量 非必须)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/home/hadoop-2.9.2</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>(1) 配置<code>hadoop-env.sh</code><br>修改JAVA相关配置</p><p>(2) 配置<code>core-site.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop-2.9.2/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置zk集群节点数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>zk1:3001,zk2:3001,zk3:3001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(3) 配置<code>hdfs-site.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定hdfs的nameservices为ns，需要与core-site.xml中保持一致 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ns下面有两个nameNode分别是nn1，nn2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn1的rpc通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn1的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn2的rpc通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop2:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.ns.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop2:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定nameNode的元数据在JournalNode上的存放位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hadoop1:8485;hadoop2:8485;hadoop3:8485/ns<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定journalNode在本地磁盘中存放数据的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/zhangjia/journal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启nameNode故障时自动切换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.ns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置隔离机制。如果ssh默认是22端口，value直接写sshfence即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用隔离机制需要ssh免登陆 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(4) 配置<code>slaves</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop1</span><br><span class="line">hadoop2</span><br><span class="line">hadoop3</span><br></pre></td></tr></table></figure></p><p>(5) 启动集群</p><p>(6) 在任意NameNode节点格式化Zk<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure></p><p>(7) 出现下面这句话则说明格式化成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ha.ActiveStandbyElector: Successfully created /hadoop-ha/ns in ZK.</span><br></pre></td></tr></table></figure></p><p>(8) 启动JournalNode节点</p><blockquote><p>因为Journal在HA中需要同步edit log，所以他需要在edit log没有生成之前启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop1: hadoop-daemon.sh start journalnode</span><br><span class="line">hadoop2: hadoop-daemon.sh start journalnode</span><br><span class="line">hadoop3: hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure></p></blockquote><p>(9) 使用jps发现JournalNode进程已启动并且在根文件夹出现journal文件夹</p><p>(10) 格式化NameNode,在选中的active的节点上执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format ns</span><br></pre></td></tr></table></figure></p><p>(11) 启动hdfs集群<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></p><p>(12) 在standby 的 NameNode节点上执行如下命令进行同步active节点的edit log<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -bootstrapStandby</span><br></pre></td></tr></table></figure></p><p>(13) 启动standby节点的NameNode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemon.sh start namenode</span><br></pre></td></tr></table></figure></p><p>此时进入两个NameNode节点的图形化界面 <a href="http://hadoop1:50070" target="_blank" rel="noopener">http://hadoop1:50070</a> 可以发现一个为active一个为standby</p><p>(14) 此时HA集群搭建完毕</p>]]></content>
    
    <summary type="html">
    
      Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。本文尝试通过使用Zookeeper来搭建一个高可用的集群。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
      <category term="Zookeeper" scheme="http://suiwo.xyz/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>汉诺塔问题总结</title>
    <link href="http://suiwo.xyz/2020/01/04/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://suiwo.xyz/2020/01/04/汉诺塔问题总结/</id>
    <published>2020-01-04T15:27:30.000Z</published>
    <updated>2020-01-05T09:43:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本递归实现"><a href="#一、基本递归实现" class="headerlink" title="一、基本递归实现"></a>一、基本递归实现</h2><p>下面是普遍的汉诺塔问题的递归解法代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, String x, String y, String z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(x + <span class="string">" -&gt; "</span> + z);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            hanoi(n - <span class="number">1</span>, x, z, y);</span><br><span class="line">            System.out.println(x + <span class="string">" -&gt; "</span> + z);</span><br><span class="line">            hanoi(n - <span class="number">1</span>, y, x, z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        hanoi(<span class="number">3</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x -&gt; z</span><br><span class="line">x -&gt; y</span><br><span class="line">z -&gt; y</span><br><span class="line">x -&gt; z</span><br><span class="line">y -&gt; x</span><br><span class="line">y -&gt; z</span><br><span class="line">x -&gt; z</span><br></pre></td></tr></table></figure><hr><hr><h2 id="二、基本非递归实现"><a href="#二、基本非递归实现" class="headerlink" title="二、基本非递归实现"></a>二、基本非递归实现</h2><p>非递归实现的方式本质就是尝试使用栈来模拟递归</p><h4 id="1-创建一个保存状态的类"><a href="#1-创建一个保存状态的类" class="headerlink" title="1.创建一个保存状态的类"></a>1.创建一个保存状态的类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> n; <span class="comment">// 当前层数</span></span><br><span class="line">    <span class="keyword">public</span> String x; <span class="comment">// 起始柱</span></span><br><span class="line">    <span class="keyword">public</span> String y; <span class="comment">// 辅助柱</span></span><br><span class="line">    <span class="keyword">public</span> String z; <span class="comment">// 目标柱</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">State</span><span class="params">(<span class="keyword">int</span> n, String x, String y, String z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-实现主程序"><a href="#2-实现主程序" class="headerlink" title="2.实现主程序"></a>2.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, String x, String y, String z)</span> </span>&#123;</span><br><span class="line">        Stack&lt;State&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        s.push(<span class="keyword">new</span> State(n, x, y, z));</span><br><span class="line">        State state;</span><br><span class="line">        <span class="keyword">while</span> (!s.empty() &amp;&amp; (state = s.pop()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.n == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(state.x + <span class="string">" -&gt; "</span> + state.y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 栈结构先进后出，所以需要逆序进栈，这部分是理解重点，用栈模拟递归</span></span><br><span class="line">                s.push(<span class="keyword">new</span> State(state.n - <span class="number">1</span>, state.y, state.x, state.z));</span><br><span class="line">                s.push(<span class="keyword">new</span> State(<span class="number">1</span>, state.x, state.y, state.z));</span><br><span class="line">                s.push(<span class="keyword">new</span> State(state.n - <span class="number">1</span>, state.x, state.z, state.y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"非递归方式："</span>);</span><br><span class="line">        Hanoi.hanoi(<span class="number">3</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-输出结果"><a href="#3-输出结果" class="headerlink" title="3.输出结果"></a>3.输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">非递归方式：</span><br><span class="line">x -&gt; z</span><br><span class="line">x -&gt; y</span><br><span class="line">z -&gt; y</span><br><span class="line">x -&gt; z</span><br><span class="line">y -&gt; x</span><br><span class="line">y -&gt; z</span><br><span class="line">x -&gt; z</span><br></pre></td></tr></table></figure><hr><hr><h2 id="三、汉诺塔问题扩展"><a href="#三、汉诺塔问题扩展" class="headerlink" title="三、汉诺塔问题扩展"></a>三、汉诺塔问题扩展</h2><p>我们尝试更改一下题目要求，不只是需要输出交换步骤，我们还需要记录交换过程中的三个柱子的圆盘存在情况</p><h4 id="1-创建柱子类"><a href="#1-创建柱子类" class="headerlink" title="1.创建柱子类"></a>1.创建柱子类</h4><p>该类用于表示汉诺塔的每一个柱子，并且这个类将记录每个柱子上的圆盘情况<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HanoiPillar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> n; <span class="comment">// 记录传递hanoi的圆盘数量</span></span><br><span class="line">    <span class="keyword">public</span> String name; <span class="comment">// 柱子名称</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">//用于记录当前柱子上所存在的圆盘</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化A柱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HanoiPillar</span><span class="params">(<span class="keyword">int</span> n, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">this</span>.arr.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化B柱和C柱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HanoiPillar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断该柱子上方是否为顶部盘子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!arr.isEmpty() &amp;&amp; arr.size() != <span class="number">0</span> &amp;&amp; arr.get(arr.size() - <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveTo</span><span class="params">(HanoiPillar hanoiPillar)</span> </span>&#123;</span><br><span class="line">        hanoiPillar.arr.add(<span class="keyword">this</span>.getDiskSize());</span><br><span class="line">        <span class="keyword">this</span>.arr.remove(<span class="keyword">this</span>.arr.size() - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">" -&gt; "</span> + hanoiPillar.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到当前柱子的圆盘的列表，转化为String</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.arr.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.arr.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                result.append(<span class="keyword">this</span>.arr.get(i)).append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.length() == <span class="number">0</span> ? <span class="string">"null"</span> : result.toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到该柱子中最小的圆盘的数值。以1、2、3、4、......、n来表示各个圆盘的大小。并且方便比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDiskSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.arr.get(<span class="keyword">this</span>.arr.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="2-实现主程序-1"><a href="#2-实现主程序-1" class="headerlink" title="2.实现主程序"></a>2.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> step;</span><br><span class="line">    <span class="keyword">private</span> HanoiPillar a;</span><br><span class="line">    <span class="keyword">private</span> HanoiPillar b;</span><br><span class="line">    <span class="keyword">private</span> HanoiPillar c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, String a, String b, String c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.step = (<span class="keyword">int</span>) (Math.pow(<span class="number">2</span>, n) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="keyword">new</span> HanoiPillar(n, a);</span><br><span class="line">        <span class="keyword">this</span>.b = <span class="keyword">new</span> HanoiPillar(b);</span><br><span class="line">        <span class="keyword">this</span>.c = <span class="keyword">new</span> HanoiPillar(c);</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            HanoiPillar tmp = <span class="keyword">this</span>.b;</span><br><span class="line">            <span class="keyword">this</span>.b = <span class="keyword">this</span>.c;</span><br><span class="line">            <span class="keyword">this</span>.c = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.step &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 进行top的移动</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.a.top()) &#123;</span><br><span class="line">                list();</span><br><span class="line">                <span class="keyword">this</span>.a.moveTo(<span class="keyword">this</span>.b);</span><br><span class="line">                <span class="keyword">this</span>.step--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.b.top()) &#123;</span><br><span class="line">                list();</span><br><span class="line">                <span class="keyword">this</span>.b.moveTo(<span class="keyword">this</span>.c);</span><br><span class="line">                <span class="keyword">this</span>.step--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.c.top()) &#123;</span><br><span class="line">                list();</span><br><span class="line">                <span class="keyword">this</span>.c.moveTo(<span class="keyword">this</span>.a);</span><br><span class="line">                <span class="keyword">this</span>.step--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 因为step为奇数，而最后完成后step=0；</span></span><br><span class="line">            <span class="comment">// 同时可以理解为最后一次移动一定是top移动，所以需要进行一次循环判断</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.step == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行第二步移动</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.a.top()) &#123;</span><br><span class="line">                move2(<span class="keyword">this</span>.b, <span class="keyword">this</span>.c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.b.top()) &#123;</span><br><span class="line">                move2(<span class="keyword">this</span>.a, <span class="keyword">this</span>.c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.c.top()) &#123;</span><br><span class="line">                move2(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">this</span>.a.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.a.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.b.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.b.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.c.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.c.getStore() + <span class="string">""</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(<span class="keyword">this</span>.a.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.a.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.c.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.c.getStore() +</span><br><span class="line">                    <span class="string">""</span> + <span class="keyword">this</span>.b.name + <span class="string">"柱："</span> + <span class="keyword">this</span>.b.getStore() + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行第二部移动</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">move2</span><span class="params">(HanoiPillar a, HanoiPillar b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.arr.size() == <span class="number">0</span>) &#123; <span class="comment">// a柱为空，则将b上层的盘子移到a</span></span><br><span class="line">            list();</span><br><span class="line">            b.moveTo(a);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b.arr.size() == <span class="number">0</span>) &#123; <span class="comment">// b柱为空，则将a上层的盘子移到b</span></span><br><span class="line">            list();</span><br><span class="line">            a.moveTo(b);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.getDiskSize() &gt; b.getDiskSize()) &#123; <span class="comment">// 由于b盘子小于a盘子，所以将b的top盘子移动到a的top盘子</span></span><br><span class="line">            list();</span><br><span class="line">            b.moveTo(a);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 由于a盘子小于b盘子，所以将a的top盘子移动到b的top盘子</span></span><br><span class="line">            list();</span><br><span class="line">            a.moveTo(b);</span><br><span class="line">            <span class="keyword">this</span>.step--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        Hanoi.hanoi(<span class="number">3</span>, <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-输出结果-1"><a href="#3-输出结果-1" class="headerlink" title="3.输出结果"></a>3.输出结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A柱：<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,B柱：<span class="keyword">null</span>C柱：<span class="keyword">null</span>       A -&gt; C</span><br><span class="line">A柱：<span class="number">2</span>,<span class="number">3</span>,B柱：<span class="keyword">null</span>C柱：<span class="number">1</span>,    A -&gt; B</span><br><span class="line">A柱：<span class="number">3</span>,        B柱：<span class="number">2</span>,        C柱：<span class="number">1</span>,    C -&gt; B</span><br><span class="line">A柱：<span class="number">3</span>,        B柱：<span class="number">1</span>,<span class="number">2</span>,C柱：<span class="keyword">null</span>A -&gt; C</span><br><span class="line">A柱：<span class="keyword">null</span>B柱：<span class="number">1</span>,<span class="number">2</span>,C柱：<span class="number">3</span>,    B -&gt; A</span><br><span class="line">A柱：<span class="number">1</span>,        B柱：<span class="number">2</span>,        C柱：<span class="number">3</span>,    B -&gt; C</span><br><span class="line">A柱：<span class="number">1</span>,        B柱：<span class="keyword">null</span>C柱：<span class="number">2</span>,<span class="number">3</span>,    A -&gt; C</span><br><span class="line">A柱：<span class="keyword">null</span>B柱：<span class="keyword">null</span>C柱：<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br></pre></td></tr></table></figure><hr><hr><h2 id="四、汉诺塔问题改编（递归实现）"><a href="#四、汉诺塔问题改编（递归实现）" class="headerlink" title="四、汉诺塔问题改编（递归实现）"></a>四、汉诺塔问题改编（递归实现）</h2><p>今天在做《程序员代码面试指南：IT名企算法与数据结构题目最优解（第二版）》时，遇到了一个稍微复杂一些的汉诺塔问题，但是理解之后发现本体只是在上面简易递归的基础上进行优化。</p><h4 id="1-题目要求"><a href="#1-题目要求" class="headerlink" title="1.题目要求"></a>1.题目要求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">【题目】</span><br><span class="line"> *  汉诺塔问题比较经典，这里修改一下游戏规则：</span><br><span class="line"> *  现在限制不能从最左侧的塔直接移动到最右侧，也不能从最右侧直接移动到最左侧，而是必须经过中间。</span><br><span class="line"> *  求当塔有N层的时候，打印最优移动过程和最优移动总步数。</span><br><span class="line"> *  1.如果希望从“左”移到“中”，打印“Move 1 from left to mid”。</span><br><span class="line"> *  2.如果希望从“中”移到“左”，打印“Move 1 from mid to left”。</span><br><span class="line"> *  3.如果希望从“中”移到“右”，打印“Move 1 from mid to right”。</span><br><span class="line"> *  4.如果希望从“右”移到“中”，打印“Move 1 from right to mid”。</span><br><span class="line"> *  5.如果希望从“左”移到“右”，打印“Move 1 from left to mid”和“Move 1 from mid to right”。</span><br><span class="line"> *  6.如果希望从“右”移到“左”，打印“Move 1 from right to mid”和“Move 1 from mid to left”。</span><br><span class="line"> *</span><br><span class="line"> *  例如，当塔数为两层时，最上层的塔记为1，最下层的塔记为2，则打印：</span><br><span class="line"> *  Move 1 from left to mid</span><br><span class="line"> *  Move 1 from mid to right</span><br><span class="line"> *  Move 2 from left to mid</span><br><span class="line"> *  Move 1 from right to mid</span><br><span class="line"> *  Move 1 from mid to left</span><br><span class="line"> *  Move 2 from mid to right</span><br><span class="line"> *  Move 1 from left to mid</span><br><span class="line"> *  Move 1 from mid to right</span><br><span class="line"> *  It wi11 move 8 steps.</span><br></pre></td></tr></table></figure><hr><h4 id="2-情况分析"><a href="#2-情况分析" class="headerlink" title="2.情况分析"></a>2.情况分析</h4><p>首先我们尝试使用递归方式实现，然后进行常见情况分析</p><ol><li>假设剩余N层塔都在<code>左</code>，希望全都移到<code>中</code>，则有下面三个步骤<ol><li>将1~N-1层从<code>左</code>移到<code>右</code>，该过程为递归</li><li>将N层从<code>左</code>移到<code>中</code></li><li>将1~N-1层从<code>右</code>移到<code>中</code>，该过程为递归</li></ol></li></ol><ol start="2"><li>假设剩余N层塔都是从<code>中</code>移到<code>右</code>，或者从<code>中</code>移到<code>左</code>，或者从有<code>右</code>到<code>中</code>，其实原理与情况1相同，所以不做赘述</li></ol><ol start="3"><li>假设剩余N层塔都在<code>左</code>，希望都移到<code>右</code>，则有下面五个步骤<ol><li>将1~N-1层从<code>左</code>移到<code>右</code>，该过程为递归</li><li>将N层从<code>左</code>移到<code>中</code></li><li>将1~N-1层从<code>右</code>移到<code>左</code>，此过程为递归</li><li>将N层从<code>中</code>移到<code>右</code></li><li>将1~N-1层从<code>左</code>移到<code>右</code>，此过程为递归</li></ol></li></ol><hr><h4 id="3-实现主程序"><a href="#3-实现主程序" class="headerlink" title="3.实现主程序"></a>3.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hanoiProblem</span> <span class="params">(<span class="keyword">int</span> num, String left, String mid,</span></span></span><br><span class="line"><span class="function"><span class="params">                              String right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> process(num, left, mid, right, left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> num, String left, String mid, String right,</span></span></span><br><span class="line"><span class="function"><span class="params">                       String from, String to)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (from.equals(mid) || to.equals(mid)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Move 1 from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"Move 1 from "</span> + from + <span class="string">" to "</span> + mid);</span><br><span class="line">                System.out.println(<span class="string">"Move 1 from "</span> + mid + <span class="string">" to "</span> + to);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (from.equals(mid) || to.equals(mid)) &#123;</span><br><span class="line">            String another = (from.equals(left) || to.equals(left)) ? right : left;</span><br><span class="line">            <span class="keyword">int</span> part1 = process(num - <span class="number">1</span>, left, mid, right, from, another);</span><br><span class="line">            <span class="keyword">int</span> part2 = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + num + <span class="string">" from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">            <span class="keyword">int</span> part3 = process(num - <span class="number">1</span>, left, mid, right, another, to);</span><br><span class="line">            <span class="keyword">return</span> part1 + part2 + part3;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> part1 = process(num - <span class="number">1</span>, left, mid, right, from, to);</span><br><span class="line">            <span class="keyword">int</span> part2 = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + num + <span class="string">" from "</span> + from + <span class="string">" to "</span> + mid);</span><br><span class="line">            <span class="keyword">int</span> part3 = process(num - <span class="number">1</span>, left, mid, right, to, from);</span><br><span class="line">            <span class="keyword">int</span> part4 = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + num + <span class="string">" from "</span> + mid + <span class="string">" to "</span> + to);</span><br><span class="line">            <span class="keyword">int</span> part5 = process(num - <span class="number">1</span>, left, mid, right, from, to);</span><br><span class="line">            <span class="keyword">return</span> part1 + part2 + part3 + part4 + part5;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        hanoi.hanoiProblem(<span class="number">3</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-输出结果"><a href="#4-输出结果" class="headerlink" title="4.输出结果"></a>4.输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 2 from x to y</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 2 from y to z</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 3 from x to y</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 2 from z to y</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 2 from y to x</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 3 from y to z</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br><span class="line">Move 2 from x to y</span><br><span class="line">Move 1 from z to y</span><br><span class="line">Move 1 from y to x</span><br><span class="line">Move 2 from y to z</span><br><span class="line">Move 1 from x to y</span><br><span class="line">Move 1 from y to z</span><br></pre></td></tr></table></figure><hr><hr><h2 id="五、汉诺塔问题改编（非递归实现）"><a href="#五、汉诺塔问题改编（非递归实现）" class="headerlink" title="五、汉诺塔问题改编（非递归实现）"></a>五、汉诺塔问题改编（非递归实现）</h2><h4 id="1-题目分析"><a href="#1-题目分析" class="headerlink" title="1.题目分析"></a>1.题目分析</h4><blockquote><p>我们把左、中、右三个地点抽象成栈，依次记为LS、MS和RS。最初所有的塔都在LS上。那么如上4个动作就可以看作是：某一个栈（from）把栈顶元素弹出，然后压入到另一个栈里（to），作为这一个栈（to）的栈顶。</p></blockquote><blockquote><p>例如，如果是7层塔，在最初时所有的塔都在LS上，LS从栈顶到栈底就依次是1～7，如果现在发生了“左”到“中”的动作，这个动作对应的操作是LS栈将栈顶元素1弹出，然后1压入到MS栈中，成为MS的栈顶。其他操作同理。</p></blockquote><p>一个动作能发生的先决条件是<em>不违反小压大的原则</em>。<br>from栈弹出的元素num如果想压入到to栈中，那么num的值必须小于当前to栈的栈顶。还有一个原则不是很明显，但也是非常重要的，叫<em>相邻不可逆原则</em>，解释如下：</p><ol><li>我们把4个动作依次定义为：<code>L-＞M</code>、<code>M-＞L</code>、<code>M-＞R</code>和<code>R-＞M</code>。</li><li>很明显，<code>L-＞M</code>和<code>M-＞L</code>过程互为逆过程，<code>M-＞R</code>和<code>R-＞M</code>互为逆过程。</li><li>在修改后的汉诺塔游戏中，如果想走出最少步数，那么任何两个相邻的动作都不是互为逆过程的。举个例子：如果上一步的动作是 <code>L-＞M</code>，那么这一步绝不可能是 <code>M-＞L</code>，直观地解释为：你在上一步把一个栈顶数从“左”移动到“中”，这一步为什么又要移回去呢？这必然不是取得最小步数的走法。同理，<code>M-＞R</code>动作和<code>R-＞M</code>动作也不可能相邻发生。</li></ol><p>有了小压大和相邻不可逆原则后，可以推导出两个十分有用的结论–非递归的方法核心结论：</p><ol><li>游戏的第一个动作一定是<code>L-＞M</code>，这是显而易见的。</li><li>在走出最少步数过程中的任何时刻，4个动作中只有一个动作不违反小压大和相邻不可逆原则，另外三个动作一定都会违反。</li></ol><p>对于结论2，现在进行简单的证明。<br>因为游戏的第一个动作已经确定是<code>L-＞M</code>，则以后的每一步都会有前一步的动作。</p><h5 id="假设前一步的动作是L-＞M："><a href="#假设前一步的动作是L-＞M：" class="headerlink" title="假设前一步的动作是L-＞M："></a>假设前一步的动作是<code>L-＞M</code>：</h5><ol><li>根据小压大原则，<code>L-＞M</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>M-＞L</code>的动作也不该发生。</li><li>根据小压大原则，<code>M-＞R</code>和<code>R-＞M</code>只会有一个达标。</li></ol><h5 id="假设前一步的动作是M-＞L："><a href="#假设前一步的动作是M-＞L：" class="headerlink" title="假设前一步的动作是M-＞L："></a>假设前一步的动作是<code>M-＞L</code>：</h5><ol><li>根据小压大原则，<code>M-＞L</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>L-＞M</code>的动作也不该发生。</li><li>根据小压大原则，<code>M-＞R</code>和<code>R-＞M</code>只会有一个达标。</li></ol><h5 id="假设前一步的动作是M-＞R："><a href="#假设前一步的动作是M-＞R：" class="headerlink" title="假设前一步的动作是M-＞R："></a>假设前一步的动作是<code>M-＞R</code>：</h5><ol><li>根据小压大原则，<code>M-＞R</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>R-＞M</code>的动作也不该发生。</li><li>根据小压大原则，<code>L-＞M</code>和<code>M-＞L</code>只会有一个达标。</li></ol><h5 id="假设前一步的动作是R-＞M："><a href="#假设前一步的动作是R-＞M：" class="headerlink" title="假设前一步的动作是R-＞M："></a>假设前一步的动作是<code>R-＞M</code>：</h5><ol><li>根据小压大原则，<code>R-＞M</code>的动作不会重复发生。</li><li>根据相邻不可逆原则，<code>M-＞R</code>的动作也不该发生。</li><li>根据小压大原则，<code>L-＞M</code>和<code>M-＞L</code>只会有一个达标。</li></ol><p>综上所述，每一步只会有一个动作达标。那么只要每走一步都根据这两个原则考查所有的动作就可以，哪个动作达标就走哪个动作，反正每次都只有一个动作满足要求，按顺序走下来即可</p><h4 id="2-实现主程序-2"><a href="#2-实现主程序-2" class="headerlink" title="2.实现主程序"></a>2.实现主程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanoi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hanoiProblem</span><span class="params">(<span class="keyword">int</span> num, String left, String mid, String right)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; lS = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; mS = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; rS = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化这四个栈，可以避免栈溢出问题，同时可以使while循环中的四个函数无论谁在前，都必定会限制性 l -&gt; m</span></span><br><span class="line">        lS.push(Integer.MAX_VALUE);<span class="comment">//最大值：2147483647(2的7次方-1)</span></span><br><span class="line">        mS.push(Integer.MAX_VALUE);</span><br><span class="line">        rS.push(Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num; i &gt; <span class="number">0</span>; i--) &#123;<span class="comment">//将数字(最小数字在栈顶)压入左栈[1,2,3]</span></span><br><span class="line">            lS.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用枚举，记录上一步操作 创建一个数组而不是直接创建一个Action对象是为了使用引用传递而不是值传递</span></span><br><span class="line">        Action[] record = &#123;Action.No&#125;;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//size();stack类从vector继承的方法；返回此向量中的组件数</span></span><br><span class="line">        <span class="keyword">while</span> (rS.size() != num + <span class="number">1</span>) &#123;<span class="comment">//当右栈未将数字全部存入时</span></span><br><span class="line">            <span class="comment">//按顺序移动,下面这四个函数顺序并不影响因为每次必定只会有一个函数是满足条件的</span></span><br><span class="line">            step += fStackToStack(record, Action.MToL, Action.LToM, lS, mS, left, mid);</span><br><span class="line">            step += fStackToStack(record, Action.LToM, Action.MToL, mS, lS, mid, left);</span><br><span class="line">            step += fStackToStack(record, Action.RToM, Action.MToR, mS, rS, mid, right);</span><br><span class="line">            step += fStackToStack(record, Action.MToR, Action.RToM, rS, mS, left, mid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fStackToStack</span><span class="params">(Action[] record,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Action preNoAet,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Action nowAct,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Stack&lt;Integer&gt; fStack,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Stack&lt;Integer&gt; tStack,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String from,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String to)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// fStack.peek() &lt; tStack.peek() 必然可以保证 record[0] != nowAct 两条件互斥</span></span><br><span class="line">        <span class="keyword">if</span> (record[<span class="number">0</span>] != preNoAet &amp;&amp; fStack.peek() &lt; tStack.peek()) &#123;<span class="comment">//发生移动且必须小的数字往大的数字上移动</span></span><br><span class="line">            tStack.push(fStack.pop());<span class="comment">//fStack 移动到 tStack 且删掉from的栈顶元素</span></span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + tStack.peek() + <span class="string">" from "</span> + from + <span class="string">" to "</span> + to);</span><br><span class="line">            record[<span class="number">0</span>] = nowAct;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hanoi Hanoi = <span class="keyword">new</span> Hanoi();</span><br><span class="line">        <span class="keyword">int</span> step = hanoi.hanoiProblem(<span class="number">3</span>, <span class="string">"左"</span>, <span class="string">"中"</span>, <span class="string">"右"</span>);</span><br><span class="line">        System.out.println(<span class="string">"总共需要"</span> + step + <span class="string">"步"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> Action &#123;</span><br><span class="line">        No, <span class="comment">// 无操作</span></span><br><span class="line">        LToM, <span class="comment">// 从左移到中</span></span><br><span class="line">        MToL, <span class="comment">// 从中移到左</span></span><br><span class="line">        MToR, <span class="comment">// 从中移到右</span></span><br><span class="line">        RToM <span class="comment">// 从右移到中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-输出结果-2"><a href="#3-输出结果-2" class="headerlink" title="3.输出结果"></a>3.输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 2 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 2 from 中 to 右</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 3 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 2 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 2 from 中 to 左</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 3 from 中 to 右</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">Move 2 from 左 to 中</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 左</span><br><span class="line">Move 2 from 中 to 右</span><br><span class="line">Move 1 from 左 to 中</span><br><span class="line">Move 1 from 中 to 右</span><br><span class="line">总共需要26步</span><br></pre></td></tr></table></figure><p>参考视频<br><a href="https://www.bilibili.com/video/av31023017?from=search&amp;seid=15595573244367663980" target="_blank" rel="noopener">https://www.bilibili.com/video/av31023017?from=search&amp;seid=15595573244367663980</a></p><p>参考文章<br><a href="https://blog.csdn.net/weixin_42636076/article/details/81031580" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42636076/article/details/81031580</a><br><a href="https://www.jb51.net/article/128701.htm" target="_blank" rel="noopener">https://www.jb51.net/article/128701.htm</a></p>]]></content>
    
    <summary type="html">
    
      很久之前曾经总结了郝斌老师的对汉诺塔问题的解析，当时还暂时不能彻底理解，今天又重温一下汉诺塔问题，并尝试使用递归与非递归两种方式来进行实现
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://suiwo.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://suiwo.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://suiwo.xyz/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="汉诺塔问题" scheme="http://suiwo.xyz/tags/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>HBase中使用过滤器筛选数据</title>
    <link href="http://suiwo.xyz/2019/12/17/HBase%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AD%9B%E9%80%89%E6%95%B0%E6%8D%AE/"/>
    <id>http://suiwo.xyz/2019/12/17/HBase中使用过滤器筛选数据/</id>
    <published>2019-12-17T13:49:08.000Z</published>
    <updated>2020-01-04T15:41:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、过滤器能干什么"><a href="#一、过滤器能干什么" class="headerlink" title="一、过滤器能干什么"></a>一、过滤器能干什么</h2><ul><li>HBase为筛选数据提供了一组过滤器，通过过滤器可以在HBase中的数据的多个维度(行，列，数据版本)上进行对数据的筛选操作。</li><li>通常来说，通过行键、列来筛选数据的应用场景较多。</li></ul><hr><h2 id="二、常见的过滤器"><a href="#二、常见的过滤器" class="headerlink" title="二、常见的过滤器"></a>二、常见的过滤器</h2><ol><li>基于行的过滤器<ul><li>PrefixFilter: 行的前缀匹配</li><li>PageFilter: 基于行的分页</li></ul></li></ol><ol start="2"><li>基于列的过滤器<ul><li>ColumnPrefixFilter: 列前缀匹配</li><li>FirstKeyOnlyFilter: 只返回每一行的第一列</li></ul></li></ol><ol start="3"><li>基于单元值的过滤器<ul><li>KeyOnlyFilter: 返回的数据不包括单元值，只包含行键与列</li><li>TimestampsFilter: 根据数据的时间戳版本进行过滤</li></ul></li></ol><ol start="4"><li>基于列和单元值的过滤器<ul><li>SingleColumnValueFilter: 对该列的单元值进行比较过滤</li><li>SingleColumnValueExcludeFilter: 对该列的单元值进行比较过滤</li></ul></li></ol><ol start="5"><li>比较过滤器<ul><li>比较过滤器通常需要一个比较运算符以及一个比较器来实现过滤</li><li>RowFilter、 FamilyFilter、 QualifierFilter、 ValueFilter</li></ul></li></ol><ol start="6"><li>常见过滤器总结</li></ol><table><thead><tr><th>过滤器(Filter)</th><th>功能</th></tr></thead><tbody><tr><td>RowFilter</td><td>筛选出匹配的所有的行</td></tr><tr><td>PrefixFilter</td><td>筛选出具有特定前缀的行键的数据</td></tr><tr><td>KeyOnlyFilter</td><td>只返回每行的行键，值全部为空</td></tr><tr><td>ColumnPrefixFilter</td><td>按照列名的前缀来筛选单元格</td></tr><tr><td>ValueFilter</td><td>按照具体的值来筛选单元格的过滤器</td></tr><tr><td>TimestampsFilter</td><td>根据数据的时间戳版本进行过滤</td></tr><tr><td>FilterList</td><td>用于综合使用多个过滤器</td></tr></tbody></table><hr><h2 id="三、开发演示"><a href="#三、开发演示" class="headerlink" title="三、开发演示"></a>三、开发演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseFilterTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/9 15:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 尝试使用过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseFilterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.createTable(<span class="string">"FileTable"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"fileInfo"</span>, <span class="string">"saveInfo"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFileDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file1.txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"1024"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo1"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file2.jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"2048"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo3"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file3.jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"2048"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey3"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey1</span></span><br><span class="line"><span class="comment">     * fileName = file1.txt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rowFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> RowFilter(CompareFilter.CompareOp.EQUAL, <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(<span class="string">"rowkey1"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MUST_PASS_ALL指必须通过所有的Filter</span></span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line"></span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey2</span></span><br><span class="line"><span class="comment">     * fileName = file2.jpg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prefixFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> PrefixFilter(Bytes.toBytes(<span class="string">"rowkey2"</span>));</span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey1</span></span><br><span class="line"><span class="comment">     * fileName = </span></span><br><span class="line"><span class="comment">     * rowkey = rowkey2</span></span><br><span class="line"><span class="comment">     * fileName = </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyOnlyFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> KeyOnlyFilter(<span class="keyword">true</span>);</span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey1</span></span><br><span class="line"><span class="comment">     * fileName = file1.txt</span></span><br><span class="line"><span class="comment">     * fileType = null</span></span><br><span class="line"><span class="comment">     * rowkey = rowkey2</span></span><br><span class="line"><span class="comment">     * fileName = file2.jpg</span></span><br><span class="line"><span class="comment">     * fileType = null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">columnPrefixFilterTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> ColumnPrefixFilter(Bytes.toBytes(<span class="string">"nam"</span>));<span class="comment">// 前缀为nam</span></span><br><span class="line">        FilterList filterList = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL, Arrays.asList(filter));</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>,<span class="string">"rowkey1"</span>,<span class="string">"rowkey3"</span>, filterList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">                System.out.println(<span class="string">"fileType = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"type"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      HBase为筛选数据提供了一组过滤器，通过过滤器可以在HBase中的数据的多个维度(行，列，数据版本)上进行对数据的筛选操作。通常来说，通过行键、列来筛选数据的应用场景较多。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HBase" scheme="http://suiwo.xyz/tags/HBase/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>数据结构网课总结</title>
    <link href="http://suiwo.xyz/2019/12/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BD%91%E8%AF%BE%E6%80%BB%E7%BB%93/"/>
    <id>http://suiwo.xyz/2019/12/11/数据结构网课总结/</id>
    <published>2019-12-10T16:05:29.000Z</published>
    <updated>2019-12-10T16:38:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网课推荐"><a href="#网课推荐" class="headerlink" title="网课推荐"></a>网课推荐</h3><p>主要推荐下面的课有几个以及我个人觉得的优缺点</p><ol><li><p>郝斌老师的数据结构<br> 链接：<a href="https://www.bilibili.com/video/av6159200" target="_blank" rel="noopener">https://www.bilibili.com/video/av6159200</a><br> 优缺点：讲的非常的通俗易懂，但是课程只讲到了咱们课本的前面几章的知识，后面的图之类的知识没有涉及（排序讲了部分）。</p></li><li><p>小甲鱼老师的数据结构<br> 链接：<a href="https://study.163.com/course/courseMain.htm?courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseMain.htm?courseId=468002</a><br> 优缺点：基本他的课涉及到了我们考试的所有知识点，但是我当时学习的时候可能是由于老师的口音原因，所以有的时候听的时候会有些分心，还有我记得好像当时我听有一两个章节当时听得有点迷糊。总体来说虽然没有郝斌老师将的通俗易懂，但是也可以说是生动形象了。</p></li><li><p>浙江大学的数据结构<br> 链接：<a href="https://www.bilibili.com/video/av18586085?from=search&amp;seid=16468445350579187548" target="_blank" rel="noopener">https://www.bilibili.com/video/av18586085?from=search&amp;seid=16468445350579187548</a><br> 优缺点：这个课我认为优缺点是非常明显的，优点是每一节课比较短，可以让你对知识点有个简单地认识。缺点也是这个，就是讲的太短，缺少前期的知识由浅入深的代入。并且缺乏代码实战。不是很简易系统的看这个。我的建议是，如果你其他的网课对于某个知识点看不懂，可以尝试着看看这个课能否对你的理解有帮助，但是不要想着通过这个课学会。</p></li><li><p>严蔚敏老师的数据结构<br> 链接：<a href="https://www.bilibili.com/video/av6239731" target="_blank" rel="noopener">https://www.bilibili.com/video/av6239731</a><br> 优缺点：严蔚敏老师的数据结构我并没有系统的去看，只是在一些比较难的知识点部分尝试去听了严蔚敏老师的课。总体来说给我的感觉就是讲的真的非常的好，但是可能对于新学习一个知识没有小甲鱼老师将的生动。适合当你听了郝斌老师或者小甲鱼老师的课之后对这个知识已经一知半解但是还没有彻底理解的时候看。当然了严蔚敏老师的课也有一个很明显的缺点就是他每节课都讲的很久，如果想从头到尾的看肯定是来不及的。</p></li><li><p>慕课上的数据结构从入门到精通<br> 百度网盘链接：<a href="https://pan.baidu.com/s/1o36E3xrZ0pFx4-vjc89HsA" target="_blank" rel="noopener">https://pan.baidu.com/s/1o36E3xrZ0pFx4-vjc89HsA</a>  密码:0nbm<br> 优缺点：这个课，其实我觉得对于考试来说并不是一个比较好的课，我知识觉得他在第12章AVL树部分讲的还行，其他部分就不建议看了先。这个等你以后找工作的时候在系统的看一下吧。</p></li></ol><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li>我之前学习的时候是以郝斌老师以及小甲鱼老师的课为主，严蔚敏老师以及浙大的课为辅。慕课的那个avl树部分我觉得考试也不是重点，看不看都行。</li><li>数据结构这部分有的课不是一遍就能听懂的，可能需要两遍甚至三遍才能看懂，所以必要的时候可以多看一两遍。</li><li>数据结构，可能你们学的时候觉得很难，但是考试是真的很简单，所以不要把过多的备考精力放在数据结构这一门课上。</li></ul><hr><h3 id="其他建议"><a href="#其他建议" class="headerlink" title="其他建议"></a>其他建议</h3><blockquote><p>下面是我对部分个章节自己的一些想法（因为这个都是我凭借自己的记忆然后根据我记忆中老师当时给的重点写的建议，可能有些部分不是很准确，所以仅供参考。。。。。。）</p></blockquote><ol><li><p>线性表堆栈以及队列<br> 这部分整体内容比较简单，所以基本上大家都讲的不错，不过我觉得这部分直接看书就足够了，如果觉得看书还是不太懂，可以去我给你的课中针对的学习一下。</p></li><li><p>数组和字符串<br> 这部分我个人认为难的可能就是在KMP算法，不过期末考试也不知道会不会考KMP算法，下面是我总结的一些比较好的KMP算法的课</p><ol><li><p><a href="https://www.bilibili.com/video/av6239731/?p=11" target="_blank" rel="noopener">https://www.bilibili.com/video/av6239731/?p=11</a></p><p> 这个是严蔚敏老师的课，因为这个每个视频没有写讲的什么，然后我看了一下我以前的总结，P11讲的是KMP算法，这样你就不用一个一个找对应了。</p></li><li><p><a href="https://www.bilibili.com/video/av3246487?from=search&amp;seid=8682896714663607035" target="_blank" rel="noopener">https://www.bilibili.com/video/av3246487?from=search&amp;seid=8682896714663607035</a></p><p> 这个是一个印度程序员讲的kmp我觉得也是讲的很好地。</p></li><li><p><a href="https://study.163.com/course/courseLearn.htm?courseId=468002#/learn/video?lessonId=1023415&amp;courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=468002#/learn/video?lessonId=1023415&amp;courseId=468002</a></p><p> 这个就是小甲鱼讲的了。</p></li></ol></li><li><p>树<br> 这部分，我觉得郝斌的树讲的还是挺好的，不过他的课有一个缺点就是没有讲到哈弗曼树，哈弗曼树这部分，这部分可以补充着小甲鱼的课进行学习<br> 郝斌：<a href="https://www.bilibili.com/video/av6159200?p=51" target="_blank" rel="noopener">https://www.bilibili.com/video/av6159200?p=51</a><br> 小甲鱼：<a href="https://study.163.com/course/courseLearn.htm?courseId=468002&amp;from=study#/learn/video?lessonId=1482172&amp;courseId=468002" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=468002&amp;from=study#/learn/video?lessonId=1482172&amp;courseId=468002</a></p></li><li><p>集合搜索、搜索树、跳表以及散列表<br> 这部分我觉得不是特别难，也没有太多其他的多余的建议了。这部分，我记得是没有太多的考试占比好像，不知道现在变了没，但是我觉得看了小甲鱼的课以及浙大的那个课基本上对这个有个概念的认识就差不多了。</p></li><li><p>图<br> 这部分和上两章也是一样的，就是学的挺多的，但是考的不多，所以先把听网课把所有概念都搞懂，然后等老师给了考点，再把考点部分再认真的学就好了。</p></li><li><p>排序<br> 这部分是很重要的一部分，但是我也觉得这个相较而言并不是特别难。这个没有太多技巧，尝试自己多写几遍代码理解透彻就好了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      数据结构网课总结
    
    </summary>
    
      <category term="wqf" scheme="http://suiwo.xyz/categories/wqf/"/>
    
    
      <category term="数据结构" scheme="http://suiwo.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>使用Java操作HBase数据库</title>
    <link href="http://suiwo.xyz/2019/12/09/%E4%BD%BF%E7%94%A8Java%E6%93%8D%E4%BD%9CHBase%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://suiwo.xyz/2019/12/09/使用Java操作HBase数据库/</id>
    <published>2019-12-09T04:26:45.000Z</published>
    <updated>2020-01-04T15:41:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h2><p>首先我们在maven项目中添加下面两个依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hbase依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单元测试依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><hr><h2 id="二、连接HBase数据库"><a href="#二、连接HBase数据库" class="headerlink" title="二、连接HBase数据库"></a>二、连接HBase数据库</h2><h3 id="1-编写连接数据库的实现"><a href="#1-编写连接数据库的实现" class="headerlink" title="1. 编写连接数据库的实现"></a>1. 编写连接数据库的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseConnection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/8 20:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 连接HBase数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HBaseConnection INSTANCE = <span class="keyword">new</span> HBaseConnection();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HBaseConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(configuration == <span class="keyword">null</span>)&#123;</span><br><span class="line">                configuration = HBaseConfiguration.create();</span><br><span class="line">                configuration.set(<span class="string">"hbase.zookeeper.quorum"</span>, <span class="string">"localhost:2181"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span> || connection.isClosed())&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getHBaseConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Table <span class="title">getTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE.getConnection().getTable(TableName.valueOf(tableName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-编写数据库连接测试类"><a href="#2-编写数据库连接测试类" class="headerlink" title="2. 编写数据库连接测试类"></a>2. 编写数据库连接测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/8 21:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseConnectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnectionTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection hBaseConnection = HBaseConnection.getHBaseConnection();</span><br><span class="line">        System.out.println(hBaseConnection.isClosed());</span><br><span class="line">        HBaseConnection.closeConnection();</span><br><span class="line">        System.out.println(hBaseConnection.isClosed());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTableTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Table table = HBaseConnection.getTable(<span class="string">"US_POPULATION"</span>);</span><br><span class="line">            System.out.println(table.getName().getNameAsString());</span><br><span class="line">            table.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="三、使用Java实现HBase常见操作"><a href="#三、使用Java实现HBase常见操作" class="headerlink" title="三、使用Java实现HBase常见操作"></a>三、使用Java实现HBase常见操作</h2><h3 id="1-编写操作数据库的实现"><a href="#1-编写操作数据库的实现" class="headerlink" title="1. 编写操作数据库的实现"></a>1. 编写操作数据库的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/9 11:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 操作HBase工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建HBase表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfs 列族的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否创建成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">createTable</span><span class="params">(String tableName, String[] cfs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (HBaseAdmin admin = (HBaseAdmin)HBaseConnection.getHBaseConnection().getAdmin())&#123;</span><br><span class="line">            <span class="keyword">if</span>(admin.tableExists(tableName))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            HTableDescriptor tableDescriptor = <span class="keyword">new</span> HTableDescriptor(TableName.valueOf(tableName));</span><br><span class="line">            Arrays.stream(cfs).forEach(cf -&gt; &#123;</span><br><span class="line">                HColumnDescriptor columnDescriptor = <span class="keyword">new</span> HColumnDescriptor(cf);</span><br><span class="line">                columnDescriptor.setMaxVersions(<span class="number">1</span>);</span><br><span class="line">                tableDescriptor.addFamily(columnDescriptor);</span><br><span class="line">            &#125;);</span><br><span class="line">            admin.createTable(tableDescriptor);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除HBase表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteTable</span><span class="params">(String tableName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (HBaseAdmin admin = (HBaseAdmin)HBaseConnection.getHBaseConnection().getAdmin())&#123;</span><br><span class="line">            admin.disableTable(tableName);</span><br><span class="line">            admin.deleteTable(tableName);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HBase表中插入一条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roeKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfName 列族名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qualifier 列标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否插入成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">putRow</span><span class="params">(String tableName, String roeKey, String cfName, String qualifier, String data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Put put = <span class="keyword">new</span> Put(Bytes.toBytes(roeKey));</span><br><span class="line">            put.addColumn(Bytes.toBytes(cfName), Bytes.toBytes(qualifier), Bytes.toBytes(data));</span><br><span class="line">            table.put(put);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HBase表中批量插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> puts</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">putRows</span><span class="params">(String tableName, List&lt;Put&gt; puts)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            table.put(puts);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一表标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">getRow</span><span class="params">(String tableName, String rowKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line">            <span class="keyword">return</span> table.get(get);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据过滤器来获取单条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterList 过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">getRow</span><span class="params">(String tableName, String rowKey, FilterList filterList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line">            get.setFilter(filterList);</span><br><span class="line">            <span class="keyword">return</span> table.get(get);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过Scan来检索数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">getScanner</span><span class="params">(String tableName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.setCaching(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> table.getScanner(scan);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量检索数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startRowKey 起始rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endRowKey 终止rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">getScanner</span><span class="params">(String tableName, String startRowKey, String endRowKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.withStartRow(Bytes.toBytes(startRowKey));</span><br><span class="line">            scan.withStopRow(Bytes.toBytes(endRowKey));</span><br><span class="line">            scan.setCaching(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> table.getScanner(scan);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用过滤器批量检索数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startRowKey 起始rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endRowKey 终止rowKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterList 过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultScanner <span class="title">getScanner</span><span class="params">(String tableName, String startRowKey, String endRowKey, FilterList filterList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">            scan.withStartRow(Bytes.toBytes(startRowKey));</span><br><span class="line">            scan.withStopRow(Bytes.toBytes(endRowKey));</span><br><span class="line">            scan.setFilter(filterList);</span><br><span class="line">            scan.setCaching(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> table.getScanner(scan);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HBase删除一行结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteRow</span><span class="params">(String tableName, String rowKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowKey));</span><br><span class="line">            table.delete(delete);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个列族</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfName 列族名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteColumnFamily</span><span class="params">(String tableName, String cfName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (HBaseAdmin admin = (HBaseAdmin)HBaseConnection.getHBaseConnection().getAdmin())&#123;</span><br><span class="line">            admin.deleteColumn(tableName, cfName);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除某一列的qualifier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowKey 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfName 列族名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qualifier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteQualifier</span><span class="params">(String tableName, String rowKey, String cfName, String qualifier)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Table table = HBaseConnection.getTable(tableName))&#123;</span><br><span class="line">            Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowKey));</span><br><span class="line">            delete.addColumn(Bytes.toBytes(cfName), Bytes.toBytes(qualifier));</span><br><span class="line">            table.delete(delete);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-编写相关测试类进行测试"><a href="#2-编写相关测试类进行测试" class="headerlink" title="2. 编写相关测试类进行测试"></a>2. 编写相关测试类进行测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> HBaseUtilTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/9 11:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> //todo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseUtilTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.createTable(<span class="string">"FileTable"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"fileInfo"</span>, <span class="string">"saveInfo"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFileDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file1.txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"txt"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"1024"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo1"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"name"</span>, <span class="string">"file2.jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"type"</span>, <span class="string">"jpg"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"fileInfo"</span>, <span class="string">"size"</span>, <span class="string">"2048"</span>);</span><br><span class="line">        HBaseUtil.putRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"saveInfo"</span>, <span class="string">"creator"</span>, <span class="string">"suiwo2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFileDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Result result = HBaseUtil.getRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">            System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanFileDetail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ResultScanner scanner = HBaseUtil.getScanner(<span class="string">"FileTable"</span>, <span class="string">"rowkey2"</span>, <span class="string">"rowkey2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(scanner != <span class="keyword">null</span>)&#123;</span><br><span class="line">            scanner.forEach(result -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"rowkey = "</span> + Bytes.toString(result.getRow()));</span><br><span class="line">                System.out.println(<span class="string">"fileName = "</span> + Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">"fileInfo"</span>), Bytes.toBytes(<span class="string">"name"</span>))));</span><br><span class="line">            &#125;);</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteRow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.deleteRow(<span class="string">"FileTable"</span>, <span class="string">"rowkey1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HBaseUtil.deleteTable(<span class="string">"FileTable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用HBase技术可在廉价PC Server上搭建起大规模结构化存储集群。本文尝试使用Java实现HBase的常见操作。
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HBase" scheme="http://suiwo.xyz/tags/HBase/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
      <category term="Java" scheme="http://suiwo.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HBase伪分布式集群安装</title>
    <link href="http://suiwo.xyz/2019/12/08/HBase%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>http://suiwo.xyz/2019/12/08/HBase伪分布式集群安装/</id>
    <published>2019-12-08T07:04:15.000Z</published>
    <updated>2020-01-08T09:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载HBase安装包"><a href="#一、下载HBase安装包" class="headerlink" title="一、下载HBase安装包"></a>一、下载HBase安装包</h2><p>为了防止HBase和Hadoop版本间冲突，可以在CDH上下载和Hadoop兼容的HBase版本，本次搭建选择的是<code>hbase-1.2.0</code><br>下载路径：<a href="http://archive.cloudera.com/cdh5/" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/</a></p><hr><h2 id="二、配置伪分布式环境"><a href="#二、配置伪分布式环境" class="headerlink" title="二、配置伪分布式环境"></a>二、配置伪分布式环境</h2><blockquote><p>HBase相关配置文件在<code>/conf</code>文件之下,我们需要修改的配置文件有<code>hbase-env.sh</code>和<code>hbase-site.xml</code></p><ol><li>我们先将hadoop中的<code>hdfs-site.xml</code>和<code>core-site.xml</code>文件复制HBase的<code>/conf</code>目录之下<br>之后我们需要配置HBase相关</li><li>去配置<code>hbase-env.sh</code>，修改java环境变量，因为我们使用的是JDK8所以我们将文件中的下面这两行注释掉 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_MASTER_OPTS="$HBASE_MASTER_OPTS -XX:PermSize=128m -XX:MaxPermSize=128m"</span><br><span class="line">export HBASE_REGIONSERVER_OPTS="$HBASE_REGIONSERVER_OPTS -XX:PermSize=128m -XX:MaxPermSize=128m"</span><br></pre></td></tr></table></figure></li></ol></blockquote><pre><code>之后在最后面有下面这个注释，他表示使用HBase自带的Zookeeper进行运行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">true</span></span></span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li>配置<code>hbase-site.xml</code> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个表示HBase在HDFS中的路径，因为我们的HDFS启动端口为9000，所以我们这里配置如下，这样启动后我们就可以在hdfs的根路径下看到/hbase文件夹 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个指HBase自带的zookeeper的datdaDir的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>nbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/XXX/HBase/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个是指是不是以集群的方式运行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="三、-启动"><a href="#三、-启动" class="headerlink" title="三、 启动"></a>三、 启动</h2><ol><li>我们进入<code>/bin</code>目录下执行<code>./start-hbase.sh</code>指令</li><li><p>我们执行<code>jps</code>可以查看到下面三个和HBase相关的进程</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">91593 HQuorumPeer</span><br><span class="line">91642 HMaster</span><br><span class="line">91738 HRegionServer</span><br></pre></td></tr></table></figure></li><li><p>我们进入<code>/bin</code>执行<code>./hbase shell</code>进入HBase命令行</p></li><li><p>在HBase命令行中执行status指令查看当前状态</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 active master, 0 backup masters, 1 servers, 0 dead, 2.0000 average load</span><br></pre></td></tr></table></figure></li><li><p>进入HDFS中查看有没有创建成功，进入到Hadoop的<code>/bin</code>目录下执行<code>./hdfs -dfs -ls /</code>,这个时候我们可以看到根目录下存在<code>/hbase</code>文件夹</p></li><li>至此HBase的伪分布式集群安装完毕</li></ol><h2 id="配置web管理界面"><a href="#配置web管理界面" class="headerlink" title="配置web管理界面"></a>配置web管理界面</h2><p>1.0.0之后的版本的hbase的master web 默认是不运行的，所以需要自己配置默认端口。<br>在hbase-site.xml中加入一下内容即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新增的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新增的配置 --&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后访问<code>localhost:60010</code>即可访问</p>]]></content>
    
    <summary type="html">
    
      HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用HBase技术可在廉价PC Server上搭建起大规模结构化存储集群。本文尝试搭建基于Hadoop集群的HBase的伪分布式集群
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HBase" scheme="http://suiwo.xyz/tags/HBase/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>hadoop伪分布式集群安装</title>
    <link href="http://suiwo.xyz/2019/12/07/hadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>http://suiwo.xyz/2019/12/07/hadoop伪分布式集群安装/</id>
    <published>2019-12-07T07:09:20.000Z</published>
    <updated>2020-01-04T15:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载hadoop安装包"><a href="#一、下载hadoop安装包" class="headerlink" title="一、下载hadoop安装包"></a>一、下载hadoop安装包</h2><p>hadoop安装包分为apache官方以及CDH，具体区别在此不做介绍，本次搭建选择的是<code>hadoop-2.6.0-cdh5.7.0</code>版本<br>下载路径<a href="http://archive.cloudera.com/cdh5/" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/</a></p><hr><h2 id="二、配置hadoop"><a href="#二、配置hadoop" class="headerlink" title="二、配置hadoop"></a>二、配置hadoop</h2><p>hadoop相关配置文件在<code>/etc</code>目录下<br>我们需要修改的文件有<br><code>core-site.xml</code>，<code>hadoop-env.sh</code>，<code>hdfs-site.xml</code></p><ol><li>对<code>hadoop-env.sh</code>文件中的<code>JAVA_HOME</code>进行一下配置</li><li><p>在<code>hdfs-site.xml</code>文件中添加配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 存储副本的数量，因为我们是伪分布式，所以副本数量为1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- namenode相关信息存储路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/XXX/Hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- datanode相关信息存储路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/XXX/Hadoop/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 配置好之后我们需要创建<code>/XXX/Hadoop/dfs/name</code>和<code>/XXX/Hadoop/dfs/data</code>这两个文件</p></li><li><p>配置<code>core-site.xml</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表明我们hdfs的默认ip --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表明我们tmp文件的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/XXX/Hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 之后我们需要进到/bin目录下面执行<code>./hdfs namenode -format</code>对namenode进行格式化<br> 如果看到下面这段话则说明格式化成功</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19/12/07 15:04:31 INFO util.ExitUtil: Exiting with status 0</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h2><ol><li>/sbin目录下面使用<code>./start-dfs.sh</code>启动hdfs集群</li><li>使用<code>./hdfs dfs -ls /</code>查看hdfs根目录为空</li><li>然后我们在执行<code>./hdfs dfs -mkdir /test</code>之后再查询会发现根目录已经存在/test文件</li></ol>]]></content>
    
    <summary type="html">
    
      Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。本文尝试搭建一个伪分布式的hadoop集群为之后的HBase集群做准备
    
    </summary>
    
      <category term="大数据" scheme="http://suiwo.xyz/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="http://suiwo.xyz/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://suiwo.xyz/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="HDFS" scheme="http://suiwo.xyz/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>使用iTerm2和OhMyZsh实现一个强大终端</title>
    <link href="http://suiwo.xyz/2019/11/16/%E4%BD%BF%E7%94%A8iTerm2%E5%92%8COhMyZsh%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%A4%A7%E7%BB%88%E7%AB%AF/"/>
    <id>http://suiwo.xyz/2019/11/16/使用iTerm2和OhMyZsh实现一个强大终端/</id>
    <published>2019-11-16T14:45:10.000Z</published>
    <updated>2019-11-16T16:05:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<br><a href="https://blog.csdn.net/qianghaohao/article/details/79440961" target="_blank" rel="noopener">https://blog.csdn.net/qianghaohao/article/details/79440961</a><br><a href="https://www.jianshu.com/p/9c3439cc3bdb" target="_blank" rel="noopener">https://www.jianshu.com/p/9c3439cc3bdb</a><br><a href="https://www.jianshu.com/p/d194d29e488c?open_source=weibo_search" target="_blank" rel="noopener">https://www.jianshu.com/p/d194d29e488c?open_source=weibo_search</a><br><a href="https://www.jianshu.com/p/a78845c3f476" target="_blank" rel="noopener">https://www.jianshu.com/p/a78845c3f476</a></p><hr><p>首先我们看一下最终效果<br><img src="/images/使用iTerm2和OhMyZsh实现一个强大终端/67CBDB40-30BD-436F-AE5D-4F153F59FA46.png" alt="这里写图片描述"></p><hr><h3 id="一、下载iTerm2"><a href="#一、下载iTerm2" class="headerlink" title="一、下载iTerm2"></a>一、下载iTerm2</h3><p>官网下载地址：<a href="https://www.iterm2.com/" target="_blank" rel="noopener">https://www.iterm2.com/</a></p><hr><h3 id="二、安装zsh"><a href="#二、安装zsh" class="headerlink" title="二、安装zsh"></a>二、安装<code>zsh</code></h3><p><code>zsh</code>一般Mac已经自带了，无需额外安装。可以用<code>cat /etc/shells</code>查看zsh是否安装，如果列出了<code>/bin/zsh</code>则表明zsh已经安装了。<br>接下来修改iTerm2终端的默认Shell，可以用<code>echo $SHELL</code>查看当前Shell是什么，如果不是<code>/bin/zsh</code>则用如下命令修改iTerm2的默认Shell为<code>zsh</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure></p><p>这个是默认的样子<br><img src="/images/使用iTerm2和OhMyZsh实现一个强大终端/2411388-d80b6825cd00fb0d.png" alt="这里写图片描述"></p><hr><h3 id="三、使用Oh-my-zsh"><a href="#三、使用Oh-my-zsh" class="headerlink" title="三、使用Oh my zsh"></a>三、使用<code>Oh my zsh</code></h3><blockquote><p>zsh的功能极其强大，只是配置过于复杂，起初只有极客才在用。后来，有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的bash, 于是他创建了一个名为oh-my-zsh的开源项目</p></blockquote><h4 id="1-安装Oh-my-zsh"><a href="#1-安装Oh-my-zsh" class="headerlink" title="1.安装Oh my zsh"></a>1.安装Oh my zsh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curl 安装方式</span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wget 安装方式</span><br><span class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure><p>在安装过程中我们发现总是出现无法下载<code>instal.sh</code>文件的情况，所以下面是<code>install.sh</code>文件的源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  # Use colors, but only if connected to a terminal, and that terminal</span><br><span class="line">  # supports them.</span><br><span class="line">  if which tput &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">      ncolors=$(tput colors)</span><br><span class="line">  fi</span><br><span class="line">  if [ -t 1 ] &amp;&amp; [ -n &quot;$ncolors&quot; ] &amp;&amp; [ &quot;$ncolors&quot; -ge 8 ]; then</span><br><span class="line">    RED=&quot;$(tput setaf 1)&quot;</span><br><span class="line">    GREEN=&quot;$(tput setaf 2)&quot;</span><br><span class="line">    YELLOW=&quot;$(tput setaf 3)&quot;</span><br><span class="line">    BLUE=&quot;$(tput setaf 4)&quot;</span><br><span class="line">    BOLD=&quot;$(tput bold)&quot;</span><br><span class="line">    NORMAL=&quot;$(tput sgr0)&quot;</span><br><span class="line">  else</span><br><span class="line">    RED=&quot;&quot;</span><br><span class="line">    GREEN=&quot;&quot;</span><br><span class="line">    YELLOW=&quot;&quot;</span><br><span class="line">    BLUE=&quot;&quot;</span><br><span class="line">    BOLD=&quot;&quot;</span><br><span class="line">    NORMAL=&quot;&quot;</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  # Only enable exit-on-error after the non-critical colorization stuff,</span><br><span class="line">  # which may fail on systems lacking tput or terminfo</span><br><span class="line">  set -e</span><br><span class="line"></span><br><span class="line">  CHECK_ZSH_INSTALLED=$(grep /zsh$ /etc/shells | wc -l)</span><br><span class="line">  if [ ! $CHECK_ZSH_INSTALLED -ge 1 ]; then</span><br><span class="line">    printf &quot;$&#123;YELLOW&#125;Zsh is not installed!$&#123;NORMAL&#125; Please install zsh first!\n&quot;</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line">  unset CHECK_ZSH_INSTALLED</span><br><span class="line"></span><br><span class="line">  if [ ! -n &quot;$ZSH&quot; ]; then</span><br><span class="line">    ZSH=~/.oh-my-zsh</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [ -d &quot;$ZSH&quot; ]; then</span><br><span class="line">    printf &quot;$&#123;YELLOW&#125;You already have Oh My Zsh installed.$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">    printf &quot;You&apos;ll need to remove $ZSH if you want to re-install.\n&quot;</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  # Prevent the cloned repository from having insecure permissions. Failing to do</span><br><span class="line">  # so causes compinit() calls to fail with &quot;command not found: compdef&quot; errors</span><br><span class="line">  # for users with insecure umasks (e.g., &quot;002&quot;, allowing group writability). Note</span><br><span class="line">  # that this will be ignored under Cygwin by default, as Windows ACLs take</span><br><span class="line">  # precedence over umasks except for filesystems mounted with option &quot;noacl&quot;.</span><br><span class="line">  umask g-w,o-w</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;BLUE&#125;Cloning Oh My Zsh...$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">  hash git &gt;/dev/null 2&gt;&amp;1 || &#123;</span><br><span class="line">    echo &quot;Error: git is not installed&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  &#125;</span><br><span class="line">  # The Windows (MSYS) Git is not compatible with normal use on cygwin</span><br><span class="line">  if [ &quot;$OSTYPE&quot; = cygwin ]; then</span><br><span class="line">    if git --version | grep msysgit &gt; /dev/null; then</span><br><span class="line">      echo &quot;Error: Windows/MSYS Git is not supported on Cygwin&quot;</span><br><span class="line">      echo &quot;Error: Make sure the Cygwin git package is installed and is first on the path&quot;</span><br><span class="line">      exit 1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">  env git clone --depth=1 https://github.com/robbyrussell/oh-my-zsh.git $ZSH || &#123;</span><br><span class="line">    printf &quot;Error: git clone of oh-my-zsh repo failed\n&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;BLUE&#125;Looking for an existing zsh config...$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">  if [ -f ~/.zshrc ] || [ -h ~/.zshrc ]; then</span><br><span class="line">    printf &quot;$&#123;YELLOW&#125;Found ~/.zshrc.$&#123;NORMAL&#125; $&#123;GREEN&#125;Backing up to ~/.zshrc.pre-oh-my-zsh$&#123;NORMAL&#125;\n&quot;;</span><br><span class="line">    mv ~/.zshrc ~/.zshrc.pre-oh-my-zsh;</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;BLUE&#125;Using the Oh My Zsh template file and adding it to ~/.zshrc$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">  cp $ZSH/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line">  sed &quot;/^export ZSH=/ c\\</span><br><span class="line">  export ZSH=$ZSH</span><br><span class="line">  &quot; ~/.zshrc &gt; ~/.zshrc-omztemp</span><br><span class="line">  mv -f ~/.zshrc-omztemp ~/.zshrc</span><br><span class="line"></span><br><span class="line">  # If this user&apos;s login shell is not already &quot;zsh&quot;, attempt to switch.</span><br><span class="line">  TEST_CURRENT_SHELL=$(expr &quot;$SHELL&quot; : &apos;.*/\(.*\)&apos;)</span><br><span class="line">  if [ &quot;$TEST_CURRENT_SHELL&quot; != &quot;zsh&quot; ]; then</span><br><span class="line">    # If this platform provides a &quot;chsh&quot; command (not Cygwin), do it, man!</span><br><span class="line">    if hash chsh &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">      printf &quot;$&#123;BLUE&#125;Time to change your default shell to zsh!$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">      chsh -s $(grep /zsh$ /etc/shells | tail -1)</span><br><span class="line">    # Else, suggest the user do so manually.</span><br><span class="line">    else</span><br><span class="line">      printf &quot;I can&apos;t change your shell automatically because this system does not have chsh.\n&quot;</span><br><span class="line">      printf &quot;$&#123;BLUE&#125;Please manually change your default shell to zsh!$&#123;NORMAL&#125;\n&quot;</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  printf &quot;$&#123;GREEN&#125;&quot;</span><br><span class="line">  echo &apos;         __                                     __   &apos;</span><br><span class="line">  echo &apos;  ____  / /_     ____ ___  __  __   ____  _____/ /_  &apos;</span><br><span class="line">  echo &apos; / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \ &apos;</span><br><span class="line">  echo &apos;/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / / &apos;</span><br><span class="line">  echo &apos;\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/  &apos;</span><br><span class="line">  echo &apos;                        /____/                       ....is now installed!&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;Please look over the ~/.zshrc file to select plugins, themes, and options.&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;p.s. Follow us at https://twitter.com/ohmyzsh.&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  echo &apos;p.p.s. Get stickers and t-shirts at https://shop.planetargon.com.&apos;</span><br><span class="line">  echo &apos;&apos;</span><br><span class="line">  printf &quot;$&#123;NORMAL&#125;&quot;</span><br><span class="line">  env zsh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure></p><p>之后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL install.sh)&quot;</span><br></pre></td></tr></table></figure></p><h4 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2.修改主题"></a>2.修改主题</h4><blockquote><p>下面我们进行主题修改，主题简介链接：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p></blockquote><h5 id="（1）打开配置文件"><a href="#（1）打开配置文件" class="headerlink" title="（1）打开配置文件"></a>（1）打开配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><h5 id="（2）主题换成自己喜爱的主题"><a href="#（2）主题换成自己喜爱的主题" class="headerlink" title="（2）主题换成自己喜爱的主题"></a>（2）主题换成自己喜爱的主题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;agnoster&quot;</span><br></pre></td></tr></table></figure><h5 id="（3）更新配置"><a href="#（3）更新配置" class="headerlink" title="（3）更新配置"></a>（3）更新配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><hr><h3 id="四、安装PowerFonts字体"><a href="#四、安装PowerFonts字体" class="headerlink" title="四、安装PowerFonts字体"></a>四、安装PowerFonts字体</h3><p>有的同学会发现，执行完上一步后，使用可能会出现乱码，这是因为我们缺少PowerFonts字体<br>安装字体库需要首先将项目clone至本地，然后执行源码中的<code>install.sh</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:powerline/fonts.git</span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></p><p>安装好字体库之后，我们来设置iTerm2的字体，具体的操作是<code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text</code>，在Font区域选中<code>Change Font</code>，然后找到<code>Roboto Mono for Powerline</code>字体。</p><hr><h3 id="五、安装配色方案"><a href="#五、安装配色方案" class="headerlink" title="五、安装配色方案"></a>五、安装配色方案</h3><p>配色链接：<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">https://github.com/mbadolato/iTerm2-Color-Schemes</a></p><blockquote><p>配色方案在使用VIM或<code>Colorful Log</code>时会变得非常有用，同时界面也不会一片黑绿一样死板。</p></blockquote><h4 id="1-git-clone的方式下载源码进行安装："><a href="#1-git-clone的方式下载源码进行安装：" class="headerlink" title="1.git clone的方式下载源码进行安装："></a>1.git clone的方式下载源码进行安装：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Desktop/OpenSource</span><br><span class="line">git clone https://github.com/altercation/solarized</span><br><span class="line">cd solarized/iterm2-colors-solarized/</span><br><span class="line">open .</span><br></pre></td></tr></table></figure><ol><li>在打开的finder窗口中，双击<code>Solarized Dark.itermcolors</code>和<code>Solarized Light.itermcolors</code>安装明暗两种配色</li><li>进入<code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Colors -&gt; Color Presets</code></li><li>根据个人喜好选择<code>solarized dark</code>和<code>solarized light</code>两种配色中的一种即可。</li></ol><h4 id="2-手动安装"><a href="#2-手动安装" class="headerlink" title="2.手动安装"></a>2.手动安装</h4><p>但是下面这个是我最喜欢的配色</p><blockquote><p><a href="https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/Solarized%20Dark%20Higher%20Contrast.itermcolors" target="_blank" rel="noopener">https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/Solarized%20Dark%20Higher%20Contrast.itermcolors</a></p></blockquote><p>将该配色方案文件（Solarized Dark Higher Contrast.itermcolors）复制出来，保存到本地，文件命名为 <code>SolarizedDarkHigherContrast.itermcolors</code>，然后双击即可安装。</p><hr><h3 id="六、增加高亮"><a href="#六、增加高亮" class="headerlink" title="六、增加高亮"></a>六、增加高亮</h3><p>这是oh my zsh的一个插件，安装方式与theme大同小异：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure></p><h4 id="1-添加plugins"><a href="#1-添加plugins" class="headerlink" title="1.添加plugins"></a>1.添加plugins</h4><p>这时我们再次打开zshrc文件进行编辑。找到plugins，此时plugins中应该已经有了git，我们需要把高亮插件也加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">git</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>请务必保证插件顺序，<code>zsh-syntax-highlighting</code>必须在最后一个。</p><h4 id="2-文件的最后一行添加"><a href="#2-文件的最后一行添加" class="headerlink" title="2.文件的最后一行添加"></a>2.文件的最后一行添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure><h4 id="3-修改生效："><a href="#3-修改生效：" class="headerlink" title="3.修改生效："></a>3.修改生效：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><hr><h3 id="七、安装命令补全"><a href="#七、安装命令补全" class="headerlink" title="七、安装命令补全"></a>七、安装命令补全</h3><p>跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做<code>zsh-autosuggestion</code>，用于命令建议和补全。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions</span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure></p><blockquote><p>之后将插件加入zsh配置与上一个一致</p></blockquote><hr><h3 id="八、使用技巧"><a href="#八、使用技巧" class="headerlink" title="八、使用技巧"></a>八、使用技巧</h3><p>参考文章：<a href="https://www.jianshu.com/p/a78845c3f476" target="_blank" rel="noopener">https://www.jianshu.com/p/a78845c3f476</a></p>]]></content>
    
    <summary type="html">
    
      iTerm2是mac系统下的一款非常好用的终端工具，它比系统自带的Terminal好用得多。有丰富的特色功能供，比如快捷键、分屏、定制终端主题颜色等；这些功能极大的提高我们敲命令的效率，强烈推荐每一个程序员都尝试和习惯使用这款工具。
    
    </summary>
    
      <category term="开发工具" scheme="http://suiwo.xyz/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="iTerm2" scheme="http://suiwo.xyz/tags/iTerm2/"/>
    
      <category term="zsh" scheme="http://suiwo.xyz/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Kafka初试</title>
    <link href="http://suiwo.xyz/2019/11/07/Kafka%E5%88%9D%E8%AF%95/"/>
    <id>http://suiwo.xyz/2019/11/07/Kafka初试/</id>
    <published>2019-11-07T06:49:46.000Z</published>
    <updated>2019-11-07T07:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Apache Kafka起源于LinkedIn，后来于2011年成为开源Apache项目，然后于2012年成为First-class Apache项目。Kafka是用Scala和Java编写的。 Apache Kafka是基于发布订阅的容错消息系统。 它是快速，可扩展和设计分布。</p><hr><h3 id="二、安装Kafka"><a href="#二、安装Kafka" class="headerlink" title="二、安装Kafka"></a>二、安装Kafka</h3><ol><li>安装Java</li><li>安装Zookeeper<ul><li>启动命令： <code>zkServer.sh start</code></li><li>停止命令： <code>zkServer.sh stop</code></li></ul></li><li>安装Kafka<ul><li>启动命令： <code>kafka-server-start.sh config/server.properties</code></li><li>启动命令： <code>kafka-server-stop.sh config/server.properties</code></li></ul></li></ol><hr><h3 id="三、代码实践"><a href="#三、代码实践" class="headerlink" title="三、代码实践"></a>三、代码实践</h3><p>添加Maven依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>生产者客户端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerFastStart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String brokerList = <span class="string">"localhost:9092"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String topic = <span class="string">"topic-demo"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"bootstrap.servers"</span>, brokerList);</span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> ProducerRecord&lt;&gt;(topic, <span class="string">"hello, Kafka!"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            producer.send(record);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>消费者客户端代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerFastStart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String brokerList = <span class="string">"localhost:9092"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String topic = <span class="string">"topic-demo"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String groupId = <span class="string">"group.demo"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        properties.put(<span class="string">"bootstrap.servers"</span>, brokerList);</span><br><span class="line">        properties.put(<span class="string">"group.id"</span>, groupId);</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        consumer.subscribe(Collections.singletonList(topic));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">1000</span>));</span><br><span class="line">            <span class="keyword">for</span>(ConsumerRecord&lt;String, String&gt; record : records)&#123;</span><br><span class="line">                System.out.println(record.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Apache Kafka起源于LinkedIn，后来于2011年成为开源Apache项目，然后于2012年成为First-class Apache项目。Kafka是用Scala和Java编写的。 Apache Kafka是基于发布订阅的容错消息系统。 它是快速，可扩展和设计分布。
    
    </summary>
    
      <category term="消息队列" scheme="http://suiwo.xyz/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="Kafka" scheme="http://suiwo.xyz/tags/Kafka/"/>
    
      <category term="消息队列" scheme="http://suiwo.xyz/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
